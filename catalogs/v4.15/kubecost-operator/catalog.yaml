---
defaultChannel: alpha
icon:
  base64data: 
  mediatype: image/png
name: kubecost-operator
schema: olm.package
---
entries:
- name: kubecost-operator.v2.5.4
- name: kubecost-operator.v2.7.1
  replaces: kubecost-operator.v2.5.4
name: alpha
package: kubecost-operator
schema: olm.channel
---
image: registry.connect.redhat.com/kubecost/operator@sha256:63e9e2714dfb04d767ae80f2c58876e2b91ffb310a6d58ded6b03e1627312d2e
name: kubecost-operator.v2.5.4
package: kubecost-operator
properties:
- type: olm.gvk
  value:
    group: charts.kubecost.com
    kind: CostAnalyzer
    version: v1alpha1
- type: olm.package
  value:
    packageName: kubecost-operator
    version: 2.5.4
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiY3JlYXRpb25UaW1lc3RhbXAiOm51bGwsIm5hbWUiOiJjb3N0YW5hbHl6ZXJzLmNoYXJ0cy5rdWJlY29zdC5jb20ifSwic3BlYyI6eyJncm91cCI6ImNoYXJ0cy5rdWJlY29zdC5jb20iLCJuYW1lcyI6eyJraW5kIjoiQ29zdEFuYWx5emVyIiwibGlzdEtpbmQiOiJDb3N0QW5hbHl6ZXJMaXN0IiwicGx1cmFsIjoiY29zdGFuYWx5emVycyIsInNpbmd1bGFyIjoiY29zdGFuYWx5emVyIn0sInNjb3BlIjoiTmFtZXNwYWNlZCIsInZlcnNpb25zIjpbeyJuYW1lIjoidjFhbHBoYTEiLCJzY2hlbWEiOnsib3BlbkFQSVYzU2NoZW1hIjp7ImRlc2NyaXB0aW9uIjoiQ29zdEFuYWx5emVyIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBjb3N0YW5hbHl6ZXJzIEFQSSIsInByb3BlcnRpZXMiOnsiYXBpVmVyc2lvbiI6eyJkZXNjcmlwdGlvbiI6IkFQSVZlcnNpb24gZGVmaW5lcyB0aGUgdmVyc2lvbmVkIHNjaGVtYSBvZiB0aGlzIHJlcHJlc2VudGF0aW9uIG9mIGFuIG9iamVjdC4gU2VydmVycyBzaG91bGQgY29udmVydCByZWNvZ25pemVkIHNjaGVtYXMgdG8gdGhlIGxhdGVzdCBpbnRlcm5hbCB2YWx1ZSwgYW5kIG1heSByZWplY3QgdW5yZWNvZ25pemVkIHZhbHVlcy4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCNyZXNvdXJjZXMiLCJ0eXBlIjoic3RyaW5nIn0sImtpbmQiOnsiZGVzY3JpcHRpb24iOiJLaW5kIGlzIGEgc3RyaW5nIHZhbHVlIHJlcHJlc2VudGluZyB0aGUgUkVTVCByZXNvdXJjZSB0aGlzIG9iamVjdCByZXByZXNlbnRzLiBTZXJ2ZXJzIG1heSBpbmZlciB0aGlzIGZyb20gdGhlIGVuZHBvaW50IHRoZSBjbGllbnQgc3VibWl0cyByZXF1ZXN0cyB0by4gQ2Fubm90IGJlIHVwZGF0ZWQuIEluIENhbWVsQ2FzZS4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCN0eXBlcy1raW5kcyIsInR5cGUiOiJzdHJpbmcifSwibWV0YWRhdGEiOnsidHlwZSI6Im9iamVjdCJ9LCJzcGVjIjp7ImRlc2NyaXB0aW9uIjoiU3BlYyBkZWZpbmVzIHRoZSBkZXNpcmVkIHN0YXRlIG9mIENvc3RBbmFseXplciIsInR5cGUiOiJvYmplY3QiLCJ4LWt1YmVybmV0ZXMtcHJlc2VydmUtdW5rbm93bi1maWVsZHMiOnRydWV9LCJzdGF0dXMiOnsiZGVzY3JpcHRpb24iOiJTdGF0dXMgZGVmaW5lcyB0aGUgb2JzZXJ2ZWQgc3RhdGUgb2YgQ29zdEFuYWx5emVyIiwidHlwZSI6Im9iamVjdCIsIngta3ViZXJuZXRlcy1wcmVzZXJ2ZS11bmtub3duLWZpZWxkcyI6dHJ1ZX19LCJ0eXBlIjoib2JqZWN0In19LCJzZXJ2ZWQiOnRydWUsInN0b3JhZ2UiOnRydWUsInN1YnJlc291cmNlcyI6eyJzdGF0dXMiOnt9fX1dfSwic3RhdHVzIjp7ImFjY2VwdGVkTmFtZXMiOnsia2luZCI6IiIsInBsdXJhbCI6IiJ9LCJjb25kaXRpb25zIjpudWxsLCJzdG9yZWRWZXJzaW9ucyI6bnVsbH19
- type: olm.bundle.object
  value:
    data: 
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoicmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MSIsImtpbmQiOiJDbHVzdGVyUm9sZSIsIm1ldGFkYXRhIjp7ImNyZWF0aW9uVGltZXN0YW1wIjpudWxsLCJsYWJlbHMiOnsiYXBwLmt1YmVybmV0ZXMuaW8vbWFuYWdlZC1ieSI6Imt1c3RvbWl6ZSIsImFwcC5rdWJlcm5ldGVzLmlvL25hbWUiOiJrdWJlY29zdC1vcGVyYXRvciJ9LCJuYW1lIjoia3ViZWNvc3Qtb3BlcmF0b3ItY29zdGFuYWx5emVyLWVkaXRvci1yb2xlIn0sInJ1bGVzIjpbeyJhcGlHcm91cHMiOlsiY2hhcnRzLmt1YmVjb3N0LmNvbSJdLCJyZXNvdXJjZXMiOlsiY29zdGFuYWx5emVycyJdLCJ2ZXJicyI6WyJjcmVhdGUiLCJkZWxldGUiLCJnZXQiLCJsaXN0IiwicGF0Y2giLCJ1cGRhdGUiLCJ3YXRjaCJdfSx7ImFwaUdyb3VwcyI6WyJjaGFydHMua3ViZWNvc3QuY29tIl0sInJlc291cmNlcyI6WyJjb3N0YW5hbHl6ZXJzL3N0YXR1cyJdLCJ2ZXJicyI6WyJnZXQiXX1dfQ==
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoicmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MSIsImtpbmQiOiJDbHVzdGVyUm9sZSIsIm1ldGFkYXRhIjp7ImNyZWF0aW9uVGltZXN0YW1wIjpudWxsLCJsYWJlbHMiOnsiYXBwLmt1YmVybmV0ZXMuaW8vbWFuYWdlZC1ieSI6Imt1c3RvbWl6ZSIsImFwcC5rdWJlcm5ldGVzLmlvL25hbWUiOiJrdWJlY29zdC1vcGVyYXRvciJ9LCJuYW1lIjoia3ViZWNvc3Qtb3BlcmF0b3ItY29zdGFuYWx5emVyLXZpZXdlci1yb2xlIn0sInJ1bGVzIjpbeyJhcGlHcm91cHMiOlsiY2hhcnRzLmt1YmVjb3N0LmNvbSJdLCJyZXNvdXJjZXMiOlsiY29zdGFuYWx5emVycyJdLCJ2ZXJicyI6WyJnZXQiLCJsaXN0Iiwid2F0Y2giXX0seyJhcGlHcm91cHMiOlsiY2hhcnRzLmt1YmVjb3N0LmNvbSJdLCJyZXNvdXJjZXMiOlsiY29zdGFuYWx5emVycy9zdGF0dXMiXSwidmVyYnMiOlsiZ2V0Il19XX0=
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoicmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MSIsImtpbmQiOiJDbHVzdGVyUm9sZSIsIm1ldGFkYXRhIjp7ImNyZWF0aW9uVGltZXN0YW1wIjpudWxsLCJsYWJlbHMiOnsiYXBwLmt1YmVybmV0ZXMuaW8vbWFuYWdlZC1ieSI6Imt1c3RvbWl6ZSIsImFwcC5rdWJlcm5ldGVzLmlvL25hbWUiOiJrdWJlY29zdC1vcGVyYXRvciJ9LCJuYW1lIjoia3ViZWNvc3Qtb3BlcmF0b3ItbWV0cmljcy1yZWFkZXIifSwicnVsZXMiOlt7Im5vblJlc291cmNlVVJMcyI6WyIvbWV0cmljcyJdLCJ2ZXJicyI6WyJnZXQiXX1dfQ==
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoidjEiLCJraW5kIjoiU2VydmljZSIsIm1ldGFkYXRhIjp7ImNyZWF0aW9uVGltZXN0YW1wIjpudWxsLCJsYWJlbHMiOnsiYXBwLmt1YmVybmV0ZXMuaW8vbWFuYWdlZC1ieSI6Imt1c3RvbWl6ZSIsImFwcC5rdWJlcm5ldGVzLmlvL25hbWUiOiJrdWJlY29zdC1vcGVyYXRvciIsImNvbnRyb2wtcGxhbmUiOiJjb250cm9sbGVyLW1hbmFnZXIifSwibmFtZSI6Imt1YmVjb3N0LW9wZXJhdG9yLWNvbnRyb2xsZXItbWFuYWdlci1tZXRyaWNzLXNlcnZpY2UifSwic3BlYyI6eyJwb3J0cyI6W3sibmFtZSI6Imh0dHBzIiwicG9ydCI6ODQ0MywicHJvdG9jb2wiOiJUQ1AiLCJ0YXJnZXRQb3J0IjoiaHR0cHMifV0sInNlbGVjdG9yIjp7ImNvbnRyb2wtcGxhbmUiOiJjb250cm9sbGVyLW1hbmFnZXIifX0sInN0YXR1cyI6eyJsb2FkQmFsYW5jZXIiOnt9fX0=
relatedImages:
- image: quay.io/kiwigrid/k8s-sidecar@sha256:636290ab9e852814b21af53fbd909f4a8ac88f26ed4cc4dca032d88bf6c788a9
  name: k8s-sidecar
- image: registry.connect.redhat.com/kubecost/kubecost-cluster-controller@sha256:9379001b10c31ca13ee2d63ba0448fef7b7ad14f43bda399ad9b222a00eaf814
  name: cluster-controller
- image: registry.connect.redhat.com/kubecost/kubecost-cost-model@sha256:fe6f5f21576373d45063cd2d22aafb48350094ef25a3a39643ca0adfb8a17f3a
  name: cost-model
- image: registry.connect.redhat.com/kubecost/kubecost-frontend@sha256:9a9be912ff7b7b2f471722e2a523bb15f9573a72a0ece6eeef5ce31ebb6487d3
  name: frontend
- image: registry.connect.redhat.com/kubecost/kubecost-modeling@sha256:81933c9e9f2f4096f2e8202efa9094bf1f63e75a5a95dc0d829f75c6b292127b
  name: kubecost-modeling
- image: registry.connect.redhat.com/kubecost/kubecost-network-costs@sha256:58154e7fd0071429b6adbd2c1340773e33bb18fde9e6e8e5655dd53dd1ba0e05
  name: kubecost-network-costs
- image: registry.connect.redhat.com/kubecost/kubecost-operator-manager@sha256:0419c9d511a5209d646bc13649bed667a40812803753822fe1f84dced5ce546c
  name: kubecost-operator-manager
- image: registry.connect.redhat.com/kubecost/operator@sha256:63e9e2714dfb04d767ae80f2c58876e2b91ffb310a6d58ded6b03e1627312d2e
  name: ""
- image: registry.redhat.io/openshift4/ose-kube-rbac-proxy-rhel9@sha256:4fcdec55c4dd715af1045891413840bce75554fd42ae63831d8eb4f6f3d3ea52
  name: kube-rbac-proxy
- image: registry.redhat.io/rhel9/grafana@sha256:d9a0e6646f970db628f171ec78a508e6ac329c4457aec85f0a88894ab3d5f734
  name: grafana
schema: olm.bundle
---
image: registry.connect.redhat.com/kubecost/operator@sha256:8d75bb82e5b81ab8f68e2fcc40fa68664797b9221ef68a97f593ee4c0597aa56
name: kubecost-operator.v2.7.1
package: kubecost-operator
properties:
- type: olm.gvk
  value:
    group: charts.kubecost.com
    kind: CostAnalyzer
    version: v1alpha1
- type: olm.package
  value:
    packageName: kubecost-operator
    version: 2.7.1
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoiYXBpZXh0ZW5zaW9ucy5rOHMuaW8vdjEiLCJraW5kIjoiQ3VzdG9tUmVzb3VyY2VEZWZpbml0aW9uIiwibWV0YWRhdGEiOnsiY3JlYXRpb25UaW1lc3RhbXAiOm51bGwsIm5hbWUiOiJjb3N0YW5hbHl6ZXJzLmNoYXJ0cy5rdWJlY29zdC5jb20ifSwic3BlYyI6eyJncm91cCI6ImNoYXJ0cy5rdWJlY29zdC5jb20iLCJuYW1lcyI6eyJraW5kIjoiQ29zdEFuYWx5emVyIiwibGlzdEtpbmQiOiJDb3N0QW5hbHl6ZXJMaXN0IiwicGx1cmFsIjoiY29zdGFuYWx5emVycyIsInNpbmd1bGFyIjoiY29zdGFuYWx5emVyIn0sInNjb3BlIjoiTmFtZXNwYWNlZCIsInZlcnNpb25zIjpbeyJuYW1lIjoidjFhbHBoYTEiLCJzY2hlbWEiOnsib3BlbkFQSVYzU2NoZW1hIjp7ImRlc2NyaXB0aW9uIjoiQ29zdEFuYWx5emVyIGlzIHRoZSBTY2hlbWEgZm9yIHRoZSBjb3N0YW5hbHl6ZXJzIEFQSSIsInByb3BlcnRpZXMiOnsiYXBpVmVyc2lvbiI6eyJkZXNjcmlwdGlvbiI6IkFQSVZlcnNpb24gZGVmaW5lcyB0aGUgdmVyc2lvbmVkIHNjaGVtYSBvZiB0aGlzIHJlcHJlc2VudGF0aW9uIG9mIGFuIG9iamVjdC4gU2VydmVycyBzaG91bGQgY29udmVydCByZWNvZ25pemVkIHNjaGVtYXMgdG8gdGhlIGxhdGVzdCBpbnRlcm5hbCB2YWx1ZSwgYW5kIG1heSByZWplY3QgdW5yZWNvZ25pemVkIHZhbHVlcy4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCNyZXNvdXJjZXMiLCJ0eXBlIjoic3RyaW5nIn0sImtpbmQiOnsiZGVzY3JpcHRpb24iOiJLaW5kIGlzIGEgc3RyaW5nIHZhbHVlIHJlcHJlc2VudGluZyB0aGUgUkVTVCByZXNvdXJjZSB0aGlzIG9iamVjdCByZXByZXNlbnRzLiBTZXJ2ZXJzIG1heSBpbmZlciB0aGlzIGZyb20gdGhlIGVuZHBvaW50IHRoZSBjbGllbnQgc3VibWl0cyByZXF1ZXN0cyB0by4gQ2Fubm90IGJlIHVwZGF0ZWQuIEluIENhbWVsQ2FzZS4gTW9yZSBpbmZvOiBodHRwczovL2dpdC5rOHMuaW8vY29tbXVuaXR5L2NvbnRyaWJ1dG9ycy9kZXZlbC9zaWctYXJjaGl0ZWN0dXJlL2FwaS1jb252ZW50aW9ucy5tZCN0eXBlcy1raW5kcyIsInR5cGUiOiJzdHJpbmcifSwibWV0YWRhdGEiOnsidHlwZSI6Im9iamVjdCJ9LCJzcGVjIjp7ImRlc2NyaXB0aW9uIjoiU3BlYyBkZWZpbmVzIHRoZSBkZXNpcmVkIHN0YXRlIG9mIENvc3RBbmFseXplciIsInR5cGUiOiJvYmplY3QiLCJ4LWt1YmVybmV0ZXMtcHJlc2VydmUtdW5rbm93bi1maWVsZHMiOnRydWV9LCJzdGF0dXMiOnsiZGVzY3JpcHRpb24iOiJTdGF0dXMgZGVmaW5lcyB0aGUgb2JzZXJ2ZWQgc3RhdGUgb2YgQ29zdEFuYWx5emVyIiwidHlwZSI6Im9iamVjdCIsIngta3ViZXJuZXRlcy1wcmVzZXJ2ZS11bmtub3duLWZpZWxkcyI6dHJ1ZX19LCJ0eXBlIjoib2JqZWN0In19LCJzZXJ2ZWQiOnRydWUsInN0b3JhZ2UiOnRydWUsInN1YnJlc291cmNlcyI6eyJzdGF0dXMiOnt9fX1dfSwic3RhdHVzIjp7ImFjY2VwdGVkTmFtZXMiOnsia2luZCI6IiIsInBsdXJhbCI6IiJ9LCJjb25kaXRpb25zIjpudWxsLCJzdG9yZWRWZXJzaW9ucyI6bnVsbH19
- type: olm.bundle.object
  value:
    data: 
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoicmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MSIsImtpbmQiOiJDbHVzdGVyUm9sZSIsIm1ldGFkYXRhIjp7ImNyZWF0aW9uVGltZXN0YW1wIjpudWxsLCJsYWJlbHMiOnsiYXBwLmt1YmVybmV0ZXMuaW8vbWFuYWdlZC1ieSI6Imt1c3RvbWl6ZSIsImFwcC5rdWJlcm5ldGVzLmlvL25hbWUiOiJrdWJlY29zdC1vcGVyYXRvciJ9LCJuYW1lIjoia3ViZWNvc3Qtb3BlcmF0b3ItY29zdGFuYWx5emVyLWVkaXRvci1yb2xlIn0sInJ1bGVzIjpbeyJhcGlHcm91cHMiOlsiY2hhcnRzLmt1YmVjb3N0LmNvbSJdLCJyZXNvdXJjZXMiOlsiY29zdGFuYWx5emVycyJdLCJ2ZXJicyI6WyJjcmVhdGUiLCJkZWxldGUiLCJnZXQiLCJsaXN0IiwicGF0Y2giLCJ1cGRhdGUiLCJ3YXRjaCJdfSx7ImFwaUdyb3VwcyI6WyJjaGFydHMua3ViZWNvc3QuY29tIl0sInJlc291cmNlcyI6WyJjb3N0YW5hbHl6ZXJzL3N0YXR1cyJdLCJ2ZXJicyI6WyJnZXQiXX1dfQ==
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoicmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MSIsImtpbmQiOiJDbHVzdGVyUm9sZSIsIm1ldGFkYXRhIjp7ImNyZWF0aW9uVGltZXN0YW1wIjpudWxsLCJsYWJlbHMiOnsiYXBwLmt1YmVybmV0ZXMuaW8vbWFuYWdlZC1ieSI6Imt1c3RvbWl6ZSIsImFwcC5rdWJlcm5ldGVzLmlvL25hbWUiOiJrdWJlY29zdC1vcGVyYXRvciJ9LCJuYW1lIjoia3ViZWNvc3Qtb3BlcmF0b3ItY29zdGFuYWx5emVyLXZpZXdlci1yb2xlIn0sInJ1bGVzIjpbeyJhcGlHcm91cHMiOlsiY2hhcnRzLmt1YmVjb3N0LmNvbSJdLCJyZXNvdXJjZXMiOlsiY29zdGFuYWx5emVycyJdLCJ2ZXJicyI6WyJnZXQiLCJsaXN0Iiwid2F0Y2giXX0seyJhcGlHcm91cHMiOlsiY2hhcnRzLmt1YmVjb3N0LmNvbSJdLCJyZXNvdXJjZXMiOlsiY29zdGFuYWx5emVycy9zdGF0dXMiXSwidmVyYnMiOlsiZ2V0Il19XX0=
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoicmJhYy5hdXRob3JpemF0aW9uLms4cy5pby92MSIsImtpbmQiOiJDbHVzdGVyUm9sZSIsIm1ldGFkYXRhIjp7ImNyZWF0aW9uVGltZXN0YW1wIjpudWxsLCJuYW1lIjoia3ViZWNvc3Qtb3BlcmF0b3ItbWV0cmljcy1yZWFkZXIifSwicnVsZXMiOlt7Im5vblJlc291cmNlVVJMcyI6WyIvbWV0cmljcyJdLCJ2ZXJicyI6WyJnZXQiXX1dfQ==
- type: olm.bundle.object
  value:
    data: eyJhcGlWZXJzaW9uIjoidjEiLCJraW5kIjoiU2VydmljZSIsIm1ldGFkYXRhIjp7ImNyZWF0aW9uVGltZXN0YW1wIjpudWxsLCJsYWJlbHMiOnsiYXBwLmt1YmVybmV0ZXMuaW8vbWFuYWdlZC1ieSI6Imt1c3RvbWl6ZSIsImFwcC5rdWJlcm5ldGVzLmlvL25hbWUiOiJrdWJlY29zdC1vcGVyYXRvciIsImNvbnRyb2wtcGxhbmUiOiJjb250cm9sbGVyLW1hbmFnZXIifSwibmFtZSI6Imt1YmVjb3N0LW9wZXJhdG9yLWNvbnRyb2xsZXItbWFuYWdlci1tZXRyaWNzLXNlcnZpY2UifSwic3BlYyI6eyJwb3J0cyI6W3sibmFtZSI6Imh0dHBzIiwicG9ydCI6ODQ0MywicHJvdG9jb2wiOiJUQ1AiLCJ0YXJnZXRQb3J0Ijo4NDQzfV0sInNlbGVjdG9yIjp7ImNvbnRyb2wtcGxhbmUiOiJjb250cm9sbGVyLW1hbmFnZXIifX0sInN0YXR1cyI6eyJsb2FkQmFsYW5jZXIiOnt9fX0=
relatedImages:
- image: quay.io/kiwigrid/k8s-sidecar@sha256:886b3d8890e79898924520c398f633652c5532ee16a7cad017308be4261d95d2
  name: k8s-sidecar
- image: registry.connect.redhat.com/kubecost/kubecost-cluster-controller@sha256:960f5f4b54953ad3214e0a5485c239b99711b725f776ff5c4d3498d328c3078a
  name: cluster-controller
- image: registry.connect.redhat.com/kubecost/kubecost-cost-model@sha256:41bc2e6962e938ac9915ab11857eeef0b093eddbb3772360ee43471c37700007
  name: cost-model
- image: registry.connect.redhat.com/kubecost/kubecost-frontend@sha256:a6105809a257440ff012d2a7134098c7b659105e054ebe7610d2726f61eee7eb
  name: frontend
- image: registry.connect.redhat.com/kubecost/kubecost-modeling@sha256:8f59f8fd8696964c1b5322ca79fae78befe97323fa56c2b509bdcc67ee4c0edd
  name: kubecost-modeling
- image: registry.connect.redhat.com/kubecost/kubecost-network-costs@sha256:c444d475be4f1aa36680bd84358e1e07303dcfe5d13a95544ad9e59f80d4a5f0
  name: kubecost-network-costs
- image: registry.connect.redhat.com/kubecost/kubecost-operator-manager@sha256:d8d50cf7695f3cff48af71c9b530fc5efed57e457b4f9a223d8f535d96247dc9
  name: kubecost-operator
- image: registry.connect.redhat.com/kubecost/operator@sha256:8d75bb82e5b81ab8f68e2fcc40fa68664797b9221ef68a97f593ee4c0597aa56
  name: ""
- image: registry.redhat.io/rhel9/grafana@sha256:567b61a7a59a5105873fb70999742ef2f7ef2c7483b8dac7893b51bceb5b0158
  name: grafana
schema: olm.bundle

---
defaultChannel: v5
icon:
  base64data: 
  mediatype: image/svg+xml
name: crunchy-postgres-operator
schema: olm.package
---
entries:
- name: postgresoperator.v5.1.0
  skips:
  - postgresoperator.v5.0.5
- name: postgresoperator.v5.1.1
  replaces: postgresoperator.v5.1.0
- name: postgresoperator.v5.1.2
  replaces: postgresoperator.v5.1.1
- name: postgresoperator.v5.1.3
  replaces: postgresoperator.v5.1.2
- name: postgresoperator.v5.2.0
  replaces: postgresoperator.v5.1.3
- name: postgresoperator.v5.3.0
  replaces: postgresoperator.v5.2.0
- name: postgresoperator.v5.4.0
- name: postgresoperator.v5.4.1
  replaces: postgresoperator.v5.3.0
  skips:
  - postgresoperator.v5.4.0
- name: postgresoperator.v5.4.2
  replaces: postgresoperator.v5.4.1
- name: postgresoperator.v5.4.3
  replaces: postgresoperator.v5.4.2
- name: postgresoperator.v5.4.4
  replaces: postgresoperator.v5.4.3
- name: postgresoperator.v5.5.0
  replaces: postgresoperator.v5.4.4
- name: postgresoperator.v5.5.1
  replaces: postgresoperator.v5.5.0
- name: postgresoperator.v5.5.2
  replaces: postgresoperator.v5.5.1
- name: postgresoperator.v5.6.0
  replaces: postgresoperator.v5.5.2
- name: postgresoperator.v5.6.1
  replaces: postgresoperator.v5.6.0
- name: postgresoperator.v5.7.0
  replaces: postgresoperator.v5.6.1
- name: postgresoperator.v5.7.1
  replaces: postgresoperator.v5.7.0
- name: postgresoperator.v5.7.2
  replaces: postgresoperator.v5.7.1
- name: postgresoperator.v5.7.3
  replaces: postgresoperator.v5.7.2
- name: postgresoperator.v5.7.4
  replaces: postgresoperator.v5.7.3
- name: postgresoperator.v5.8.0
  replaces: postgresoperator.v5.7.4
- name: postgresoperator.v5.8.1
  replaces: postgresoperator.v5.8.0
- name: postgresoperator.v5.8.2
  replaces: postgresoperator.v5.8.1
name: v5
package: crunchy-postgres-operator
schema: olm.channel
---
image: registry.connect.redhat.com/crunchydata/postgres-operator-bundle@sha256:bc659b3f5c0e2007af70d7a2ca3fa49cffe0af20c4f29d4d1bbad81522949ea0
name: postgresoperator.v5.1.0
package: crunchy-postgres-operator
properties:
- type: olm.gvk
  value:
    group: postgres-operator.crunchydata.com
    kind: PostgresCluster
    version: v1beta1
- type: olm.package
  value:
    packageName: crunchy-postgres-operator
    version: 5.1.0
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "PostgresCluster",
            "metadata": {
              "name": "example"
            },
            "spec": {
              "instances": [
                {
                  "dataVolumeClaimSpec": {
                    "accessModes": [
                      "ReadWriteOnce"
                    ],
                    "resources": {
                      "requests": {
                        "storage": "1Gi"
                      }
                    }
                  },
                  "replicas": 1
                }
              ],
              "postgresVersion": 13
            }
          }
        ]
      capabilities: Auto Pilot
      categories: Database
      certified: "true"
      containerImage: registry.connect.redhat.com/crunchydata/postgres-operator@sha256:440375bdcb9a41807682336d593ad9231ba5b12ebda83db2d0d6b510f88195f1
      createdAt: 2019-12-31 19:40Z
      description: Production Postgres Made Easy
      olm.properties: '[]'
      repository: https://github.com/CrunchyData/postgres-operator
      support: crunchydata.com
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: PostgresCluster is the Schema for the postgresclusters API
        displayName: Postgres Cluster
        kind: PostgresCluster
        name: postgresclusters.postgres-operator.crunchydata.com
        resources:
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: CronJob
          name: ""
          version: v1beta1
        - kind: Deployment
          name: ""
          version: v1
        - kind: Job
          name: ""
          version: v1
        - kind: PersistentVolumeClaim
          name: ""
          version: v1
        - kind: Secret
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: StatefulSet
          name: ""
          version: v1
        specDescriptors:
        - description: The image name to use for PostgreSQL containers. When omitted,
            the value comes from an operator environment variable. For standard PostgreSQL
            images, the format is RELATED_IMAGE_POSTGRES_{postgresVersion}, e.g. RELATED_IMAGE_POSTGRES_13.
            For PostGIS enabled PostgreSQL images, the format is RELATED_IMAGE_POSTGRES_{postgresVersion}_GIS_{postGISVersion},
            e.g. RELATED_IMAGE_POSTGRES_13_GIS_3.1.
          displayName: Image
          path: image
        - description: The major version of PostgreSQL installed in the PostgreSQL
            image
          displayName: Postgres Version
          path: postgresVersion
        - description: Specifies one or more sets of PostgreSQL pods that replicate
            data for this cluster.
          displayName: Instance Sets
          path: instances
        statusDescriptors:
        - description: 'conditions represent the observations of postgrescluster''s
            current state. Known .status.conditions.type are: "PersistentVolumeResizing",
            "ProxyAvailable"'
          displayName: Conditions
          path: conditions
          x-descriptors:
          - urn:alm:descriptor:io.kubernetes.conditions
        version: v1beta1
    description: |-
      [PGO](https://github.com/CrunchyData/postgres-operator), the
      [Postgres Operator](https://github.com/CrunchyData/postgres-operator) from
      [Crunchy Data](https://www.crunchydata.com), gives you a **declarative Postgres** solution that
      automatically manages your [PostgreSQL](https://www.postgresql.org) clusters.

      Designed for your GitOps workflows, it is [easy to get started](https://access.crunchydata.com/documentation/postgres-operator/v5/quickstart/)
      with Postgres on Kubernetes with PGO. Within a few moments, you can have a production grade Postgres
      cluster complete with high availability, disaster recovery, and monitoring, all over secure TLS communications.
      Even better, PGO lets you easily customize your Postgres cluster to tailor it to your workload!

      With conveniences like cloning Postgres clusters to using rolling updates to roll out disruptive
      changes with minimal downtime, PGO is ready to support your Postgres data at every stage of your
      release pipeline. Built for resiliency and uptime, PGO will keep your desired Postgres in a desired
      state so you do not need to worry about it.

      PGO is developed with many years of production experience in automating Postgres management on
      Kubernetes, providing a seamless cloud native Postgres solution to keep your data always available.

      - **PostgreSQL Cluster Provisioning**: [Create, Scale, & Delete PostgreSQL clusters with ease][provisioning],
        while fully customizing your Pods and PostgreSQL configuration!
      - **High-Availability**: Safe, automated failover backed by a [distributed consensus based high-availability solution][high-availability].
        Uses [Pod Anti-Affinity][k8s-anti-affinity] to help resiliency; you can configure how aggressive this can be!
        Failed primaries automatically heal, allowing for faster recovery time. You can even create regularly scheduled
        backups as well and set your backup retention policy
      - **Disaster Recovery**: [Backups][backups] and [restores][disaster-recovery] leverage the open source [pgBackRest][] utility and
        [includes support for full, incremental, and differential backups as well as efficient delta restores][backups].
        Set how long you want your backups retained for. Works great with very large databases!
      - **Monitoring**: [Track the health of your PostgreSQL clusters][monitoring] using the open source [pgMonitor][] library.
      - **Clone**: [Create new clusters from your existing clusters or backups][clone] with efficient data cloning.
      - **TLS**: All connections are over [TLS][tls]. You can also [bring your own TLS infrastructure][tls] if you do not want to use the provided defaults.
      - **Connection Pooling**: Advanced [connection pooling][pool] support using [pgBouncer][].
      - **Affinity and Tolerations**: Have your PostgreSQL clusters deployed to [Kubernetes Nodes][k8s-nodes] of your preference.
        Set your [pod anti-affinity][k8s-anti-affinity], node affinity, Pod tolerations and more rules to customize your deployment topology!
      - **Full Customizability**: Crunchy PostgreSQL for Kubernetes makes it easy to get your own PostgreSQL-as-a-Service up and running
        and fully customize your deployments, including:
          - Choose the resources for your Postgres cluster: [container resources and storage size][resize-cluster]. [Resize at any time][resize-cluster] with minimal disruption.
          - Use your own container image repository, including support `imagePullSecrets` and private repositories
          - [Customize your PostgreSQL configuration][customize-cluster]

      and much more!

      [backups]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/backups/
      [clone]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/disaster-recovery/#clone-a-postgres-cluster
      [customize-cluster]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/customize-cluster/
      [disaster-recovery]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/disaster-recovery/
      [high-availability]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/high-availability/
      [monitoring]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/monitoring/
      [pool]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/connection-pooling/
      [provisioning]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/create-cluster/
      [resize-cluster]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/resize-cluster/
      [tls]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/customize-cluster/#customize-tls

      [k8s-anti-affinity]: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#inter-pod-affinity-and-anti-affinity
      [k8s-nodes]: https://kubernetes.io/docs/concepts/architecture/nodes/

      [pgBackRest]: https://www.pgbackrest.org
      [pgBouncer]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/connection-pooling/
      [pgMonitor]: https://github.com/CrunchyData/pgmonitor


      ## Post-Installation

      ### Tutorial

      Want to [learn more about the PostgreSQL Operator][tutorial]? Browse through the [tutorial][] to learn more about what you can do!

      [tutorial]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial
    displayName: Crunchy Postgres for Kubernetes
    installModes:
    - supported: true
      type: OwnNamespace
    - supported: true
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - postgres
    - postgresql
    - database
    - sql
    - operator
    - crunchy data
    links:
    - name: Crunchy Data
      url: https://www.crunchydata.com/
    - name: Documentation
      url: https://access.crunchydata.com/documentation/postgres-operator/v5/
    maintainers:
    - email: info@crunchydata.com
      name: Crunchy Data
    maturity: stable
    minKubeVersion: 1.19.0
    provider:
      name: Crunchy Data
      url: https://www.crunchydata.com/
relatedImages:
- image: registry.connect.redhat.com/crunchydata/crunchy-pgadmin4@sha256:581cd941d9becbe7fb0c0b11167f2a35b536cd73f9b236c8449344eb2c77bac5
  name: PGADMIN
- image: registry.connect.redhat.com/crunchydata/crunchy-pgadmin4@sha256:581cd941d9becbe7fb0c0b11167f2a35b536cd73f9b236c8449344eb2c77bac5
  name: pgadmin
- image: registry.connect.redhat.com/crunchydata/crunchy-pgbackrest@sha256:efe775d3208befb2b7f026ef5fee3b03b306a9ba773709ec5c4c3391880ee60b
  name: PGBACKREST
- image: registry.connect.redhat.com/crunchydata/crunchy-pgbackrest@sha256:efe775d3208befb2b7f026ef5fee3b03b306a9ba773709ec5c4c3391880ee60b
  name: pgbackrest
- image: registry.connect.redhat.com/crunchydata/crunchy-pgbouncer@sha256:7cced75b5a800104a469d09300100a8d8d777bf164054273c7cba5cfa2be1e26
  name: PGBOUNCER
- image: registry.connect.redhat.com/crunchydata/crunchy-pgbouncer@sha256:7cced75b5a800104a469d09300100a8d8d777bf164054273c7cba5cfa2be1e26
  name: pgbouncer
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-exporter@sha256:dbcfeb1d49a4776ea4dc55dea9d7f3ad8ea95aebab8bca38a15942429adce49c
  name: pgexporter
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-exporter@sha256:dbcfeb1d49a4776ea4dc55dea9d7f3ad8ea95aebab8bca38a15942429adce49c
  name: PGEXPORTER
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:13bc18c31086037c159a7f4b661c12655193073824fc8a7dc2891e3d39d45fe9
  name: POSTGRES_13_GIS_3.0
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:13bc18c31086037c159a7f4b661c12655193073824fc8a7dc2891e3d39d45fe9
  name: postgres_13_gis_3.0
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:e996679a8821f0fa537a579125664854256a94c73ff7cc2cface3edb85737920
  name: POSTGRES_14_GIS_3.1
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:e996679a8821f0fa537a579125664854256a94c73ff7cc2cface3edb85737920
  name: postgres_14_gis_3.1
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:f45e90e38f555cfce208bbace97a2abc473058839ffdd638c024432afafde8b2
  name: postgres_13_gis_3.1
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:f45e90e38f555cfce208bbace97a2abc473058839ffdd638c024432afafde8b2
  name: POSTGRES_13_GIS_3.1
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:5553680d6923f7517ab84181f073c92bb2b5a7acca8056f05ac61954b43b04d3
  name: POSTGRES_14
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:5553680d6923f7517ab84181f073c92bb2b5a7acca8056f05ac61954b43b04d3
  name: postgres_14
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:6b570ee2922281eedc5c267c50ad30a895fbb4e8a132c3e2c3a38e29fe3d6f6a
  name: postgres_13
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:6b570ee2922281eedc5c267c50ad30a895fbb4e8a132c3e2c3a38e29fe3d6f6a
  name: POSTGRES_13
- image: registry.connect.redhat.com/crunchydata/postgres-operator-bundle@sha256:bc659b3f5c0e2007af70d7a2ca3fa49cffe0af20c4f29d4d1bbad81522949ea0
  name: ""
- image: registry.connect.redhat.com/crunchydata/postgres-operator@sha256:440375bdcb9a41807682336d593ad9231ba5b12ebda83db2d0d6b510f88195f1
  name: operator
- image: registry.connect.redhat.com/crunchydata/postgres-operator@sha256:440375bdcb9a41807682336d593ad9231ba5b12ebda83db2d0d6b510f88195f1
  name: postgres-operator-440375bdcb9a41807682336d593ad9231ba5b12ebda83db2d0d6b510f88195f1-annotation
- image: registry.connect.redhat.com/crunchydata/postgres-operator@sha256:440375bdcb9a41807682336d593ad9231ba5b12ebda83db2d0d6b510f88195f1
  name: postgres-operator
schema: olm.bundle
---
image: registry.connect.redhat.com/crunchydata/postgres-operator-bundle@sha256:4fdda557b9826951dce70c57792d906f1366c51c114dbcd8c7c9d2217d35c902
name: postgresoperator.v5.1.1
package: crunchy-postgres-operator
properties:
- type: olm.gvk
  value:
    group: postgres-operator.crunchydata.com
    kind: PostgresCluster
    version: v1beta1
- type: olm.package
  value:
    packageName: crunchy-postgres-operator
    version: 5.1.1
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "PostgresCluster",
            "metadata": {
              "name": "example"
            },
            "spec": {
              "instances": [
                {
                  "dataVolumeClaimSpec": {
                    "accessModes": [
                      "ReadWriteOnce"
                    ],
                    "resources": {
                      "requests": {
                        "storage": "1Gi"
                      }
                    }
                  },
                  "replicas": 1
                }
              ],
              "postgresVersion": 13
            }
          }
        ]
      capabilities: Auto Pilot
      categories: Database
      certified: "true"
      containerImage: registry.connect.redhat.com/crunchydata/postgres-operator@sha256:b4dba56b93e7e9eb82ba8fb2dcdcf7cbe08dc16dfcbd8d42bd6d8c86488f6495
      createdAt: 2019-12-31 19:40Z
      description: Production Postgres Made Easy
      olm.properties: '[]'
      repository: https://github.com/CrunchyData/postgres-operator
      support: crunchydata.com
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: PostgresCluster is the Schema for the postgresclusters API
        displayName: Postgres Cluster
        kind: PostgresCluster
        name: postgresclusters.postgres-operator.crunchydata.com
        resources:
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: CronJob
          name: ""
          version: v1beta1
        - kind: Deployment
          name: ""
          version: v1
        - kind: Job
          name: ""
          version: v1
        - kind: PersistentVolumeClaim
          name: ""
          version: v1
        - kind: Secret
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: StatefulSet
          name: ""
          version: v1
        specDescriptors:
        - description: The image name to use for PostgreSQL containers. When omitted,
            the value comes from an operator environment variable. For standard PostgreSQL
            images, the format is RELATED_IMAGE_POSTGRES_{postgresVersion}, e.g. RELATED_IMAGE_POSTGRES_13.
            For PostGIS enabled PostgreSQL images, the format is RELATED_IMAGE_POSTGRES_{postgresVersion}_GIS_{postGISVersion},
            e.g. RELATED_IMAGE_POSTGRES_13_GIS_3.1.
          displayName: Image
          path: image
        - description: The major version of PostgreSQL installed in the PostgreSQL
            image
          displayName: Postgres Version
          path: postgresVersion
        - description: Specifies one or more sets of PostgreSQL pods that replicate
            data for this cluster.
          displayName: Instance Sets
          path: instances
        statusDescriptors:
        - description: 'conditions represent the observations of postgrescluster''s
            current state. Known .status.conditions.type are: "PersistentVolumeResizing",
            "ProxyAvailable"'
          displayName: Conditions
          path: conditions
          x-descriptors:
          - urn:alm:descriptor:io.kubernetes.conditions
        version: v1beta1
    description: |-
      [PGO](https://github.com/CrunchyData/postgres-operator), the
      [Postgres Operator](https://github.com/CrunchyData/postgres-operator) from
      [Crunchy Data](https://www.crunchydata.com), gives you a **declarative Postgres** solution that
      automatically manages your [PostgreSQL](https://www.postgresql.org) clusters.

      Designed for your GitOps workflows, it is [easy to get started](https://access.crunchydata.com/documentation/postgres-operator/v5/quickstart/)
      with Postgres on Kubernetes with PGO. Within a few moments, you can have a production grade Postgres
      cluster complete with high availability, disaster recovery, and monitoring, all over secure TLS communications.
      Even better, PGO lets you easily customize your Postgres cluster to tailor it to your workload!

      With conveniences like cloning Postgres clusters to using rolling updates to roll out disruptive
      changes with minimal downtime, PGO is ready to support your Postgres data at every stage of your
      release pipeline. Built for resiliency and uptime, PGO will keep your desired Postgres in a desired
      state so you do not need to worry about it.

      PGO is developed with many years of production experience in automating Postgres management on
      Kubernetes, providing a seamless cloud native Postgres solution to keep your data always available.

      - **PostgreSQL Cluster Provisioning**: [Create, Scale, & Delete PostgreSQL clusters with ease][provisioning],
        while fully customizing your Pods and PostgreSQL configuration!
      - **High-Availability**: Safe, automated failover backed by a [distributed consensus based high-availability solution][high-availability].
        Uses [Pod Anti-Affinity][k8s-anti-affinity] to help resiliency; you can configure how aggressive this can be!
        Failed primaries automatically heal, allowing for faster recovery time. You can even create regularly scheduled
        backups as well and set your backup retention policy
      - **Disaster Recovery**: [Backups][backups] and [restores][disaster-recovery] leverage the open source [pgBackRest][] utility and
        [includes support for full, incremental, and differential backups as well as efficient delta restores][backups].
        Set how long you want your backups retained for. Works great with very large databases!
      - **Monitoring**: [Track the health of your PostgreSQL clusters][monitoring] using the open source [pgMonitor][] library.
      - **Clone**: [Create new clusters from your existing clusters or backups][clone] with efficient data cloning.
      - **TLS**: All connections are over [TLS][tls]. You can also [bring your own TLS infrastructure][tls] if you do not want to use the provided defaults.
      - **Connection Pooling**: Advanced [connection pooling][pool] support using [pgBouncer][].
      - **Affinity and Tolerations**: Have your PostgreSQL clusters deployed to [Kubernetes Nodes][k8s-nodes] of your preference.
        Set your [pod anti-affinity][k8s-anti-affinity], node affinity, Pod tolerations and more rules to customize your deployment topology!
      - **Full Customizability**: Crunchy PostgreSQL for Kubernetes makes it easy to get your own PostgreSQL-as-a-Service up and running
        and fully customize your deployments, including:
          - Choose the resources for your Postgres cluster: [container resources and storage size][resize-cluster]. [Resize at any time][resize-cluster] with minimal disruption.
          - Use your own container image repository, including support `imagePullSecrets` and private repositories
          - [Customize your PostgreSQL configuration][customize-cluster]

      and much more!

      [backups]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/backups/
      [clone]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/disaster-recovery/#clone-a-postgres-cluster
      [customize-cluster]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/customize-cluster/
      [disaster-recovery]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/disaster-recovery/
      [high-availability]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/high-availability/
      [monitoring]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/monitoring/
      [pool]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/connection-pooling/
      [provisioning]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/create-cluster/
      [resize-cluster]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/resize-cluster/
      [tls]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/customize-cluster/#customize-tls

      [k8s-anti-affinity]: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#inter-pod-affinity-and-anti-affinity
      [k8s-nodes]: https://kubernetes.io/docs/concepts/architecture/nodes/

      [pgBackRest]: https://www.pgbackrest.org
      [pgBouncer]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/connection-pooling/
      [pgMonitor]: https://github.com/CrunchyData/pgmonitor


      ## Post-Installation

      ### Tutorial

      Want to [learn more about the PostgreSQL Operator][tutorial]? Browse through the [tutorial][] to learn more about what you can do!

      [tutorial]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial
    displayName: Crunchy Postgres for Kubernetes
    installModes:
    - supported: true
      type: OwnNamespace
    - supported: true
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - postgres
    - postgresql
    - database
    - sql
    - operator
    - crunchy data
    links:
    - name: Crunchy Data
      url: https://www.crunchydata.com/
    - name: Documentation
      url: https://access.crunchydata.com/documentation/postgres-operator/v5/
    maintainers:
    - email: info@crunchydata.com
      name: Crunchy Data
    maturity: stable
    minKubeVersion: 1.19.0
    provider:
      name: Crunchy Data
      url: https://www.crunchydata.com/
relatedImages:
- image: registry.connect.redhat.com/crunchydata/crunchy-pgadmin4@sha256:7113af9768b12c74373ad350178c7a2db56df9da7ccb08b5c6b6cbd32220e134
  name: pgadmin
- image: registry.connect.redhat.com/crunchydata/crunchy-pgadmin4@sha256:7113af9768b12c74373ad350178c7a2db56df9da7ccb08b5c6b6cbd32220e134
  name: PGADMIN
- image: registry.connect.redhat.com/crunchydata/crunchy-pgbackrest@sha256:ddce52cf45f3a7d850163687836d565dc1b0671424b2044778645d108995a480
  name: PGBACKREST
- image: registry.connect.redhat.com/crunchydata/crunchy-pgbackrest@sha256:ddce52cf45f3a7d850163687836d565dc1b0671424b2044778645d108995a480
  name: pgbackrest
- image: registry.connect.redhat.com/crunchydata/crunchy-pgbouncer@sha256:b7aeb28b7aacf76aad8b67037d47c64400d31a281076557f4dfd72a7e09d2a9e
  name: PGBOUNCER
- image: registry.connect.redhat.com/crunchydata/crunchy-pgbouncer@sha256:b7aeb28b7aacf76aad8b67037d47c64400d31a281076557f4dfd72a7e09d2a9e
  name: pgbouncer
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-exporter@sha256:694a2e85412f82fe444c7a605c2a16c5b6fe07689e7eb919477ae0f19a54e610
  name: pgexporter
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-exporter@sha256:694a2e85412f82fe444c7a605c2a16c5b6fe07689e7eb919477ae0f19a54e610
  name: PGEXPORTER
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:1de1072082f58449d9d181ddaf0026ffe00c5961e982aef6558a7ac4314581e2
  name: POSTGRES_14_GIS_3.1
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:1de1072082f58449d9d181ddaf0026ffe00c5961e982aef6558a7ac4314581e2
  name: postgres_14_gis_3.1
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:20baa15efefeae142b8ab9034f1956203f6ff2397b1ca53ffe86ddbf95977891
  name: postgres_13_gis_3.1
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:20baa15efefeae142b8ab9034f1956203f6ff2397b1ca53ffe86ddbf95977891
  name: POSTGRES_13_GIS_3.1
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:430a39a4815f59e9ee92b1db6fb1ed516bc69a40500bf7e8d9d43b5972f0d058
  name: postgres_13_gis_3.0
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:430a39a4815f59e9ee92b1db6fb1ed516bc69a40500bf7e8d9d43b5972f0d058
  name: POSTGRES_13_GIS_3.0
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:e26176f740c5b1fef9dbcc11554062209c22b41f591c9d31d74681b686f6598b
  name: POSTGRES_14_GIS_3.2
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:e26176f740c5b1fef9dbcc11554062209c22b41f591c9d31d74681b686f6598b
  name: postgres_14_gis_3.2
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:030dd4c2535b4ec725006efff074faafc835bd87caeaf0e8cd11d7af885e601c
  name: postgres_14
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:030dd4c2535b4ec725006efff074faafc835bd87caeaf0e8cd11d7af885e601c
  name: POSTGRES_14
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:af0557c9dce647181b8071f5b18f51818a460ea116cbdd22c65a2f0129cf1408
  name: postgres_13
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:af0557c9dce647181b8071f5b18f51818a460ea116cbdd22c65a2f0129cf1408
  name: POSTGRES_13
- image: registry.connect.redhat.com/crunchydata/postgres-operator-bundle@sha256:4fdda557b9826951dce70c57792d906f1366c51c114dbcd8c7c9d2217d35c902
  name: ""
- image: registry.connect.redhat.com/crunchydata/postgres-operator@sha256:b4dba56b93e7e9eb82ba8fb2dcdcf7cbe08dc16dfcbd8d42bd6d8c86488f6495
  name: operator
- image: registry.connect.redhat.com/crunchydata/postgres-operator@sha256:b4dba56b93e7e9eb82ba8fb2dcdcf7cbe08dc16dfcbd8d42bd6d8c86488f6495
  name: postgres-operator-b4dba56b93e7e9eb82ba8fb2dcdcf7cbe08dc16dfcbd8d42bd6d8c86488f6495-annotation
- image: registry.connect.redhat.com/crunchydata/postgres-operator@sha256:b4dba56b93e7e9eb82ba8fb2dcdcf7cbe08dc16dfcbd8d42bd6d8c86488f6495
  name: postgres-operator
schema: olm.bundle
---
image: registry.connect.redhat.com/crunchydata/postgres-operator-bundle@sha256:9547747d18e34264cb16d7f8699706e2e87bc797f9bb4f474d5120376748f7c2
name: postgresoperator.v5.1.2
package: crunchy-postgres-operator
properties:
- type: olm.gvk
  value:
    group: postgres-operator.crunchydata.com
    kind: PostgresCluster
    version: v1beta1
- type: olm.package
  value:
    packageName: crunchy-postgres-operator
    version: 5.1.2
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "PostgresCluster",
            "metadata": {
              "name": "example"
            },
            "spec": {
              "instances": [
                {
                  "dataVolumeClaimSpec": {
                    "accessModes": [
                      "ReadWriteOnce"
                    ],
                    "resources": {
                      "requests": {
                        "storage": "1Gi"
                      }
                    }
                  },
                  "replicas": 1
                }
              ],
              "postgresVersion": 13
            }
          }
        ]
      capabilities: Auto Pilot
      categories: Database
      certified: "true"
      containerImage: registry.connect.redhat.com/crunchydata/postgres-operator@sha256:aff7077b0ef48e9e6bfb64912f617974eb28926ff62ffc254e8655c5bd1ecffc
      createdAt: 2019-12-31 19:40Z
      description: Production Postgres Made Easy
      olm.properties: '[]'
      repository: https://github.com/CrunchyData/postgres-operator
      support: crunchydata.com
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: PostgresCluster is the Schema for the postgresclusters API
        displayName: Postgres Cluster
        kind: PostgresCluster
        name: postgresclusters.postgres-operator.crunchydata.com
        resources:
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: CronJob
          name: ""
          version: v1beta1
        - kind: Deployment
          name: ""
          version: v1
        - kind: Job
          name: ""
          version: v1
        - kind: PersistentVolumeClaim
          name: ""
          version: v1
        - kind: Secret
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: StatefulSet
          name: ""
          version: v1
        specDescriptors:
        - description: The image name to use for PostgreSQL containers. When omitted,
            the value comes from an operator environment variable. For standard PostgreSQL
            images, the format is RELATED_IMAGE_POSTGRES_{postgresVersion}, e.g. RELATED_IMAGE_POSTGRES_13.
            For PostGIS enabled PostgreSQL images, the format is RELATED_IMAGE_POSTGRES_{postgresVersion}_GIS_{postGISVersion},
            e.g. RELATED_IMAGE_POSTGRES_13_GIS_3.1.
          displayName: Image
          path: image
        - description: The major version of PostgreSQL installed in the PostgreSQL
            image
          displayName: Postgres Version
          path: postgresVersion
        - description: Specifies one or more sets of PostgreSQL pods that replicate
            data for this cluster.
          displayName: Instance Sets
          path: instances
        statusDescriptors:
        - description: 'conditions represent the observations of postgrescluster''s
            current state. Known .status.conditions.type are: "PersistentVolumeResizing",
            "ProxyAvailable"'
          displayName: Conditions
          path: conditions
          x-descriptors:
          - urn:alm:descriptor:io.kubernetes.conditions
        version: v1beta1
    description: |-
      [PGO](https://github.com/CrunchyData/postgres-operator), the
      [Postgres Operator](https://github.com/CrunchyData/postgres-operator) from
      [Crunchy Data](https://www.crunchydata.com), gives you a **declarative Postgres** solution that
      automatically manages your [PostgreSQL](https://www.postgresql.org) clusters.

      Designed for your GitOps workflows, it is [easy to get started](https://access.crunchydata.com/documentation/postgres-operator/v5/quickstart/)
      with Postgres on Kubernetes with PGO. Within a few moments, you can have a production grade Postgres
      cluster complete with high availability, disaster recovery, and monitoring, all over secure TLS communications.
      Even better, PGO lets you easily customize your Postgres cluster to tailor it to your workload!

      With conveniences like cloning Postgres clusters to using rolling updates to roll out disruptive
      changes with minimal downtime, PGO is ready to support your Postgres data at every stage of your
      release pipeline. Built for resiliency and uptime, PGO will keep your desired Postgres in a desired
      state so you do not need to worry about it.

      PGO is developed with many years of production experience in automating Postgres management on
      Kubernetes, providing a seamless cloud native Postgres solution to keep your data always available.

      - **PostgreSQL Cluster Provisioning**: [Create, Scale, & Delete PostgreSQL clusters with ease][provisioning],
        while fully customizing your Pods and PostgreSQL configuration!
      - **High-Availability**: Safe, automated failover backed by a [distributed consensus based high-availability solution][high-availability].
        Uses [Pod Anti-Affinity][k8s-anti-affinity] to help resiliency; you can configure how aggressive this can be!
        Failed primaries automatically heal, allowing for faster recovery time. You can even create regularly scheduled
        backups as well and set your backup retention policy
      - **Disaster Recovery**: [Backups][backups] and [restores][disaster-recovery] leverage the open source [pgBackRest][] utility and
        [includes support for full, incremental, and differential backups as well as efficient delta restores][backups].
        Set how long you want your backups retained for. Works great with very large databases!
      - **Monitoring**: [Track the health of your PostgreSQL clusters][monitoring] using the open source [pgMonitor][] library.
      - **Clone**: [Create new clusters from your existing clusters or backups][clone] with efficient data cloning.
      - **TLS**: All connections are over [TLS][tls]. You can also [bring your own TLS infrastructure][tls] if you do not want to use the provided defaults.
      - **Connection Pooling**: Advanced [connection pooling][pool] support using [pgBouncer][].
      - **Affinity and Tolerations**: Have your PostgreSQL clusters deployed to [Kubernetes Nodes][k8s-nodes] of your preference.
        Set your [pod anti-affinity][k8s-anti-affinity], node affinity, Pod tolerations and more rules to customize your deployment topology!
      - **Full Customizability**: Crunchy PostgreSQL for Kubernetes makes it easy to get your own PostgreSQL-as-a-Service up and running
        and fully customize your deployments, including:
          - Choose the resources for your Postgres cluster: [container resources and storage size][resize-cluster]. [Resize at any time][resize-cluster] with minimal disruption.
          - Use your own container image repository, including support `imagePullSecrets` and private repositories
          - [Customize your PostgreSQL configuration][customize-cluster]

      and much more!

      [backups]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/backups/
      [clone]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/disaster-recovery/#clone-a-postgres-cluster
      [customize-cluster]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/customize-cluster/
      [disaster-recovery]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/disaster-recovery/
      [high-availability]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/high-availability/
      [monitoring]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/monitoring/
      [pool]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/connection-pooling/
      [provisioning]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/create-cluster/
      [resize-cluster]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/resize-cluster/
      [tls]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/customize-cluster/#customize-tls

      [k8s-anti-affinity]: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#inter-pod-affinity-and-anti-affinity
      [k8s-nodes]: https://kubernetes.io/docs/concepts/architecture/nodes/

      [pgBackRest]: https://www.pgbackrest.org
      [pgBouncer]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/connection-pooling/
      [pgMonitor]: https://github.com/CrunchyData/pgmonitor


      ## Post-Installation

      ### Tutorial

      Want to [learn more about the PostgreSQL Operator][tutorial]? Browse through the [tutorial][] to learn more about what you can do!

      [tutorial]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial
    displayName: Crunchy Postgres for Kubernetes
    installModes:
    - supported: true
      type: OwnNamespace
    - supported: true
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - postgres
    - postgresql
    - database
    - sql
    - operator
    - crunchy data
    links:
    - name: Crunchy Data
      url: https://www.crunchydata.com/
    - name: Documentation
      url: https://access.crunchydata.com/documentation/postgres-operator/v5/
    maintainers:
    - email: info@crunchydata.com
      name: Crunchy Data
    maturity: stable
    minKubeVersion: 1.19.0
    provider:
      name: Crunchy Data
      url: https://www.crunchydata.com/
relatedImages:
- image: registry.connect.redhat.com/crunchydata/crunchy-pgadmin4@sha256:0666d86fc8b208df9d670b13e0c87523357d03f116b40a4282d579014709a83a
  name: pgadmin
- image: registry.connect.redhat.com/crunchydata/crunchy-pgadmin4@sha256:0666d86fc8b208df9d670b13e0c87523357d03f116b40a4282d579014709a83a
  name: PGADMIN
- image: registry.connect.redhat.com/crunchydata/crunchy-pgbackrest@sha256:f772ac43d35d3aa05a54fed78e6865261827a44a4ee0a2456540991203600994
  name: PGBACKREST
- image: registry.connect.redhat.com/crunchydata/crunchy-pgbackrest@sha256:f772ac43d35d3aa05a54fed78e6865261827a44a4ee0a2456540991203600994
  name: pgbackrest
- image: registry.connect.redhat.com/crunchydata/crunchy-pgbouncer@sha256:989085b821bf7ed9f2306837ac543ce4806efe428243b854d8777d586ae0e60e
  name: PGBOUNCER
- image: registry.connect.redhat.com/crunchydata/crunchy-pgbouncer@sha256:989085b821bf7ed9f2306837ac543ce4806efe428243b854d8777d586ae0e60e
  name: pgbouncer
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-exporter@sha256:e28fd2f88f834307721f4c38eb0f46b4e0614bfa2a96ff4e03ff6c29621f4955
  name: PGEXPORTER
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-exporter@sha256:e28fd2f88f834307721f4c38eb0f46b4e0614bfa2a96ff4e03ff6c29621f4955
  name: pgexporter
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:11e62c37973ee8854d4f0ba1669df06cfd2c0cb815bfda7af5911031e8449647
  name: postgres_14_gis_3.1
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:11e62c37973ee8854d4f0ba1669df06cfd2c0cb815bfda7af5911031e8449647
  name: POSTGRES_14_GIS_3.1
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:3763c79ed5c75c81346d8cd48c9427df9bb0a66fbf591f677c527218e92e0e09
  name: postgres_13_gis_3.0
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:3763c79ed5c75c81346d8cd48c9427df9bb0a66fbf591f677c527218e92e0e09
  name: POSTGRES_13_GIS_3.0
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:ca3c65650d95073b4adf6e1f19e6599fcde56ae7bf5ea988ff243dd18ccfa095
  name: POSTGRES_14_GIS_3.2
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:ca3c65650d95073b4adf6e1f19e6599fcde56ae7bf5ea988ff243dd18ccfa095
  name: postgres_14_gis_3.2
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:ee92358d8d05a3cb62441ee015520e987a64a960f365693509a5e66e8f23c3ac
  name: postgres_13_gis_3.1
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:ee92358d8d05a3cb62441ee015520e987a64a960f365693509a5e66e8f23c3ac
  name: POSTGRES_13_GIS_3.1
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:41b60699288a0498e3acbc405cb8cc07b9a0aa9e04183ca239a687c008378a23
  name: POSTGRES_13
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:41b60699288a0498e3acbc405cb8cc07b9a0aa9e04183ca239a687c008378a23
  name: postgres_13
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:ff2e00738458664bf9e97ed69c252c05fa6308beb25bef62cbb3b43319f7aed8
  name: postgres_14
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:ff2e00738458664bf9e97ed69c252c05fa6308beb25bef62cbb3b43319f7aed8
  name: POSTGRES_14
- image: registry.connect.redhat.com/crunchydata/postgres-operator-bundle@sha256:9547747d18e34264cb16d7f8699706e2e87bc797f9bb4f474d5120376748f7c2
  name: ""
- image: registry.connect.redhat.com/crunchydata/postgres-operator@sha256:aff7077b0ef48e9e6bfb64912f617974eb28926ff62ffc254e8655c5bd1ecffc
  name: operator
- image: registry.connect.redhat.com/crunchydata/postgres-operator@sha256:aff7077b0ef48e9e6bfb64912f617974eb28926ff62ffc254e8655c5bd1ecffc
  name: postgres-operator-aff7077b0ef48e9e6bfb64912f617974eb28926ff62ffc254e8655c5bd1ecffc-annotation
- image: registry.connect.redhat.com/crunchydata/postgres-operator@sha256:aff7077b0ef48e9e6bfb64912f617974eb28926ff62ffc254e8655c5bd1ecffc
  name: postgres-operator
schema: olm.bundle
---
image: registry.connect.redhat.com/crunchydata/postgres-operator-bundle@sha256:9d154681aceb8b1e12056a3ff63591736e97580c43cd25d735cee6940bd05633
name: postgresoperator.v5.1.3
package: crunchy-postgres-operator
properties:
- type: olm.gvk
  value:
    group: postgres-operator.crunchydata.com
    kind: PostgresCluster
    version: v1beta1
- type: olm.package
  value:
    packageName: crunchy-postgres-operator
    version: 5.1.3
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "PostgresCluster",
            "metadata": {
              "name": "example"
            },
            "spec": {
              "instances": [
                {
                  "dataVolumeClaimSpec": {
                    "accessModes": [
                      "ReadWriteOnce"
                    ],
                    "resources": {
                      "requests": {
                        "storage": "1Gi"
                      }
                    }
                  },
                  "replicas": 1
                }
              ],
              "postgresVersion": 13
            }
          }
        ]
      capabilities: Auto Pilot
      categories: Database
      certified: "true"
      containerImage: registry.connect.redhat.com/crunchydata/postgres-operator@sha256:1c3bab87a28a50c8314f51e13893839f895a41bea983bf20c46db7b30e3751ec
      createdAt: 2019-12-31 19:40Z
      description: Production Postgres Made Easy
      olm.properties: '[]'
      repository: https://github.com/CrunchyData/postgres-operator
      support: crunchydata.com
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: PostgresCluster is the Schema for the postgresclusters API
        displayName: Postgres Cluster
        kind: PostgresCluster
        name: postgresclusters.postgres-operator.crunchydata.com
        resources:
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: CronJob
          name: ""
          version: v1beta1
        - kind: Deployment
          name: ""
          version: v1
        - kind: Job
          name: ""
          version: v1
        - kind: PersistentVolumeClaim
          name: ""
          version: v1
        - kind: Secret
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: StatefulSet
          name: ""
          version: v1
        specDescriptors:
        - description: The image name to use for PostgreSQL containers. When omitted,
            the value comes from an operator environment variable. For standard PostgreSQL
            images, the format is RELATED_IMAGE_POSTGRES_{postgresVersion}, e.g. RELATED_IMAGE_POSTGRES_13.
            For PostGIS enabled PostgreSQL images, the format is RELATED_IMAGE_POSTGRES_{postgresVersion}_GIS_{postGISVersion},
            e.g. RELATED_IMAGE_POSTGRES_13_GIS_3.1.
          displayName: Image
          path: image
        - description: The major version of PostgreSQL installed in the PostgreSQL
            image
          displayName: Postgres Version
          path: postgresVersion
        - description: Specifies one or more sets of PostgreSQL pods that replicate
            data for this cluster.
          displayName: Instance Sets
          path: instances
        statusDescriptors:
        - description: 'conditions represent the observations of postgrescluster''s
            current state. Known .status.conditions.type are: "PersistentVolumeResizing",
            "ProxyAvailable"'
          displayName: Conditions
          path: conditions
          x-descriptors:
          - urn:alm:descriptor:io.kubernetes.conditions
        version: v1beta1
    description: |-
      [PGO](https://github.com/CrunchyData/postgres-operator), the
      [Postgres Operator](https://github.com/CrunchyData/postgres-operator) from
      [Crunchy Data](https://www.crunchydata.com), gives you a **declarative Postgres** solution that
      automatically manages your [PostgreSQL](https://www.postgresql.org) clusters.

      Designed for your GitOps workflows, it is [easy to get started](https://access.crunchydata.com/documentation/postgres-operator/v5/quickstart/)
      with Postgres on Kubernetes with PGO. Within a few moments, you can have a production grade Postgres
      cluster complete with high availability, disaster recovery, and monitoring, all over secure TLS communications.
      Even better, PGO lets you easily customize your Postgres cluster to tailor it to your workload!

      With conveniences like cloning Postgres clusters to using rolling updates to roll out disruptive
      changes with minimal downtime, PGO is ready to support your Postgres data at every stage of your
      release pipeline. Built for resiliency and uptime, PGO will keep your desired Postgres in a desired
      state so you do not need to worry about it.

      PGO is developed with many years of production experience in automating Postgres management on
      Kubernetes, providing a seamless cloud native Postgres solution to keep your data always available.

      - **PostgreSQL Cluster Provisioning**: [Create, Scale, & Delete PostgreSQL clusters with ease][provisioning],
        while fully customizing your Pods and PostgreSQL configuration!
      - **High-Availability**: Safe, automated failover backed by a [distributed consensus based high-availability solution][high-availability].
        Uses [Pod Anti-Affinity][k8s-anti-affinity] to help resiliency; you can configure how aggressive this can be!
        Failed primaries automatically heal, allowing for faster recovery time. You can even create regularly scheduled
        backups as well and set your backup retention policy
      - **Disaster Recovery**: [Backups][backups] and [restores][disaster-recovery] leverage the open source [pgBackRest][] utility and
        [includes support for full, incremental, and differential backups as well as efficient delta restores][backups].
        Set how long you want your backups retained for. Works great with very large databases!
      - **Monitoring**: [Track the health of your PostgreSQL clusters][monitoring] using the open source [pgMonitor][] library.
      - **Clone**: [Create new clusters from your existing clusters or backups][clone] with efficient data cloning.
      - **TLS**: All connections are over [TLS][tls]. You can also [bring your own TLS infrastructure][tls] if you do not want to use the provided defaults.
      - **Connection Pooling**: Advanced [connection pooling][pool] support using [pgBouncer][].
      - **Affinity and Tolerations**: Have your PostgreSQL clusters deployed to [Kubernetes Nodes][k8s-nodes] of your preference.
        Set your [pod anti-affinity][k8s-anti-affinity], node affinity, Pod tolerations and more rules to customize your deployment topology!
      - **Full Customizability**: Crunchy PostgreSQL for Kubernetes makes it easy to get your own PostgreSQL-as-a-Service up and running
        and fully customize your deployments, including:
          - Choose the resources for your Postgres cluster: [container resources and storage size][resize-cluster]. [Resize at any time][resize-cluster] with minimal disruption.
          - Use your own container image repository, including support `imagePullSecrets` and private repositories
          - [Customize your PostgreSQL configuration][customize-cluster]

      and much more!

      [backups]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/backups/
      [clone]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/disaster-recovery/#clone-a-postgres-cluster
      [customize-cluster]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/customize-cluster/
      [disaster-recovery]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/disaster-recovery/
      [high-availability]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/high-availability/
      [monitoring]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/monitoring/
      [pool]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/connection-pooling/
      [provisioning]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/create-cluster/
      [resize-cluster]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/resize-cluster/
      [tls]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/customize-cluster/#customize-tls

      [k8s-anti-affinity]: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#inter-pod-affinity-and-anti-affinity
      [k8s-nodes]: https://kubernetes.io/docs/concepts/architecture/nodes/

      [pgBackRest]: https://www.pgbackrest.org
      [pgBouncer]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/connection-pooling/
      [pgMonitor]: https://github.com/CrunchyData/pgmonitor


      ## Post-Installation

      ### Tutorial

      Want to [learn more about the PostgreSQL Operator][tutorial]? Browse through the [tutorial][] to learn more about what you can do!

      [tutorial]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial
    displayName: Crunchy Postgres for Kubernetes
    installModes:
    - supported: true
      type: OwnNamespace
    - supported: true
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - postgres
    - postgresql
    - database
    - sql
    - operator
    - crunchy data
    links:
    - name: Crunchy Data
      url: https://www.crunchydata.com/
    - name: Documentation
      url: https://access.crunchydata.com/documentation/postgres-operator/v5/
    maintainers:
    - email: info@crunchydata.com
      name: Crunchy Data
    maturity: stable
    minKubeVersion: 1.19.0
    provider:
      name: Crunchy Data
      url: https://www.crunchydata.com/
relatedImages:
- image: registry.connect.redhat.com/crunchydata/crunchy-pgadmin4@sha256:eb7c955a86eca26344811f045fca9ee1c69b62bba497b57f5a7292eab5599dad
  name: pgadmin
- image: registry.connect.redhat.com/crunchydata/crunchy-pgadmin4@sha256:eb7c955a86eca26344811f045fca9ee1c69b62bba497b57f5a7292eab5599dad
  name: PGADMIN
- image: registry.connect.redhat.com/crunchydata/crunchy-pgbackrest@sha256:ca99ce29ac0a4eb1a033d0d7a0f39e0f9d08573661ecec6641748ae4eb7fc00d
  name: PGBACKREST
- image: registry.connect.redhat.com/crunchydata/crunchy-pgbackrest@sha256:ca99ce29ac0a4eb1a033d0d7a0f39e0f9d08573661ecec6641748ae4eb7fc00d
  name: pgbackrest
- image: registry.connect.redhat.com/crunchydata/crunchy-pgbouncer@sha256:82e3fc35086f76d52c26d5c8c86427c5ecf0cfce42f971e4308ad7268fb688e0
  name: PGBOUNCER
- image: registry.connect.redhat.com/crunchydata/crunchy-pgbouncer@sha256:82e3fc35086f76d52c26d5c8c86427c5ecf0cfce42f971e4308ad7268fb688e0
  name: pgbouncer
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-exporter@sha256:e09830db5cd48dddb6c2c5718115242d5c6a958f677c23bbfd6d822fe655ce58
  name: PGEXPORTER
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-exporter@sha256:e09830db5cd48dddb6c2c5718115242d5c6a958f677c23bbfd6d822fe655ce58
  name: pgexporter
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:246a1f978b7580921fb78d121d87754ba0e9be12902e4546823b15fe1da1a0b0
  name: postgres_13_gis_3.0
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:246a1f978b7580921fb78d121d87754ba0e9be12902e4546823b15fe1da1a0b0
  name: POSTGRES_13_GIS_3.0
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:8321084187156e90e7e08e0004717ecb14624573e76cec354b69b5cfd1222d89
  name: postgres_14_gis_3.2
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:8321084187156e90e7e08e0004717ecb14624573e76cec354b69b5cfd1222d89
  name: POSTGRES_14_GIS_3.2
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:f0c493dc681b8bdc54f012b05e87f143897e022210651de396ed1cd22851e9c1
  name: POSTGRES_14_GIS_3.1
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:f0c493dc681b8bdc54f012b05e87f143897e022210651de396ed1cd22851e9c1
  name: postgres_14_gis_3.1
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:f29cdeaf84d51189d572450b702df82ad0970ac310c99888dbadc29d400b7d47
  name: postgres_13_gis_3.1
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:f29cdeaf84d51189d572450b702df82ad0970ac310c99888dbadc29d400b7d47
  name: POSTGRES_13_GIS_3.1
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:4e506074f935bc6346fe2cb574ca15018ae901ef0365497965a2ca75d26d9ffc
  name: postgres_14
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:4e506074f935bc6346fe2cb574ca15018ae901ef0365497965a2ca75d26d9ffc
  name: POSTGRES_14
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:988c8fb41d6667fcc4f05461f635b4109fffbb3e8f4a58f3e0a8db7e4f51201a
  name: postgres_13
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:988c8fb41d6667fcc4f05461f635b4109fffbb3e8f4a58f3e0a8db7e4f51201a
  name: POSTGRES_13
- image: registry.connect.redhat.com/crunchydata/postgres-operator-bundle@sha256:9d154681aceb8b1e12056a3ff63591736e97580c43cd25d735cee6940bd05633
  name: ""
- image: registry.connect.redhat.com/crunchydata/postgres-operator@sha256:1c3bab87a28a50c8314f51e13893839f895a41bea983bf20c46db7b30e3751ec
  name: operator
- image: registry.connect.redhat.com/crunchydata/postgres-operator@sha256:1c3bab87a28a50c8314f51e13893839f895a41bea983bf20c46db7b30e3751ec
  name: postgres-operator-1c3bab87a28a50c8314f51e13893839f895a41bea983bf20c46db7b30e3751ec-annotation
- image: registry.connect.redhat.com/crunchydata/postgres-operator@sha256:1c3bab87a28a50c8314f51e13893839f895a41bea983bf20c46db7b30e3751ec
  name: postgres-operator
schema: olm.bundle
---
image: registry.connect.redhat.com/crunchydata/postgres-operator-bundle@sha256:4e2ad2ecd6f85cb2d511dd458a1dc8d0289caacb6415b006876a1d6ec52dfdd9
name: postgresoperator.v5.2.0
package: crunchy-postgres-operator
properties:
- type: olm.gvk
  value:
    group: postgres-operator.crunchydata.com
    kind: PostgresCluster
    version: v1beta1
- type: olm.package
  value:
    packageName: crunchy-postgres-operator
    version: 5.2.0
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "PostgresCluster",
            "metadata": {
              "name": "example"
            },
            "spec": {
              "instances": [
                {
                  "dataVolumeClaimSpec": {
                    "accessModes": [
                      "ReadWriteOnce"
                    ],
                    "resources": {
                      "requests": {
                        "storage": "1Gi"
                      }
                    }
                  },
                  "replicas": 1
                }
              ],
              "postgresVersion": 13
            }
          }
        ]
      capabilities: Auto Pilot
      categories: Database
      certified: "true"
      containerImage: registry.connect.redhat.com/crunchydata/postgres-operator@sha256:4ad944f4f01a85249aa7678521e61fe48ed150ac43f3c38f33b42f7a32eb9961
      createdAt: 2019-12-31 19:40Z
      description: Production Postgres Made Easy
      olm.properties: '[]'
      repository: https://github.com/CrunchyData/postgres-operator
      support: crunchydata.com
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: PostgresCluster is the Schema for the postgresclusters API
        displayName: Postgres Cluster
        kind: PostgresCluster
        name: postgresclusters.postgres-operator.crunchydata.com
        resources:
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: CronJob
          name: ""
          version: v1beta1
        - kind: Deployment
          name: ""
          version: v1
        - kind: Job
          name: ""
          version: v1
        - kind: PersistentVolumeClaim
          name: ""
          version: v1
        - kind: Secret
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: StatefulSet
          name: ""
          version: v1
        specDescriptors:
        - description: The image name to use for PostgreSQL containers. When omitted,
            the value comes from an operator environment variable. For standard PostgreSQL
            images, the format is RELATED_IMAGE_POSTGRES_{postgresVersion}, e.g. RELATED_IMAGE_POSTGRES_13.
            For PostGIS enabled PostgreSQL images, the format is RELATED_IMAGE_POSTGRES_{postgresVersion}_GIS_{postGISVersion},
            e.g. RELATED_IMAGE_POSTGRES_13_GIS_3.1.
          displayName: Image
          path: image
        - description: The major version of PostgreSQL installed in the PostgreSQL
            image
          displayName: Postgres Version
          path: postgresVersion
        - description: Specifies one or more sets of PostgreSQL pods that replicate
            data for this cluster.
          displayName: Instance Sets
          path: instances
        statusDescriptors:
        - description: 'conditions represent the observations of postgrescluster''s
            current state. Known .status.conditions.type are: "PersistentVolumeResizing",
            "Progressing", "ProxyAvailable"'
          displayName: Conditions
          path: conditions
          x-descriptors:
          - urn:alm:descriptor:io.kubernetes.conditions
        version: v1beta1
    description: |-
      [PGO](https://github.com/CrunchyData/postgres-operator), the
      [Postgres Operator](https://github.com/CrunchyData/postgres-operator) from
      [Crunchy Data](https://www.crunchydata.com), gives you a **declarative Postgres** solution that
      automatically manages your [PostgreSQL](https://www.postgresql.org) clusters.

      Designed for your GitOps workflows, it is [easy to get started](https://access.crunchydata.com/documentation/postgres-operator/v5/quickstart/)
      with Postgres on Kubernetes with PGO. Within a few moments, you can have a production grade Postgres
      cluster complete with high availability, disaster recovery, and monitoring, all over secure TLS communications.
      Even better, PGO lets you easily customize your Postgres cluster to tailor it to your workload!

      With conveniences like cloning Postgres clusters to using rolling updates to roll out disruptive
      changes with minimal downtime, PGO is ready to support your Postgres data at every stage of your
      release pipeline. Built for resiliency and uptime, PGO will keep your desired Postgres in a desired
      state so you do not need to worry about it.

      PGO is developed with many years of production experience in automating Postgres management on
      Kubernetes, providing a seamless cloud native Postgres solution to keep your data always available.

      - **PostgreSQL Cluster Provisioning**: [Create, Scale, & Delete PostgreSQL clusters with ease][provisioning],
        while fully customizing your Pods and PostgreSQL configuration!
      - **High-Availability**: Safe, automated failover backed by a [distributed consensus based high-availability solution][high-availability].
        Uses [Pod Anti-Affinity][k8s-anti-affinity] to help resiliency; you can configure how aggressive this can be!
        Failed primaries automatically heal, allowing for faster recovery time. You can even create regularly scheduled
        backups as well and set your backup retention policy
      - **Disaster Recovery**: [Backups][backups] and [restores][disaster-recovery] leverage the open source [pgBackRest][] utility and
        [includes support for full, incremental, and differential backups as well as efficient delta restores][backups].
        Set how long you want your backups retained for. Works great with very large databases!
      - **Monitoring**: [Track the health of your PostgreSQL clusters][monitoring] using the open source [pgMonitor][] library.
      - **Clone**: [Create new clusters from your existing clusters or backups][clone] with efficient data cloning.
      - **TLS**: All connections are over [TLS][tls]. You can also [bring your own TLS infrastructure][tls] if you do not want to use the provided defaults.
      - **Connection Pooling**: Advanced [connection pooling][pool] support using [pgBouncer][].
      - **Affinity and Tolerations**: Have your PostgreSQL clusters deployed to [Kubernetes Nodes][k8s-nodes] of your preference.
        Set your [pod anti-affinity][k8s-anti-affinity], node affinity, Pod tolerations and more rules to customize your deployment topology!
      - **Full Customizability**: Crunchy PostgreSQL for Kubernetes makes it easy to get your own PostgreSQL-as-a-Service up and running
        and fully customize your deployments, including:
          - Choose the resources for your Postgres cluster: [container resources and storage size][resize-cluster]. [Resize at any time][resize-cluster] with minimal disruption.
          - Use your own container image repository, including support `imagePullSecrets` and private repositories
          - [Customize your PostgreSQL configuration][customize-cluster]

      and much more!

      [backups]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/backups/
      [clone]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/disaster-recovery/#clone-a-postgres-cluster
      [customize-cluster]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/customize-cluster/
      [disaster-recovery]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/disaster-recovery/
      [high-availability]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/high-availability/
      [monitoring]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/monitoring/
      [pool]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/connection-pooling/
      [provisioning]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/create-cluster/
      [resize-cluster]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/resize-cluster/
      [tls]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/customize-cluster/#customize-tls

      [k8s-anti-affinity]: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#inter-pod-affinity-and-anti-affinity
      [k8s-nodes]: https://kubernetes.io/docs/concepts/architecture/nodes/

      [pgBackRest]: https://www.pgbackrest.org
      [pgBouncer]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/connection-pooling/
      [pgMonitor]: https://github.com/CrunchyData/pgmonitor


      ## Post-Installation

      ### Tutorial

      Want to [learn more about the PostgreSQL Operator][tutorial]? Browse through the [tutorial][] to learn more about what you can do!

      [tutorial]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial
    displayName: Crunchy Postgres for Kubernetes
    installModes:
    - supported: true
      type: OwnNamespace
    - supported: true
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - postgres
    - postgresql
    - database
    - sql
    - operator
    - crunchy data
    links:
    - name: Crunchy Data
      url: https://www.crunchydata.com/
    - name: Documentation
      url: https://access.crunchydata.com/documentation/postgres-operator/v5/
    maintainers:
    - email: info@crunchydata.com
      name: Crunchy Data
    maturity: stable
    minKubeVersion: 1.19.0
    provider:
      name: Crunchy Data
      url: https://www.crunchydata.com/
relatedImages:
- image: registry.connect.redhat.com/crunchydata/crunchy-pgadmin4@sha256:46adfa9fec12d170da65e328b7f38c10263726dc9a389d6ebeb3043c82eea928
  name: PGADMIN
- image: registry.connect.redhat.com/crunchydata/crunchy-pgadmin4@sha256:46adfa9fec12d170da65e328b7f38c10263726dc9a389d6ebeb3043c82eea928
  name: pgadmin
- image: registry.connect.redhat.com/crunchydata/crunchy-pgbackrest@sha256:7a836441adabc447d3b545061882b0e28fd6712d2398b3943130b3a5f0f2f887
  name: PGBACKREST
- image: registry.connect.redhat.com/crunchydata/crunchy-pgbackrest@sha256:7a836441adabc447d3b545061882b0e28fd6712d2398b3943130b3a5f0f2f887
  name: pgbackrest
- image: registry.connect.redhat.com/crunchydata/crunchy-pgbouncer@sha256:369488aee583bff7f7597b0493123f1c017d5caeb78960ef69c80fded2d753a2
  name: PGBOUNCER
- image: registry.connect.redhat.com/crunchydata/crunchy-pgbouncer@sha256:369488aee583bff7f7597b0493123f1c017d5caeb78960ef69c80fded2d753a2
  name: pgbouncer
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-exporter@sha256:5cb8851d1de23010f774e8ff757c8bab4b6fa1f63c2fb93b7ae3a01239f07134
  name: PGEXPORTER
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-exporter@sha256:5cb8851d1de23010f774e8ff757c8bab4b6fa1f63c2fb93b7ae3a01239f07134
  name: pgexporter
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:2dc35b7c4a919830ed52ea0bd5802a3734d3181f011d56b255c5411e6e83bcc4
  name: POSTGRES_14_GIS_3.2
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:2dc35b7c4a919830ed52ea0bd5802a3734d3181f011d56b255c5411e6e83bcc4
  name: postgres_14_gis_3.2
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:333f49f6a2f6659752054d9848231cf15af82973f44c1e6d02c0fbcbf281f6f9
  name: POSTGRES_13_GIS_3.0
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:333f49f6a2f6659752054d9848231cf15af82973f44c1e6d02c0fbcbf281f6f9
  name: postgres_13_gis_3.0
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:a5e2bed850e50608b870782c4198f472e8771d106bd5915050457693422fdd3f
  name: POSTGRES_13_GIS_3.1
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:a5e2bed850e50608b870782c4198f472e8771d106bd5915050457693422fdd3f
  name: postgres_13_gis_3.1
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:a6d3ab3e15f79e06d6d067a5ac53e5f3e146d0fad21106d83f2144f1dcc0aaa8
  name: POSTGRES_14_GIS_3.1
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:a6d3ab3e15f79e06d6d067a5ac53e5f3e146d0fad21106d83f2144f1dcc0aaa8
  name: postgres_14_gis_3.1
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:a1ad0e56b80f9c1bc8c34cc4dddb3876d21ab44121b6e054f0e06a19cf99d3c3
  name: POSTGRES_13
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:a1ad0e56b80f9c1bc8c34cc4dddb3876d21ab44121b6e054f0e06a19cf99d3c3
  name: postgres_13
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:a599c6fe7b82412847b8f18752959303fa1a25854a98d0d4d2257b5dd7025961
  name: postgres_14
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:a599c6fe7b82412847b8f18752959303fa1a25854a98d0d4d2257b5dd7025961
  name: POSTGRES_14
- image: registry.connect.redhat.com/crunchydata/postgres-operator-bundle@sha256:4e2ad2ecd6f85cb2d511dd458a1dc8d0289caacb6415b006876a1d6ec52dfdd9
  name: ""
- image: registry.connect.redhat.com/crunchydata/postgres-operator@sha256:4ad944f4f01a85249aa7678521e61fe48ed150ac43f3c38f33b42f7a32eb9961
  name: operator
- image: registry.connect.redhat.com/crunchydata/postgres-operator@sha256:4ad944f4f01a85249aa7678521e61fe48ed150ac43f3c38f33b42f7a32eb9961
  name: postgres-operator-4ad944f4f01a85249aa7678521e61fe48ed150ac43f3c38f33b42f7a32eb9961-annotation
- image: registry.connect.redhat.com/crunchydata/postgres-operator@sha256:4ad944f4f01a85249aa7678521e61fe48ed150ac43f3c38f33b42f7a32eb9961
  name: postgres-operator
schema: olm.bundle
---
image: registry.connect.redhat.com/crunchydata/postgres-operator-bundle@sha256:8f6a61b0fad4ee741cff7c4725261f3f2ab0e393bc2a5e743525eb6dc0acd6eb
name: postgresoperator.v5.3.0
package: crunchy-postgres-operator
properties:
- type: olm.gvk
  value:
    group: postgres-operator.crunchydata.com
    kind: PostgresCluster
    version: v1beta1
- type: olm.package
  value:
    packageName: crunchy-postgres-operator
    version: 5.3.0
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "PostgresCluster",
            "metadata": {
              "name": "example"
            },
            "spec": {
              "instances": [
                {
                  "dataVolumeClaimSpec": {
                    "accessModes": [
                      "ReadWriteOnce"
                    ],
                    "resources": {
                      "requests": {
                        "storage": "1Gi"
                      }
                    }
                  },
                  "replicas": 1
                }
              ],
              "postgresVersion": 13
            }
          }
        ]
      capabilities: Auto Pilot
      categories: Database
      certified: "true"
      containerImage: registry.connect.redhat.com/crunchydata/postgres-operator@sha256:e52989e5a96bd29bbcdcb76b0d65bc293f96387b6aa9809dcd9a5278d9e42912
      createdAt: 2019-12-31 19:40Z
      description: Production Postgres Made Easy
      olm.properties: '[]'
      repository: https://github.com/CrunchyData/postgres-operator
      support: crunchydata.com
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: PostgresCluster is the Schema for the postgresclusters API
        displayName: Postgres Cluster
        kind: PostgresCluster
        name: postgresclusters.postgres-operator.crunchydata.com
        resources:
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: CronJob
          name: ""
          version: v1beta1
        - kind: Deployment
          name: ""
          version: v1
        - kind: Job
          name: ""
          version: v1
        - kind: PersistentVolumeClaim
          name: ""
          version: v1
        - kind: Secret
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: StatefulSet
          name: ""
          version: v1
        specDescriptors:
        - description: The image name to use for PostgreSQL containers. When omitted,
            the value comes from an operator environment variable. For standard PostgreSQL
            images, the format is RELATED_IMAGE_POSTGRES_{postgresVersion}, e.g. RELATED_IMAGE_POSTGRES_13.
            For PostGIS enabled PostgreSQL images, the format is RELATED_IMAGE_POSTGRES_{postgresVersion}_GIS_{postGISVersion},
            e.g. RELATED_IMAGE_POSTGRES_13_GIS_3.1.
          displayName: Image
          path: image
        - description: The major version of PostgreSQL installed in the PostgreSQL
            image
          displayName: Postgres Version
          path: postgresVersion
        - description: Specifies one or more sets of PostgreSQL pods that replicate
            data for this cluster.
          displayName: Instance Sets
          path: instances
        statusDescriptors:
        - description: 'conditions represent the observations of postgrescluster''s
            current state. Known .status.conditions.type are: "PersistentVolumeResizing",
            "Progressing", "ProxyAvailable"'
          displayName: Conditions
          path: conditions
          x-descriptors:
          - urn:alm:descriptor:io.kubernetes.conditions
        version: v1beta1
    description: |-
      [PGO](https://github.com/CrunchyData/postgres-operator), the
      [Postgres Operator](https://github.com/CrunchyData/postgres-operator) from
      [Crunchy Data](https://www.crunchydata.com), gives you a **declarative Postgres** solution that
      automatically manages your [PostgreSQL](https://www.postgresql.org) clusters.

      Designed for your GitOps workflows, it is [easy to get started](https://access.crunchydata.com/documentation/postgres-operator/v5/quickstart/)
      with Postgres on Kubernetes with PGO. Within a few moments, you can have a production grade Postgres
      cluster complete with high availability, disaster recovery, and monitoring, all over secure TLS communications.
      Even better, PGO lets you easily customize your Postgres cluster to tailor it to your workload!

      With conveniences like cloning Postgres clusters to using rolling updates to roll out disruptive
      changes with minimal downtime, PGO is ready to support your Postgres data at every stage of your
      release pipeline. Built for resiliency and uptime, PGO will keep your desired Postgres in a desired
      state so you do not need to worry about it.

      PGO is developed with many years of production experience in automating Postgres management on
      Kubernetes, providing a seamless cloud native Postgres solution to keep your data always available.

      - **PostgreSQL Cluster Provisioning**: [Create, Scale, & Delete PostgreSQL clusters with ease][provisioning],
        while fully customizing your Pods and PostgreSQL configuration!
      - **High-Availability**: Safe, automated failover backed by a [distributed consensus based high-availability solution][high-availability].
        Uses [Pod Anti-Affinity][k8s-anti-affinity] to help resiliency; you can configure how aggressive this can be!
        Failed primaries automatically heal, allowing for faster recovery time. You can even create regularly scheduled
        backups as well and set your backup retention policy
      - **Disaster Recovery**: [Backups][backups] and [restores][disaster-recovery] leverage the open source [pgBackRest][] utility and
        [includes support for full, incremental, and differential backups as well as efficient delta restores][backups].
        Set how long you want your backups retained for. Works great with very large databases!
      - **Monitoring**: [Track the health of your PostgreSQL clusters][monitoring] using the open source [pgMonitor][] library.
      - **Clone**: [Create new clusters from your existing clusters or backups][clone] with efficient data cloning.
      - **TLS**: All connections are over [TLS][tls]. You can also [bring your own TLS infrastructure][tls] if you do not want to use the provided defaults.
      - **Connection Pooling**: Advanced [connection pooling][pool] support using [pgBouncer][].
      - **Affinity and Tolerations**: Have your PostgreSQL clusters deployed to [Kubernetes Nodes][k8s-nodes] of your preference.
        Set your [pod anti-affinity][k8s-anti-affinity], node affinity, Pod tolerations and more rules to customize your deployment topology!
      - **Full Customizability**: Crunchy PostgreSQL for Kubernetes makes it easy to get your own PostgreSQL-as-a-Service up and running
        and fully customize your deployments, including:
          - Choose the resources for your Postgres cluster: [container resources and storage size][resize-cluster]. [Resize at any time][resize-cluster] with minimal disruption.
          - Use your own container image repository, including support `imagePullSecrets` and private repositories
          - [Customize your PostgreSQL configuration][customize-cluster]

      and much more!

      [backups]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/backups/
      [clone]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/disaster-recovery/#clone-a-postgres-cluster
      [customize-cluster]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/customize-cluster/
      [disaster-recovery]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/disaster-recovery/
      [high-availability]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/high-availability/
      [monitoring]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/monitoring/
      [pool]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/connection-pooling/
      [provisioning]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/create-cluster/
      [resize-cluster]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/resize-cluster/
      [tls]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/customize-cluster/#customize-tls

      [k8s-anti-affinity]: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#inter-pod-affinity-and-anti-affinity
      [k8s-nodes]: https://kubernetes.io/docs/concepts/architecture/nodes/

      [pgBackRest]: https://www.pgbackrest.org
      [pgBouncer]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/connection-pooling/
      [pgMonitor]: https://github.com/CrunchyData/pgmonitor


      ## Post-Installation

      ### Tutorial

      Want to [learn more about the PostgreSQL Operator][tutorial]? Browse through the [tutorial][] to learn more about what you can do!

      [tutorial]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial
    displayName: Crunchy Postgres for Kubernetes
    installModes:
    - supported: true
      type: OwnNamespace
    - supported: true
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - postgres
    - postgresql
    - database
    - sql
    - operator
    - crunchy data
    links:
    - name: Crunchy Data
      url: https://www.crunchydata.com/
    - name: Documentation
      url: https://access.crunchydata.com/documentation/postgres-operator/v5/
    maintainers:
    - email: info@crunchydata.com
      name: Crunchy Data
    maturity: stable
    minKubeVersion: 1.21.0
    provider:
      name: Crunchy Data
      url: https://www.crunchydata.com/
relatedImages:
- image: registry.connect.redhat.com/crunchydata/crunchy-pgadmin4@sha256:200a382564ded731ce7661ae59ce0c54883bbf2b2e156ff88bf160eb5254bc68
  name: pgadmin
- image: registry.connect.redhat.com/crunchydata/crunchy-pgadmin4@sha256:200a382564ded731ce7661ae59ce0c54883bbf2b2e156ff88bf160eb5254bc68
  name: PGADMIN
- image: registry.connect.redhat.com/crunchydata/crunchy-pgbackrest@sha256:cbeb0123e7439b12bece249b730eb367fcf5c834541273497c37057deedcdc58
  name: PGBACKREST
- image: registry.connect.redhat.com/crunchydata/crunchy-pgbackrest@sha256:cbeb0123e7439b12bece249b730eb367fcf5c834541273497c37057deedcdc58
  name: pgbackrest
- image: registry.connect.redhat.com/crunchydata/crunchy-pgbouncer@sha256:4123cbf0bff5e0c63e28fda0cd262a21cfcb36b3d4a5e7fa472aa2b7d24024e3
  name: PGBOUNCER
- image: registry.connect.redhat.com/crunchydata/crunchy-pgbouncer@sha256:4123cbf0bff5e0c63e28fda0cd262a21cfcb36b3d4a5e7fa472aa2b7d24024e3
  name: pgbouncer
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-exporter@sha256:fa3a2ac787eb73d54ba67bde72d832c184d2cbd58e5110026ea69acf409324fd
  name: pgexporter
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-exporter@sha256:fa3a2ac787eb73d54ba67bde72d832c184d2cbd58e5110026ea69acf409324fd
  name: PGEXPORTER
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:3b7bd0307e17cb5b5ad57dfba9fe832d0ac3574d884aa3b1cb56e62b142649b1
  name: postgres_15_gis_3.3
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:3b7bd0307e17cb5b5ad57dfba9fe832d0ac3574d884aa3b1cb56e62b142649b1
  name: POSTGRES_15_GIS_3.3
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:734e7af0dc3c5cc54f0f1fd9454cc560b281dc3c80eb80eab9f984fcdacd5ffd
  name: POSTGRES_13_GIS_3.0
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:734e7af0dc3c5cc54f0f1fd9454cc560b281dc3c80eb80eab9f984fcdacd5ffd
  name: postgres_13_gis_3.0
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:8108cd057c89f690def97f60bcc92618abcab0db1fc28de9818c0d5f795aeb79
  name: postgres_14_gis_3.3
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:8108cd057c89f690def97f60bcc92618abcab0db1fc28de9818c0d5f795aeb79
  name: POSTGRES_14_GIS_3.3
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:ae1ecf8df76838b8a857ed80164ce6eec9449cefa78aed34c29d653a370b8e3e
  name: POSTGRES_14_GIS_3.1
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:ae1ecf8df76838b8a857ed80164ce6eec9449cefa78aed34c29d653a370b8e3e
  name: postgres_14_gis_3.1
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:ccf8a67971818f768e1d620f5aaee7d7e61365ab67df1a09b446b84e54e0c868
  name: postgres_13_gis_3.1
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:ccf8a67971818f768e1d620f5aaee7d7e61365ab67df1a09b446b84e54e0c868
  name: POSTGRES_13_GIS_3.1
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:f6526f18ce8c070b6867084f768eb1b73fc398f0106bdbd8785d7d21f88d68a3
  name: postgres_14_gis_3.2
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:f6526f18ce8c070b6867084f768eb1b73fc398f0106bdbd8785d7d21f88d68a3
  name: POSTGRES_14_GIS_3.2
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:1c336e8a3a7447be70a19235b0e9bcd19663955c8f480949281f5d24463637e5
  name: postgres_13
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:1c336e8a3a7447be70a19235b0e9bcd19663955c8f480949281f5d24463637e5
  name: POSTGRES_13
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:9979c783d513b953b3d65bffc1777f366aadb9c9fbe77e4c5d1ae00eab8bf42a
  name: postgres_14
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:9979c783d513b953b3d65bffc1777f366aadb9c9fbe77e4c5d1ae00eab8bf42a
  name: POSTGRES_14
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:ab309c88316846b3e4aa8c29fefa6abc6273ac0dd1cb3357c3a79c2d9c2f885b
  name: postgres_15
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:ab309c88316846b3e4aa8c29fefa6abc6273ac0dd1cb3357c3a79c2d9c2f885b
  name: POSTGRES_15
- image: registry.connect.redhat.com/crunchydata/postgres-operator-bundle@sha256:8f6a61b0fad4ee741cff7c4725261f3f2ab0e393bc2a5e743525eb6dc0acd6eb
  name: ""
- image: registry.connect.redhat.com/crunchydata/postgres-operator@sha256:e52989e5a96bd29bbcdcb76b0d65bc293f96387b6aa9809dcd9a5278d9e42912
  name: operator
- image: registry.connect.redhat.com/crunchydata/postgres-operator@sha256:e52989e5a96bd29bbcdcb76b0d65bc293f96387b6aa9809dcd9a5278d9e42912
  name: postgres-operator-e52989e5a96bd29bbcdcb76b0d65bc293f96387b6aa9809dcd9a5278d9e42912-annotation
- image: registry.connect.redhat.com/crunchydata/postgres-operator@sha256:e52989e5a96bd29bbcdcb76b0d65bc293f96387b6aa9809dcd9a5278d9e42912
  name: postgres-operator
schema: olm.bundle
---
image: registry.connect.redhat.com/crunchydata/postgres-operator-bundle@sha256:bbf5998e893422c0b1da9613d252355a848836d0915bf68dd6fe3bdcea8ed4a6
name: postgresoperator.v5.4.0
package: crunchy-postgres-operator
properties:
- type: olm.gvk
  value:
    group: postgres-operator.crunchydata.com
    kind: PGUpgrade
    version: v1beta1
- type: olm.gvk
  value:
    group: postgres-operator.crunchydata.com
    kind: PostgresCluster
    version: v1beta1
- type: olm.package
  value:
    packageName: crunchy-postgres-operator
    version: 5.4.0
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "PGUpgrade",
            "metadata": {
              "name": "example-upgrade"
            },
            "spec": {
              "fromPostgresVersion": 14,
              "postgresClusterName": "example",
              "toPostgresVersion": 15
            }
          },
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "PostgresCluster",
            "metadata": {
              "name": "example"
            },
            "spec": {
              "backups": {
                "pgbackrest": {
                  "repos": [
                    {
                      "name": "repo1",
                      "volume": {
                        "volumeClaimSpec": {
                          "accessModes": [
                            "ReadWriteOnce"
                          ],
                          "resources": {
                            "requests": {
                              "storage": "1Gi"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              },
              "instances": [
                {
                  "dataVolumeClaimSpec": {
                    "accessModes": [
                      "ReadWriteOnce"
                    ],
                    "resources": {
                      "requests": {
                        "storage": "1Gi"
                      }
                    }
                  },
                  "replicas": 1
                }
              ],
              "postgresVersion": 15
            }
          }
        ]
      capabilities: Auto Pilot
      categories: Database
      certified: "true"
      containerImage: registry.connect.redhat.com/crunchydata/postgres-operator@sha256:5823649180433d66a25b5a6fe5f364eb27656fd196044a58e64ccb1e5a530b25
      createdAt: 2019-12-31 19:40Z
      description: Production Postgres Made Easy
      olm.properties: '[]'
      repository: https://github.com/CrunchyData/postgres-operator
      support: crunchydata.com
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: PGUpgrade is the Schema for the pgupgrades API
        displayName: PGUpgrade
        kind: PGUpgrade
        name: pgupgrades.postgres-operator.crunchydata.com
        version: v1beta1
      - description: PostgresCluster is the Schema for the postgresclusters API
        displayName: Postgres Cluster
        kind: PostgresCluster
        name: postgresclusters.postgres-operator.crunchydata.com
        resources:
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: CronJob
          name: ""
          version: v1beta1
        - kind: Deployment
          name: ""
          version: v1
        - kind: Job
          name: ""
          version: v1
        - kind: PersistentVolumeClaim
          name: ""
          version: v1
        - kind: Secret
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: StatefulSet
          name: ""
          version: v1
        specDescriptors:
        - description: The image name to use for PostgreSQL containers. When omitted,
            the value comes from an operator environment variable. For standard PostgreSQL
            images, the format is RELATED_IMAGE_POSTGRES_{postgresVersion}, e.g. RELATED_IMAGE_POSTGRES_13.
            For PostGIS enabled PostgreSQL images, the format is RELATED_IMAGE_POSTGRES_{postgresVersion}_GIS_{postGISVersion},
            e.g. RELATED_IMAGE_POSTGRES_13_GIS_3.1.
          displayName: Image
          path: image
        - description: The major version of PostgreSQL installed in the PostgreSQL
            image
          displayName: Postgres Version
          path: postgresVersion
        - description: Specifies one or more sets of PostgreSQL pods that replicate
            data for this cluster.
          displayName: Instance Sets
          path: instances
        statusDescriptors:
        - description: 'conditions represent the observations of postgrescluster''s
            current state. Known .status.conditions.type are: "PersistentVolumeResizing",
            "Progressing", "ProxyAvailable"'
          displayName: Conditions
          path: conditions
          x-descriptors:
          - urn:alm:descriptor:io.kubernetes.conditions
        version: v1beta1
    description: |-
      [PGO](https://github.com/CrunchyData/postgres-operator), the
      [Postgres Operator](https://github.com/CrunchyData/postgres-operator) from
      [Crunchy Data](https://www.crunchydata.com), gives you a **declarative Postgres** solution that
      automatically manages your [PostgreSQL](https://www.postgresql.org) clusters.

      Designed for your GitOps workflows, it is [easy to get started](https://access.crunchydata.com/documentation/postgres-operator/v5/quickstart/)
      with Postgres on Kubernetes with PGO. Within a few moments, you can have a production grade Postgres
      cluster complete with high availability, disaster recovery, and monitoring, all over secure TLS communications.
      Even better, PGO lets you easily customize your Postgres cluster to tailor it to your workload!

      With conveniences like cloning Postgres clusters to using rolling updates to roll out disruptive
      changes with minimal downtime, PGO is ready to support your Postgres data at every stage of your
      release pipeline. Built for resiliency and uptime, PGO will keep your desired Postgres in a desired
      state so you do not need to worry about it.

      PGO is developed with many years of production experience in automating Postgres management on
      Kubernetes, providing a seamless cloud native Postgres solution to keep your data always available.

      - **PostgreSQL Cluster Provisioning**: [Create, Scale, & Delete PostgreSQL clusters with ease][provisioning],
        while fully customizing your Pods and PostgreSQL configuration!
      - **High-Availability**: Safe, automated failover backed by a [distributed consensus based high-availability solution][high-availability].
        Uses [Pod Anti-Affinity][k8s-anti-affinity] to help resiliency; you can configure how aggressive this can be!
        Failed primaries automatically heal, allowing for faster recovery time. You can even create regularly scheduled
        backups as well and set your backup retention policy
      - **Disaster Recovery**: [Backups][backups] and [restores][disaster-recovery] leverage the open source [pgBackRest][] utility and
        [includes support for full, incremental, and differential backups as well as efficient delta restores][backups].
        Set how long you want your backups retained for. Works great with very large databases!
      - **Monitoring**: [Track the health of your PostgreSQL clusters][monitoring] using the open source [pgMonitor][] library.
      - **Clone**: [Create new clusters from your existing clusters or backups][clone] with efficient data cloning.
      - **TLS**: All connections are over [TLS][tls]. You can also [bring your own TLS infrastructure][tls] if you do not want to use the provided defaults.
      - **Connection Pooling**: Advanced [connection pooling][pool] support using [pgBouncer][].
      - **Affinity and Tolerations**: Have your PostgreSQL clusters deployed to [Kubernetes Nodes][k8s-nodes] of your preference.
        Set your [pod anti-affinity][k8s-anti-affinity], node affinity, Pod tolerations and more rules to customize your deployment topology!
      - **PostgreSQL Major Version Upgrades**: Perform a [PostgreSQL major version upgrade][major-version-upgrade] declaratively.
      - **Full Customizability**: Crunchy PostgreSQL for Kubernetes makes it easy to get your own PostgreSQL-as-a-Service up and running
        and fully customize your deployments, including:
          - Choose the resources for your Postgres cluster: [container resources and storage size][resize-cluster]. [Resize at any time][resize-cluster] with minimal disruption.
          - Use your own container image repository, including support `imagePullSecrets` and private repositories
          - [Customize your PostgreSQL configuration][customize-cluster]

      and much more!

      [backups]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/backups/
      [clone]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/disaster-recovery/#clone-a-postgres-cluster
      [customize-cluster]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/customize-cluster/
      [disaster-recovery]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/disaster-recovery/
      [high-availability]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/high-availability/
      [major-version-upgrade]: https://access.crunchydata.com/documentation/postgres-operator/v5/guides/major-postgres-version-upgrade/
      [monitoring]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/monitoring/
      [pool]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/connection-pooling/
      [provisioning]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/create-cluster/
      [resize-cluster]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/resize-cluster/
      [tls]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/customize-cluster/#customize-tls

      [k8s-anti-affinity]: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#inter-pod-affinity-and-anti-affinity
      [k8s-nodes]: https://kubernetes.io/docs/concepts/architecture/nodes/

      [pgBackRest]: https://www.pgbackrest.org
      [pgBouncer]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial/connection-pooling/
      [pgMonitor]: https://github.com/CrunchyData/pgmonitor


      ## Post-Installation

      ### Tutorial

      Want to [learn more about the PostgreSQL Operator][tutorial]? Browse through the [tutorial][] to learn more about what you can do!

      [tutorial]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorial
    displayName: Crunchy Postgres for Kubernetes
    installModes:
    - supported: true
      type: OwnNamespace
    - supported: true
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - postgres
    - postgresql
    - database
    - sql
    - operator
    - crunchy data
    links:
    - name: Crunchy Data
      url: https://www.crunchydata.com/
    - name: Documentation
      url: https://access.crunchydata.com/documentation/postgres-operator/v5/
    maintainers:
    - email: info@crunchydata.com
      name: Crunchy Data
    maturity: stable
    minKubeVersion: 1.23.0
    provider:
      name: Crunchy Data
      url: https://www.crunchydata.com/
relatedImages:
- image: registry.connect.redhat.com/crunchydata/crunchy-pgadmin4@sha256:a178f89423b3e1cf4142f53c7bb6d4c1df52e0d952918776e7367db7c8638aac
  name: PGADMIN
- image: registry.connect.redhat.com/crunchydata/crunchy-pgbackrest@sha256:6eff20810f8a2b6750871a2bdd63c602cc45c156569d35744c47c30a11b36df9
  name: PGBACKREST
- image: registry.connect.redhat.com/crunchydata/crunchy-pgbouncer@sha256:91d87a4df381cb4242fac05150518e6b1a2e64367e41a4d30b05992e5ef86a06
  name: PGBOUNCER
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-exporter@sha256:de86c7a9d0a8856b97d7ba10cb5253f98584f9d6ecdecd35669928d431ea5dc3
  name: PGEXPORTER
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:365ae2c17b22026799cc1accde9cf3f53c54c1370c10f57444c800e104af692c
  name: POSTGRES_14_GIS_3.1
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:46513b417887d3d068f342628bd516834275d1969669cb1539006e6b7955af0c
  name: POSTGRES_14_GIS_3.2
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:665c59befaf9dadc1fba52de624081695c09ae1bddc6453b396f256e1ae60101
  name: POSTGRES_14_GIS_3.3
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:b221a65b7b5f26a1e226d7aee7204c5c71c95db8bedfa9915d29b5f364cc6e2e
  name: POSTGRES_15_GIS_3.3
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:539f28b748263bb6bc0db2e59042b734e28a46e9dbe036de71d6604a5b386304
  name: POSTGRES_15
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:e212a3f6325d315b8adecb60417d9dadf7f1a00caefac5e326c5f38dbcb26471
  name: POSTGRES_14
- image: registry.connect.redhat.com/crunchydata/crunchy-upgrade@sha256:4560965120267a92cd0c9a03c01d9f51094a049ce62204a0b8c2d01aa171bb81
  name: PGUPGRADE
- image: registry.connect.redhat.com/crunchydata/postgres-operator-bundle@sha256:bbf5998e893422c0b1da9613d252355a848836d0915bf68dd6fe3bdcea8ed4a6
  name: ""
- image: registry.connect.redhat.com/crunchydata/postgres-operator@sha256:5823649180433d66a25b5a6fe5f364eb27656fd196044a58e64ccb1e5a530b25
  name: postgres-operator
schema: olm.bundle
---
image: registry.connect.redhat.com/crunchydata/postgres-operator-bundle@sha256:04f9ee947a9061a16daa070d576f410244ac7efe1d952f7e2779c2b1ffc586fd
name: postgresoperator.v5.4.1
package: crunchy-postgres-operator
properties:
- type: olm.gvk
  value:
    group: postgres-operator.crunchydata.com
    kind: PGUpgrade
    version: v1beta1
- type: olm.gvk
  value:
    group: postgres-operator.crunchydata.com
    kind: PostgresCluster
    version: v1beta1
- type: olm.package
  value:
    packageName: crunchy-postgres-operator
    version: 5.4.1
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "PGUpgrade",
            "metadata": {
              "name": "example-upgrade"
            },
            "spec": {
              "fromPostgresVersion": 14,
              "postgresClusterName": "example",
              "toPostgresVersion": 15
            }
          },
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "PostgresCluster",
            "metadata": {
              "name": "example"
            },
            "spec": {
              "backups": {
                "pgbackrest": {
                  "repos": [
                    {
                      "name": "repo1",
                      "volume": {
                        "volumeClaimSpec": {
                          "accessModes": [
                            "ReadWriteOnce"
                          ],
                          "resources": {
                            "requests": {
                              "storage": "1Gi"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              },
              "instances": [
                {
                  "dataVolumeClaimSpec": {
                    "accessModes": [
                      "ReadWriteOnce"
                    ],
                    "resources": {
                      "requests": {
                        "storage": "1Gi"
                      }
                    }
                  },
                  "replicas": 1
                }
              ],
              "postgresVersion": 15
            }
          }
        ]
      capabilities: Auto Pilot
      categories: Database
      certified: "true"
      containerImage: registry.connect.redhat.com/crunchydata/postgres-operator@sha256:707a7718017ee5f195e269c66275d731aa2412bc5115731c82b710dfb640037a
      createdAt: 2019-12-31 19:40Z
      description: Production Postgres Made Easy
      olm.properties: '[]'
      repository: https://github.com/CrunchyData/postgres-operator
      support: crunchydata.com
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: PGUpgrade is the Schema for the pgupgrades API
        displayName: PGUpgrade
        kind: PGUpgrade
        name: pgupgrades.postgres-operator.crunchydata.com
        version: v1beta1
      - description: PostgresCluster is the Schema for the postgresclusters API
        displayName: Postgres Cluster
        kind: PostgresCluster
        name: postgresclusters.postgres-operator.crunchydata.com
        resources:
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: CronJob
          name: ""
          version: v1beta1
        - kind: Deployment
          name: ""
          version: v1
        - kind: Job
          name: ""
          version: v1
        - kind: PersistentVolumeClaim
          name: ""
          version: v1
        - kind: Secret
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: StatefulSet
          name: ""
          version: v1
        specDescriptors:
        - description: The image name to use for PostgreSQL containers. When omitted,
            the value comes from an operator environment variable. For standard PostgreSQL
            images, the format is RELATED_IMAGE_POSTGRES_{postgresVersion}, e.g. RELATED_IMAGE_POSTGRES_13.
            For PostGIS enabled PostgreSQL images, the format is RELATED_IMAGE_POSTGRES_{postgresVersion}_GIS_{postGISVersion},
            e.g. RELATED_IMAGE_POSTGRES_13_GIS_3.1.
          displayName: Image
          path: image
        - description: The major version of PostgreSQL installed in the PostgreSQL
            image
          displayName: Postgres Version
          path: postgresVersion
        - description: Specifies one or more sets of PostgreSQL pods that replicate
            data for this cluster.
          displayName: Instance Sets
          path: instances
        statusDescriptors:
        - description: 'conditions represent the observations of postgrescluster''s
            current state. Known .status.conditions.type are: "PersistentVolumeResizing",
            "Progressing", "ProxyAvailable"'
          displayName: Conditions
          path: conditions
          x-descriptors:
          - urn:alm:descriptor:io.kubernetes.conditions
        version: v1beta1
    description: |-
      [PGO](https://github.com/CrunchyData/postgres-operator), the
      [Postgres Operator](https://github.com/CrunchyData/postgres-operator) from
      [Crunchy Data](https://www.crunchydata.com), gives you a **declarative Postgres** solution that
      automatically manages your [PostgreSQL](https://www.postgresql.org) clusters.

      Designed for your GitOps workflows, it is [easy to get started](https://access.crunchydata.com/documentation/postgres-operator/v5/quickstart/)
      with Postgres on Kubernetes with PGO. Within a few moments, you can have a production grade Postgres
      cluster complete with high availability, disaster recovery, and monitoring, all over secure TLS communications.
      Even better, PGO lets you easily customize your Postgres cluster to tailor it to your workload!

      With conveniences like cloning Postgres clusters to using rolling updates to roll out disruptive
      changes with minimal downtime, PGO is ready to support your Postgres data at every stage of your
      release pipeline. Built for resiliency and uptime, PGO will keep your desired Postgres in a desired
      state so you do not need to worry about it.

      PGO is developed with many years of production experience in automating Postgres management on
      Kubernetes, providing a seamless cloud native Postgres solution to keep your data always available.

      - **PostgreSQL Cluster Provisioning**: [Create, Scale, & Delete PostgreSQL clusters with ease][provisioning],
        while fully customizing your Pods and PostgreSQL configuration!
      - **High-Availability**: Safe, automated failover backed by a [distributed consensus based high-availability solution][high-availability].
        Uses [Pod Anti-Affinity][k8s-anti-affinity] to help resiliency; you can configure how aggressive this can be!
        Failed primaries automatically heal, allowing for faster recovery time. You can even create regularly scheduled
        backups as well and set your backup retention policy
      - **Disaster Recovery**: [Backups][backups] and [restores][disaster-recovery] leverage the open source [pgBackRest][] utility and
        [includes support for full, incremental, and differential backups as well as efficient delta restores][backups].
        Set how long you want your backups retained for. Works great with very large databases!
      - **Monitoring**: [Track the health of your PostgreSQL clusters][monitoring] using the open source [pgMonitor][] library.
      - **Clone**: [Create new clusters from your existing clusters or backups][clone] with efficient data cloning.
      - **TLS**: All connections are over [TLS][tls]. You can also [bring your own TLS infrastructure][tls] if you do not want to use the provided defaults.
      - **Connection Pooling**: Advanced [connection pooling][pool] support using [pgBouncer][pool].
      - **Affinity and Tolerations**: Have your PostgreSQL clusters deployed to [Kubernetes Nodes][k8s-nodes] of your preference.
        Set your [pod anti-affinity][k8s-anti-affinity], node affinity, Pod tolerations and more rules to customize your deployment topology!
      - **PostgreSQL Major Version Upgrades**: Perform a [PostgreSQL major version upgrade][major-version-upgrade] declaratively.
      - **Full Customizability**: Crunchy PostgreSQL for Kubernetes makes it easy to get your own PostgreSQL-as-a-Service up and running
        and fully customize your deployments, including:
          - Choose the resources for your Postgres cluster: [container resources and storage size][resize-cluster]. [Resize at any time][resize-cluster] with minimal disruption.
          - Use your own container image repository, including support `imagePullSecrets` and private repositories
          - [Customize your PostgreSQL configuration][customize-cluster]

      and much more!

      [backups]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/backups-disaster-recovery/backups
      [clone]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/backups-disaster-recovery/disaster-recovery#clone-a-postgres-cluster
      [customize-cluster]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/day-two/customize-cluster
      [disaster-recovery]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/backups-disaster-recovery/disaster-recovery
      [high-availability]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/day-two/high-availability
      [major-version-upgrade]: https://access.crunchydata.com/documentation/postgres-operator/latest/guides/major-postgres-version-upgrade
      [monitoring]: https://access.crunchydata.com/documentation/postgres-operator/latest/architecture/monitoring
      [pool]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/basic-setup/connection-pooling
      [provisioning]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/basic-setup/create-cluster
      [resize-cluster]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/cluster-management/resize-cluster
      [tls]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/day-two/customize-cluster#customize-tls

      [k8s-anti-affinity]: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#inter-pod-affinity-and-anti-affinity
      [k8s-nodes]: https://kubernetes.io/docs/concepts/architecture/nodes/

      [pgBackRest]: https://www.pgbackrest.org
      [pgMonitor]: https://github.com/CrunchyData/pgmonitor


      ## Post-Installation

      ### Tutorial

      Want to [learn more about the PostgreSQL Operator][tutorial]? Browse through the [tutorial][] to learn more about what you can do!

      [tutorial]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials
    displayName: Crunchy Postgres for Kubernetes
    installModes:
    - supported: true
      type: OwnNamespace
    - supported: true
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - postgres
    - postgresql
    - database
    - sql
    - operator
    - crunchy data
    links:
    - name: Crunchy Data
      url: https://www.crunchydata.com/
    - name: Documentation
      url: https://access.crunchydata.com/documentation/postgres-operator/v5/
    maintainers:
    - email: info@crunchydata.com
      name: Crunchy Data
    maturity: stable
    minKubeVersion: 1.23.0
    provider:
      name: Crunchy Data
      url: https://www.crunchydata.com/
relatedImages:
- image: registry.connect.redhat.com/crunchydata/crunchy-pgadmin4@sha256:e870ea2e6bc799723fc3310cb14efef750ef4db69bf50f0ecf36aaf1206a0435
  name: PGADMIN
- image: registry.connect.redhat.com/crunchydata/crunchy-pgbackrest@sha256:c9d36ed633e77611c2198acd423ce1eba5a0d1695ce38a1d8be85eb2360a66c0
  name: PGBACKREST
- image: registry.connect.redhat.com/crunchydata/crunchy-pgbouncer@sha256:902774e54e5d7cd754359faa937ee885eeb044878ef41f1f53779143bcb2b236
  name: PGBOUNCER
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-exporter@sha256:c9fd20d2f8a7633e24363b5621d0f73328da835af7c6ee5b04360a1647d57f3a
  name: PGEXPORTER
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:02625e511403c444fe2ae59d282021c891ceda51dd5553b8dd6f3f2d2091563d
  name: POSTGRES_15_GIS_3.3
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:1384f122bcfe3113d021f2e8eb74ddfdaa3db2c2dc32c598d51ef46b2cae5e7a
  name: POSTGRES_14_GIS_3.1
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:2e5d8e17c10ec5c4f8a6cd861b7afb4a4f295d8ca9a0c89d8e9311d9541c1cb1
  name: POSTGRES_14_GIS_3.3
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:f66a4747fb0e0915e67a5bc9fd24db0fbdb28a8120d64d471f2218207217afa7
  name: POSTGRES_14_GIS_3.2
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:072ce6268cc500aa797e7268338a9b15032695250ad39b4f303858b36ea21a84
  name: POSTGRES_14
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:9896d0a88f9f9db5da23074026c3108b7d8c8bdae3c0a1b1caea076b3b74a72c
  name: POSTGRES_15
- image: registry.connect.redhat.com/crunchydata/crunchy-upgrade@sha256:b725a34de5d5116f6f24602dd339c29cb075bb06f3d53856a54fc05ccd93dc9a
  name: PGUPGRADE
- image: registry.connect.redhat.com/crunchydata/postgres-operator-bundle@sha256:04f9ee947a9061a16daa070d576f410244ac7efe1d952f7e2779c2b1ffc586fd
  name: ""
- image: registry.connect.redhat.com/crunchydata/postgres-operator@sha256:707a7718017ee5f195e269c66275d731aa2412bc5115731c82b710dfb640037a
  name: postgres-operator
schema: olm.bundle
---
image: registry.connect.redhat.com/crunchydata/postgres-operator-bundle@sha256:f40ccaf4c9eb241bd4b6c1253eec6e05871a3eae6ee25902ad58e26057a8ff39
name: postgresoperator.v5.4.2
package: crunchy-postgres-operator
properties:
- type: olm.gvk
  value:
    group: postgres-operator.crunchydata.com
    kind: PGUpgrade
    version: v1beta1
- type: olm.gvk
  value:
    group: postgres-operator.crunchydata.com
    kind: PostgresCluster
    version: v1beta1
- type: olm.package
  value:
    packageName: crunchy-postgres-operator
    version: 5.4.2
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "PGUpgrade",
            "metadata": {
              "name": "example-upgrade"
            },
            "spec": {
              "fromPostgresVersion": 14,
              "postgresClusterName": "example",
              "toPostgresVersion": 15
            }
          },
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "PostgresCluster",
            "metadata": {
              "name": "example"
            },
            "spec": {
              "backups": {
                "pgbackrest": {
                  "repos": [
                    {
                      "name": "repo1",
                      "volume": {
                        "volumeClaimSpec": {
                          "accessModes": [
                            "ReadWriteOnce"
                          ],
                          "resources": {
                            "requests": {
                              "storage": "1Gi"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              },
              "instances": [
                {
                  "dataVolumeClaimSpec": {
                    "accessModes": [
                      "ReadWriteOnce"
                    ],
                    "resources": {
                      "requests": {
                        "storage": "1Gi"
                      }
                    }
                  },
                  "replicas": 1
                }
              ],
              "postgresVersion": 15
            }
          }
        ]
      capabilities: Auto Pilot
      categories: Database
      certified: "true"
      containerImage: registry.connect.redhat.com/crunchydata/postgres-operator@sha256:db635c5ade72445ad8cb20f65e79c7dbbc0ccd964eaf0a78c69b54eb24f09243
      createdAt: 2019-12-31 19:40Z
      description: Production Postgres Made Easy
      olm.properties: '[]'
      repository: https://github.com/CrunchyData/postgres-operator
      support: crunchydata.com
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: PGUpgrade is the Schema for the pgupgrades API
        displayName: PGUpgrade
        kind: PGUpgrade
        name: pgupgrades.postgres-operator.crunchydata.com
        version: v1beta1
      - description: PostgresCluster is the Schema for the postgresclusters API
        displayName: Postgres Cluster
        kind: PostgresCluster
        name: postgresclusters.postgres-operator.crunchydata.com
        resources:
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: CronJob
          name: ""
          version: v1beta1
        - kind: Deployment
          name: ""
          version: v1
        - kind: Job
          name: ""
          version: v1
        - kind: PersistentVolumeClaim
          name: ""
          version: v1
        - kind: Secret
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: StatefulSet
          name: ""
          version: v1
        specDescriptors:
        - description: The image name to use for PostgreSQL containers. When omitted,
            the value comes from an operator environment variable. For standard PostgreSQL
            images, the format is RELATED_IMAGE_POSTGRES_{postgresVersion}, e.g. RELATED_IMAGE_POSTGRES_13.
            For PostGIS enabled PostgreSQL images, the format is RELATED_IMAGE_POSTGRES_{postgresVersion}_GIS_{postGISVersion},
            e.g. RELATED_IMAGE_POSTGRES_13_GIS_3.1.
          displayName: Image
          path: image
        - description: The major version of PostgreSQL installed in the PostgreSQL
            image
          displayName: Postgres Version
          path: postgresVersion
        - description: Specifies one or more sets of PostgreSQL pods that replicate
            data for this cluster.
          displayName: Instance Sets
          path: instances
        statusDescriptors:
        - description: 'conditions represent the observations of postgrescluster''s
            current state. Known .status.conditions.type are: "PersistentVolumeResizing",
            "Progressing", "ProxyAvailable"'
          displayName: Conditions
          path: conditions
          x-descriptors:
          - urn:alm:descriptor:io.kubernetes.conditions
        version: v1beta1
    description: |-
      [PGO](https://github.com/CrunchyData/postgres-operator), the
      [Postgres Operator](https://github.com/CrunchyData/postgres-operator) from
      [Crunchy Data](https://www.crunchydata.com), gives you a **declarative Postgres** solution that
      automatically manages your [PostgreSQL](https://www.postgresql.org) clusters.

      Designed for your GitOps workflows, it is [easy to get started](https://access.crunchydata.com/documentation/postgres-operator/v5/quickstart/)
      with Postgres on Kubernetes with PGO. Within a few moments, you can have a production grade Postgres
      cluster complete with high availability, disaster recovery, and monitoring, all over secure TLS communications.
      Even better, PGO lets you easily customize your Postgres cluster to tailor it to your workload!

      With conveniences like cloning Postgres clusters to using rolling updates to roll out disruptive
      changes with minimal downtime, PGO is ready to support your Postgres data at every stage of your
      release pipeline. Built for resiliency and uptime, PGO will keep your desired Postgres in a desired
      state so you do not need to worry about it.

      PGO is developed with many years of production experience in automating Postgres management on
      Kubernetes, providing a seamless cloud native Postgres solution to keep your data always available.

      - **PostgreSQL Cluster Provisioning**: [Create, Scale, & Delete PostgreSQL clusters with ease][provisioning],
        while fully customizing your Pods and PostgreSQL configuration!
      - **High-Availability**: Safe, automated failover backed by a [distributed consensus based high-availability solution][high-availability].
        Uses [Pod Anti-Affinity][k8s-anti-affinity] to help resiliency; you can configure how aggressive this can be!
        Failed primaries automatically heal, allowing for faster recovery time. You can even create regularly scheduled
        backups as well and set your backup retention policy
      - **Disaster Recovery**: [Backups][backups] and [restores][disaster-recovery] leverage the open source [pgBackRest][] utility and
        [includes support for full, incremental, and differential backups as well as efficient delta restores][backups].
        Set how long you want your backups retained for. Works great with very large databases!
      - **Monitoring**: [Track the health of your PostgreSQL clusters][monitoring] using the open source [pgMonitor][] library.
      - **Clone**: [Create new clusters from your existing clusters or backups][clone] with efficient data cloning.
      - **TLS**: All connections are over [TLS][tls]. You can also [bring your own TLS infrastructure][tls] if you do not want to use the provided defaults.
      - **Connection Pooling**: Advanced [connection pooling][pool] support using [pgBouncer][pool].
      - **Affinity and Tolerations**: Have your PostgreSQL clusters deployed to [Kubernetes Nodes][k8s-nodes] of your preference.
        Set your [pod anti-affinity][k8s-anti-affinity], node affinity, Pod tolerations and more rules to customize your deployment topology!
      - **PostgreSQL Major Version Upgrades**: Perform a [PostgreSQL major version upgrade][major-version-upgrade] declaratively.
      - **Full Customizability**: Crunchy PostgreSQL for Kubernetes makes it easy to get your own PostgreSQL-as-a-Service up and running
        and fully customize your deployments, including:
          - Choose the resources for your Postgres cluster: [container resources and storage size][resize-cluster]. [Resize at any time][resize-cluster] with minimal disruption.
          - Use your own container image repository, including support `imagePullSecrets` and private repositories
          - [Customize your PostgreSQL configuration][customize-cluster]

      and much more!

      [backups]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/backups-disaster-recovery/backups
      [clone]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/backups-disaster-recovery/disaster-recovery#clone-a-postgres-cluster
      [customize-cluster]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/day-two/customize-cluster
      [disaster-recovery]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/backups-disaster-recovery/disaster-recovery
      [high-availability]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/day-two/high-availability
      [major-version-upgrade]: https://access.crunchydata.com/documentation/postgres-operator/latest/guides/major-postgres-version-upgrade
      [monitoring]: https://access.crunchydata.com/documentation/postgres-operator/latest/architecture/monitoring
      [pool]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/basic-setup/connection-pooling
      [provisioning]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/basic-setup/create-cluster
      [resize-cluster]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/cluster-management/resize-cluster
      [tls]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/day-two/customize-cluster#customize-tls

      [k8s-anti-affinity]: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#inter-pod-affinity-and-anti-affinity
      [k8s-nodes]: https://kubernetes.io/docs/concepts/architecture/nodes/

      [pgBackRest]: https://www.pgbackrest.org
      [pgMonitor]: https://github.com/CrunchyData/pgmonitor


      ## Post-Installation

      ### Tutorial

      Want to [learn more about the PostgreSQL Operator][tutorial]? Browse through the [tutorial][] to learn more about what you can do!

      [tutorial]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials
    displayName: Crunchy Postgres for Kubernetes
    installModes:
    - supported: true
      type: OwnNamespace
    - supported: true
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - postgres
    - postgresql
    - database
    - sql
    - operator
    - crunchy data
    links:
    - name: Crunchy Data
      url: https://www.crunchydata.com/
    - name: Documentation
      url: https://access.crunchydata.com/documentation/postgres-operator/v5/
    maintainers:
    - email: info@crunchydata.com
      name: Crunchy Data
    maturity: stable
    minKubeVersion: 1.23.0
    provider:
      name: Crunchy Data
      url: https://www.crunchydata.com/
relatedImages:
- image: registry.connect.redhat.com/crunchydata/crunchy-pgadmin4@sha256:0ef89c7e781dca5f8f7e4d2289b40632a02c6098ef07f0c97943755b85eff606
  name: PGADMIN
- image: registry.connect.redhat.com/crunchydata/crunchy-pgbackrest@sha256:f56bed69095274a1977a6d2df901e67e5c272263daf6fd6ff445c42c0ea9fcff
  name: PGBACKREST
- image: registry.connect.redhat.com/crunchydata/crunchy-pgbouncer@sha256:ef821378a27708cef348fa24a346bbd394baf815e1cf4bbaa90f6007076eee52
  name: PGBOUNCER
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-exporter@sha256:d1ab845e5736fbd830bc5b11dcf5ef47ecf248fc39c4423299ec3b27bb3d6b5b
  name: PGEXPORTER
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:9c0adf4b565adf3821a6b62988452b4f6fdacdf504bd2f43ee9f2973fe5e1f25
  name: POSTGRES_15_GIS_3.3
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:a34476cffcd62117d1ab275469de41a1473033612471e85b677be5b1b8a80572
  name: POSTGRES_14_GIS_3.3
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:b3b963fe6741b9ee82bbe27091168d41eeec79f9f22a50df6b773fc47866dfa2
  name: POSTGRES_14_GIS_3.2
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:f03b2a1a0d9e4b0536aeeedebd399583fb6b893cf1a683f7d69789e5dde514ae
  name: POSTGRES_14_GIS_3.1
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:2ec4080242cb32ae84da85fb89cec73331eb49cbec44622ed112e9f2d9e4db9b
  name: POSTGRES_14
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:8e584662bf14ae57389cc208242ccaf9a8a3baa0f52fc4bd1c0715f5ab8dd534
  name: POSTGRES_15
- image: registry.connect.redhat.com/crunchydata/crunchy-upgrade@sha256:886d9e94e19c88d0f416817d50fb490343f363694983acdc8802e221a7cf3f29
  name: PGUPGRADE
- image: registry.connect.redhat.com/crunchydata/postgres-operator-bundle@sha256:f40ccaf4c9eb241bd4b6c1253eec6e05871a3eae6ee25902ad58e26057a8ff39
  name: ""
- image: registry.connect.redhat.com/crunchydata/postgres-operator@sha256:db635c5ade72445ad8cb20f65e79c7dbbc0ccd964eaf0a78c69b54eb24f09243
  name: postgres-operator
schema: olm.bundle
---
image: registry.connect.redhat.com/crunchydata/postgres-operator-bundle@sha256:2d73562ab8e6c4c234848a93848985ccb8b7293b4d0e5b8e602636f0ac3d4ddc
name: postgresoperator.v5.4.3
package: crunchy-postgres-operator
properties:
- type: olm.gvk
  value:
    group: postgres-operator.crunchydata.com
    kind: PGUpgrade
    version: v1beta1
- type: olm.gvk
  value:
    group: postgres-operator.crunchydata.com
    kind: PostgresCluster
    version: v1beta1
- type: olm.package
  value:
    packageName: crunchy-postgres-operator
    version: 5.4.3
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "PGUpgrade",
            "metadata": {
              "name": "example-upgrade"
            },
            "spec": {
              "fromPostgresVersion": 14,
              "postgresClusterName": "example",
              "toPostgresVersion": 15
            }
          },
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "PostgresCluster",
            "metadata": {
              "name": "example"
            },
            "spec": {
              "backups": {
                "pgbackrest": {
                  "repos": [
                    {
                      "name": "repo1",
                      "volume": {
                        "volumeClaimSpec": {
                          "accessModes": [
                            "ReadWriteOnce"
                          ],
                          "resources": {
                            "requests": {
                              "storage": "1Gi"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              },
              "instances": [
                {
                  "dataVolumeClaimSpec": {
                    "accessModes": [
                      "ReadWriteOnce"
                    ],
                    "resources": {
                      "requests": {
                        "storage": "1Gi"
                      }
                    }
                  },
                  "replicas": 1
                }
              ],
              "postgresVersion": 15
            }
          }
        ]
      capabilities: Auto Pilot
      categories: Database
      certified: "true"
      containerImage: registry.connect.redhat.com/crunchydata/postgres-operator@sha256:0bdcb22085fd789e4f214264f61db16510859a8ced731f39beb71219077bcf2d
      createdAt: 2019-12-31 19:40Z
      description: Production Postgres Made Easy
      olm.properties: '[]'
      repository: https://github.com/CrunchyData/postgres-operator
      support: crunchydata.com
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: PGUpgrade is the Schema for the pgupgrades API
        displayName: PGUpgrade
        kind: PGUpgrade
        name: pgupgrades.postgres-operator.crunchydata.com
        version: v1beta1
      - description: PostgresCluster is the Schema for the postgresclusters API
        displayName: Postgres Cluster
        kind: PostgresCluster
        name: postgresclusters.postgres-operator.crunchydata.com
        resources:
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: CronJob
          name: ""
          version: v1beta1
        - kind: Deployment
          name: ""
          version: v1
        - kind: Job
          name: ""
          version: v1
        - kind: PersistentVolumeClaim
          name: ""
          version: v1
        - kind: Secret
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: StatefulSet
          name: ""
          version: v1
        specDescriptors:
        - description: The image name to use for PostgreSQL containers. When omitted,
            the value comes from an operator environment variable. For standard PostgreSQL
            images, the format is RELATED_IMAGE_POSTGRES_{postgresVersion}, e.g. RELATED_IMAGE_POSTGRES_13.
            For PostGIS enabled PostgreSQL images, the format is RELATED_IMAGE_POSTGRES_{postgresVersion}_GIS_{postGISVersion},
            e.g. RELATED_IMAGE_POSTGRES_13_GIS_3.1.
          displayName: Image
          path: image
        - description: The major version of PostgreSQL installed in the PostgreSQL
            image
          displayName: Postgres Version
          path: postgresVersion
        - description: Specifies one or more sets of PostgreSQL pods that replicate
            data for this cluster.
          displayName: Instance Sets
          path: instances
        statusDescriptors:
        - description: 'conditions represent the observations of postgrescluster''s
            current state. Known .status.conditions.type are: "PersistentVolumeResizing",
            "Progressing", "ProxyAvailable"'
          displayName: Conditions
          path: conditions
          x-descriptors:
          - urn:alm:descriptor:io.kubernetes.conditions
        version: v1beta1
    description: |-
      [PGO](https://github.com/CrunchyData/postgres-operator), the
      [Postgres Operator](https://github.com/CrunchyData/postgres-operator) from
      [Crunchy Data](https://www.crunchydata.com), gives you a **declarative Postgres** solution that
      automatically manages your [PostgreSQL](https://www.postgresql.org) clusters.

      Designed for your GitOps workflows, it is [easy to get started](https://access.crunchydata.com/documentation/postgres-operator/v5/quickstart/)
      with Postgres on Kubernetes with PGO. Within a few moments, you can have a production grade Postgres
      cluster complete with high availability, disaster recovery, and monitoring, all over secure TLS communications.
      Even better, PGO lets you easily customize your Postgres cluster to tailor it to your workload!

      With conveniences like cloning Postgres clusters to using rolling updates to roll out disruptive
      changes with minimal downtime, PGO is ready to support your Postgres data at every stage of your
      release pipeline. Built for resiliency and uptime, PGO will keep your desired Postgres in a desired
      state so you do not need to worry about it.

      PGO is developed with many years of production experience in automating Postgres management on
      Kubernetes, providing a seamless cloud native Postgres solution to keep your data always available.

      - **PostgreSQL Cluster Provisioning**: [Create, Scale, & Delete PostgreSQL clusters with ease][provisioning],
        while fully customizing your Pods and PostgreSQL configuration!
      - **High-Availability**: Safe, automated failover backed by a [distributed consensus based high-availability solution][high-availability].
        Uses [Pod Anti-Affinity][k8s-anti-affinity] to help resiliency; you can configure how aggressive this can be!
        Failed primaries automatically heal, allowing for faster recovery time. You can even create regularly scheduled
        backups as well and set your backup retention policy
      - **Disaster Recovery**: [Backups][backups] and [restores][disaster-recovery] leverage the open source [pgBackRest][] utility and
        [includes support for full, incremental, and differential backups as well as efficient delta restores][backups].
        Set how long you want your backups retained for. Works great with very large databases!
      - **Monitoring**: [Track the health of your PostgreSQL clusters][monitoring] using the open source [pgMonitor][] library.
      - **Clone**: [Create new clusters from your existing clusters or backups][clone] with efficient data cloning.
      - **TLS**: All connections are over [TLS][tls]. You can also [bring your own TLS infrastructure][tls] if you do not want to use the provided defaults.
      - **Connection Pooling**: Advanced [connection pooling][pool] support using [pgBouncer][pool].
      - **Affinity and Tolerations**: Have your PostgreSQL clusters deployed to [Kubernetes Nodes][k8s-nodes] of your preference.
        Set your [pod anti-affinity][k8s-anti-affinity], node affinity, Pod tolerations and more rules to customize your deployment topology!
      - **PostgreSQL Major Version Upgrades**: Perform a [PostgreSQL major version upgrade][major-version-upgrade] declaratively.
      - **Full Customizability**: Crunchy PostgreSQL for Kubernetes makes it easy to get your own PostgreSQL-as-a-Service up and running
        and fully customize your deployments, including:
          - Choose the resources for your Postgres cluster: [container resources and storage size][resize-cluster]. [Resize at any time][resize-cluster] with minimal disruption.
          - Use your own container image repository, including support `imagePullSecrets` and private repositories
          - [Customize your PostgreSQL configuration][customize-cluster]

      and much more!

      [backups]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/backups-disaster-recovery/backups
      [clone]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/backups-disaster-recovery/disaster-recovery#clone-a-postgres-cluster
      [customize-cluster]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/day-two/customize-cluster
      [disaster-recovery]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/backups-disaster-recovery/disaster-recovery
      [high-availability]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/day-two/high-availability
      [major-version-upgrade]: https://access.crunchydata.com/documentation/postgres-operator/latest/guides/major-postgres-version-upgrade
      [monitoring]: https://access.crunchydata.com/documentation/postgres-operator/latest/architecture/monitoring
      [pool]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/basic-setup/connection-pooling
      [provisioning]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/basic-setup/create-cluster
      [resize-cluster]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/cluster-management/resize-cluster
      [tls]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/day-two/customize-cluster#customize-tls

      [k8s-anti-affinity]: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#inter-pod-affinity-and-anti-affinity
      [k8s-nodes]: https://kubernetes.io/docs/concepts/architecture/nodes/

      [pgBackRest]: https://www.pgbackrest.org
      [pgMonitor]: https://github.com/CrunchyData/pgmonitor


      ## Post-Installation

      ### Tutorial

      Want to [learn more about the PostgreSQL Operator][tutorial]? Browse through the [tutorial][] to learn more about what you can do!

      [tutorial]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials
    displayName: Crunchy Postgres for Kubernetes
    installModes:
    - supported: true
      type: OwnNamespace
    - supported: true
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - postgres
    - postgresql
    - database
    - sql
    - operator
    - crunchy data
    links:
    - name: Crunchy Data
      url: https://www.crunchydata.com/
    - name: Documentation
      url: https://access.crunchydata.com/documentation/postgres-operator/v5/
    maintainers:
    - email: info@crunchydata.com
      name: Crunchy Data
    maturity: stable
    minKubeVersion: 1.23.0
    provider:
      name: Crunchy Data
      url: https://www.crunchydata.com/
relatedImages:
- image: registry.connect.redhat.com/crunchydata/crunchy-pgadmin4@sha256:b7fc72d70036ef56fcba95263eeeeac3f90d9c59063eb305ab69d1a685be2e4e
  name: PGADMIN
- image: registry.connect.redhat.com/crunchydata/crunchy-pgbackrest@sha256:94a6edfd3f1a5ee863b1b7ffedd02204ccc941bb55958ad75300edaaa478ca65
  name: PGBACKREST
- image: registry.connect.redhat.com/crunchydata/crunchy-pgbouncer@sha256:e72b718cee8e28facff899810ac2743d9b06f8ed0f2610179ba3f443e686e3cf
  name: PGBOUNCER
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-exporter@sha256:ab06e72dd6c2941f52928d2a6aea89869edf6cc6b0b31e5e115d09de6d563079
  name: PGEXPORTER
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:087911c3ec414aa44bbbd6e7c06534324f1de92b649f1ad4f2b884446af398a7
  name: POSTGRES_15_GIS_3.3
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:28f92d6f66dfd79574d70da73f6b768e16d8540fc0a300e79d1b8b80cf86df29
  name: POSTGRES_16_GIS_3.3
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:5e37342c28e14bce73141076ee106dcf2dca2f79294c9f63bb15bf20c7958072
  name: POSTGRES_14_GIS_3.1
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:c4d96b7f2650819459e97d0086cd0bc14360d2bf7b22dc63b12527d368496291
  name: POSTGRES_16_GIS_3.4
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:d35403721ecbfbae7d2e1532e78886bbbb2f45c47b0d8d221ded0a3f78ff1835
  name: POSTGRES_14_GIS_3.2
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:d574fae19f569c9738d46c3d098e58bf884f6ed8d779959d4d60dcc63f9698dc
  name: POSTGRES_14_GIS_3.3
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:02747d257a9c5c36564f6696c717991509270019a3a90371386feee4b4d2b486
  name: POSTGRES_16
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:6f9249dc0a706f75a45346a5970590f749f8f0d20dbe808594d50302c86f56db
  name: POSTGRES_15
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:90af2f57901d4653ba3ad961e836f91462efd99d8eca074984a5869e34b55a9e
  name: POSTGRES_14
- image: registry.connect.redhat.com/crunchydata/crunchy-upgrade@sha256:f50ac7445a4a0ed19cbcb56513ea9fe6edcb9f5ac61af5a6a9d525b853e8c0c9
  name: PGUPGRADE
- image: registry.connect.redhat.com/crunchydata/postgres-operator-bundle@sha256:2d73562ab8e6c4c234848a93848985ccb8b7293b4d0e5b8e602636f0ac3d4ddc
  name: ""
- image: registry.connect.redhat.com/crunchydata/postgres-operator@sha256:0bdcb22085fd789e4f214264f61db16510859a8ced731f39beb71219077bcf2d
  name: postgres-operator
schema: olm.bundle
---
image: registry.connect.redhat.com/crunchydata/postgres-operator-bundle@sha256:2a9159875df4c267d0f6e2919b2e15132940edc88ff071c10353f93aaf8c5517
name: postgresoperator.v5.4.4
package: crunchy-postgres-operator
properties:
- type: olm.gvk
  value:
    group: postgres-operator.crunchydata.com
    kind: PGUpgrade
    version: v1beta1
- type: olm.gvk
  value:
    group: postgres-operator.crunchydata.com
    kind: PostgresCluster
    version: v1beta1
- type: olm.package
  value:
    packageName: crunchy-postgres-operator
    version: 5.4.4
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "PGUpgrade",
            "metadata": {
              "name": "example-upgrade"
            },
            "spec": {
              "fromPostgresVersion": 14,
              "postgresClusterName": "example",
              "toPostgresVersion": 15
            }
          },
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "PostgresCluster",
            "metadata": {
              "name": "example"
            },
            "spec": {
              "backups": {
                "pgbackrest": {
                  "repos": [
                    {
                      "name": "repo1",
                      "volume": {
                        "volumeClaimSpec": {
                          "accessModes": [
                            "ReadWriteOnce"
                          ],
                          "resources": {
                            "requests": {
                              "storage": "1Gi"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              },
              "instances": [
                {
                  "dataVolumeClaimSpec": {
                    "accessModes": [
                      "ReadWriteOnce"
                    ],
                    "resources": {
                      "requests": {
                        "storage": "1Gi"
                      }
                    }
                  },
                  "replicas": 1
                }
              ],
              "postgresVersion": 15
            }
          }
        ]
      capabilities: Auto Pilot
      categories: Database
      certified: "true"
      containerImage: registry.connect.redhat.com/crunchydata/postgres-operator@sha256:15b0c394d81cda9958030607062cc0e37877fd6f21fbe847e3e02fe8f496f115
      createdAt: 2019-12-31 19:40Z
      description: Production Postgres Made Easy
      olm.properties: '[]'
      repository: https://github.com/CrunchyData/postgres-operator
      support: crunchydata.com
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: PGUpgrade is the Schema for the pgupgrades API
        displayName: PGUpgrade
        kind: PGUpgrade
        name: pgupgrades.postgres-operator.crunchydata.com
        version: v1beta1
      - description: PostgresCluster is the Schema for the postgresclusters API
        displayName: Postgres Cluster
        kind: PostgresCluster
        name: postgresclusters.postgres-operator.crunchydata.com
        resources:
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: CronJob
          name: ""
          version: v1beta1
        - kind: Deployment
          name: ""
          version: v1
        - kind: Job
          name: ""
          version: v1
        - kind: PersistentVolumeClaim
          name: ""
          version: v1
        - kind: Secret
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: StatefulSet
          name: ""
          version: v1
        specDescriptors:
        - description: The image name to use for PostgreSQL containers. When omitted,
            the value comes from an operator environment variable. For standard PostgreSQL
            images, the format is RELATED_IMAGE_POSTGRES_{postgresVersion}, e.g. RELATED_IMAGE_POSTGRES_13.
            For PostGIS enabled PostgreSQL images, the format is RELATED_IMAGE_POSTGRES_{postgresVersion}_GIS_{postGISVersion},
            e.g. RELATED_IMAGE_POSTGRES_13_GIS_3.1.
          displayName: Image
          path: image
        - description: The major version of PostgreSQL installed in the PostgreSQL
            image
          displayName: Postgres Version
          path: postgresVersion
        - description: Specifies one or more sets of PostgreSQL pods that replicate
            data for this cluster.
          displayName: Instance Sets
          path: instances
        statusDescriptors:
        - description: 'conditions represent the observations of postgrescluster''s
            current state. Known .status.conditions.type are: "PersistentVolumeResizing",
            "Progressing", "ProxyAvailable"'
          displayName: Conditions
          path: conditions
          x-descriptors:
          - urn:alm:descriptor:io.kubernetes.conditions
        version: v1beta1
    description: |-
      [PGO](https://github.com/CrunchyData/postgres-operator), the
      [Postgres Operator](https://github.com/CrunchyData/postgres-operator) from
      [Crunchy Data](https://www.crunchydata.com), gives you a **declarative Postgres** solution that
      automatically manages your [PostgreSQL](https://www.postgresql.org) clusters.

      Designed for your GitOps workflows, it is [easy to get started](https://access.crunchydata.com/documentation/postgres-operator/v5/quickstart/)
      with Postgres on Kubernetes with PGO. Within a few moments, you can have a production grade Postgres
      cluster complete with high availability, disaster recovery, and monitoring, all over secure TLS communications.
      Even better, PGO lets you easily customize your Postgres cluster to tailor it to your workload!

      With conveniences like cloning Postgres clusters to using rolling updates to roll out disruptive
      changes with minimal downtime, PGO is ready to support your Postgres data at every stage of your
      release pipeline. Built for resiliency and uptime, PGO will keep your desired Postgres in a desired
      state so you do not need to worry about it.

      PGO is developed with many years of production experience in automating Postgres management on
      Kubernetes, providing a seamless cloud native Postgres solution to keep your data always available.

      - **PostgreSQL Cluster Provisioning**: [Create, Scale, & Delete PostgreSQL clusters with ease][provisioning],
        while fully customizing your Pods and PostgreSQL configuration!
      - **High-Availability**: Safe, automated failover backed by a [distributed consensus based high-availability solution][high-availability].
        Uses [Pod Anti-Affinity][k8s-anti-affinity] to help resiliency; you can configure how aggressive this can be!
        Failed primaries automatically heal, allowing for faster recovery time. You can even create regularly scheduled
        backups as well and set your backup retention policy
      - **Disaster Recovery**: [Backups][backups] and [restores][disaster-recovery] leverage the open source [pgBackRest][] utility and
        [includes support for full, incremental, and differential backups as well as efficient delta restores][backups].
        Set how long you want your backups retained for. Works great with very large databases!
      - **Monitoring**: [Track the health of your PostgreSQL clusters][monitoring] using the open source [pgMonitor][] library.
      - **Clone**: [Create new clusters from your existing clusters or backups][clone] with efficient data cloning.
      - **TLS**: All connections are over [TLS][tls]. You can also [bring your own TLS infrastructure][tls] if you do not want to use the provided defaults.
      - **Connection Pooling**: Advanced [connection pooling][pool] support using [pgBouncer][pool].
      - **Affinity and Tolerations**: Have your PostgreSQL clusters deployed to [Kubernetes Nodes][k8s-nodes] of your preference.
        Set your [pod anti-affinity][k8s-anti-affinity], node affinity, Pod tolerations and more rules to customize your deployment topology!
      - **PostgreSQL Major Version Upgrades**: Perform a [PostgreSQL major version upgrade][major-version-upgrade] declaratively.
      - **Full Customizability**: Crunchy PostgreSQL for Kubernetes makes it easy to get your own PostgreSQL-as-a-Service up and running
        and fully customize your deployments, including:
          - Choose the resources for your Postgres cluster: [container resources and storage size][resize-cluster]. [Resize at any time][resize-cluster] with minimal disruption.
          - Use your own container image repository, including support `imagePullSecrets` and private repositories
          - [Customize your PostgreSQL configuration][customize-cluster]

      and much more!

      [backups]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/backups-disaster-recovery/backups
      [clone]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/backups-disaster-recovery/disaster-recovery#clone-a-postgres-cluster
      [customize-cluster]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/day-two/customize-cluster
      [disaster-recovery]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/backups-disaster-recovery/disaster-recovery
      [high-availability]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/day-two/high-availability
      [major-version-upgrade]: https://access.crunchydata.com/documentation/postgres-operator/latest/guides/major-postgres-version-upgrade
      [monitoring]: https://access.crunchydata.com/documentation/postgres-operator/latest/architecture/monitoring
      [pool]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/basic-setup/connection-pooling
      [provisioning]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/basic-setup/create-cluster
      [resize-cluster]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/cluster-management/resize-cluster
      [tls]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/day-two/customize-cluster#customize-tls

      [k8s-anti-affinity]: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#inter-pod-affinity-and-anti-affinity
      [k8s-nodes]: https://kubernetes.io/docs/concepts/architecture/nodes/

      [pgBackRest]: https://www.pgbackrest.org
      [pgMonitor]: https://github.com/CrunchyData/pgmonitor


      ## Post-Installation

      ### Tutorial

      Want to [learn more about the PostgreSQL Operator][tutorial]? Browse through the [tutorial][] to learn more about what you can do!

      [tutorial]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials
    displayName: Crunchy Postgres for Kubernetes
    installModes:
    - supported: true
      type: OwnNamespace
    - supported: true
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - postgres
    - postgresql
    - database
    - sql
    - operator
    - crunchy data
    links:
    - name: Crunchy Data
      url: https://www.crunchydata.com/
    - name: Documentation
      url: https://access.crunchydata.com/documentation/postgres-operator/v5/
    maintainers:
    - email: info@crunchydata.com
      name: Crunchy Data
    maturity: stable
    minKubeVersion: 1.23.0
    provider:
      name: Crunchy Data
      url: https://www.crunchydata.com/
relatedImages:
- image: registry.connect.redhat.com/crunchydata/crunchy-pgadmin4@sha256:0a510c653804a45af3efba796b89c7f5d4f8e247baa91630c02e197cef89f59a
  name: PGADMIN
- image: registry.connect.redhat.com/crunchydata/crunchy-pgbackrest@sha256:eb70fa35dfa4e66722832e8a857ebec51d7b30692093bf74f307b650b3bf4078
  name: PGBACKREST
- image: registry.connect.redhat.com/crunchydata/crunchy-pgbouncer@sha256:b673b303d4e08036314407120c364d7ac18b79b2a4e0c953b9b6cdd463e9e9f7
  name: PGBOUNCER
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-exporter@sha256:f10fb9934179e045b0243e382f381d7fd3896f14fc356bf0ee0962ea0f630400
  name: PGEXPORTER
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:413019159543e5acd7e797a25af2e4436266752bb59e2e8573461b6eb10bab1e
  name: POSTGRES_14_GIS_3.1
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:453a427171dd9b70b01e4e0afd58470f5386fa6d3c6f6d79d47c3433a3e7bb0b
  name: POSTGRES_15_GIS_3.3
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:6d8f27e61b10d4bb90d4032f40c04697eb57fb09af00227a88133851ca7e3585
  name: POSTGRES_16_GIS_3.4
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:790941b114502c2ff107787510706846f2fba6082ad3e6060fed6748965b5433
  name: POSTGRES_14_GIS_3.3
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:7ca52ee91b16b430b4c8e78aa1223faaab0581f7ec6e11647a7ab4a029efeaaa
  name: POSTGRES_16_GIS_3.3
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:9b58512afcbc5a4270ec998eee5b02d7e034ccce7a7e736476b1abb8e0997cfd
  name: POSTGRES_14_GIS_3.2
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:7ff72b8a3c69af45db6e4611b8994c7f04ba4adba3e719b63b09414cc4098387
  name: POSTGRES_14
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:e929789a774bb401cf38eed73080d5fd9917bd2d3f545f6172b83c8a8ebbe0d3
  name: POSTGRES_16
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:f04131c220a45355203982c377dcf26b1d36cb240754772349ad6cf9449654e3
  name: POSTGRES_15
- image: registry.connect.redhat.com/crunchydata/crunchy-upgrade@sha256:92d2a92143daa6fd7d13336ef7daca44bc5b7fc7407889d181704c97dcacb9b7
  name: PGUPGRADE
- image: registry.connect.redhat.com/crunchydata/postgres-operator-bundle@sha256:2a9159875df4c267d0f6e2919b2e15132940edc88ff071c10353f93aaf8c5517
  name: ""
- image: registry.connect.redhat.com/crunchydata/postgres-operator@sha256:15b0c394d81cda9958030607062cc0e37877fd6f21fbe847e3e02fe8f496f115
  name: postgres-operator
schema: olm.bundle
---
image: registry.connect.redhat.com/crunchydata/postgres-operator-bundle@sha256:4694d4ca3837ff7868d221f6bd9f30059fe8b9db6a58ccbd498152ff53c8d994
name: postgresoperator.v5.5.0
package: crunchy-postgres-operator
properties:
- type: olm.gvk
  value:
    group: postgres-operator.crunchydata.com
    kind: PGAdmin
    version: v1beta1
- type: olm.gvk
  value:
    group: postgres-operator.crunchydata.com
    kind: PGUpgrade
    version: v1beta1
- type: olm.gvk
  value:
    group: postgres-operator.crunchydata.com
    kind: PostgresCluster
    version: v1beta1
- type: olm.package
  value:
    packageName: crunchy-postgres-operator
    version: 5.5.0
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "PGAdmin",
            "metadata": {
              "name": "example-pgadmin",
              "namespace": "openshift-operators"
            },
            "spec": {
              "dataVolumeClaimSpec": {
                "accessModes": [
                  "ReadWriteOnce"
                ],
                "resources": {
                  "requests": {
                    "storage": "1Gi"
                  }
                }
              },
              "serverGroups": [
                {
                  "name": "Crunchy Postgres for Kubernetes",
                  "postgresClusterSelector": {}
                }
              ]
            }
          },
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "PGUpgrade",
            "metadata": {
              "name": "example-upgrade"
            },
            "spec": {
              "fromPostgresVersion": 14,
              "postgresClusterName": "example",
              "toPostgresVersion": 15
            }
          },
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "PostgresCluster",
            "metadata": {
              "name": "example"
            },
            "spec": {
              "backups": {
                "pgbackrest": {
                  "repos": [
                    {
                      "name": "repo1",
                      "volume": {
                        "volumeClaimSpec": {
                          "accessModes": [
                            "ReadWriteOnce"
                          ],
                          "resources": {
                            "requests": {
                              "storage": "1Gi"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              },
              "instances": [
                {
                  "dataVolumeClaimSpec": {
                    "accessModes": [
                      "ReadWriteOnce"
                    ],
                    "resources": {
                      "requests": {
                        "storage": "1Gi"
                      }
                    }
                  },
                  "replicas": 1
                }
              ],
              "postgresVersion": 15
            }
          }
        ]
      capabilities: Auto Pilot
      categories: Database
      certified: "true"
      containerImage: registry.connect.redhat.com/crunchydata/postgres-operator@sha256:f12d761b14176ffc2b11ea446915ea51f88f793382b171883a239cb9d019fe76
      createdAt: 2019-12-31 19:40Z
      description: Production Postgres Made Easy
      olm.properties: '[]'
      repository: https://github.com/CrunchyData/postgres-operator
      support: crunchydata.com
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: PGAdmin is the Schema for the pgadmins API
        displayName: PGAdmin
        kind: PGAdmin
        name: pgadmins.postgres-operator.crunchydata.com
        statusDescriptors:
        - description: 'conditions represent the observations of pgadmin''s current
            state. Known .status.conditions.type are: "PersistentVolumeResizing",
            "Progressing", "ProxyAvailable"'
          displayName: Conditions
          path: conditions
          x-descriptors:
          - urn:alm:descriptor:io.kubernetes.conditions
        version: v1beta1
      - description: PGUpgrade is the Schema for the pgupgrades API
        displayName: PGUpgrade
        kind: PGUpgrade
        name: pgupgrades.postgres-operator.crunchydata.com
        version: v1beta1
      - description: PostgresCluster is the Schema for the postgresclusters API
        displayName: Postgres Cluster
        kind: PostgresCluster
        name: postgresclusters.postgres-operator.crunchydata.com
        resources:
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: CronJob
          name: ""
          version: v1beta1
        - kind: Deployment
          name: ""
          version: v1
        - kind: Job
          name: ""
          version: v1
        - kind: PersistentVolumeClaim
          name: ""
          version: v1
        - kind: Secret
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: StatefulSet
          name: ""
          version: v1
        specDescriptors:
        - description: The image name to use for PostgreSQL containers. When omitted,
            the value comes from an operator environment variable. For standard PostgreSQL
            images, the format is RELATED_IMAGE_POSTGRES_{postgresVersion}, e.g. RELATED_IMAGE_POSTGRES_13.
            For PostGIS enabled PostgreSQL images, the format is RELATED_IMAGE_POSTGRES_{postgresVersion}_GIS_{postGISVersion},
            e.g. RELATED_IMAGE_POSTGRES_13_GIS_3.1.
          displayName: Image
          path: image
        - description: The major version of PostgreSQL installed in the PostgreSQL
            image
          displayName: Postgres Version
          path: postgresVersion
        - description: Specifies one or more sets of PostgreSQL pods that replicate
            data for this cluster.
          displayName: Instance Sets
          path: instances
        statusDescriptors:
        - description: 'conditions represent the observations of postgrescluster''s
            current state. Known .status.conditions.type are: "PersistentVolumeResizing",
            "Progressing", "ProxyAvailable"'
          displayName: Conditions
          path: conditions
          x-descriptors:
          - urn:alm:descriptor:io.kubernetes.conditions
        version: v1beta1
    description: |-
      [Crunchy Postgres for Kubernetes](https://www.crunchydata.com/products/crunchy-postgresql-for-kubernetes), is the leading Kubernetes native
      Postgres solution. Built on PGO, the Postgres Operator from Crunchy Data, Crunchy Postgres for Kubernetes gives you a declarative Postgres
      solution that automatically manages your PostgreSQL clusters.

      Designed for your GitOps workflows, it is [easy to get started](https://access.crunchydata.com/documentation/postgres-operator/latest/quickstart)
      with Crunchy Postgres for Kubernetes. Within a few moments, you can have a production grade Postgres cluster complete with high availability, disaster
      recovery, and monitoring, all over secure TLS communications. Even better, Crunchy Postgres for Kubernetes lets you easily customize your Postgres
      cluster to tailor it to your workload!

      With conveniences like cloning Postgres clusters to using rolling updates to roll out disruptive changes with minimal downtime, Crunchy Postgres
      for Kubernetes is ready to support your Postgres data at every stage of your release pipeline. Built for resiliency and uptime, Crunchy Postgres
      for Kubernetes will keep your Postgres cluster in a desired state so you do not need to worry about it.

      Crunchy Postgres for Kubernetes is developed with many years of production experience in automating Postgres management on Kubernetes, providing
      a seamless cloud native Postgres solution to keep your data always available.

      Crunchy Postgres for Kubernetes is made available to users without an active Crunchy Data subscription in connection with Crunchy Data's
      [Developer Program](https://www.crunchydata.com/developers/terms-of-use).
      For more information, please contact us at [info@crunchydata.com](mailto:info@crunchydata.com).

      - **PostgreSQL Cluster Provisioning**: [Create, Scale, & Delete PostgreSQL clusters with ease][provisioning],
        while fully customizing your Pods and PostgreSQL configuration!
      - **High-Availability**: Safe, automated failover backed by a [distributed consensus based high-availability solution][high-availability].
        Uses [Pod Anti-Affinity][k8s-anti-affinity] to help resiliency; you can configure how aggressive this can be!
        Failed primaries automatically heal, allowing for faster recovery time. You can even create regularly scheduled
        backups as well and set your backup retention policy
      - **Disaster Recovery**: [Backups][backups] and [restores][disaster-recovery] leverage the open source [pgBackRest][] utility and
        [includes support for full, incremental, and differential backups as well as efficient delta restores][backups].
        Set how long you want your backups retained for. Works great with very large databases!
      - **Monitoring**: [Track the health of your PostgreSQL clusters][monitoring] using the open source [pgMonitor][] library.
      - **Clone**: [Create new clusters from your existing clusters or backups][clone] with efficient data cloning.
      - **TLS**: All connections are over [TLS][tls]. You can also [bring your own TLS infrastructure][tls] if you do not want to use the provided defaults.
      - **Connection Pooling**: Advanced [connection pooling][pool] support using [pgBouncer][].
      - **Affinity and Tolerations**: Have your PostgreSQL clusters deployed to [Kubernetes Nodes][k8s-nodes] of your preference.
        Set your [pod anti-affinity][k8s-anti-affinity], node affinity, Pod tolerations and more rules to customize your deployment topology!
      - **PostgreSQL Major Version Upgrades**: Perform a [PostgreSQL major version upgrade][major-version-upgrade] declaratively.
      - **Database Administration**: Easily deploy [pgAdmin4][pgadmin] to administer your PostgresClusters' databases.
        The automatic discovery of PostgresClusters ensures that you are able to seamlessly access any databases within your environment from the pgAdmin4 GUI.
      - **Full Customizability**: Crunchy PostgreSQL for Kubernetes makes it easy to get your own PostgreSQL-as-a-Service up and running
        and fully customize your deployments, including:
          - Choose the resources for your Postgres cluster: [container resources and storage size][resize-cluster]. [Resize at any time][resize-cluster] with minimal disruption.
          - Use your own container image repository, including support `imagePullSecrets` and private repositories
          - [Customize your PostgreSQL configuration][customize-cluster]

      and much more!

      [backups]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/backups-disaster-recovery
      [clone]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/backups-disaster-recovery/disaster-recovery
      [customize-cluster]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/day-two/customize-cluster
      [disaster-recovery]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/backups-disaster-recovery/disaster-recovery
      [high-availability]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/day-two/high-availability
      [major-version-upgrade]: https://access.crunchydata.com/documentation/postgres-operator/v5/guides/major-postgres-version-upgrade/
      [monitoring]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/day-two/monitoring
      [pool]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/basic-setup/connection-pooling
      [provisioning]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/basic-setup/create-cluster
      [resize-cluster]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/cluster-management/resize-cluster
      [tls]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/day-two/customize-cluster#customize-tls

      [k8s-anti-affinity]: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#inter-pod-affinity-and-anti-affinity
      [k8s-nodes]: https://kubernetes.io/docs/concepts/architecture/nodes/

      [pgAdmin]: https://www.pgadmin.org/
      [pgBackRest]: https://www.pgbackrest.org
      [pgBouncer]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/basic-setup/connection-pooling
      [pgMonitor]: https://github.com/CrunchyData/pgmonitor


      ## Post-Installation

      ### Tutorial

      Want to [learn more about the PostgreSQL Operator][tutorial]? Browse through the [tutorial][] to learn more about what you can do, [join the Discord server][discord] for community support, or check out the [PGO GitHub repo][ghrepo] to learn more about the open source Postgres Operator project that powers Crunchy Postgres for Kubernetes.

      [tutorial]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials
      [discord]: https://discord.gg/a7vWKG8Ec9
      [ghrepo]: https://github.com/CrunchyData/postgres-operator
    displayName: Crunchy Postgres for Kubernetes
    installModes:
    - supported: true
      type: OwnNamespace
    - supported: true
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - postgres
    - postgresql
    - database
    - sql
    - operator
    - crunchy data
    links:
    - name: Crunchy Data
      url: https://www.crunchydata.com/
    - name: Documentation
      url: https://access.crunchydata.com/documentation/postgres-operator/v5/
    maintainers:
    - email: info@crunchydata.com
      name: Crunchy Data
    maturity: stable
    minKubeVersion: 1.23.0
    provider:
      name: Crunchy Data
      url: https://www.crunchydata.com/
relatedImages:
- image: registry.connect.redhat.com/crunchydata/crunchy-pgadmin4@sha256:0a510c653804a45af3efba796b89c7f5d4f8e247baa91630c02e197cef89f59a
  name: PGADMIN
- image: registry.connect.redhat.com/crunchydata/crunchy-pgadmin4@sha256:134bb8084a07398cf47c07531d0c55c1817df90200fa4f4f7eb23f0fccdb80a5
  name: STANDALONE_PGADMIN
- image: registry.connect.redhat.com/crunchydata/crunchy-pgbackrest@sha256:eb70fa35dfa4e66722832e8a857ebec51d7b30692093bf74f307b650b3bf4078
  name: PGBACKREST
- image: registry.connect.redhat.com/crunchydata/crunchy-pgbouncer@sha256:b673b303d4e08036314407120c364d7ac18b79b2a4e0c953b9b6cdd463e9e9f7
  name: PGBOUNCER
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-exporter@sha256:e2b00ad211952a3adeab9a09a8c884485931dce4463ea9c6d2c5932d1c73705b
  name: PGEXPORTER
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:413019159543e5acd7e797a25af2e4436266752bb59e2e8573461b6eb10bab1e
  name: POSTGRES_14_GIS_3.1
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:453a427171dd9b70b01e4e0afd58470f5386fa6d3c6f6d79d47c3433a3e7bb0b
  name: POSTGRES_15_GIS_3.3
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:6d8f27e61b10d4bb90d4032f40c04697eb57fb09af00227a88133851ca7e3585
  name: POSTGRES_16_GIS_3.4
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:790941b114502c2ff107787510706846f2fba6082ad3e6060fed6748965b5433
  name: POSTGRES_14_GIS_3.3
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:7ca52ee91b16b430b4c8e78aa1223faaab0581f7ec6e11647a7ab4a029efeaaa
  name: POSTGRES_16_GIS_3.3
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:9b58512afcbc5a4270ec998eee5b02d7e034ccce7a7e736476b1abb8e0997cfd
  name: POSTGRES_14_GIS_3.2
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:7ff72b8a3c69af45db6e4611b8994c7f04ba4adba3e719b63b09414cc4098387
  name: POSTGRES_14
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:e929789a774bb401cf38eed73080d5fd9917bd2d3f545f6172b83c8a8ebbe0d3
  name: POSTGRES_16
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:f04131c220a45355203982c377dcf26b1d36cb240754772349ad6cf9449654e3
  name: POSTGRES_15
- image: registry.connect.redhat.com/crunchydata/crunchy-upgrade@sha256:92d2a92143daa6fd7d13336ef7daca44bc5b7fc7407889d181704c97dcacb9b7
  name: PGUPGRADE
- image: registry.connect.redhat.com/crunchydata/postgres-operator-bundle@sha256:4694d4ca3837ff7868d221f6bd9f30059fe8b9db6a58ccbd498152ff53c8d994
  name: ""
- image: registry.connect.redhat.com/crunchydata/postgres-operator@sha256:f12d761b14176ffc2b11ea446915ea51f88f793382b171883a239cb9d019fe76
  name: postgres-operator
schema: olm.bundle
---
image: registry.connect.redhat.com/crunchydata/postgres-operator-bundle@sha256:8464d1f58ae71785579a8a1681c4d79297f673e2fe88c97cc755cf1259e20756
name: postgresoperator.v5.5.1
package: crunchy-postgres-operator
properties:
- type: olm.gvk
  value:
    group: postgres-operator.crunchydata.com
    kind: PGAdmin
    version: v1beta1
- type: olm.gvk
  value:
    group: postgres-operator.crunchydata.com
    kind: PGUpgrade
    version: v1beta1
- type: olm.gvk
  value:
    group: postgres-operator.crunchydata.com
    kind: PostgresCluster
    version: v1beta1
- type: olm.package
  value:
    packageName: crunchy-postgres-operator
    version: 5.5.1
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "PGAdmin",
            "metadata": {
              "name": "example-pgadmin",
              "namespace": "openshift-operators"
            },
            "spec": {
              "dataVolumeClaimSpec": {
                "accessModes": [
                  "ReadWriteOnce"
                ],
                "resources": {
                  "requests": {
                    "storage": "1Gi"
                  }
                }
              },
              "serverGroups": [
                {
                  "name": "Crunchy Postgres for Kubernetes",
                  "postgresClusterSelector": {}
                }
              ]
            }
          },
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "PGUpgrade",
            "metadata": {
              "name": "example-upgrade"
            },
            "spec": {
              "fromPostgresVersion": 14,
              "postgresClusterName": "example",
              "toPostgresVersion": 15
            }
          },
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "PostgresCluster",
            "metadata": {
              "name": "example"
            },
            "spec": {
              "backups": {
                "pgbackrest": {
                  "repos": [
                    {
                      "name": "repo1",
                      "volume": {
                        "volumeClaimSpec": {
                          "accessModes": [
                            "ReadWriteOnce"
                          ],
                          "resources": {
                            "requests": {
                              "storage": "1Gi"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              },
              "instances": [
                {
                  "dataVolumeClaimSpec": {
                    "accessModes": [
                      "ReadWriteOnce"
                    ],
                    "resources": {
                      "requests": {
                        "storage": "1Gi"
                      }
                    }
                  },
                  "replicas": 1
                }
              ],
              "postgresVersion": 15
            }
          }
        ]
      capabilities: Auto Pilot
      categories: Database
      certified: "true"
      containerImage: registry.connect.redhat.com/crunchydata/postgres-operator@sha256:1bbe66d499ea3587e6b571031873e27d08a69d7c296c3088aa13dc08b849822e
      createdAt: 2019-12-31 19:40Z
      description: Production Postgres Made Easy
      features.operators.openshift.io/cnf: "false"
      features.operators.openshift.io/cni: "false"
      features.operators.openshift.io/csi: "false"
      features.operators.openshift.io/disconnected: "true"
      features.operators.openshift.io/fips-compliant: "false"
      features.operators.openshift.io/proxy-aware: "false"
      features.operators.openshift.io/tls-profiles: "false"
      features.operators.openshift.io/token-auth-aws: "false"
      features.operators.openshift.io/token-auth-azure: "false"
      features.operators.openshift.io/token-auth-gcp: "false"
      olm.properties: '[]'
      repository: https://github.com/CrunchyData/postgres-operator
      support: crunchydata.com
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: PGAdmin is the Schema for the pgadmins API
        displayName: PGAdmin
        kind: PGAdmin
        name: pgadmins.postgres-operator.crunchydata.com
        statusDescriptors:
        - description: 'conditions represent the observations of pgadmin''s current
            state. Known .status.conditions.type are: "PersistentVolumeResizing",
            "Progressing", "ProxyAvailable"'
          displayName: Conditions
          path: conditions
          x-descriptors:
          - urn:alm:descriptor:io.kubernetes.conditions
        version: v1beta1
      - description: PGUpgrade is the Schema for the pgupgrades API
        displayName: PGUpgrade
        kind: PGUpgrade
        name: pgupgrades.postgres-operator.crunchydata.com
        version: v1beta1
      - description: PostgresCluster is the Schema for the postgresclusters API
        displayName: Postgres Cluster
        kind: PostgresCluster
        name: postgresclusters.postgres-operator.crunchydata.com
        resources:
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: CronJob
          name: ""
          version: v1beta1
        - kind: Deployment
          name: ""
          version: v1
        - kind: Job
          name: ""
          version: v1
        - kind: PersistentVolumeClaim
          name: ""
          version: v1
        - kind: Secret
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: StatefulSet
          name: ""
          version: v1
        specDescriptors:
        - description: The image name to use for PostgreSQL containers. When omitted,
            the value comes from an operator environment variable. For standard PostgreSQL
            images, the format is RELATED_IMAGE_POSTGRES_{postgresVersion}, e.g. RELATED_IMAGE_POSTGRES_13.
            For PostGIS enabled PostgreSQL images, the format is RELATED_IMAGE_POSTGRES_{postgresVersion}_GIS_{postGISVersion},
            e.g. RELATED_IMAGE_POSTGRES_13_GIS_3.1.
          displayName: Image
          path: image
        - description: The major version of PostgreSQL installed in the PostgreSQL
            image
          displayName: Postgres Version
          path: postgresVersion
        - description: Specifies one or more sets of PostgreSQL pods that replicate
            data for this cluster.
          displayName: Instance Sets
          path: instances
        statusDescriptors:
        - description: 'conditions represent the observations of postgrescluster''s
            current state. Known .status.conditions.type are: "PersistentVolumeResizing",
            "Progressing", "ProxyAvailable"'
          displayName: Conditions
          path: conditions
          x-descriptors:
          - urn:alm:descriptor:io.kubernetes.conditions
        version: v1beta1
    description: |-
      [Crunchy Postgres for Kubernetes](https://www.crunchydata.com/products/crunchy-postgresql-for-kubernetes), is the leading Kubernetes native
      Postgres solution. Built on PGO, the Postgres Operator from Crunchy Data, Crunchy Postgres for Kubernetes gives you a declarative Postgres
      solution that automatically manages your PostgreSQL clusters.

      Designed for your GitOps workflows, it is [easy to get started](https://access.crunchydata.com/documentation/postgres-operator/latest/quickstart)
      with Crunchy Postgres for Kubernetes. Within a few moments, you can have a production grade Postgres cluster complete with high availability, disaster
      recovery, and monitoring, all over secure TLS communications. Even better, Crunchy Postgres for Kubernetes lets you easily customize your Postgres
      cluster to tailor it to your workload!

      With conveniences like cloning Postgres clusters to using rolling updates to roll out disruptive changes with minimal downtime, Crunchy Postgres
      for Kubernetes is ready to support your Postgres data at every stage of your release pipeline. Built for resiliency and uptime, Crunchy Postgres
      for Kubernetes will keep your Postgres cluster in a desired state so you do not need to worry about it.

      Crunchy Postgres for Kubernetes is developed with many years of production experience in automating Postgres management on Kubernetes, providing
      a seamless cloud native Postgres solution to keep your data always available.

      Crunchy Postgres for Kubernetes is made available to users without an active Crunchy Data subscription in connection with Crunchy Data's
      [Developer Program](https://www.crunchydata.com/developers/terms-of-use).
      For more information, please contact us at [info@crunchydata.com](mailto:info@crunchydata.com).

      - **PostgreSQL Cluster Provisioning**: [Create, Scale, & Delete PostgreSQL clusters with ease][provisioning],
        while fully customizing your Pods and PostgreSQL configuration!
      - **High-Availability**: Safe, automated failover backed by a [distributed consensus based high-availability solution][high-availability].
        Uses [Pod Anti-Affinity][k8s-anti-affinity] to help resiliency; you can configure how aggressive this can be!
        Failed primaries automatically heal, allowing for faster recovery time. You can even create regularly scheduled
        backups as well and set your backup retention policy
      - **Disaster Recovery**: [Backups][backups] and [restores][disaster-recovery] leverage the open source [pgBackRest][] utility and
        [includes support for full, incremental, and differential backups as well as efficient delta restores][backups].
        Set how long you want your backups retained for. Works great with very large databases!
      - **Monitoring**: [Track the health of your PostgreSQL clusters][monitoring] using the open source [pgMonitor][] library.
      - **Clone**: [Create new clusters from your existing clusters or backups][clone] with efficient data cloning.
      - **TLS**: All connections are over [TLS][tls]. You can also [bring your own TLS infrastructure][tls] if you do not want to use the provided defaults.
      - **Connection Pooling**: Advanced [connection pooling][pool] support using [pgBouncer][].
      - **Affinity and Tolerations**: Have your PostgreSQL clusters deployed to [Kubernetes Nodes][k8s-nodes] of your preference.
        Set your [pod anti-affinity][k8s-anti-affinity], node affinity, Pod tolerations and more rules to customize your deployment topology!
      - **PostgreSQL Major Version Upgrades**: Perform a [PostgreSQL major version upgrade][major-version-upgrade] declaratively.
      - **Database Administration**: Easily deploy [pgAdmin4][pgadmin] to administer your PostgresClusters' databases.
        The automatic discovery of PostgresClusters ensures that you are able to seamlessly access any databases within your environment from the pgAdmin4 GUI.
      - **Full Customizability**: Crunchy PostgreSQL for Kubernetes makes it easy to get your own PostgreSQL-as-a-Service up and running
        and fully customize your deployments, including:
          - Choose the resources for your Postgres cluster: [container resources and storage size][resize-cluster]. [Resize at any time][resize-cluster] with minimal disruption.
          - Use your own container image repository, including support `imagePullSecrets` and private repositories
          - [Customize your PostgreSQL configuration][customize-cluster]

      and much more!

      [backups]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/backups-disaster-recovery
      [clone]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/backups-disaster-recovery/disaster-recovery
      [customize-cluster]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/day-two/customize-cluster
      [disaster-recovery]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/backups-disaster-recovery/disaster-recovery
      [high-availability]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/day-two/high-availability
      [major-version-upgrade]: https://access.crunchydata.com/documentation/postgres-operator/v5/guides/major-postgres-version-upgrade/
      [monitoring]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/day-two/monitoring
      [pool]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/basic-setup/connection-pooling
      [provisioning]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/basic-setup/create-cluster
      [resize-cluster]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/cluster-management/resize-cluster
      [tls]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/day-two/customize-cluster#customize-tls

      [k8s-anti-affinity]: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#inter-pod-affinity-and-anti-affinity
      [k8s-nodes]: https://kubernetes.io/docs/concepts/architecture/nodes/

      [pgAdmin]: https://www.pgadmin.org/
      [pgBackRest]: https://www.pgbackrest.org
      [pgBouncer]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/basic-setup/connection-pooling
      [pgMonitor]: https://github.com/CrunchyData/pgmonitor

      ## Post-Installation

      ### Tutorial

      Want to [learn more about the PostgreSQL Operator][tutorial]? Browse through the [tutorial][] to learn more about what you can do,
      [join the Discord server][discord] for community support, or check out the [PGO GitHub repo][ghrepo] to learn more
      about the open source Postgres Operator project that powers Crunchy Postgres for Kubernetes.

      [tutorial]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials
      [discord]: https://discord.gg/a7vWKG8Ec9
      [ghrepo]: https://github.com/CrunchyData/postgres-operator
    displayName: Crunchy Postgres for Kubernetes
    installModes:
    - supported: true
      type: OwnNamespace
    - supported: true
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - postgres
    - postgresql
    - database
    - sql
    - operator
    - crunchy data
    links:
    - name: Crunchy Data
      url: https://www.crunchydata.com/
    - name: Documentation
      url: https://access.crunchydata.com/documentation/postgres-operator/v5/
    maintainers:
    - email: info@crunchydata.com
      name: Crunchy Data
    maturity: stable
    minKubeVersion: 1.23.0
    provider:
      name: Crunchy Data
      url: https://www.crunchydata.com/
relatedImages:
- image: registry.connect.redhat.com/crunchydata/crunchy-pgadmin4@sha256:a64d5dbfb299cd20d22f537605a2f0fa6297f0f912bc8b71935c9532b8530a73
  name: PGADMIN
- image: registry.connect.redhat.com/crunchydata/crunchy-pgadmin4@sha256:d74adbcaed555c48c06f8403e8aed101f55626bf980c37e78c31ef5f278a62d2
  name: STANDALONE_PGADMIN
- image: registry.connect.redhat.com/crunchydata/crunchy-pgbackrest@sha256:5126034612c1a13eb628462a19d5281dbf71331628a6d828c1caf20475da6b5e
  name: PGBACKREST
- image: registry.connect.redhat.com/crunchydata/crunchy-pgbouncer@sha256:fe904bd90d050b488e3b3975b1ac01777f1b152480ecd172879a4041fa9216a8
  name: PGBOUNCER
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-exporter@sha256:0f8adf2e3c9bd0d8dcedc76b97d43952ea5560814635daa24e793d84951b4613
  name: PGEXPORTER
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:0d94120aac11df8cbfb21aaf47238946859df5e8120bd234e11bd68f9905deec
  name: POSTGRES_16_GIS_3.3
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:23d6431b87c0d9e841d76e3225d2cecee2f08be1d19745a426e7b3ccf663bc4b
  name: POSTGRES_14_GIS_3.3
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:2875e4b38d2e83715a0a25f29a0723f9958cb1f1268103a5f9bdaec574812db5
  name: POSTGRES_16_GIS_3.4
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:9abdcc3fa86e76250ba6bb5021af8c450b9ab027c02eda9827a3274c02b9711b
  name: POSTGRES_15_GIS_3.3
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:9ca055ae72e7bd41278ae20043ef57c73d1adc3717950a13b9bd98c629e81f49
  name: POSTGRES_14_GIS_3.1
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:a524484f02e776a200e52c993484db123c1bc9813e123aade4b2a7d6b7cccbc4
  name: POSTGRES_14_GIS_3.2
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:00a821df78aea717f2bf7b0eaa5eac70492559ff0afd873339b32e3b31a437fe
  name: POSTGRES_15
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:6f4db1e9707b196aaa9f98ada5c09523ec00ade573ff835bd1ca6367ac0bb9f1
  name: POSTGRES_14
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:7297ab197c8d1a34ae5e336698f8967827c8843df3565328fb758d25e3551150
  name: POSTGRES_16
- image: registry.connect.redhat.com/crunchydata/crunchy-upgrade@sha256:7676ac38574c2859e9e37cadf6f186f808bed2a89055fc35a94ca473fff76d00
  name: PGUPGRADE
- image: registry.connect.redhat.com/crunchydata/postgres-operator-bundle@sha256:8464d1f58ae71785579a8a1681c4d79297f673e2fe88c97cc755cf1259e20756
  name: ""
- image: registry.connect.redhat.com/crunchydata/postgres-operator@sha256:1bbe66d499ea3587e6b571031873e27d08a69d7c296c3088aa13dc08b849822e
  name: postgres-operator
schema: olm.bundle
---
image: registry.connect.redhat.com/crunchydata/postgres-operator-bundle@sha256:92de0ccafd0b5217e0ec3cb1a15e4f7bed855d73c440cea6fbe0276c8901d075
name: postgresoperator.v5.5.2
package: crunchy-postgres-operator
properties:
- type: olm.gvk
  value:
    group: postgres-operator.crunchydata.com
    kind: PGAdmin
    version: v1beta1
- type: olm.gvk
  value:
    group: postgres-operator.crunchydata.com
    kind: PGUpgrade
    version: v1beta1
- type: olm.gvk
  value:
    group: postgres-operator.crunchydata.com
    kind: PostgresCluster
    version: v1beta1
- type: olm.package
  value:
    packageName: crunchy-postgres-operator
    version: 5.5.2
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "PGAdmin",
            "metadata": {
              "name": "example-pgadmin",
              "namespace": "openshift-operators"
            },
            "spec": {
              "dataVolumeClaimSpec": {
                "accessModes": [
                  "ReadWriteOnce"
                ],
                "resources": {
                  "requests": {
                    "storage": "1Gi"
                  }
                }
              },
              "serverGroups": [
                {
                  "name": "Crunchy Postgres for Kubernetes",
                  "postgresClusterSelector": {}
                }
              ]
            }
          },
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "PGUpgrade",
            "metadata": {
              "name": "example-upgrade"
            },
            "spec": {
              "fromPostgresVersion": 14,
              "postgresClusterName": "example",
              "toPostgresVersion": 15
            }
          },
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "PostgresCluster",
            "metadata": {
              "name": "example"
            },
            "spec": {
              "backups": {
                "pgbackrest": {
                  "repos": [
                    {
                      "name": "repo1",
                      "volume": {
                        "volumeClaimSpec": {
                          "accessModes": [
                            "ReadWriteOnce"
                          ],
                          "resources": {
                            "requests": {
                              "storage": "1Gi"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              },
              "instances": [
                {
                  "dataVolumeClaimSpec": {
                    "accessModes": [
                      "ReadWriteOnce"
                    ],
                    "resources": {
                      "requests": {
                        "storage": "1Gi"
                      }
                    }
                  },
                  "replicas": 1
                }
              ],
              "postgresVersion": 15
            }
          }
        ]
      capabilities: Auto Pilot
      categories: Database
      certified: "true"
      containerImage: registry.connect.redhat.com/crunchydata/postgres-operator@sha256:67ea506b1a08c42a553eb2c86c92dde3b738f9a62220cb01550f4d0baf29aef7
      createdAt: 2019-12-31 19:40Z
      description: Production Postgres Made Easy
      features.operators.openshift.io/cnf: "false"
      features.operators.openshift.io/cni: "false"
      features.operators.openshift.io/csi: "false"
      features.operators.openshift.io/disconnected: "true"
      features.operators.openshift.io/fips-compliant: "false"
      features.operators.openshift.io/proxy-aware: "false"
      features.operators.openshift.io/tls-profiles: "false"
      features.operators.openshift.io/token-auth-aws: "false"
      features.operators.openshift.io/token-auth-azure: "false"
      features.operators.openshift.io/token-auth-gcp: "false"
      olm.properties: '[]'
      repository: https://github.com/CrunchyData/postgres-operator
      support: crunchydata.com
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: PGAdmin is the Schema for the pgadmins API
        displayName: PGAdmin
        kind: PGAdmin
        name: pgadmins.postgres-operator.crunchydata.com
        statusDescriptors:
        - description: 'conditions represent the observations of pgadmin''s current
            state. Known .status.conditions.type are: "PersistentVolumeResizing",
            "Progressing", "ProxyAvailable"'
          displayName: Conditions
          path: conditions
          x-descriptors:
          - urn:alm:descriptor:io.kubernetes.conditions
        version: v1beta1
      - description: PGUpgrade is the Schema for the pgupgrades API
        displayName: PGUpgrade
        kind: PGUpgrade
        name: pgupgrades.postgres-operator.crunchydata.com
        version: v1beta1
      - description: PostgresCluster is the Schema for the postgresclusters API
        displayName: Postgres Cluster
        kind: PostgresCluster
        name: postgresclusters.postgres-operator.crunchydata.com
        resources:
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: CronJob
          name: ""
          version: v1beta1
        - kind: Deployment
          name: ""
          version: v1
        - kind: Job
          name: ""
          version: v1
        - kind: PersistentVolumeClaim
          name: ""
          version: v1
        - kind: Secret
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: StatefulSet
          name: ""
          version: v1
        specDescriptors:
        - description: The image name to use for PostgreSQL containers. When omitted,
            the value comes from an operator environment variable. For standard PostgreSQL
            images, the format is RELATED_IMAGE_POSTGRES_{postgresVersion}, e.g. RELATED_IMAGE_POSTGRES_13.
            For PostGIS enabled PostgreSQL images, the format is RELATED_IMAGE_POSTGRES_{postgresVersion}_GIS_{postGISVersion},
            e.g. RELATED_IMAGE_POSTGRES_13_GIS_3.1.
          displayName: Image
          path: image
        - description: The major version of PostgreSQL installed in the PostgreSQL
            image
          displayName: Postgres Version
          path: postgresVersion
        - description: Specifies one or more sets of PostgreSQL pods that replicate
            data for this cluster.
          displayName: Instance Sets
          path: instances
        statusDescriptors:
        - description: 'conditions represent the observations of postgrescluster''s
            current state. Known .status.conditions.type are: "PersistentVolumeResizing",
            "Progressing", "ProxyAvailable"'
          displayName: Conditions
          path: conditions
          x-descriptors:
          - urn:alm:descriptor:io.kubernetes.conditions
        version: v1beta1
    description: |-
      [Crunchy Postgres for Kubernetes](https://www.crunchydata.com/products/crunchy-postgresql-for-kubernetes), is the leading Kubernetes native
      Postgres solution. Built on PGO, the Postgres Operator from Crunchy Data, Crunchy Postgres for Kubernetes gives you a declarative Postgres
      solution that automatically manages your PostgreSQL clusters.

      Designed for your GitOps workflows, it is [easy to get started](https://access.crunchydata.com/documentation/postgres-operator/latest/quickstart)
      with Crunchy Postgres for Kubernetes. Within a few moments, you can have a production grade Postgres cluster complete with high availability, disaster
      recovery, and monitoring, all over secure TLS communications. Even better, Crunchy Postgres for Kubernetes lets you easily customize your Postgres
      cluster to tailor it to your workload!

      With conveniences like cloning Postgres clusters to using rolling updates to roll out disruptive changes with minimal downtime, Crunchy Postgres
      for Kubernetes is ready to support your Postgres data at every stage of your release pipeline. Built for resiliency and uptime, Crunchy Postgres
      for Kubernetes will keep your Postgres cluster in a desired state so you do not need to worry about it.

      Crunchy Postgres for Kubernetes is developed with many years of production experience in automating Postgres management on Kubernetes, providing
      a seamless cloud native Postgres solution to keep your data always available.

      Crunchy Postgres for Kubernetes is made available to users without an active Crunchy Data subscription in connection with Crunchy Data's
      [Developer Program](https://www.crunchydata.com/developers/terms-of-use).
      For more information, please contact us at [info@crunchydata.com](mailto:info@crunchydata.com).

      - **PostgreSQL Cluster Provisioning**: [Create, Scale, & Delete PostgreSQL clusters with ease][provisioning],
        while fully customizing your Pods and PostgreSQL configuration!
      - **High-Availability**: Safe, automated failover backed by a [distributed consensus based high-availability solution][high-availability].
        Uses [Pod Anti-Affinity][k8s-anti-affinity] to help resiliency; you can configure how aggressive this can be!
        Failed primaries automatically heal, allowing for faster recovery time. You can even create regularly scheduled
        backups as well and set your backup retention policy
      - **Disaster Recovery**: [Backups][backups] and [restores][disaster-recovery] leverage the open source [pgBackRest][] utility and
        [includes support for full, incremental, and differential backups as well as efficient delta restores][backups].
        Set how long you want your backups retained for. Works great with very large databases!
      - **Monitoring**: [Track the health of your PostgreSQL clusters][monitoring] using the open source [pgMonitor][] library.
      - **Clone**: [Create new clusters from your existing clusters or backups][clone] with efficient data cloning.
      - **TLS**: All connections are over [TLS][tls]. You can also [bring your own TLS infrastructure][tls] if you do not want to use the provided defaults.
      - **Connection Pooling**: Advanced [connection pooling][pool] support using [pgBouncer][].
      - **Affinity and Tolerations**: Have your PostgreSQL clusters deployed to [Kubernetes Nodes][k8s-nodes] of your preference.
        Set your [pod anti-affinity][k8s-anti-affinity], node affinity, Pod tolerations and more rules to customize your deployment topology!
      - **PostgreSQL Major Version Upgrades**: Perform a [PostgreSQL major version upgrade][major-version-upgrade] declaratively.
      - **Database Administration**: Easily deploy [pgAdmin4][pgadmin] to administer your PostgresClusters' databases.
        The automatic discovery of PostgresClusters ensures that you are able to seamlessly access any databases within your environment from the pgAdmin4 GUI.
      - **Full Customizability**: Crunchy PostgreSQL for Kubernetes makes it easy to get your own PostgreSQL-as-a-Service up and running
        and fully customize your deployments, including:
          - Choose the resources for your Postgres cluster: [container resources and storage size][resize-cluster]. [Resize at any time][resize-cluster] with minimal disruption.
          - Use your own container image repository, including support `imagePullSecrets` and private repositories
          - [Customize your PostgreSQL configuration][customize-cluster]

      and much more!

      [backups]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/backups-disaster-recovery
      [clone]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/backups-disaster-recovery/disaster-recovery
      [customize-cluster]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/day-two/customize-cluster
      [disaster-recovery]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/backups-disaster-recovery/disaster-recovery
      [high-availability]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/day-two/high-availability
      [major-version-upgrade]: https://access.crunchydata.com/documentation/postgres-operator/v5/guides/major-postgres-version-upgrade/
      [monitoring]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/day-two/monitoring
      [pool]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/basic-setup/connection-pooling
      [provisioning]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/basic-setup/create-cluster
      [resize-cluster]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/cluster-management/resize-cluster
      [tls]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/day-two/customize-cluster#customize-tls

      [k8s-anti-affinity]: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#inter-pod-affinity-and-anti-affinity
      [k8s-nodes]: https://kubernetes.io/docs/concepts/architecture/nodes/

      [pgAdmin]: https://www.pgadmin.org/
      [pgBackRest]: https://www.pgbackrest.org
      [pgBouncer]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/basic-setup/connection-pooling
      [pgMonitor]: https://github.com/CrunchyData/pgmonitor

      ## Post-Installation

      ### Tutorial

      Want to [learn more about the PostgreSQL Operator][tutorial]? Browse through the [tutorial][] to learn more about what you can do,
      [join the Discord server][discord] for community support, or check out the [PGO GitHub repo][ghrepo] to learn more
      about the open source Postgres Operator project that powers Crunchy Postgres for Kubernetes.

      [tutorial]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials
      [discord]: https://discord.gg/a7vWKG8Ec9
      [ghrepo]: https://github.com/CrunchyData/postgres-operator
    displayName: Crunchy Postgres for Kubernetes
    installModes:
    - supported: true
      type: OwnNamespace
    - supported: true
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - postgres
    - postgresql
    - database
    - sql
    - operator
    - crunchy data
    links:
    - name: Crunchy Data
      url: https://www.crunchydata.com/
    - name: Documentation
      url: https://access.crunchydata.com/documentation/postgres-operator/v5/
    maintainers:
    - email: info@crunchydata.com
      name: Crunchy Data
    maturity: stable
    minKubeVersion: 1.23.0
    provider:
      name: Crunchy Data
      url: https://www.crunchydata.com/
relatedImages:
- image: registry.connect.redhat.com/crunchydata/crunchy-pgadmin4@sha256:1899c1a3b633c94eaf10bd4366054f8d54b5fedb80be0085d3b2bf6ee47e5158
  name: STANDALONE_PGADMIN
- image: registry.connect.redhat.com/crunchydata/crunchy-pgadmin4@sha256:735b5e1a2eeda5c9603535bebdb8cbfde796f2b3153574136d9115ce6a4b2a53
  name: PGADMIN
- image: registry.connect.redhat.com/crunchydata/crunchy-pgbackrest@sha256:b133cd0dea4a3f227594a283e4a6d747ff1198a1b776c8038dbf0ef635b8a556
  name: PGBACKREST
- image: registry.connect.redhat.com/crunchydata/crunchy-pgbouncer@sha256:bfa222237647f086545fbedca4f01b0cf9bcccb88dc443a2646143fc54788196
  name: PGBOUNCER
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-exporter@sha256:24f0c376beaece242aafccba1850aef2564fdf7346620a23b5a0093fc11bb5cd
  name: PGEXPORTER
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:3441753bd810d977acfbc149b107d83e432883d7bc982f6a382714e7d14c85fb
  name: POSTGRES_16_GIS_3.4
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:47da749a12628026052925799c0659ed31ea5168af8f764da9b1acfb4b540cf3
  name: POSTGRES_15_GIS_3.3
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:b399e4c3bec523940fd99d25609c7fa95c1771b73b03dece44d27be59bd70504
  name: POSTGRES_16_GIS_3.3
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:40b9a7019ed0290a5d220ea1b01e4a964a320d3a3d1c9df9e167a8a2f9bfac5c
  name: POSTGRES_15
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:58683fcb1f60b7d5562c9f6d25aecedc34813d8a5715aa98d04227d36673629f
  name: POSTGRES_16
- image: registry.connect.redhat.com/crunchydata/crunchy-upgrade@sha256:0a052babdaf711b9e58220587c91daff4bf33ce6326a41c49af9f0d63a0d5722
  name: PGUPGRADE
- image: registry.connect.redhat.com/crunchydata/postgres-operator-bundle@sha256:92de0ccafd0b5217e0ec3cb1a15e4f7bed855d73c440cea6fbe0276c8901d075
  name: ""
- image: registry.connect.redhat.com/crunchydata/postgres-operator@sha256:67ea506b1a08c42a553eb2c86c92dde3b738f9a62220cb01550f4d0baf29aef7
  name: postgres-operator
schema: olm.bundle
---
image: registry.connect.redhat.com/crunchydata/postgres-operator-bundle@sha256:c4bdf8a3ca8d47ba6445164e75112929d7e02b9feabda1155159e7ded34ef693
name: postgresoperator.v5.6.0
package: crunchy-postgres-operator
properties:
- type: olm.gvk
  value:
    group: postgres-operator.crunchydata.com
    kind: CrunchyBridgeCluster
    version: v1beta1
- type: olm.gvk
  value:
    group: postgres-operator.crunchydata.com
    kind: PGAdmin
    version: v1beta1
- type: olm.gvk
  value:
    group: postgres-operator.crunchydata.com
    kind: PGUpgrade
    version: v1beta1
- type: olm.gvk
  value:
    group: postgres-operator.crunchydata.com
    kind: PostgresCluster
    version: v1beta1
- type: olm.package
  value:
    packageName: crunchy-postgres-operator
    version: 5.6.0
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "CrunchyBridgeCluster",
            "metadata": {
              "name": "example-crunchybridgecluster"
            },
            "spec": {
              "clusterName": "example-bridge-cluster",
              "isHa": false,
              "majorVersion": 16,
              "plan": "standard-4",
              "provider": "aws",
              "region": "us-west-2",
              "secret": "crunchy-bridge-api-key",
              "storage": "10Gi"
            }
          },
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "PGAdmin",
            "metadata": {
              "name": "example-pgadmin",
              "namespace": "openshift-operators"
            },
            "spec": {
              "dataVolumeClaimSpec": {
                "accessModes": [
                  "ReadWriteOnce"
                ],
                "resources": {
                  "requests": {
                    "storage": "1Gi"
                  }
                }
              },
              "serverGroups": [
                {
                  "name": "Crunchy Postgres for Kubernetes",
                  "postgresClusterSelector": {}
                }
              ]
            }
          },
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "PGUpgrade",
            "metadata": {
              "name": "example-upgrade"
            },
            "spec": {
              "fromPostgresVersion": 15,
              "postgresClusterName": "example",
              "toPostgresVersion": 16
            }
          },
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "PostgresCluster",
            "metadata": {
              "name": "example"
            },
            "spec": {
              "backups": {
                "pgbackrest": {
                  "repos": [
                    {
                      "name": "repo1",
                      "volume": {
                        "volumeClaimSpec": {
                          "accessModes": [
                            "ReadWriteOnce"
                          ],
                          "resources": {
                            "requests": {
                              "storage": "1Gi"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              },
              "instances": [
                {
                  "dataVolumeClaimSpec": {
                    "accessModes": [
                      "ReadWriteOnce"
                    ],
                    "resources": {
                      "requests": {
                        "storage": "1Gi"
                      }
                    }
                  },
                  "replicas": 1
                }
              ],
              "postgresVersion": 15
            }
          }
        ]
      capabilities: Auto Pilot
      categories: Database
      certified: "true"
      containerImage: registry.connect.redhat.com/crunchydata/postgres-operator@sha256:bf7c96585d01bcc5fd89e1c21981d691c2fac84591ab69ee7d823572ed9da01a
      createdAt: 2019-12-31 19:40Z
      description: Production Postgres Made Easy
      features.operators.openshift.io/cnf: "false"
      features.operators.openshift.io/cni: "false"
      features.operators.openshift.io/csi: "false"
      features.operators.openshift.io/disconnected: "true"
      features.operators.openshift.io/fips-compliant: "false"
      features.operators.openshift.io/proxy-aware: "false"
      features.operators.openshift.io/tls-profiles: "false"
      features.operators.openshift.io/token-auth-aws: "false"
      features.operators.openshift.io/token-auth-azure: "false"
      features.operators.openshift.io/token-auth-gcp: "false"
      olm.properties: '[]'
      repository: https://github.com/CrunchyData/postgres-operator
      support: crunchydata.com
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: CrunchyBridgeCluster is the Schema for the crunchybridgeclusters
          API
        displayName: Crunchy Bridge Cluster
        kind: CrunchyBridgeCluster
        name: crunchybridgeclusters.postgres-operator.crunchydata.com
        resources:
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: CronJob
          name: ""
          version: v1beta1
        - kind: Deployment
          name: ""
          version: v1
        - kind: Job
          name: ""
          version: v1
        - kind: PersistentVolumeClaim
          name: ""
          version: v1
        - kind: Secret
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: StatefulSet
          name: ""
          version: v1
        specDescriptors:
        - description: The ID of the cluster's major Postgres version. Currently Bridge
            offers 13-16
          displayName: Postgres Version
          path: majorVersion
        statusDescriptors:
        - description: conditions represent the observations of postgres cluster's
            current state.
          displayName: Conditions
          path: conditions
          x-descriptors:
          - urn:alm:descriptor:io.kubernetes.conditions
        version: v1beta1
      - description: PGAdmin is the Schema for the PGAdmin API
        displayName: PGAdmin
        kind: PGAdmin
        name: pgadmins.postgres-operator.crunchydata.com
        statusDescriptors:
        - description: 'conditions represent the observations of pgAdmin''s current
            state. Known .status.conditions.type is: "PersistentVolumeResizing"'
          displayName: Conditions
          path: conditions
          x-descriptors:
          - urn:alm:descriptor:io.kubernetes.conditions
        version: v1beta1
      - description: PGUpgrade is the Schema for the pgupgrades API
        displayName: PGUpgrade
        kind: PGUpgrade
        name: pgupgrades.postgres-operator.crunchydata.com
        version: v1beta1
      - description: PostgresCluster is the Schema for the postgresclusters API
        displayName: Postgres Cluster
        kind: PostgresCluster
        name: postgresclusters.postgres-operator.crunchydata.com
        resources:
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: CronJob
          name: ""
          version: v1beta1
        - kind: Deployment
          name: ""
          version: v1
        - kind: Job
          name: ""
          version: v1
        - kind: PersistentVolumeClaim
          name: ""
          version: v1
        - kind: Secret
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: StatefulSet
          name: ""
          version: v1
        specDescriptors:
        - description: The image name to use for PostgreSQL containers. When omitted,
            the value comes from an operator environment variable. For standard PostgreSQL
            images, the format is RELATED_IMAGE_POSTGRES_{postgresVersion}, e.g. RELATED_IMAGE_POSTGRES_13.
            For PostGIS enabled PostgreSQL images, the format is RELATED_IMAGE_POSTGRES_{postgresVersion}_GIS_{postGISVersion},
            e.g. RELATED_IMAGE_POSTGRES_13_GIS_3.1.
          displayName: Image
          path: image
        - description: The major version of PostgreSQL installed in the PostgreSQL
            image
          displayName: Postgres Version
          path: postgresVersion
        - description: Specifies one or more sets of PostgreSQL pods that replicate
            data for this cluster.
          displayName: Instance Sets
          path: instances
        statusDescriptors:
        - description: 'conditions represent the observations of postgrescluster''s
            current state. Known .status.conditions.type are: "PersistentVolumeResizing",
            "Progressing", "ProxyAvailable"'
          displayName: Conditions
          path: conditions
          x-descriptors:
          - urn:alm:descriptor:io.kubernetes.conditions
        version: v1beta1
    description: |-
      [Crunchy Postgres for Kubernetes](https://www.crunchydata.com/products/crunchy-postgresql-for-kubernetes), is the leading Kubernetes native
      Postgres solution. Built on PGO, the Postgres Operator from Crunchy Data, Crunchy Postgres for Kubernetes gives you a declarative Postgres
      solution that automatically manages your PostgreSQL clusters.

      Designed for your GitOps workflows, it is [easy to get started](https://access.crunchydata.com/documentation/postgres-operator/latest/quickstart)
      with Crunchy Postgres for Kubernetes. Within a few moments, you can have a production grade Postgres cluster complete with high availability, disaster
      recovery, and monitoring, all over secure TLS communications. Even better, Crunchy Postgres for Kubernetes lets you easily customize your Postgres
      cluster to tailor it to your workload!

      With conveniences like cloning Postgres clusters to using rolling updates to roll out disruptive changes with minimal downtime, Crunchy Postgres
      for Kubernetes is ready to support your Postgres data at every stage of your release pipeline. Built for resiliency and uptime, Crunchy Postgres
      for Kubernetes will keep your Postgres cluster in a desired state so you do not need to worry about it.

      Crunchy Postgres for Kubernetes is developed with many years of production experience in automating Postgres management on Kubernetes, providing
      a seamless cloud native Postgres solution to keep your data always available.

      Crunchy Postgres for Kubernetes is made available to users without an active Crunchy Data subscription in connection with Crunchy Data's
      [Developer Program](https://www.crunchydata.com/developers/terms-of-use).
      For more information, please contact us at [info@crunchydata.com](mailto:info@crunchydata.com).

      - **PostgreSQL Cluster Provisioning**: [Create, Scale, & Delete PostgreSQL clusters with ease][provisioning],
        while fully customizing your Pods and PostgreSQL configuration!
      - **High-Availability**: Safe, automated failover backed by a [distributed consensus based high-availability solution][high-availability].
        Uses [Pod Anti-Affinity][k8s-anti-affinity] to help resiliency; you can configure how aggressive this can be!
        Failed primaries automatically heal, allowing for faster recovery time. You can even create regularly scheduled
        backups as well and set your backup retention policy
      - **Disaster Recovery**: [Backups][backups] and [restores][disaster-recovery] leverage the open source [pgBackRest][] utility and
        [includes support for full, incremental, and differential backups as well as efficient delta restores][backups].
        Set how long you want your backups retained for. Works great with very large databases!
      - **Monitoring**: [Track the health of your PostgreSQL clusters][monitoring] using the open source [pgMonitor][] library.
      - **Clone**: [Create new clusters from your existing clusters or backups][clone] with efficient data cloning.
      - **TLS**: All connections are over [TLS][tls]. You can also [bring your own TLS infrastructure][tls] if you do not want to use the provided defaults.
      - **Connection Pooling**: Advanced [connection pooling][pool] support using [pgBouncer][].
      - **Affinity and Tolerations**: Have your PostgreSQL clusters deployed to [Kubernetes Nodes][k8s-nodes] of your preference.
        Set your [pod anti-affinity][k8s-anti-affinity], node affinity, Pod tolerations and more rules to customize your deployment topology!
      - **PostgreSQL Major Version Upgrades**: Perform a [PostgreSQL major version upgrade][major-version-upgrade] declaratively.
      - **Database Administration**: Easily deploy [pgAdmin4][pgadmin] to administer your PostgresClusters' databases.
        The automatic discovery of PostgresClusters ensures that you are able to seamlessly access any databases within your environment from the pgAdmin4 GUI.
      - **Full Customizability**: Crunchy PostgreSQL for Kubernetes makes it easy to get your own PostgreSQL-as-a-Service up and running
        and fully customize your deployments, including:
          - Choose the resources for your Postgres cluster: [container resources and storage size][resize-cluster]. [Resize at any time][resize-cluster] with minimal disruption.
          - Use your own container image repository, including support `imagePullSecrets` and private repositories
          - [Customize your PostgreSQL configuration][customize-cluster]

      and much more!

      [backups]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/backups-disaster-recovery
      [clone]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/backups-disaster-recovery/disaster-recovery
      [customize-cluster]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/day-two/customize-cluster
      [disaster-recovery]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/backups-disaster-recovery/disaster-recovery
      [high-availability]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/day-two/high-availability
      [major-version-upgrade]: https://access.crunchydata.com/documentation/postgres-operator/v5/guides/major-postgres-version-upgrade/
      [monitoring]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/day-two/monitoring
      [pool]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/basic-setup/connection-pooling
      [provisioning]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/basic-setup/create-cluster
      [resize-cluster]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/cluster-management/resize-cluster
      [tls]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/day-two/customize-cluster#customize-tls

      [k8s-anti-affinity]: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#inter-pod-affinity-and-anti-affinity
      [k8s-nodes]: https://kubernetes.io/docs/concepts/architecture/nodes/

      [pgAdmin]: https://www.pgadmin.org/
      [pgBackRest]: https://www.pgbackrest.org
      [pgBouncer]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/basic-setup/connection-pooling
      [pgMonitor]: https://github.com/CrunchyData/pgmonitor

      ## Post-Installation

      ### Tutorial

      Want to [learn more about the PostgreSQL Operator][tutorial]? Browse through the [tutorial][] to learn more about what you can do,
      [join the Discord server][discord] for community support, or check out the [PGO GitHub repo][ghrepo] to learn more
      about the open source Postgres Operator project that powers Crunchy Postgres for Kubernetes.

      [tutorial]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials
      [discord]: https://discord.gg/a7vWKG8Ec9
      [ghrepo]: https://github.com/CrunchyData/postgres-operator
    displayName: Crunchy Postgres for Kubernetes
    installModes:
    - supported: true
      type: OwnNamespace
    - supported: true
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - postgres
    - postgresql
    - database
    - sql
    - operator
    - crunchy data
    links:
    - name: Crunchy Data
      url: https://www.crunchydata.com/
    - name: Documentation
      url: https://access.crunchydata.com/documentation/postgres-operator/v5/
    maintainers:
    - email: info@crunchydata.com
      name: Crunchy Data
    maturity: stable
    minKubeVersion: 1.25.0
    provider:
      name: Crunchy Data
      url: https://www.crunchydata.com/
relatedImages:
- image: registry.connect.redhat.com/crunchydata/crunchy-pgadmin4@sha256:9566434804dc93603d65265c917e500e65e5823201d5aa7eb70431a4fd766b92
  name: PGADMIN
- image: registry.connect.redhat.com/crunchydata/crunchy-pgadmin4@sha256:cc3ddd9b7b89aeeafa2f0983ba074cc399ec671f4313becb37ff26d9eb4dcfbe
  name: STANDALONE_PGADMIN
- image: registry.connect.redhat.com/crunchydata/crunchy-pgbackrest@sha256:74d4ebf3d126411c67159509a45b99c525a330102551bd5f8e1b04cf2140cb36
  name: PGBACKREST
- image: registry.connect.redhat.com/crunchydata/crunchy-pgbouncer@sha256:d392a7b5b5d71a946acd565bbf167ee532f3bfe4449f5819c92e4808d8da400c
  name: PGBOUNCER
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-exporter@sha256:586083988c8b63ca499c7d8cc888a759999eabcfba157d2bd9a1e9be2fa521a5
  name: PGEXPORTER
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:2e21df194b712138a8e6df9daf5fb79b2494198173b60ada2ee377ea0b648676
  name: POSTGRES_16_GIS_3.3
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:30897c45d284179eaa3765236137117fce8c8a8d11e472fff681e075ed482d25
  name: POSTGRES_16_GIS_3.4
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:c80fae2c3e98e9cf91983dd655c42c1e9020e086b7d6ddedeeeb3d5dd6d8b658
  name: POSTGRES_15_GIS_3.3
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:02b1aab4b762a0b36471313f43bb396776c92538beb321f1eea62b0188e38156
  name: POSTGRES_16
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:143061c29a41e3041b5ccfb96712b486f033c146dbb4e0d85a791d10bbf9172d
  name: POSTGRES_15
- image: registry.connect.redhat.com/crunchydata/crunchy-upgrade@sha256:afe06f47b3c1899cc1d44ec52b34b537d4ae470833c957bdaab6f4e61dc158bc
  name: PGUPGRADE
- image: registry.connect.redhat.com/crunchydata/postgres-operator-bundle@sha256:c4bdf8a3ca8d47ba6445164e75112929d7e02b9feabda1155159e7ded34ef693
  name: ""
- image: registry.connect.redhat.com/crunchydata/postgres-operator@sha256:bf7c96585d01bcc5fd89e1c21981d691c2fac84591ab69ee7d823572ed9da01a
  name: postgres-operator
schema: olm.bundle
---
image: registry.connect.redhat.com/crunchydata/postgres-operator-bundle@sha256:e21fcbf34e33367fe7936d337297cd359bf759ee461b75f3f5810b01c9a6afe7
name: postgresoperator.v5.6.1
package: crunchy-postgres-operator
properties:
- type: olm.gvk
  value:
    group: postgres-operator.crunchydata.com
    kind: CrunchyBridgeCluster
    version: v1beta1
- type: olm.gvk
  value:
    group: postgres-operator.crunchydata.com
    kind: PGAdmin
    version: v1beta1
- type: olm.gvk
  value:
    group: postgres-operator.crunchydata.com
    kind: PGUpgrade
    version: v1beta1
- type: olm.gvk
  value:
    group: postgres-operator.crunchydata.com
    kind: PostgresCluster
    version: v1beta1
- type: olm.package
  value:
    packageName: crunchy-postgres-operator
    version: 5.6.1
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "CrunchyBridgeCluster",
            "metadata": {
              "name": "example-crunchybridgecluster"
            },
            "spec": {
              "clusterName": "example-bridge-cluster",
              "isHa": false,
              "majorVersion": 16,
              "plan": "standard-4",
              "provider": "aws",
              "region": "us-west-2",
              "secret": "crunchy-bridge-api-key",
              "storage": "10Gi"
            }
          },
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "PGAdmin",
            "metadata": {
              "name": "example-pgadmin",
              "namespace": "openshift-operators"
            },
            "spec": {
              "dataVolumeClaimSpec": {
                "accessModes": [
                  "ReadWriteOnce"
                ],
                "resources": {
                  "requests": {
                    "storage": "1Gi"
                  }
                }
              },
              "serverGroups": [
                {
                  "name": "Crunchy Postgres for Kubernetes",
                  "postgresClusterSelector": {}
                }
              ]
            }
          },
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "PGUpgrade",
            "metadata": {
              "name": "example-upgrade"
            },
            "spec": {
              "fromPostgresVersion": 15,
              "postgresClusterName": "example",
              "toPostgresVersion": 16
            }
          },
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "PostgresCluster",
            "metadata": {
              "name": "example"
            },
            "spec": {
              "backups": {
                "pgbackrest": {
                  "repos": [
                    {
                      "name": "repo1",
                      "volume": {
                        "volumeClaimSpec": {
                          "accessModes": [
                            "ReadWriteOnce"
                          ],
                          "resources": {
                            "requests": {
                              "storage": "1Gi"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              },
              "instances": [
                {
                  "dataVolumeClaimSpec": {
                    "accessModes": [
                      "ReadWriteOnce"
                    ],
                    "resources": {
                      "requests": {
                        "storage": "1Gi"
                      }
                    }
                  },
                  "replicas": 1
                }
              ],
              "postgresVersion": 15
            }
          }
        ]
      capabilities: Auto Pilot
      categories: Database
      certified: "true"
      containerImage: registry.connect.redhat.com/crunchydata/postgres-operator@sha256:2830235951cebbcb6442b70fee60d7e3484e5c15f33c0b70ddaca22dbe7d7b53
      createdAt: 2019-12-31 19:40Z
      description: Production Postgres Made Easy
      features.operators.openshift.io/cnf: "false"
      features.operators.openshift.io/cni: "false"
      features.operators.openshift.io/csi: "false"
      features.operators.openshift.io/disconnected: "true"
      features.operators.openshift.io/fips-compliant: "false"
      features.operators.openshift.io/proxy-aware: "false"
      features.operators.openshift.io/tls-profiles: "false"
      features.operators.openshift.io/token-auth-aws: "false"
      features.operators.openshift.io/token-auth-azure: "false"
      features.operators.openshift.io/token-auth-gcp: "false"
      olm.properties: '[]'
      repository: https://github.com/CrunchyData/postgres-operator
      support: crunchydata.com
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: CrunchyBridgeCluster is the Schema for the crunchybridgeclusters
          API
        displayName: Crunchy Bridge Cluster
        kind: CrunchyBridgeCluster
        name: crunchybridgeclusters.postgres-operator.crunchydata.com
        resources:
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: CronJob
          name: ""
          version: v1beta1
        - kind: Deployment
          name: ""
          version: v1
        - kind: Job
          name: ""
          version: v1
        - kind: PersistentVolumeClaim
          name: ""
          version: v1
        - kind: Secret
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: StatefulSet
          name: ""
          version: v1
        specDescriptors:
        - description: The ID of the cluster's major Postgres version. Currently Bridge
            offers 13-16
          displayName: Postgres Version
          path: majorVersion
        statusDescriptors:
        - description: conditions represent the observations of postgres cluster's
            current state.
          displayName: Conditions
          path: conditions
          x-descriptors:
          - urn:alm:descriptor:io.kubernetes.conditions
        version: v1beta1
      - description: PGAdmin is the Schema for the PGAdmin API
        displayName: PGAdmin
        kind: PGAdmin
        name: pgadmins.postgres-operator.crunchydata.com
        statusDescriptors:
        - description: 'conditions represent the observations of pgAdmin''s current
            state. Known .status.conditions.type is: "PersistentVolumeResizing"'
          displayName: Conditions
          path: conditions
          x-descriptors:
          - urn:alm:descriptor:io.kubernetes.conditions
        version: v1beta1
      - description: PGUpgrade is the Schema for the pgupgrades API
        displayName: PGUpgrade
        kind: PGUpgrade
        name: pgupgrades.postgres-operator.crunchydata.com
        version: v1beta1
      - description: PostgresCluster is the Schema for the postgresclusters API
        displayName: Postgres Cluster
        kind: PostgresCluster
        name: postgresclusters.postgres-operator.crunchydata.com
        resources:
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: CronJob
          name: ""
          version: v1beta1
        - kind: Deployment
          name: ""
          version: v1
        - kind: Job
          name: ""
          version: v1
        - kind: PersistentVolumeClaim
          name: ""
          version: v1
        - kind: Secret
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: StatefulSet
          name: ""
          version: v1
        specDescriptors:
        - description: The image name to use for PostgreSQL containers. When omitted,
            the value comes from an operator environment variable. For standard PostgreSQL
            images, the format is RELATED_IMAGE_POSTGRES_{postgresVersion}, e.g. RELATED_IMAGE_POSTGRES_13.
            For PostGIS enabled PostgreSQL images, the format is RELATED_IMAGE_POSTGRES_{postgresVersion}_GIS_{postGISVersion},
            e.g. RELATED_IMAGE_POSTGRES_13_GIS_3.1.
          displayName: Image
          path: image
        - description: The major version of PostgreSQL installed in the PostgreSQL
            image
          displayName: Postgres Version
          path: postgresVersion
        - description: Specifies one or more sets of PostgreSQL pods that replicate
            data for this cluster.
          displayName: Instance Sets
          path: instances
        statusDescriptors:
        - description: 'conditions represent the observations of postgrescluster''s
            current state. Known .status.conditions.type are: "PersistentVolumeResizing",
            "Progressing", "ProxyAvailable"'
          displayName: Conditions
          path: conditions
          x-descriptors:
          - urn:alm:descriptor:io.kubernetes.conditions
        version: v1beta1
    description: |-
      [Crunchy Postgres for Kubernetes](https://www.crunchydata.com/products/crunchy-postgresql-for-kubernetes), is the leading Kubernetes native
      Postgres solution. Built on PGO, the Postgres Operator from Crunchy Data, Crunchy Postgres for Kubernetes gives you a declarative Postgres
      solution that automatically manages your PostgreSQL clusters.

      Designed for your GitOps workflows, it is [easy to get started](https://access.crunchydata.com/documentation/postgres-operator/latest/quickstart)
      with Crunchy Postgres for Kubernetes. Within a few moments, you can have a production grade Postgres cluster complete with high availability, disaster
      recovery, and monitoring, all over secure TLS communications. Even better, Crunchy Postgres for Kubernetes lets you easily customize your Postgres
      cluster to tailor it to your workload!

      With conveniences like cloning Postgres clusters to using rolling updates to roll out disruptive changes with minimal downtime, Crunchy Postgres
      for Kubernetes is ready to support your Postgres data at every stage of your release pipeline. Built for resiliency and uptime, Crunchy Postgres
      for Kubernetes will keep your Postgres cluster in a desired state so you do not need to worry about it.

      Crunchy Postgres for Kubernetes is developed with many years of production experience in automating Postgres management on Kubernetes, providing
      a seamless cloud native Postgres solution to keep your data always available.

      Crunchy Postgres for Kubernetes is made available to users without an active Crunchy Data subscription in connection with Crunchy Data's
      [Developer Program](https://www.crunchydata.com/developers/terms-of-use).
      For more information, please contact us at [info@crunchydata.com](mailto:info@crunchydata.com).

      - **PostgreSQL Cluster Provisioning**: [Create, Scale, & Delete PostgreSQL clusters with ease][provisioning],
        while fully customizing your Pods and PostgreSQL configuration!
      - **High-Availability**: Safe, automated failover backed by a [distributed consensus based high-availability solution][high-availability].
        Uses [Pod Anti-Affinity][k8s-anti-affinity] to help resiliency; you can configure how aggressive this can be!
        Failed primaries automatically heal, allowing for faster recovery time. You can even create regularly scheduled
        backups as well and set your backup retention policy
      - **Disaster Recovery**: [Backups][backups] and [restores][disaster-recovery] leverage the open source [pgBackRest][] utility and
        [includes support for full, incremental, and differential backups as well as efficient delta restores][backups].
        Set how long you want your backups retained for. Works great with very large databases!
      - **Monitoring**: [Track the health of your PostgreSQL clusters][monitoring] using the open source [pgMonitor][] library.
      - **Clone**: [Create new clusters from your existing clusters or backups][clone] with efficient data cloning.
      - **TLS**: All connections are over [TLS][tls]. You can also [bring your own TLS infrastructure][tls] if you do not want to use the provided defaults.
      - **Connection Pooling**: Advanced [connection pooling][pool] support using [pgBouncer][].
      - **Affinity and Tolerations**: Have your PostgreSQL clusters deployed to [Kubernetes Nodes][k8s-nodes] of your preference.
        Set your [pod anti-affinity][k8s-anti-affinity], node affinity, Pod tolerations and more rules to customize your deployment topology!
      - **PostgreSQL Major Version Upgrades**: Perform a [PostgreSQL major version upgrade][major-version-upgrade] declaratively.
      - **Database Administration**: Easily deploy [pgAdmin4][pgadmin] to administer your PostgresClusters' databases.
        The automatic discovery of PostgresClusters ensures that you are able to seamlessly access any databases within your environment from the pgAdmin4 GUI.
      - **Full Customizability**: Crunchy PostgreSQL for Kubernetes makes it easy to get your own PostgreSQL-as-a-Service up and running
        and fully customize your deployments, including:
          - Choose the resources for your Postgres cluster: [container resources and storage size][resize-cluster]. [Resize at any time][resize-cluster] with minimal disruption.
          - Use your own container image repository, including support `imagePullSecrets` and private repositories
          - [Customize your PostgreSQL configuration][customize-cluster]

      and much more!

      [backups]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/backups-disaster-recovery
      [clone]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/backups-disaster-recovery/disaster-recovery
      [customize-cluster]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/day-two/customize-cluster
      [disaster-recovery]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/backups-disaster-recovery/disaster-recovery
      [high-availability]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/day-two/high-availability
      [major-version-upgrade]: https://access.crunchydata.com/documentation/postgres-operator/v5/guides/major-postgres-version-upgrade/
      [monitoring]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/day-two/monitoring
      [pool]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/basic-setup/connection-pooling
      [provisioning]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/basic-setup/create-cluster
      [resize-cluster]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/cluster-management/resize-cluster
      [tls]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/day-two/customize-cluster#customize-tls

      [k8s-anti-affinity]: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#inter-pod-affinity-and-anti-affinity
      [k8s-nodes]: https://kubernetes.io/docs/concepts/architecture/nodes/

      [pgAdmin]: https://www.pgadmin.org/
      [pgBackRest]: https://www.pgbackrest.org
      [pgBouncer]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/basic-setup/connection-pooling
      [pgMonitor]: https://github.com/CrunchyData/pgmonitor

      ## Post-Installation

      ### Tutorial

      Want to [learn more about the PostgreSQL Operator][tutorial]? Browse through the [tutorial][] to learn more about what you can do,
      [join the Discord server][discord] for community support, or check out the [PGO GitHub repo][ghrepo] to learn more
      about the open source Postgres Operator project that powers Crunchy Postgres for Kubernetes.

      [tutorial]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials
      [discord]: https://discord.gg/a7vWKG8Ec9
      [ghrepo]: https://github.com/CrunchyData/postgres-operator
    displayName: Crunchy Postgres for Kubernetes
    installModes:
    - supported: true
      type: OwnNamespace
    - supported: true
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - postgres
    - postgresql
    - database
    - sql
    - operator
    - crunchy data
    labels:
      app.kubernetes.io/version: 5.6.1
    links:
    - name: Crunchy Data
      url: https://www.crunchydata.com/
    - name: Documentation
      url: https://access.crunchydata.com/documentation/postgres-operator/v5/
    maintainers:
    - email: info@crunchydata.com
      name: Crunchy Data
    maturity: stable
    minKubeVersion: 1.25.0
    provider:
      name: Crunchy Data
      url: https://www.crunchydata.com/
relatedImages:
- image: registry.connect.redhat.com/crunchydata/crunchy-pgadmin4@sha256:6f217f96ebd44d3f6846e8ccea6d6bf72e621e90ce96573cbff1bf65647a2151
  name: STANDALONE_PGADMIN
- image: registry.connect.redhat.com/crunchydata/crunchy-pgadmin4@sha256:d6f38418bafcc3eca7102a78f14e78f3a11101ff0b03d85e7eacdb1fbb6817f0
  name: PGADMIN
- image: registry.connect.redhat.com/crunchydata/crunchy-pgbackrest@sha256:f537a136e75e900d9e2e6f0e0ed04a4c04fd97fdcf071b55afdee6801b05a64a
  name: PGBACKREST
- image: registry.connect.redhat.com/crunchydata/crunchy-pgbouncer@sha256:98f09ac06303de53691266ffcc95d4f68e3cd01b945a1feeb54504fb1b9d5586
  name: PGBOUNCER
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-exporter@sha256:1b48da6039d5957ae9d07801ef85baff67c834ec7c014a6c039ca2994efbfc3e
  name: PGEXPORTER
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:21dc71c8346a6a212dc209e0f3c998fb49eecea136ec6937aeae454716f7571a
  name: POSTGRES_15_GIS_3.3
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:445fffb030a29b97a92fea3b2f61eb42e7a0103399693ad606f0131670519b2f
  name: POSTGRES_16_GIS_3.3
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:d5671c41df39c56b4f8c07cd24972d780fa265b34aa7595198e17ee0d791c3a1
  name: POSTGRES_16_GIS_3.4
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:5dfe3cd2be7c974ab9fd9a104d7737a8b8039615e24b6973b056d8381316e721
  name: POSTGRES_15
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:e8fceb1ac138dbb17398aafbb6e258e8fe6261d3baacb998d7ebea3af42cb83a
  name: POSTGRES_16
- image: registry.connect.redhat.com/crunchydata/crunchy-upgrade@sha256:37f21c46d565bbd3fe955e5e3e611b6948c1354db1347ae9937ed9677da49713
  name: PGUPGRADE
- image: registry.connect.redhat.com/crunchydata/postgres-operator-bundle@sha256:e21fcbf34e33367fe7936d337297cd359bf759ee461b75f3f5810b01c9a6afe7
  name: ""
- image: registry.connect.redhat.com/crunchydata/postgres-operator@sha256:2830235951cebbcb6442b70fee60d7e3484e5c15f33c0b70ddaca22dbe7d7b53
  name: postgres-operator
schema: olm.bundle
---
image: registry.connect.redhat.com/crunchydata/postgres-operator-bundle@sha256:888890d45eb7e2be5b927940f7dc2cbd23191bf40b127fb82f999d1f9b8eaeac
name: postgresoperator.v5.7.0
package: crunchy-postgres-operator
properties:
- type: olm.gvk
  value:
    group: postgres-operator.crunchydata.com
    kind: CrunchyBridgeCluster
    version: v1beta1
- type: olm.gvk
  value:
    group: postgres-operator.crunchydata.com
    kind: PGAdmin
    version: v1beta1
- type: olm.gvk
  value:
    group: postgres-operator.crunchydata.com
    kind: PGUpgrade
    version: v1beta1
- type: olm.gvk
  value:
    group: postgres-operator.crunchydata.com
    kind: PostgresCluster
    version: v1beta1
- type: olm.package
  value:
    packageName: crunchy-postgres-operator
    version: 5.7.0
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "CrunchyBridgeCluster",
            "metadata": {
              "name": "example-crunchybridgecluster"
            },
            "spec": {
              "clusterName": "example-bridge-cluster",
              "isHa": false,
              "majorVersion": 16,
              "plan": "standard-4",
              "provider": "aws",
              "region": "us-west-2",
              "secret": "crunchy-bridge-api-key",
              "storage": "10Gi"
            }
          },
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "PGAdmin",
            "metadata": {
              "name": "example-pgadmin",
              "namespace": "openshift-operators"
            },
            "spec": {
              "dataVolumeClaimSpec": {
                "accessModes": [
                  "ReadWriteOnce"
                ],
                "resources": {
                  "requests": {
                    "storage": "1Gi"
                  }
                }
              },
              "serverGroups": [
                {
                  "name": "Crunchy Postgres for Kubernetes",
                  "postgresClusterSelector": {}
                }
              ]
            }
          },
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "PGUpgrade",
            "metadata": {
              "name": "example-upgrade"
            },
            "spec": {
              "fromPostgresVersion": 15,
              "postgresClusterName": "example",
              "toPostgresVersion": 16
            }
          },
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "PostgresCluster",
            "metadata": {
              "name": "example"
            },
            "spec": {
              "backups": {
                "pgbackrest": {
                  "repos": [
                    {
                      "name": "repo1",
                      "volume": {
                        "volumeClaimSpec": {
                          "accessModes": [
                            "ReadWriteOnce"
                          ],
                          "resources": {
                            "requests": {
                              "storage": "1Gi"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              },
              "instances": [
                {
                  "dataVolumeClaimSpec": {
                    "accessModes": [
                      "ReadWriteOnce"
                    ],
                    "resources": {
                      "requests": {
                        "storage": "1Gi"
                      }
                    }
                  },
                  "replicas": 1
                }
              ],
              "postgresVersion": 16
            }
          }
        ]
      capabilities: Auto Pilot
      categories: Database
      certified: "true"
      containerImage: registry.connect.redhat.com/crunchydata/postgres-operator@sha256:d81cbd9138ee05f0bad5914def75fd0e9b15ce98c701d7e2baf89abaca64c024
      createdAt: 2019-12-31 19:40Z
      description: Production Postgres Made Easy
      features.operators.openshift.io/cnf: "false"
      features.operators.openshift.io/cni: "false"
      features.operators.openshift.io/csi: "false"
      features.operators.openshift.io/disconnected: "true"
      features.operators.openshift.io/fips-compliant: "false"
      features.operators.openshift.io/proxy-aware: "false"
      features.operators.openshift.io/tls-profiles: "false"
      features.operators.openshift.io/token-auth-aws: "false"
      features.operators.openshift.io/token-auth-azure: "false"
      features.operators.openshift.io/token-auth-gcp: "false"
      olm.properties: '[]'
      repository: https://github.com/CrunchyData/postgres-operator
      support: crunchydata.com
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: CrunchyBridgeCluster is the Schema for the crunchybridgeclusters
          API
        displayName: Crunchy Bridge Cluster
        kind: CrunchyBridgeCluster
        name: crunchybridgeclusters.postgres-operator.crunchydata.com
        resources:
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: CronJob
          name: ""
          version: v1beta1
        - kind: Deployment
          name: ""
          version: v1
        - kind: Job
          name: ""
          version: v1
        - kind: PersistentVolumeClaim
          name: ""
          version: v1
        - kind: Secret
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: StatefulSet
          name: ""
          version: v1
        specDescriptors:
        - description: The ID of the cluster's major Postgres version. Currently Bridge
            offers 13-16
          displayName: Postgres Version
          path: majorVersion
        statusDescriptors:
        - description: conditions represent the observations of postgres cluster's
            current state.
          displayName: Conditions
          path: conditions
          x-descriptors:
          - urn:alm:descriptor:io.kubernetes.conditions
        version: v1beta1
      - description: PGAdmin is the Schema for the PGAdmin API
        displayName: PGAdmin
        kind: PGAdmin
        name: pgadmins.postgres-operator.crunchydata.com
        statusDescriptors:
        - description: 'conditions represent the observations of pgAdmin''s current
            state. Known .status.conditions.type is: "PersistentVolumeResizing"'
          displayName: Conditions
          path: conditions
          x-descriptors:
          - urn:alm:descriptor:io.kubernetes.conditions
        version: v1beta1
      - description: PGUpgrade is the Schema for the pgupgrades API
        displayName: PGUpgrade
        kind: PGUpgrade
        name: pgupgrades.postgres-operator.crunchydata.com
        version: v1beta1
      - description: PostgresCluster is the Schema for the postgresclusters API
        displayName: Postgres Cluster
        kind: PostgresCluster
        name: postgresclusters.postgres-operator.crunchydata.com
        resources:
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: CronJob
          name: ""
          version: v1beta1
        - kind: Deployment
          name: ""
          version: v1
        - kind: Job
          name: ""
          version: v1
        - kind: PersistentVolumeClaim
          name: ""
          version: v1
        - kind: Secret
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: StatefulSet
          name: ""
          version: v1
        specDescriptors:
        - description: The image name to use for PostgreSQL containers. When omitted,
            the value comes from an operator environment variable. For standard PostgreSQL
            images, the format is RELATED_IMAGE_POSTGRES_{postgresVersion}, e.g. RELATED_IMAGE_POSTGRES_13.
            For PostGIS enabled PostgreSQL images, the format is RELATED_IMAGE_POSTGRES_{postgresVersion}_GIS_{postGISVersion},
            e.g. RELATED_IMAGE_POSTGRES_13_GIS_3.1.
          displayName: Image
          path: image
        - description: The major version of PostgreSQL installed in the PostgreSQL
            image
          displayName: Postgres Version
          path: postgresVersion
        - description: Specifies one or more sets of PostgreSQL pods that replicate
            data for this cluster.
          displayName: Instance Sets
          path: instances
        statusDescriptors:
        - description: 'conditions represent the observations of postgrescluster''s
            current state. Known .status.conditions.type are: "PersistentVolumeResizing",
            "Progressing", "ProxyAvailable"'
          displayName: Conditions
          path: conditions
          x-descriptors:
          - urn:alm:descriptor:io.kubernetes.conditions
        version: v1beta1
    description: |-
      [Crunchy Postgres for Kubernetes](https://www.crunchydata.com/products/crunchy-postgresql-for-kubernetes), is the leading Kubernetes native
      Postgres solution. Built on PGO, the Postgres Operator from Crunchy Data, Crunchy Postgres for Kubernetes gives you a declarative Postgres
      solution that automatically manages your PostgreSQL clusters.

      Designed for your GitOps workflows, it is [easy to get started](https://access.crunchydata.com/documentation/postgres-operator/latest/quickstart)
      with Crunchy Postgres for Kubernetes. Within a few moments, you can have a production grade Postgres cluster complete with high availability, disaster
      recovery, and monitoring, all over secure TLS communications. Even better, Crunchy Postgres for Kubernetes lets you easily customize your Postgres
      cluster to tailor it to your workload!

      With conveniences like cloning Postgres clusters to using rolling updates to roll out disruptive changes with minimal downtime, Crunchy Postgres
      for Kubernetes is ready to support your Postgres data at every stage of your release pipeline. Built for resiliency and uptime, Crunchy Postgres
      for Kubernetes will keep your Postgres cluster in a desired state so you do not need to worry about it.

      Crunchy Postgres for Kubernetes is developed with many years of production experience in automating Postgres management on Kubernetes, providing
      a seamless cloud native Postgres solution to keep your data always available.

      Crunchy Postgres for Kubernetes is made available to users without an active Crunchy Data subscription in connection with Crunchy Data's
      [Developer Program](https://www.crunchydata.com/developers/terms-of-use).
      For more information, please contact us at [info@crunchydata.com](mailto:info@crunchydata.com).

      - **PostgreSQL Cluster Provisioning**: [Create, Scale, & Delete PostgreSQL clusters with ease][provisioning],
        while fully customizing your Pods and PostgreSQL configuration!
      - **High-Availability**: Safe, automated failover backed by a [distributed consensus based high-availability solution][high-availability].
        Uses [Pod Anti-Affinity][k8s-anti-affinity] to help resiliency; you can configure how aggressive this can be!
        Failed primaries automatically heal, allowing for faster recovery time. You can even create regularly scheduled
        backups as well and set your backup retention policy
      - **Disaster Recovery**: [Backups][backups] and [restores][disaster-recovery] leverage the open source [pgBackRest][] utility and
        [includes support for full, incremental, and differential backups as well as efficient delta restores][backups].
        Set how long you want your backups retained for. Works great with very large databases!
      - **Monitoring**: [Track the health of your PostgreSQL clusters][monitoring] using the open source [pgMonitor][] library.
      - **Clone**: [Create new clusters from your existing clusters or backups][clone] with efficient data cloning.
      - **TLS**: All connections are over [TLS][tls]. You can also [bring your own TLS infrastructure][tls] if you do not want to use the provided defaults.
      - **Connection Pooling**: Advanced [connection pooling][pool] support using [pgBouncer][].
      - **Affinity and Tolerations**: Have your PostgreSQL clusters deployed to [Kubernetes Nodes][k8s-nodes] of your preference.
        Set your [pod anti-affinity][k8s-anti-affinity], node affinity, Pod tolerations and more rules to customize your deployment topology!
      - **PostgreSQL Major Version Upgrades**: Perform a [PostgreSQL major version upgrade][major-version-upgrade] declaratively.
      - **Database Administration**: Easily deploy [pgAdmin4][pgadmin] to administer your PostgresClusters' databases.
        The automatic discovery of PostgresClusters ensures that you are able to seamlessly access any databases within your environment from the pgAdmin4 GUI.
      - **Full Customizability**: Crunchy PostgreSQL for Kubernetes makes it easy to get your own PostgreSQL-as-a-Service up and running
        and fully customize your deployments, including:
          - Choose the resources for your Postgres cluster: [container resources and storage size][resize-cluster]. [Resize at any time][resize-cluster] with minimal disruption.
          - Use your own container image repository, including support `imagePullSecrets` and private repositories
          - [Customize your PostgreSQL configuration][customize-cluster]

      and much more!

      [backups]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/backups-disaster-recovery
      [clone]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/backups-disaster-recovery/disaster-recovery
      [customize-cluster]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/day-two/customize-cluster
      [disaster-recovery]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/backups-disaster-recovery/disaster-recovery
      [high-availability]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/day-two/high-availability
      [major-version-upgrade]: https://access.crunchydata.com/documentation/postgres-operator/v5/guides/major-postgres-version-upgrade/
      [monitoring]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/day-two/monitoring
      [pool]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/basic-setup/connection-pooling
      [provisioning]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/basic-setup/create-cluster
      [resize-cluster]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/cluster-management/resize-cluster
      [tls]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/day-two/customize-cluster#customize-tls

      [k8s-anti-affinity]: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#inter-pod-affinity-and-anti-affinity
      [k8s-nodes]: https://kubernetes.io/docs/concepts/architecture/nodes/

      [pgAdmin]: https://www.pgadmin.org/
      [pgBackRest]: https://www.pgbackrest.org
      [pgBouncer]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/basic-setup/connection-pooling
      [pgMonitor]: https://github.com/CrunchyData/pgmonitor

      ## Post-Installation

      ### Tutorial

      Want to [learn more about the PostgreSQL Operator][tutorial]? Browse through the [tutorial][] to learn more about what you can do,
      [join the Discord server][discord] for community support, or check out the [PGO GitHub repo][ghrepo] to learn more
      about the open source Postgres Operator project that powers Crunchy Postgres for Kubernetes.

      [tutorial]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials
      [discord]: https://discord.gg/a7vWKG8Ec9
      [ghrepo]: https://github.com/CrunchyData/postgres-operator
    displayName: Crunchy Postgres for Kubernetes
    installModes:
    - supported: true
      type: OwnNamespace
    - supported: true
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - postgres
    - postgresql
    - database
    - sql
    - operator
    - crunchy data
    labels:
      app.kubernetes.io/version: 5.7.0
    links:
    - name: Crunchy Data
      url: https://www.crunchydata.com/
    - name: Documentation
      url: https://access.crunchydata.com/documentation/postgres-operator/v5/
    maintainers:
    - email: info@crunchydata.com
      name: Crunchy Data
    maturity: stable
    minKubeVersion: 1.25.0
    provider:
      name: Crunchy Data
      url: https://www.crunchydata.com/
relatedImages:
- image: registry.connect.redhat.com/crunchydata/crunchy-pgadmin4@sha256:81bfe6306e66c81db66f9d502fac0dac916ff28d5da9263ec3c80118574c75fc
  name: PGADMIN
- image: registry.connect.redhat.com/crunchydata/crunchy-pgadmin4@sha256:c7390561edf41f1d566835d8baea4689f64230e8ec6426ac3573079aae3b4ea6
  name: STANDALONE_PGADMIN
- image: registry.connect.redhat.com/crunchydata/crunchy-pgbackrest@sha256:5614fa90c56aac4cd7a9710b7efb24b22e356facbc2e7a52bbeccf5185723199
  name: PGBACKREST
- image: registry.connect.redhat.com/crunchydata/crunchy-pgbouncer@sha256:9f1f2d4aecde3995d876ffa4e94566a87f8ebe8d1655b392d48601e2bf8d9f50
  name: PGBOUNCER
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-exporter@sha256:361f6068187551f27e64619ee707f7398001bf016d30eb8b8c38be05e88e1405
  name: PGEXPORTER
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:78896bd959646e99f90df1938e0ba462b4eaa8f23dcefdc668480fbabd421011
  name: RELATED_IMAGE_POSTGRES_17_GIS_3.4
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:98d6e0eacc6f6398e9465e8bd83b8632b4bdccaa0fd287e34880a36d5d27fc86
  name: POSTGRES_15_GIS_3.3
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:a6d6a750310228b6fba72af08842eaa8e5d198580983f19ebdd934073bc010af
  name: POSTGRES_16_GIS_3.4
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:cc2881de1811b560f977ad921dbbe215d78a2f8583b3568cc3216bf658ed6008
  name: POSTGRES_16_GIS_3.3
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:282c4c9c3b5c3d67c960585ec6cb947d3a6af981cb48a0083ebebe61cc5b8cc4
  name: POSTGRES_16
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:2e5ee1e7f5d6d13547024c4e9134abd726e21026109b095e1f9002aa14ff947e
  name: POSTGRES_15
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:56873bc1a404776d737de7708ae157388a2a855e2bc195ecb0e012ff595bf550
  name: POSTGRES_17
- image: registry.connect.redhat.com/crunchydata/crunchy-upgrade@sha256:8c2d2276a72096060a9eebf5abc6331b069936bed5a4f56978843b29100e7b65
  name: PGUPGRADE
- image: registry.connect.redhat.com/crunchydata/postgres-operator-bundle@sha256:888890d45eb7e2be5b927940f7dc2cbd23191bf40b127fb82f999d1f9b8eaeac
  name: ""
- image: registry.connect.redhat.com/crunchydata/postgres-operator@sha256:d81cbd9138ee05f0bad5914def75fd0e9b15ce98c701d7e2baf89abaca64c024
  name: postgres-operator
schema: olm.bundle
---
image: registry.connect.redhat.com/crunchydata/postgres-operator-bundle@sha256:56a1f3794e1af0df01d6e6c8a840e35e4fad5025a6dc71b0570e6b9af7c7b23e
name: postgresoperator.v5.7.1
package: crunchy-postgres-operator
properties:
- type: olm.gvk
  value:
    group: postgres-operator.crunchydata.com
    kind: CrunchyBridgeCluster
    version: v1beta1
- type: olm.gvk
  value:
    group: postgres-operator.crunchydata.com
    kind: PGAdmin
    version: v1beta1
- type: olm.gvk
  value:
    group: postgres-operator.crunchydata.com
    kind: PGUpgrade
    version: v1beta1
- type: olm.gvk
  value:
    group: postgres-operator.crunchydata.com
    kind: PostgresCluster
    version: v1beta1
- type: olm.package
  value:
    packageName: crunchy-postgres-operator
    version: 5.7.1
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "CrunchyBridgeCluster",
            "metadata": {
              "name": "example-crunchybridgecluster"
            },
            "spec": {
              "clusterName": "example-bridge-cluster",
              "isHa": false,
              "majorVersion": 16,
              "plan": "standard-4",
              "provider": "aws",
              "region": "us-west-2",
              "secret": "crunchy-bridge-api-key",
              "storage": "10Gi"
            }
          },
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "PGAdmin",
            "metadata": {
              "name": "example-pgadmin",
              "namespace": "openshift-operators"
            },
            "spec": {
              "dataVolumeClaimSpec": {
                "accessModes": [
                  "ReadWriteOnce"
                ],
                "resources": {
                  "requests": {
                    "storage": "1Gi"
                  }
                }
              },
              "serverGroups": [
                {
                  "name": "Crunchy Postgres for Kubernetes",
                  "postgresClusterSelector": {}
                }
              ]
            }
          },
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "PGUpgrade",
            "metadata": {
              "name": "example-upgrade"
            },
            "spec": {
              "fromPostgresVersion": 15,
              "postgresClusterName": "example",
              "toPostgresVersion": 16
            }
          },
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "PostgresCluster",
            "metadata": {
              "name": "example"
            },
            "spec": {
              "backups": {
                "pgbackrest": {
                  "repos": [
                    {
                      "name": "repo1",
                      "volume": {
                        "volumeClaimSpec": {
                          "accessModes": [
                            "ReadWriteOnce"
                          ],
                          "resources": {
                            "requests": {
                              "storage": "1Gi"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              },
              "instances": [
                {
                  "dataVolumeClaimSpec": {
                    "accessModes": [
                      "ReadWriteOnce"
                    ],
                    "resources": {
                      "requests": {
                        "storage": "1Gi"
                      }
                    }
                  },
                  "replicas": 1
                }
              ],
              "postgresVersion": 16
            }
          }
        ]
      capabilities: Auto Pilot
      categories: Database
      certified: "true"
      containerImage: registry.connect.redhat.com/crunchydata/postgres-operator@sha256:65893afc79582f930aa0b8c69c944eeccb4a00afd410d12f31eb037f9632ba88
      createdAt: 2019-12-31 19:40Z
      description: Production Postgres Made Easy
      features.operators.openshift.io/cnf: "false"
      features.operators.openshift.io/cni: "false"
      features.operators.openshift.io/csi: "false"
      features.operators.openshift.io/disconnected: "true"
      features.operators.openshift.io/fips-compliant: "false"
      features.operators.openshift.io/proxy-aware: "false"
      features.operators.openshift.io/tls-profiles: "false"
      features.operators.openshift.io/token-auth-aws: "false"
      features.operators.openshift.io/token-auth-azure: "false"
      features.operators.openshift.io/token-auth-gcp: "false"
      olm.properties: '[]'
      repository: https://github.com/CrunchyData/postgres-operator
      support: crunchydata.com
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: CrunchyBridgeCluster is the Schema for the crunchybridgeclusters
          API
        displayName: Crunchy Bridge Cluster
        kind: CrunchyBridgeCluster
        name: crunchybridgeclusters.postgres-operator.crunchydata.com
        resources:
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: CronJob
          name: ""
          version: v1beta1
        - kind: Deployment
          name: ""
          version: v1
        - kind: Job
          name: ""
          version: v1
        - kind: PersistentVolumeClaim
          name: ""
          version: v1
        - kind: Secret
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: StatefulSet
          name: ""
          version: v1
        specDescriptors:
        - description: The ID of the cluster's major Postgres version. Currently Bridge
            offers 13-16
          displayName: Postgres Version
          path: majorVersion
        statusDescriptors:
        - description: conditions represent the observations of postgres cluster's
            current state.
          displayName: Conditions
          path: conditions
          x-descriptors:
          - urn:alm:descriptor:io.kubernetes.conditions
        version: v1beta1
      - description: PGAdmin is the Schema for the PGAdmin API
        displayName: PGAdmin
        kind: PGAdmin
        name: pgadmins.postgres-operator.crunchydata.com
        statusDescriptors:
        - description: 'conditions represent the observations of pgAdmin''s current
            state. Known .status.conditions.type is: "PersistentVolumeResizing"'
          displayName: Conditions
          path: conditions
          x-descriptors:
          - urn:alm:descriptor:io.kubernetes.conditions
        version: v1beta1
      - description: PGUpgrade is the Schema for the pgupgrades API
        displayName: PGUpgrade
        kind: PGUpgrade
        name: pgupgrades.postgres-operator.crunchydata.com
        version: v1beta1
      - description: PostgresCluster is the Schema for the postgresclusters API
        displayName: Postgres Cluster
        kind: PostgresCluster
        name: postgresclusters.postgres-operator.crunchydata.com
        resources:
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: CronJob
          name: ""
          version: v1beta1
        - kind: Deployment
          name: ""
          version: v1
        - kind: Job
          name: ""
          version: v1
        - kind: PersistentVolumeClaim
          name: ""
          version: v1
        - kind: Secret
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: StatefulSet
          name: ""
          version: v1
        specDescriptors:
        - description: The image name to use for PostgreSQL containers. When omitted,
            the value comes from an operator environment variable. For standard PostgreSQL
            images, the format is RELATED_IMAGE_POSTGRES_{postgresVersion}, e.g. RELATED_IMAGE_POSTGRES_13.
            For PostGIS enabled PostgreSQL images, the format is RELATED_IMAGE_POSTGRES_{postgresVersion}_GIS_{postGISVersion},
            e.g. RELATED_IMAGE_POSTGRES_13_GIS_3.1.
          displayName: Image
          path: image
        - description: The major version of PostgreSQL installed in the PostgreSQL
            image
          displayName: Postgres Version
          path: postgresVersion
        - description: Specifies one or more sets of PostgreSQL pods that replicate
            data for this cluster.
          displayName: Instance Sets
          path: instances
        statusDescriptors:
        - description: 'conditions represent the observations of postgrescluster''s
            current state. Known .status.conditions.type are: "PersistentVolumeResizing",
            "Progressing", "ProxyAvailable"'
          displayName: Conditions
          path: conditions
          x-descriptors:
          - urn:alm:descriptor:io.kubernetes.conditions
        version: v1beta1
    description: |-
      [Crunchy Postgres for Kubernetes](https://www.crunchydata.com/products/crunchy-postgresql-for-kubernetes), is the leading Kubernetes native
      Postgres solution. Built on PGO, the Postgres Operator from Crunchy Data, Crunchy Postgres for Kubernetes gives you a declarative Postgres
      solution that automatically manages your PostgreSQL clusters.

      Designed for your GitOps workflows, it is [easy to get started](https://access.crunchydata.com/documentation/postgres-operator/latest/quickstart)
      with Crunchy Postgres for Kubernetes. Within a few moments, you can have a production grade Postgres cluster complete with high availability, disaster
      recovery, and monitoring, all over secure TLS communications. Even better, Crunchy Postgres for Kubernetes lets you easily customize your Postgres
      cluster to tailor it to your workload!

      With conveniences like cloning Postgres clusters to using rolling updates to roll out disruptive changes with minimal downtime, Crunchy Postgres
      for Kubernetes is ready to support your Postgres data at every stage of your release pipeline. Built for resiliency and uptime, Crunchy Postgres
      for Kubernetes will keep your Postgres cluster in a desired state so you do not need to worry about it.

      Crunchy Postgres for Kubernetes is developed with many years of production experience in automating Postgres management on Kubernetes, providing
      a seamless cloud native Postgres solution to keep your data always available.

      Crunchy Postgres for Kubernetes is made available to users without an active Crunchy Data subscription in connection with Crunchy Data's
      [Developer Program](https://www.crunchydata.com/developers/terms-of-use).
      For more information, please contact us at [info@crunchydata.com](mailto:info@crunchydata.com).

      - **PostgreSQL Cluster Provisioning**: [Create, Scale, & Delete PostgreSQL clusters with ease][provisioning],
        while fully customizing your Pods and PostgreSQL configuration!
      - **High-Availability**: Safe, automated failover backed by a [distributed consensus based high-availability solution][high-availability].
        Uses [Pod Anti-Affinity][k8s-anti-affinity] to help resiliency; you can configure how aggressive this can be!
        Failed primaries automatically heal, allowing for faster recovery time. You can even create regularly scheduled
        backups as well and set your backup retention policy
      - **Disaster Recovery**: [Backups][backups] and [restores][disaster-recovery] leverage the open source [pgBackRest][] utility and
        [includes support for full, incremental, and differential backups as well as efficient delta restores][backups].
        Set how long you want your backups retained for. Works great with very large databases!
      - **Monitoring**: [Track the health of your PostgreSQL clusters][monitoring] using the open source [pgMonitor][] library.
      - **Clone**: [Create new clusters from your existing clusters or backups][clone] with efficient data cloning.
      - **TLS**: All connections are over [TLS][tls]. You can also [bring your own TLS infrastructure][tls] if you do not want to use the provided defaults.
      - **Connection Pooling**: Advanced [connection pooling][pool] support using [pgBouncer][].
      - **Affinity and Tolerations**: Have your PostgreSQL clusters deployed to [Kubernetes Nodes][k8s-nodes] of your preference.
        Set your [pod anti-affinity][k8s-anti-affinity], node affinity, Pod tolerations and more rules to customize your deployment topology!
      - **PostgreSQL Major Version Upgrades**: Perform a [PostgreSQL major version upgrade][major-version-upgrade] declaratively.
      - **Database Administration**: Easily deploy [pgAdmin4][pgadmin] to administer your PostgresClusters' databases.
        The automatic discovery of PostgresClusters ensures that you are able to seamlessly access any databases within your environment from the pgAdmin4 GUI.
      - **Full Customizability**: Crunchy PostgreSQL for Kubernetes makes it easy to get your own PostgreSQL-as-a-Service up and running
        and fully customize your deployments, including:
          - Choose the resources for your Postgres cluster: [container resources and storage size][resize-cluster]. [Resize at any time][resize-cluster] with minimal disruption.
          - Use your own container image repository, including support `imagePullSecrets` and private repositories
          - [Customize your PostgreSQL configuration][customize-cluster]

      and much more!

      [backups]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/backups-disaster-recovery
      [clone]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/backups-disaster-recovery/disaster-recovery
      [customize-cluster]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/day-two/customize-cluster
      [disaster-recovery]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/backups-disaster-recovery/disaster-recovery
      [high-availability]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/day-two/high-availability
      [major-version-upgrade]: https://access.crunchydata.com/documentation/postgres-operator/v5/guides/major-postgres-version-upgrade/
      [monitoring]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/day-two/monitoring
      [pool]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/basic-setup/connection-pooling
      [provisioning]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/basic-setup/create-cluster
      [resize-cluster]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/cluster-management/resize-cluster
      [tls]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/day-two/customize-cluster#customize-tls

      [k8s-anti-affinity]: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#inter-pod-affinity-and-anti-affinity
      [k8s-nodes]: https://kubernetes.io/docs/concepts/architecture/nodes/

      [pgAdmin]: https://www.pgadmin.org/
      [pgBackRest]: https://www.pgbackrest.org
      [pgBouncer]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/basic-setup/connection-pooling
      [pgMonitor]: https://github.com/CrunchyData/pgmonitor

      ## Post-Installation

      ### Tutorial

      Want to [learn more about the PostgreSQL Operator][tutorial]? Browse through the [tutorial][] to learn more about what you can do,
      [join the Discord server][discord] for community support, or check out the [PGO GitHub repo][ghrepo] to learn more
      about the open source Postgres Operator project that powers Crunchy Postgres for Kubernetes.

      [tutorial]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials
      [discord]: https://discord.gg/a7vWKG8Ec9
      [ghrepo]: https://github.com/CrunchyData/postgres-operator
    displayName: Crunchy Postgres for Kubernetes
    installModes:
    - supported: true
      type: OwnNamespace
    - supported: true
      type: SingleNamespace
    - supported: true
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - postgres
    - postgresql
    - database
    - sql
    - operator
    - crunchy data
    labels:
      app.kubernetes.io/version: 5.7.1
    links:
    - name: Crunchy Data
      url: https://www.crunchydata.com/
    - name: Documentation
      url: https://access.crunchydata.com/documentation/postgres-operator/v5/
    maintainers:
    - email: info@crunchydata.com
      name: Crunchy Data
    maturity: stable
    minKubeVersion: 1.25.0
    provider:
      name: Crunchy Data
      url: https://www.crunchydata.com/
relatedImages:
- image: registry.connect.redhat.com/crunchydata/crunchy-pgadmin4@sha256:00b58bf12eca37a14fde6535b1234f5aa22109153cbc470b24cc5415ff454956
  name: PGADMIN
- image: registry.connect.redhat.com/crunchydata/crunchy-pgadmin4@sha256:9282a029c87251b2bf54eadf2a59867114b07ce2facb7458a6ff411fff719830
  name: STANDALONE_PGADMIN
- image: registry.connect.redhat.com/crunchydata/crunchy-pgbackrest@sha256:8aaa32ccc2a74553265806dccce0c433da921b048d0cf6d0fe94c7d99fe44a70
  name: PGBACKREST
- image: registry.connect.redhat.com/crunchydata/crunchy-pgbouncer@sha256:2cd197a33fe94f614028f5736268c693655e1a36714cd429b8da66612e36a858
  name: PGBOUNCER
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-exporter@sha256:abd3bbfd23443afee920a86537f27e134a9d4ff0e776fa1be83efa6eb008e4f1
  name: PGEXPORTER
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:51cf6259ccae933d06d832c0139de1d523d0cd765383a15c1b59f38064a4b206
  name: RELATED_IMAGE_POSTGRES_17_GIS_3.4
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:a4ee32209a03ccc993cbb5ae45d6c49faaddcf95f514daff26491fa575cdcb70
  name: POSTGRES_15_GIS_3.3
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:f259e1770e5dbe6f8312f1c32f3afe776e664642ee56b717db857463fad626fd
  name: POSTGRES_16_GIS_3.4
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:f529c26d660642bca364e540a12a6871c005192fe4a95b91e7cf1727ef3ee92c
  name: POSTGRES_16_GIS_3.3
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:325cbc61c515785c5c53663f32a428c347532cd4d42e2bf68610819527fb0424
  name: POSTGRES_15
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:63f48af31989745d1359a79271b47f1e61a1580c10b58445b31a7d542b4c24c5
  name: POSTGRES_16
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:7cfbbf192d5a2faea380437d7a52339576090f18e69d12e8071c3a24ef37baaf
  name: POSTGRES_17
- image: registry.connect.redhat.com/crunchydata/crunchy-upgrade@sha256:5e9b158fb05f6fddf3f62d4d94b490b4008a182259e73ffc8e194eb4de2065c4
  name: PGUPGRADE
- image: registry.connect.redhat.com/crunchydata/postgres-operator-bundle@sha256:56a1f3794e1af0df01d6e6c8a840e35e4fad5025a6dc71b0570e6b9af7c7b23e
  name: ""
- image: registry.connect.redhat.com/crunchydata/postgres-operator@sha256:65893afc79582f930aa0b8c69c944eeccb4a00afd410d12f31eb037f9632ba88
  name: postgres-operator
schema: olm.bundle
---
image: registry.connect.redhat.com/crunchydata/postgres-operator-bundle@sha256:a92e9ffd06697afa61fe5ddf6ba982cc6b93c521ee60fd851ef6ad32c5bbb638
name: postgresoperator.v5.7.2
package: crunchy-postgres-operator
properties:
- type: olm.gvk
  value:
    group: postgres-operator.crunchydata.com
    kind: CrunchyBridgeCluster
    version: v1beta1
- type: olm.gvk
  value:
    group: postgres-operator.crunchydata.com
    kind: PGAdmin
    version: v1beta1
- type: olm.gvk
  value:
    group: postgres-operator.crunchydata.com
    kind: PGUpgrade
    version: v1beta1
- type: olm.gvk
  value:
    group: postgres-operator.crunchydata.com
    kind: PostgresCluster
    version: v1beta1
- type: olm.package
  value:
    packageName: crunchy-postgres-operator
    version: 5.7.2
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "CrunchyBridgeCluster",
            "metadata": {
              "name": "example-crunchybridgecluster"
            },
            "spec": {
              "clusterName": "example-bridge-cluster",
              "isHa": false,
              "majorVersion": 16,
              "plan": "standard-4",
              "provider": "aws",
              "region": "us-west-2",
              "secret": "crunchy-bridge-api-key",
              "storage": "10Gi"
            }
          },
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "PGAdmin",
            "metadata": {
              "name": "example-pgadmin",
              "namespace": "openshift-operators"
            },
            "spec": {
              "dataVolumeClaimSpec": {
                "accessModes": [
                  "ReadWriteOnce"
                ],
                "resources": {
                  "requests": {
                    "storage": "1Gi"
                  }
                }
              },
              "serverGroups": [
                {
                  "name": "Crunchy Postgres for Kubernetes",
                  "postgresClusterSelector": {}
                }
              ]
            }
          },
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "PGUpgrade",
            "metadata": {
              "name": "example-upgrade"
            },
            "spec": {
              "fromPostgresVersion": 15,
              "postgresClusterName": "example",
              "toPostgresVersion": 16
            }
          },
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "PostgresCluster",
            "metadata": {
              "name": "example"
            },
            "spec": {
              "backups": {
                "pgbackrest": {
                  "repos": [
                    {
                      "name": "repo1",
                      "volume": {
                        "volumeClaimSpec": {
                          "accessModes": [
                            "ReadWriteOnce"
                          ],
                          "resources": {
                            "requests": {
                              "storage": "1Gi"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              },
              "instances": [
                {
                  "dataVolumeClaimSpec": {
                    "accessModes": [
                      "ReadWriteOnce"
                    ],
                    "resources": {
                      "requests": {
                        "storage": "1Gi"
                      }
                    }
                  },
                  "replicas": 1
                }
              ],
              "postgresVersion": 16
            }
          }
        ]
      capabilities: Auto Pilot
      categories: Database
      certified: "true"
      containerImage: registry.connect.redhat.com/crunchydata/postgres-operator@sha256:29c8277f3332c076e4a9e8a9271ae085b72e6cf86a88d53699180262a340fe0b
      createdAt: 2019-12-31 19:40Z
      description: Production Postgres Made Easy
      features.operators.openshift.io/cnf: "false"
      features.operators.openshift.io/cni: "false"
      features.operators.openshift.io/csi: "false"
      features.operators.openshift.io/disconnected: "true"
      features.operators.openshift.io/fips-compliant: "false"
      features.operators.openshift.io/proxy-aware: "false"
      features.operators.openshift.io/tls-profiles: "false"
      features.operators.openshift.io/token-auth-aws: "false"
      features.operators.openshift.io/token-auth-azure: "false"
      features.operators.openshift.io/token-auth-gcp: "false"
      olm.properties: '[]'
      repository: https://github.com/CrunchyData/postgres-operator
      support: crunchydata.com
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: CrunchyBridgeCluster is the Schema for the crunchybridgeclusters
          API
        displayName: Crunchy Bridge Cluster
        kind: CrunchyBridgeCluster
        name: crunchybridgeclusters.postgres-operator.crunchydata.com
        resources:
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: CronJob
          name: ""
          version: v1beta1
        - kind: Deployment
          name: ""
          version: v1
        - kind: Job
          name: ""
          version: v1
        - kind: PersistentVolumeClaim
          name: ""
          version: v1
        - kind: Secret
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: StatefulSet
          name: ""
          version: v1
        specDescriptors:
        - description: The ID of the cluster's major Postgres version. Currently Bridge
            offers 13-16
          displayName: Postgres Version
          path: majorVersion
        statusDescriptors:
        - description: conditions represent the observations of postgres cluster's
            current state.
          displayName: Conditions
          path: conditions
          x-descriptors:
          - urn:alm:descriptor:io.kubernetes.conditions
        version: v1beta1
      - description: PGAdmin is the Schema for the PGAdmin API
        displayName: PGAdmin
        kind: PGAdmin
        name: pgadmins.postgres-operator.crunchydata.com
        statusDescriptors:
        - description: 'conditions represent the observations of pgAdmin''s current
            state. Known .status.conditions.type is: "PersistentVolumeResizing"'
          displayName: Conditions
          path: conditions
          x-descriptors:
          - urn:alm:descriptor:io.kubernetes.conditions
        version: v1beta1
      - description: PGUpgrade is the Schema for the pgupgrades API
        displayName: PGUpgrade
        kind: PGUpgrade
        name: pgupgrades.postgres-operator.crunchydata.com
        version: v1beta1
      - description: PostgresCluster is the Schema for the postgresclusters API
        displayName: Postgres Cluster
        kind: PostgresCluster
        name: postgresclusters.postgres-operator.crunchydata.com
        resources:
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: CronJob
          name: ""
          version: v1beta1
        - kind: Deployment
          name: ""
          version: v1
        - kind: Job
          name: ""
          version: v1
        - kind: PersistentVolumeClaim
          name: ""
          version: v1
        - kind: Secret
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: StatefulSet
          name: ""
          version: v1
        specDescriptors:
        - description: The image name to use for PostgreSQL containers. When omitted,
            the value comes from an operator environment variable. For standard PostgreSQL
            images, the format is RELATED_IMAGE_POSTGRES_{postgresVersion}, e.g. RELATED_IMAGE_POSTGRES_13.
            For PostGIS enabled PostgreSQL images, the format is RELATED_IMAGE_POSTGRES_{postgresVersion}_GIS_{postGISVersion},
            e.g. RELATED_IMAGE_POSTGRES_13_GIS_3.1.
          displayName: Image
          path: image
        - description: The major version of PostgreSQL installed in the PostgreSQL
            image
          displayName: Postgres Version
          path: postgresVersion
        - description: Specifies one or more sets of PostgreSQL pods that replicate
            data for this cluster.
          displayName: Instance Sets
          path: instances
        statusDescriptors:
        - description: 'conditions represent the observations of postgrescluster''s
            current state. Known .status.conditions.type are: "PersistentVolumeResizing",
            "Progressing", "ProxyAvailable"'
          displayName: Conditions
          path: conditions
          x-descriptors:
          - urn:alm:descriptor:io.kubernetes.conditions
        version: v1beta1
    description: |-
      [Crunchy Postgres for Kubernetes](https://www.crunchydata.com/products/crunchy-postgresql-for-kubernetes), is the leading Kubernetes native
      Postgres solution. Built on PGO, the Postgres Operator from Crunchy Data, Crunchy Postgres for Kubernetes gives you a declarative Postgres
      solution that automatically manages your PostgreSQL clusters.

      Designed for your GitOps workflows, it is [easy to get started](https://access.crunchydata.com/documentation/postgres-operator/latest/quickstart)
      with Crunchy Postgres for Kubernetes. Within a few moments, you can have a production grade Postgres cluster complete with high availability, disaster
      recovery, and monitoring, all over secure TLS communications. Even better, Crunchy Postgres for Kubernetes lets you easily customize your Postgres
      cluster to tailor it to your workload!

      With conveniences like cloning Postgres clusters to using rolling updates to roll out disruptive changes with minimal downtime, Crunchy Postgres
      for Kubernetes is ready to support your Postgres data at every stage of your release pipeline. Built for resiliency and uptime, Crunchy Postgres
      for Kubernetes will keep your Postgres cluster in a desired state so you do not need to worry about it.

      Crunchy Postgres for Kubernetes is developed with many years of production experience in automating Postgres management on Kubernetes, providing
      a seamless cloud native Postgres solution to keep your data always available.

      Crunchy Postgres for Kubernetes is made available to users without an active Crunchy Data subscription in connection with Crunchy Data's
      [Developer Program](https://www.crunchydata.com/developers/terms-of-use).
      For more information, please contact us at [info@crunchydata.com](mailto:info@crunchydata.com).

      - **PostgreSQL Cluster Provisioning**: [Create, Scale, & Delete PostgreSQL clusters with ease][provisioning],
        while fully customizing your Pods and PostgreSQL configuration!
      - **High-Availability**: Safe, automated failover backed by a [distributed consensus based high-availability solution][high-availability].
        Uses [Pod Anti-Affinity][k8s-anti-affinity] to help resiliency; you can configure how aggressive this can be!
        Failed primaries automatically heal, allowing for faster recovery time. You can even create regularly scheduled
        backups as well and set your backup retention policy
      - **Disaster Recovery**: [Backups][backups] and [restores][disaster-recovery] leverage the open source [pgBackRest][] utility and
        [includes support for full, incremental, and differential backups as well as efficient delta restores][backups].
        Set how long you want your backups retained for. Works great with very large databases!
      - **Monitoring**: [Track the health of your PostgreSQL clusters][monitoring] using the open source [pgMonitor][] library.
      - **Clone**: [Create new clusters from your existing clusters or backups][clone] with efficient data cloning.
      - **TLS**: All connections are over [TLS][tls]. You can also [bring your own TLS infrastructure][tls] if you do not want to use the provided defaults.
      - **Connection Pooling**: Advanced [connection pooling][pool] support using [pgBouncer][].
      - **Affinity and Tolerations**: Have your PostgreSQL clusters deployed to [Kubernetes Nodes][k8s-nodes] of your preference.
        Set your [pod anti-affinity][k8s-anti-affinity], node affinity, Pod tolerations and more rules to customize your deployment topology!
      - **PostgreSQL Major Version Upgrades**: Perform a [PostgreSQL major version upgrade][major-version-upgrade] declaratively.
      - **Database Administration**: Easily deploy [pgAdmin4][pgadmin] to administer your PostgresClusters' databases.
        The automatic discovery of PostgresClusters ensures that you are able to seamlessly access any databases within your environment from the pgAdmin4 GUI.
      - **Full Customizability**: Crunchy PostgreSQL for Kubernetes makes it easy to get your own PostgreSQL-as-a-Service up and running
        and fully customize your deployments, including:
          - Choose the resources for your Postgres cluster: [container resources and storage size][resize-cluster]. [Resize at any time][resize-cluster] with minimal disruption.
          - Use your own container image repository, including support `imagePullSecrets` and private repositories
          - [Customize your PostgreSQL configuration][customize-cluster]

      and much more!

      [backups]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/backups-disaster-recovery
      [clone]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/backups-disaster-recovery/disaster-recovery
      [customize-cluster]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/day-two/customize-cluster
      [disaster-recovery]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/backups-disaster-recovery/disaster-recovery
      [high-availability]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/day-two/high-availability
      [major-version-upgrade]: https://access.crunchydata.com/documentation/postgres-operator/v5/guides/major-postgres-version-upgrade/
      [monitoring]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/day-two/monitoring
      [pool]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/basic-setup/connection-pooling
      [provisioning]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/basic-setup/create-cluster
      [resize-cluster]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/cluster-management/resize-cluster
      [tls]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/day-two/customize-cluster#customize-tls

      [k8s-anti-affinity]: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#inter-pod-affinity-and-anti-affinity
      [k8s-nodes]: https://kubernetes.io/docs/concepts/architecture/nodes/

      [pgAdmin]: https://www.pgadmin.org/
      [pgBackRest]: https://www.pgbackrest.org
      [pgBouncer]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/basic-setup/connection-pooling
      [pgMonitor]: https://github.com/CrunchyData/pgmonitor

      ## Post-Installation

      ### Tutorial

      Want to [learn more about the PostgreSQL Operator][tutorial]? Browse through the [tutorial][] to learn more about what you can do,
      [join the Discord server][discord] for community support, or check out the [PGO GitHub repo][ghrepo] to learn more
      about the open source Postgres Operator project that powers Crunchy Postgres for Kubernetes.

      [tutorial]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials
      [discord]: https://discord.gg/a7vWKG8Ec9
      [ghrepo]: https://github.com/CrunchyData/postgres-operator
    displayName: Crunchy Postgres for Kubernetes
    installModes:
    - supported: true
      type: OwnNamespace
    - supported: true
      type: SingleNamespace
    - supported: true
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - postgres
    - postgresql
    - database
    - sql
    - operator
    - crunchy data
    labels:
      app.kubernetes.io/version: 5.7.2
    links:
    - name: Crunchy Data
      url: https://www.crunchydata.com/
    - name: Documentation
      url: https://access.crunchydata.com/documentation/postgres-operator/v5/
    maintainers:
    - email: info@crunchydata.com
      name: Crunchy Data
    maturity: stable
    minKubeVersion: 1.25.0
    provider:
      name: Crunchy Data
      url: https://www.crunchydata.com/
relatedImages:
- image: registry.connect.redhat.com/crunchydata/crunchy-pgadmin4@sha256:8d619db07c6e9ecb89a5c3f4f09a584ef12f56ee59bf46cf46580621c3653dbf
  name: PGADMIN
- image: registry.connect.redhat.com/crunchydata/crunchy-pgadmin4@sha256:bce748130c4353983bdef10561d4cd178f68d87bfc7b5fae07f4d1cfb4c0c88b
  name: STANDALONE_PGADMIN
- image: registry.connect.redhat.com/crunchydata/crunchy-pgbackrest@sha256:5fc5d790670e8a1dfd8ab245021158f4fbbe40e7071b2c12bceac848b2add28d
  name: PGBACKREST
- image: registry.connect.redhat.com/crunchydata/crunchy-pgbouncer@sha256:70db8cace95885cae83102d496e2af00d509cb84c8585c05234818a0ef449780
  name: PGBOUNCER
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-exporter@sha256:0ada6c92c2f416d50329273ed50b9dcf727a39aced04084e073ad79e6ed2d8d4
  name: PGEXPORTER
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:066378a97f437f297f74af769b21cccd9b568d0d8c04b5c447fc040b6a687c0b
  name: POSTGRES_16_GIS_3.3
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:3fd5c961717b7a60104a9e455766aec47cf8fe26c6f600237d3a67c21cb95556
  name: POSTGRES_16_GIS_3.4
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:5c1819215ce9317f968985e1e56220f92ff6870b1059914f3a12e81b682e3640
  name: POSTGRES_15_GIS_3.3
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:b0b537ef8567d763b29b5b64f36793ed654356a0b27b4bc3c375737a715d7c15
  name: RELATED_IMAGE_POSTGRES_17_GIS_3.4
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:50f659323eefa6a5330f29f91bbc3131e5473f0537cfca51daedc3650ca3436e
  name: POSTGRES_15
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:895bb7ffa6ce919751d642240959d2d47e07d727eb570d5cd0501da3b2920f78
  name: POSTGRES_17
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:ecadc06c454d79b9477553138cc2121c23fa9f2c57dc1523458a1a047ec244d8
  name: POSTGRES_16
- image: registry.connect.redhat.com/crunchydata/crunchy-upgrade@sha256:9be23fff6401710218392ed598fb42ccdeab43a3c168d54b81c8305db13fc185
  name: PGUPGRADE
- image: registry.connect.redhat.com/crunchydata/postgres-operator-bundle@sha256:a92e9ffd06697afa61fe5ddf6ba982cc6b93c521ee60fd851ef6ad32c5bbb638
  name: ""
- image: registry.connect.redhat.com/crunchydata/postgres-operator@sha256:29c8277f3332c076e4a9e8a9271ae085b72e6cf86a88d53699180262a340fe0b
  name: postgres-operator
schema: olm.bundle
---
image: registry.connect.redhat.com/crunchydata/postgres-operator-bundle@sha256:3773263c767f80280f997659648bb3c791c3a93039633cbfa4527e5d0bed42c6
name: postgresoperator.v5.7.3
package: crunchy-postgres-operator
properties:
- type: olm.gvk
  value:
    group: postgres-operator.crunchydata.com
    kind: CrunchyBridgeCluster
    version: v1beta1
- type: olm.gvk
  value:
    group: postgres-operator.crunchydata.com
    kind: PGAdmin
    version: v1beta1
- type: olm.gvk
  value:
    group: postgres-operator.crunchydata.com
    kind: PGUpgrade
    version: v1beta1
- type: olm.gvk
  value:
    group: postgres-operator.crunchydata.com
    kind: PostgresCluster
    version: v1beta1
- type: olm.package
  value:
    packageName: crunchy-postgres-operator
    version: 5.7.3
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "CrunchyBridgeCluster",
            "metadata": {
              "name": "example-crunchybridgecluster"
            },
            "spec": {
              "clusterName": "example-bridge-cluster",
              "isHa": false,
              "majorVersion": 16,
              "plan": "standard-4",
              "provider": "aws",
              "region": "us-west-2",
              "secret": "crunchy-bridge-api-key",
              "storage": "10Gi"
            }
          },
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "PGAdmin",
            "metadata": {
              "name": "example-pgadmin",
              "namespace": "openshift-operators"
            },
            "spec": {
              "dataVolumeClaimSpec": {
                "accessModes": [
                  "ReadWriteOnce"
                ],
                "resources": {
                  "requests": {
                    "storage": "1Gi"
                  }
                }
              },
              "serverGroups": [
                {
                  "name": "Crunchy Postgres for Kubernetes",
                  "postgresClusterSelector": {}
                }
              ]
            }
          },
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "PGUpgrade",
            "metadata": {
              "name": "example-upgrade"
            },
            "spec": {
              "fromPostgresVersion": 15,
              "postgresClusterName": "example",
              "toPostgresVersion": 16
            }
          },
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "PostgresCluster",
            "metadata": {
              "name": "example"
            },
            "spec": {
              "backups": {
                "pgbackrest": {
                  "repos": [
                    {
                      "name": "repo1",
                      "volume": {
                        "volumeClaimSpec": {
                          "accessModes": [
                            "ReadWriteOnce"
                          ],
                          "resources": {
                            "requests": {
                              "storage": "1Gi"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              },
              "instances": [
                {
                  "dataVolumeClaimSpec": {
                    "accessModes": [
                      "ReadWriteOnce"
                    ],
                    "resources": {
                      "requests": {
                        "storage": "1Gi"
                      }
                    }
                  },
                  "replicas": 1
                }
              ],
              "postgresVersion": 16
            }
          }
        ]
      capabilities: Auto Pilot
      categories: Database
      certified: "true"
      containerImage: registry.connect.redhat.com/crunchydata/postgres-operator@sha256:b92bdb76edcbc9563fb3bf009d1a906c70ec7778609706d05765044cf1bdc128
      createdAt: 2019-12-31 19:40Z
      description: Production Postgres Made Easy
      features.operators.openshift.io/cnf: "false"
      features.operators.openshift.io/cni: "false"
      features.operators.openshift.io/csi: "false"
      features.operators.openshift.io/disconnected: "true"
      features.operators.openshift.io/fips-compliant: "false"
      features.operators.openshift.io/proxy-aware: "false"
      features.operators.openshift.io/tls-profiles: "false"
      features.operators.openshift.io/token-auth-aws: "false"
      features.operators.openshift.io/token-auth-azure: "false"
      features.operators.openshift.io/token-auth-gcp: "false"
      olm.properties: '[]'
      repository: https://github.com/CrunchyData/postgres-operator
      support: crunchydata.com
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: CrunchyBridgeCluster is the Schema for the crunchybridgeclusters
          API
        displayName: Crunchy Bridge Cluster
        kind: CrunchyBridgeCluster
        name: crunchybridgeclusters.postgres-operator.crunchydata.com
        resources:
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: CronJob
          name: ""
          version: v1beta1
        - kind: Deployment
          name: ""
          version: v1
        - kind: Job
          name: ""
          version: v1
        - kind: PersistentVolumeClaim
          name: ""
          version: v1
        - kind: Secret
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: StatefulSet
          name: ""
          version: v1
        specDescriptors:
        - description: The ID of the cluster's major Postgres version. Currently Bridge
            offers 13-16
          displayName: Postgres Version
          path: majorVersion
        statusDescriptors:
        - description: conditions represent the observations of postgres cluster's
            current state.
          displayName: Conditions
          path: conditions
          x-descriptors:
          - urn:alm:descriptor:io.kubernetes.conditions
        version: v1beta1
      - description: PGAdmin is the Schema for the PGAdmin API
        displayName: PGAdmin
        kind: PGAdmin
        name: pgadmins.postgres-operator.crunchydata.com
        statusDescriptors:
        - description: 'conditions represent the observations of pgAdmin''s current
            state. Known .status.conditions.type is: "PersistentVolumeResizing"'
          displayName: Conditions
          path: conditions
          x-descriptors:
          - urn:alm:descriptor:io.kubernetes.conditions
        version: v1beta1
      - description: PGUpgrade is the Schema for the pgupgrades API
        displayName: PGUpgrade
        kind: PGUpgrade
        name: pgupgrades.postgres-operator.crunchydata.com
        version: v1beta1
      - description: PostgresCluster is the Schema for the postgresclusters API
        displayName: Postgres Cluster
        kind: PostgresCluster
        name: postgresclusters.postgres-operator.crunchydata.com
        resources:
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: CronJob
          name: ""
          version: v1beta1
        - kind: Deployment
          name: ""
          version: v1
        - kind: Job
          name: ""
          version: v1
        - kind: PersistentVolumeClaim
          name: ""
          version: v1
        - kind: Secret
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: StatefulSet
          name: ""
          version: v1
        specDescriptors:
        - description: The image name to use for PostgreSQL containers. When omitted,
            the value comes from an operator environment variable. For standard PostgreSQL
            images, the format is RELATED_IMAGE_POSTGRES_{postgresVersion}, e.g. RELATED_IMAGE_POSTGRES_13.
            For PostGIS enabled PostgreSQL images, the format is RELATED_IMAGE_POSTGRES_{postgresVersion}_GIS_{postGISVersion},
            e.g. RELATED_IMAGE_POSTGRES_13_GIS_3.1.
          displayName: Image
          path: image
        - description: The major version of PostgreSQL installed in the PostgreSQL
            image
          displayName: Postgres Version
          path: postgresVersion
        - description: Specifies one or more sets of PostgreSQL pods that replicate
            data for this cluster.
          displayName: Instance Sets
          path: instances
        statusDescriptors:
        - description: 'conditions represent the observations of postgrescluster''s
            current state. Known .status.conditions.type are: "PersistentVolumeResizing",
            "Progressing", "ProxyAvailable"'
          displayName: Conditions
          path: conditions
          x-descriptors:
          - urn:alm:descriptor:io.kubernetes.conditions
        version: v1beta1
    description: |-
      [Crunchy Postgres for Kubernetes](https://www.crunchydata.com/products/crunchy-postgresql-for-kubernetes), is the leading Kubernetes native
      Postgres solution. Built on PGO, the Postgres Operator from Crunchy Data, Crunchy Postgres for Kubernetes gives you a declarative Postgres
      solution that automatically manages your PostgreSQL clusters.

      Designed for your GitOps workflows, it is [easy to get started](https://access.crunchydata.com/documentation/postgres-operator/latest/quickstart)
      with Crunchy Postgres for Kubernetes. Within a few moments, you can have a production grade Postgres cluster complete with high availability, disaster
      recovery, and monitoring, all over secure TLS communications. Even better, Crunchy Postgres for Kubernetes lets you easily customize your Postgres
      cluster to tailor it to your workload!

      With conveniences like cloning Postgres clusters to using rolling updates to roll out disruptive changes with minimal downtime, Crunchy Postgres
      for Kubernetes is ready to support your Postgres data at every stage of your release pipeline. Built for resiliency and uptime, Crunchy Postgres
      for Kubernetes will keep your Postgres cluster in a desired state so you do not need to worry about it.

      Crunchy Postgres for Kubernetes is developed with many years of production experience in automating Postgres management on Kubernetes, providing
      a seamless cloud native Postgres solution to keep your data always available.

      Crunchy Postgres for Kubernetes is made available to users without an active Crunchy Data subscription in connection with Crunchy Data's
      [Developer Program](https://www.crunchydata.com/developers/terms-of-use).
      For more information, please contact us at [info@crunchydata.com](mailto:info@crunchydata.com).

      - **PostgreSQL Cluster Provisioning**: [Create, Scale, & Delete PostgreSQL clusters with ease][provisioning],
        while fully customizing your Pods and PostgreSQL configuration!
      - **High-Availability**: Safe, automated failover backed by a [distributed consensus based high-availability solution][high-availability].
        Uses [Pod Anti-Affinity][k8s-anti-affinity] to help resiliency; you can configure how aggressive this can be!
        Failed primaries automatically heal, allowing for faster recovery time. You can even create regularly scheduled
        backups as well and set your backup retention policy
      - **Disaster Recovery**: [Backups][backups] and [restores][disaster-recovery] leverage the open source [pgBackRest][] utility and
        [includes support for full, incremental, and differential backups as well as efficient delta restores][backups].
        Set how long you want your backups retained for. Works great with very large databases!
      - **Monitoring**: [Track the health of your PostgreSQL clusters][monitoring] using the open source [pgMonitor][] library.
      - **Clone**: [Create new clusters from your existing clusters or backups][clone] with efficient data cloning.
      - **TLS**: All connections are over [TLS][tls]. You can also [bring your own TLS infrastructure][tls] if you do not want to use the provided defaults.
      - **Connection Pooling**: Advanced [connection pooling][pool] support using [pgBouncer][].
      - **Affinity and Tolerations**: Have your PostgreSQL clusters deployed to [Kubernetes Nodes][k8s-nodes] of your preference.
        Set your [pod anti-affinity][k8s-anti-affinity], node affinity, Pod tolerations and more rules to customize your deployment topology!
      - **PostgreSQL Major Version Upgrades**: Perform a [PostgreSQL major version upgrade][major-version-upgrade] declaratively.
      - **Database Administration**: Easily deploy [pgAdmin4][pgadmin] to administer your PostgresClusters' databases.
        The automatic discovery of PostgresClusters ensures that you are able to seamlessly access any databases within your environment from the pgAdmin4 GUI.
      - **Full Customizability**: Crunchy PostgreSQL for Kubernetes makes it easy to get your own PostgreSQL-as-a-Service up and running
        and fully customize your deployments, including:
          - Choose the resources for your Postgres cluster: [container resources and storage size][resize-cluster]. [Resize at any time][resize-cluster] with minimal disruption.
          - Use your own container image repository, including support `imagePullSecrets` and private repositories
          - [Customize your PostgreSQL configuration][customize-cluster]

      and much more!

      [backups]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/backups-disaster-recovery
      [clone]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/backups-disaster-recovery/disaster-recovery
      [customize-cluster]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/day-two/customize-cluster
      [disaster-recovery]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/backups-disaster-recovery/disaster-recovery
      [high-availability]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/day-two/high-availability
      [major-version-upgrade]: https://access.crunchydata.com/documentation/postgres-operator/v5/guides/major-postgres-version-upgrade/
      [monitoring]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/day-two/monitoring
      [pool]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/basic-setup/connection-pooling
      [provisioning]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/basic-setup/create-cluster
      [resize-cluster]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/cluster-management/resize-cluster
      [tls]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/day-two/customize-cluster#customize-tls

      [k8s-anti-affinity]: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#inter-pod-affinity-and-anti-affinity
      [k8s-nodes]: https://kubernetes.io/docs/concepts/architecture/nodes/

      [pgAdmin]: https://www.pgadmin.org/
      [pgBackRest]: https://www.pgbackrest.org
      [pgBouncer]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/basic-setup/connection-pooling
      [pgMonitor]: https://github.com/CrunchyData/pgmonitor

      ## Post-Installation

      ### Tutorial

      Want to [learn more about the PostgreSQL Operator][tutorial]? Browse through the [tutorial][] to learn more about what you can do,
      [join the Discord server][discord] for community support, or check out the [PGO GitHub repo][ghrepo] to learn more
      about the open source Postgres Operator project that powers Crunchy Postgres for Kubernetes.

      [tutorial]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials
      [discord]: https://discord.gg/a7vWKG8Ec9
      [ghrepo]: https://github.com/CrunchyData/postgres-operator
    displayName: Crunchy Postgres for Kubernetes
    installModes:
    - supported: true
      type: OwnNamespace
    - supported: true
      type: SingleNamespace
    - supported: true
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - postgres
    - postgresql
    - database
    - sql
    - operator
    - crunchy data
    labels:
      app.kubernetes.io/version: 5.7.3
    links:
    - name: Crunchy Data
      url: https://www.crunchydata.com/
    - name: Documentation
      url: https://access.crunchydata.com/documentation/postgres-operator/v5/
    maintainers:
    - email: info@crunchydata.com
      name: Crunchy Data
    maturity: stable
    minKubeVersion: 1.25.0
    provider:
      name: Crunchy Data
      url: https://www.crunchydata.com/
relatedImages:
- image: registry.connect.redhat.com/crunchydata/crunchy-pgadmin4@sha256:b57c3411bd48ae20f2d2e4e35ec4752561320959dfaae30c7ab185f6b63473f4
  name: PGADMIN
- image: registry.connect.redhat.com/crunchydata/crunchy-pgadmin4@sha256:f1e898ec56218b29f8719e61f687aca6589e3639e33d4855558166420e425a02
  name: STANDALONE_PGADMIN
- image: registry.connect.redhat.com/crunchydata/crunchy-pgbackrest@sha256:79f0f8ed5083c60f0b8308f6d06d3f2477691dc860e2f4ce421f5ac2b1a040d3
  name: PGBACKREST
- image: registry.connect.redhat.com/crunchydata/crunchy-pgbouncer@sha256:8442badc9f8ae7d38f7bb881aefd4189cc737967cd8c224047873ec83c7eeaa4
  name: PGBOUNCER
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-exporter@sha256:cb0dddbfe212477ba516f0993704d6605abfb5335541a021e9e382c5af683722
  name: PGEXPORTER
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:18fd64daec56db3fd1ff67ff947a3f059dc1500adfa4960b0dd71dbc78b2c6f7
  name: POSTGRES_15_GIS_3.3
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:9553a30ba8bc5cb3896ce4f34414591ca01791538000d4dd585413c88ac724b2
  name: RELATED_IMAGE_POSTGRES_17_GIS_3.4
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:f1a257d86279f8e178a934fd3eec5e10f4f065e1dc834c3f0e9cd089b5ce1449
  name: POSTGRES_16_GIS_3.3
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:ff6d77373048520d1dbb628f7e1b22f55e34e8059ba4e5c731e5a4e0678af7d0
  name: POSTGRES_16_GIS_3.4
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:0cf4df1203e5d909017cffbd37dae17fa95506df453a798faa83452fbcaf7f6e
  name: POSTGRES_16
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:8621c1bb5d2f96fa28ab62666ff9e247ee9e09e4085db0635ae24ea2530ae449
  name: POSTGRES_15
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:e15246402147a57d131de37e12a66264e56eb8e4336650f7febcbc8635162555
  name: POSTGRES_17
- image: registry.connect.redhat.com/crunchydata/crunchy-upgrade@sha256:6e5f0d010692091a70873f57cd9e0aa9fd2267763602d3e2c84a2b3a0713db65
  name: PGUPGRADE
- image: registry.connect.redhat.com/crunchydata/postgres-operator-bundle@sha256:3773263c767f80280f997659648bb3c791c3a93039633cbfa4527e5d0bed42c6
  name: ""
- image: registry.connect.redhat.com/crunchydata/postgres-operator@sha256:b92bdb76edcbc9563fb3bf009d1a906c70ec7778609706d05765044cf1bdc128
  name: postgres-operator
schema: olm.bundle
---
image: registry.connect.redhat.com/crunchydata/postgres-operator-bundle@sha256:66cfb4ea34e1bc3e375620d3ae4e853d48e6939d1ea079bbf8f2b1c8bf5ca378
name: postgresoperator.v5.7.4
package: crunchy-postgres-operator
properties:
- type: olm.gvk
  value:
    group: postgres-operator.crunchydata.com
    kind: CrunchyBridgeCluster
    version: v1beta1
- type: olm.gvk
  value:
    group: postgres-operator.crunchydata.com
    kind: PGAdmin
    version: v1beta1
- type: olm.gvk
  value:
    group: postgres-operator.crunchydata.com
    kind: PGUpgrade
    version: v1beta1
- type: olm.gvk
  value:
    group: postgres-operator.crunchydata.com
    kind: PostgresCluster
    version: v1beta1
- type: olm.package
  value:
    packageName: crunchy-postgres-operator
    version: 5.7.4
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "CrunchyBridgeCluster",
            "metadata": {
              "name": "example-crunchybridgecluster"
            },
            "spec": {
              "clusterName": "example-bridge-cluster",
              "isHa": false,
              "majorVersion": 16,
              "plan": "standard-4",
              "provider": "aws",
              "region": "us-west-2",
              "secret": "crunchy-bridge-api-key",
              "storage": "10Gi"
            }
          },
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "PGAdmin",
            "metadata": {
              "name": "example-pgadmin",
              "namespace": "openshift-operators"
            },
            "spec": {
              "dataVolumeClaimSpec": {
                "accessModes": [
                  "ReadWriteOnce"
                ],
                "resources": {
                  "requests": {
                    "storage": "1Gi"
                  }
                }
              },
              "serverGroups": [
                {
                  "name": "Crunchy Postgres for Kubernetes",
                  "postgresClusterSelector": {}
                }
              ]
            }
          },
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "PGUpgrade",
            "metadata": {
              "name": "example-upgrade"
            },
            "spec": {
              "fromPostgresVersion": 15,
              "postgresClusterName": "example",
              "toPostgresVersion": 16
            }
          },
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "PostgresCluster",
            "metadata": {
              "name": "example"
            },
            "spec": {
              "backups": {
                "pgbackrest": {
                  "repos": [
                    {
                      "name": "repo1",
                      "volume": {
                        "volumeClaimSpec": {
                          "accessModes": [
                            "ReadWriteOnce"
                          ],
                          "resources": {
                            "requests": {
                              "storage": "1Gi"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              },
              "instances": [
                {
                  "dataVolumeClaimSpec": {
                    "accessModes": [
                      "ReadWriteOnce"
                    ],
                    "resources": {
                      "requests": {
                        "storage": "1Gi"
                      }
                    }
                  },
                  "replicas": 1
                }
              ],
              "postgresVersion": 16
            }
          }
        ]
      capabilities: Auto Pilot
      categories: Database
      certified: "true"
      containerImage: registry.connect.redhat.com/crunchydata/postgres-operator@sha256:0350b54d66dd7b99105fac8cf0278fc1a79c0682749baaeddf0fa031b2dd7692
      createdAt: 2019-12-31 19:40Z
      description: Production Postgres Made Easy
      features.operators.openshift.io/cnf: "false"
      features.operators.openshift.io/cni: "false"
      features.operators.openshift.io/csi: "false"
      features.operators.openshift.io/disconnected: "true"
      features.operators.openshift.io/fips-compliant: "false"
      features.operators.openshift.io/proxy-aware: "false"
      features.operators.openshift.io/tls-profiles: "false"
      features.operators.openshift.io/token-auth-aws: "false"
      features.operators.openshift.io/token-auth-azure: "false"
      features.operators.openshift.io/token-auth-gcp: "false"
      olm.properties: '[]'
      repository: https://github.com/CrunchyData/postgres-operator
      support: crunchydata.com
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: CrunchyBridgeCluster is the Schema for the crunchybridgeclusters
          API
        displayName: Crunchy Bridge Cluster
        kind: CrunchyBridgeCluster
        name: crunchybridgeclusters.postgres-operator.crunchydata.com
        resources:
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: CronJob
          name: ""
          version: v1beta1
        - kind: Deployment
          name: ""
          version: v1
        - kind: Job
          name: ""
          version: v1
        - kind: PersistentVolumeClaim
          name: ""
          version: v1
        - kind: Secret
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: StatefulSet
          name: ""
          version: v1
        specDescriptors:
        - description: The ID of the cluster's major Postgres version. Currently Bridge
            offers 13-16
          displayName: Postgres Version
          path: majorVersion
        statusDescriptors:
        - description: conditions represent the observations of postgres cluster's
            current state.
          displayName: Conditions
          path: conditions
          x-descriptors:
          - urn:alm:descriptor:io.kubernetes.conditions
        version: v1beta1
      - description: PGAdmin is the Schema for the PGAdmin API
        displayName: PGAdmin
        kind: PGAdmin
        name: pgadmins.postgres-operator.crunchydata.com
        statusDescriptors:
        - description: 'conditions represent the observations of pgAdmin''s current
            state. Known .status.conditions.type is: "PersistentVolumeResizing"'
          displayName: Conditions
          path: conditions
          x-descriptors:
          - urn:alm:descriptor:io.kubernetes.conditions
        version: v1beta1
      - description: PGUpgrade is the Schema for the pgupgrades API
        displayName: PGUpgrade
        kind: PGUpgrade
        name: pgupgrades.postgres-operator.crunchydata.com
        version: v1beta1
      - description: PostgresCluster is the Schema for the postgresclusters API
        displayName: Postgres Cluster
        kind: PostgresCluster
        name: postgresclusters.postgres-operator.crunchydata.com
        resources:
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: CronJob
          name: ""
          version: v1beta1
        - kind: Deployment
          name: ""
          version: v1
        - kind: Job
          name: ""
          version: v1
        - kind: PersistentVolumeClaim
          name: ""
          version: v1
        - kind: Secret
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: StatefulSet
          name: ""
          version: v1
        specDescriptors:
        - description: The image name to use for PostgreSQL containers. When omitted,
            the value comes from an operator environment variable. For standard PostgreSQL
            images, the format is RELATED_IMAGE_POSTGRES_{postgresVersion}, e.g. RELATED_IMAGE_POSTGRES_13.
            For PostGIS enabled PostgreSQL images, the format is RELATED_IMAGE_POSTGRES_{postgresVersion}_GIS_{postGISVersion},
            e.g. RELATED_IMAGE_POSTGRES_13_GIS_3.1.
          displayName: Image
          path: image
        - description: The major version of PostgreSQL installed in the PostgreSQL
            image
          displayName: Postgres Version
          path: postgresVersion
        - description: Specifies one or more sets of PostgreSQL pods that replicate
            data for this cluster.
          displayName: Instance Sets
          path: instances
        statusDescriptors:
        - description: 'conditions represent the observations of postgrescluster''s
            current state. Known .status.conditions.type are: "PersistentVolumeResizing",
            "Progressing", "ProxyAvailable"'
          displayName: Conditions
          path: conditions
          x-descriptors:
          - urn:alm:descriptor:io.kubernetes.conditions
        version: v1beta1
    description: |-
      [Crunchy Postgres for Kubernetes](https://www.crunchydata.com/products/crunchy-postgresql-for-kubernetes), is the leading Kubernetes native
      Postgres solution. Built on PGO, the Postgres Operator from Crunchy Data, Crunchy Postgres for Kubernetes gives you a declarative Postgres
      solution that automatically manages your PostgreSQL clusters.

      Designed for your GitOps workflows, it is [easy to get started](https://access.crunchydata.com/documentation/postgres-operator/latest/quickstart)
      with Crunchy Postgres for Kubernetes. Within a few moments, you can have a production grade Postgres cluster complete with high availability, disaster
      recovery, and monitoring, all over secure TLS communications. Even better, Crunchy Postgres for Kubernetes lets you easily customize your Postgres
      cluster to tailor it to your workload!

      With conveniences like cloning Postgres clusters to using rolling updates to roll out disruptive changes with minimal downtime, Crunchy Postgres
      for Kubernetes is ready to support your Postgres data at every stage of your release pipeline. Built for resiliency and uptime, Crunchy Postgres
      for Kubernetes will keep your Postgres cluster in a desired state so you do not need to worry about it.

      Crunchy Postgres for Kubernetes is developed with many years of production experience in automating Postgres management on Kubernetes, providing
      a seamless cloud native Postgres solution to keep your data always available.

      Crunchy Postgres for Kubernetes is made available to users without an active Crunchy Data subscription in connection with Crunchy Data's
      [Developer Program](https://www.crunchydata.com/developers/terms-of-use).
      For more information, please contact us at [info@crunchydata.com](mailto:info@crunchydata.com).

      - **PostgreSQL Cluster Provisioning**: [Create, Scale, & Delete PostgreSQL clusters with ease][provisioning],
        while fully customizing your Pods and PostgreSQL configuration!
      - **High-Availability**: Safe, automated failover backed by a [distributed consensus based high-availability solution][high-availability].
        Uses [Pod Anti-Affinity][k8s-anti-affinity] to help resiliency; you can configure how aggressive this can be!
        Failed primaries automatically heal, allowing for faster recovery time. You can even create regularly scheduled
        backups as well and set your backup retention policy
      - **Disaster Recovery**: [Backups][backups] and [restores][disaster-recovery] leverage the open source [pgBackRest][] utility and
        [includes support for full, incremental, and differential backups as well as efficient delta restores][backups].
        Set how long you want your backups retained for. Works great with very large databases!
      - **Monitoring**: [Track the health of your PostgreSQL clusters][monitoring] using the open source [pgMonitor][] library.
      - **Clone**: [Create new clusters from your existing clusters or backups][clone] with efficient data cloning.
      - **TLS**: All connections are over [TLS][tls]. You can also [bring your own TLS infrastructure][tls] if you do not want to use the provided defaults.
      - **Connection Pooling**: Advanced [connection pooling][pool] support using [pgBouncer][].
      - **Affinity and Tolerations**: Have your PostgreSQL clusters deployed to [Kubernetes Nodes][k8s-nodes] of your preference.
        Set your [pod anti-affinity][k8s-anti-affinity], node affinity, Pod tolerations and more rules to customize your deployment topology!
      - **PostgreSQL Major Version Upgrades**: Perform a [PostgreSQL major version upgrade][major-version-upgrade] declaratively.
      - **Database Administration**: Easily deploy [pgAdmin4][pgadmin] to administer your PostgresClusters' databases.
        The automatic discovery of PostgresClusters ensures that you are able to seamlessly access any databases within your environment from the pgAdmin4 GUI.
      - **Full Customizability**: Crunchy PostgreSQL for Kubernetes makes it easy to get your own PostgreSQL-as-a-Service up and running
        and fully customize your deployments, including:
          - Choose the resources for your Postgres cluster: [container resources and storage size][resize-cluster]. [Resize at any time][resize-cluster] with minimal disruption.
          - Use your own container image repository, including support `imagePullSecrets` and private repositories
          - [Customize your PostgreSQL configuration][customize-cluster]

      and much more!

      [backups]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/backups-disaster-recovery
      [clone]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/backups-disaster-recovery/disaster-recovery
      [customize-cluster]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/day-two/customize-cluster
      [disaster-recovery]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/backups-disaster-recovery/disaster-recovery
      [high-availability]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/day-two/high-availability
      [major-version-upgrade]: https://access.crunchydata.com/documentation/postgres-operator/v5/guides/major-postgres-version-upgrade/
      [monitoring]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/day-two/monitoring
      [pool]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/basic-setup/connection-pooling
      [provisioning]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/basic-setup/create-cluster
      [resize-cluster]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/cluster-management/resize-cluster
      [tls]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/day-two/customize-cluster#customize-tls

      [k8s-anti-affinity]: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#inter-pod-affinity-and-anti-affinity
      [k8s-nodes]: https://kubernetes.io/docs/concepts/architecture/nodes/

      [pgAdmin]: https://www.pgadmin.org/
      [pgBackRest]: https://www.pgbackrest.org
      [pgBouncer]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/basic-setup/connection-pooling
      [pgMonitor]: https://github.com/CrunchyData/pgmonitor

      ## Post-Installation

      ### Tutorial

      Want to [learn more about the PostgreSQL Operator][tutorial]? Browse through the [tutorial][] to learn more about what you can do,
      [join the Discord server][discord] for community support, or check out the [PGO GitHub repo][ghrepo] to learn more
      about the open source Postgres Operator project that powers Crunchy Postgres for Kubernetes.

      [tutorial]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials
      [discord]: https://discord.gg/a7vWKG8Ec9
      [ghrepo]: https://github.com/CrunchyData/postgres-operator
    displayName: Crunchy Postgres for Kubernetes
    installModes:
    - supported: true
      type: OwnNamespace
    - supported: true
      type: SingleNamespace
    - supported: true
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - postgres
    - postgresql
    - database
    - sql
    - operator
    - crunchy data
    labels:
      app.kubernetes.io/version: 5.7.4
    links:
    - name: Crunchy Data
      url: https://www.crunchydata.com/
    - name: Documentation
      url: https://access.crunchydata.com/documentation/postgres-operator/v5/
    maintainers:
    - email: info@crunchydata.com
      name: Crunchy Data
    maturity: stable
    minKubeVersion: 1.25.0
    provider:
      name: Crunchy Data
      url: https://www.crunchydata.com/
relatedImages:
- image: registry.connect.redhat.com/crunchydata/crunchy-pgadmin4@sha256:25025606dd4b7ae8d7fbebd3be2c2b9c4705e1108b2f0333a86fd72f0e903d7f
  name: STANDALONE_PGADMIN
- image: registry.connect.redhat.com/crunchydata/crunchy-pgadmin4@sha256:40d66941db883ca27970903974bc333d9377330a83ac501760cb6e853f5d39e5
  name: PGADMIN
- image: registry.connect.redhat.com/crunchydata/crunchy-pgbackrest@sha256:9e5f519705ffbe874eb710995d5e13bb9de5e44d85f4ab7368cb7278c1ee7ce5
  name: PGBACKREST
- image: registry.connect.redhat.com/crunchydata/crunchy-pgbouncer@sha256:2cddd3090c6a7ac867b82eb0287ecae20d7cd801aa1656cbef2a8151ea2e76a0
  name: PGBOUNCER
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-exporter@sha256:a068a05cd786d4ba21229cc2c625b7438056fa49b412390232adae9364213b2b
  name: PGEXPORTER
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:2e1a162c6dbf0384f29d75f77d799dbff14ffaed1d0484b8cd0b0d9ed67e2925
  name: POSTGRES_15_GIS_3.3
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:4e24e16c2d83660ec89001e3893a6daf12a97f28fb071b11c28fbd5b7b9cb4a5
  name: RELATED_IMAGE_POSTGRES_17_GIS_3.4
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:6cc4721ce341db7d361f31e3151bb4a44160b883554c5de01617261d9126c532
  name: POSTGRES_16_GIS_3.3
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:a40a164397d4d343ea2dc962e0250ef92ad6d64d0d9799a4af44c388949001e2
  name: RELATED_IMAGE_POSTGRES_17_GIS_3.5
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:e9e48e4bc487a5cf64c6d80f21c177ded2a0a56b804a716d7b7df9206b7b922f
  name: POSTGRES_16_GIS_3.4
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:5bc7f4b988067474a62491042623e0bf1b4e520b10078e4884a49ef56acb3d9d
  name: POSTGRES_15
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:cb818720819d4c896115b9246853074391a8ac0c2bbcd4a28916c8a19d1c18e3
  name: POSTGRES_16
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:cc418c1dd97512163727e78bdd013f1896dd89551c2d48397f0591323b92bae7
  name: POSTGRES_17
- image: registry.connect.redhat.com/crunchydata/crunchy-upgrade@sha256:9d59bab12e41979a1dfe63c0b9631e9d2daa42e7a600c591d878e23a44ab0c35
  name: PGUPGRADE
- image: registry.connect.redhat.com/crunchydata/postgres-operator-bundle@sha256:66cfb4ea34e1bc3e375620d3ae4e853d48e6939d1ea079bbf8f2b1c8bf5ca378
  name: ""
- image: registry.connect.redhat.com/crunchydata/postgres-operator@sha256:0350b54d66dd7b99105fac8cf0278fc1a79c0682749baaeddf0fa031b2dd7692
  name: postgres-operator
schema: olm.bundle
---
image: registry.connect.redhat.com/crunchydata/postgres-operator-bundle@sha256:1d78bbc0a992fdb70ebd5d1396ecfa04b63ea5c74ab9299c4eb16017491d1699
name: postgresoperator.v5.8.0
package: crunchy-postgres-operator
properties:
- type: olm.gvk
  value:
    group: postgres-operator.crunchydata.com
    kind: CrunchyBridgeCluster
    version: v1beta1
- type: olm.gvk
  value:
    group: postgres-operator.crunchydata.com
    kind: PGAdmin
    version: v1beta1
- type: olm.gvk
  value:
    group: postgres-operator.crunchydata.com
    kind: PGUpgrade
    version: v1beta1
- type: olm.gvk
  value:
    group: postgres-operator.crunchydata.com
    kind: PostgresCluster
    version: v1beta1
- type: olm.package
  value:
    packageName: crunchy-postgres-operator
    version: 5.8.0
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "CrunchyBridgeCluster",
            "metadata": {
              "name": "example-crunchybridgecluster"
            },
            "spec": {
              "clusterName": "example-bridge-cluster",
              "isHa": false,
              "majorVersion": 16,
              "plan": "standard-4",
              "provider": "aws",
              "region": "us-west-2",
              "secret": "crunchy-bridge-api-key",
              "storage": "10Gi"
            }
          },
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "PGAdmin",
            "metadata": {
              "name": "example-pgadmin",
              "namespace": "openshift-operators"
            },
            "spec": {
              "dataVolumeClaimSpec": {
                "accessModes": [
                  "ReadWriteOnce"
                ],
                "resources": {
                  "requests": {
                    "storage": "1Gi"
                  }
                }
              },
              "serverGroups": [
                {
                  "name": "Crunchy Postgres for Kubernetes",
                  "postgresClusterSelector": {}
                }
              ]
            }
          },
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "PGUpgrade",
            "metadata": {
              "name": "example-upgrade"
            },
            "spec": {
              "fromPostgresVersion": 16,
              "postgresClusterName": "example",
              "toPostgresVersion": 17
            }
          },
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "PostgresCluster",
            "metadata": {
              "name": "example"
            },
            "spec": {
              "backups": {
                "pgbackrest": {
                  "repos": [
                    {
                      "name": "repo1",
                      "volume": {
                        "volumeClaimSpec": {
                          "accessModes": [
                            "ReadWriteOnce"
                          ],
                          "resources": {
                            "requests": {
                              "storage": "1Gi"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              },
              "instances": [
                {
                  "dataVolumeClaimSpec": {
                    "accessModes": [
                      "ReadWriteOnce"
                    ],
                    "resources": {
                      "requests": {
                        "storage": "1Gi"
                      }
                    }
                  },
                  "replicas": 1
                }
              ],
              "postgresVersion": 16
            }
          }
        ]
      capabilities: Auto Pilot
      categories: Database
      certified: "true"
      containerImage: registry.connect.redhat.com/crunchydata/postgres-operator@sha256:f9c96a9764c25c73d9c37cc6022b3b810ebafa37d08687991c822360f15ac4bc
      createdAt: 2019-12-31 19:40Z
      description: Production Postgres Made Easy
      features.operators.openshift.io/cnf: "false"
      features.operators.openshift.io/cni: "false"
      features.operators.openshift.io/csi: "false"
      features.operators.openshift.io/disconnected: "true"
      features.operators.openshift.io/fips-compliant: "false"
      features.operators.openshift.io/proxy-aware: "false"
      features.operators.openshift.io/tls-profiles: "false"
      features.operators.openshift.io/token-auth-aws: "false"
      features.operators.openshift.io/token-auth-azure: "false"
      features.operators.openshift.io/token-auth-gcp: "false"
      olm.properties: '[]'
      repository: https://github.com/CrunchyData/postgres-operator
      support: crunchydata.com
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: CrunchyBridgeCluster is the Schema for the crunchybridgeclusters
          API
        displayName: Crunchy Bridge Cluster
        kind: CrunchyBridgeCluster
        name: crunchybridgeclusters.postgres-operator.crunchydata.com
        resources:
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: CronJob
          name: ""
          version: v1beta1
        - kind: Deployment
          name: ""
          version: v1
        - kind: Job
          name: ""
          version: v1
        - kind: PersistentVolumeClaim
          name: ""
          version: v1
        - kind: Secret
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: StatefulSet
          name: ""
          version: v1
        specDescriptors:
        - description: The ID of the cluster's major Postgres version. Currently Bridge
            offers 13-16
          displayName: Postgres Version
          path: majorVersion
        statusDescriptors:
        - description: conditions represent the observations of postgres cluster's
            current state.
          displayName: Conditions
          path: conditions
          x-descriptors:
          - urn:alm:descriptor:io.kubernetes.conditions
        version: v1beta1
      - description: PGAdmin is the Schema for the PGAdmin API
        displayName: PGAdmin
        kind: PGAdmin
        name: pgadmins.postgres-operator.crunchydata.com
        statusDescriptors:
        - description: 'conditions represent the observations of pgAdmin''s current
            state. Known .status.conditions.type is: "PersistentVolumeResizing"'
          displayName: Conditions
          path: conditions
          x-descriptors:
          - urn:alm:descriptor:io.kubernetes.conditions
        version: v1beta1
      - description: PGUpgrade is the Schema for the pgupgrades API
        displayName: PGUpgrade
        kind: PGUpgrade
        name: pgupgrades.postgres-operator.crunchydata.com
        version: v1beta1
      - description: PostgresCluster is the Schema for the postgresclusters API
        displayName: Postgres Cluster
        kind: PostgresCluster
        name: postgresclusters.postgres-operator.crunchydata.com
        resources:
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: CronJob
          name: ""
          version: v1beta1
        - kind: Deployment
          name: ""
          version: v1
        - kind: Job
          name: ""
          version: v1
        - kind: PersistentVolumeClaim
          name: ""
          version: v1
        - kind: Secret
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: StatefulSet
          name: ""
          version: v1
        specDescriptors:
        - description: The image name to use for PostgreSQL containers. When omitted,
            the value comes from an operator environment variable. For standard PostgreSQL
            images, the format is RELATED_IMAGE_POSTGRES_{postgresVersion}, e.g. RELATED_IMAGE_POSTGRES_13.
            For PostGIS enabled PostgreSQL images, the format is RELATED_IMAGE_POSTGRES_{postgresVersion}_GIS_{postGISVersion},
            e.g. RELATED_IMAGE_POSTGRES_13_GIS_3.1.
          displayName: Image
          path: image
        - description: The major version of PostgreSQL installed in the PostgreSQL
            image
          displayName: Postgres Version
          path: postgresVersion
        - description: Specifies one or more sets of PostgreSQL pods that replicate
            data for this cluster.
          displayName: Instance Sets
          path: instances
        statusDescriptors:
        - description: 'conditions represent the observations of postgrescluster''s
            current state. Known .status.conditions.type are: "PersistentVolumeResizing",
            "Progressing", "ProxyAvailable"'
          displayName: Conditions
          path: conditions
          x-descriptors:
          - urn:alm:descriptor:io.kubernetes.conditions
        version: v1beta1
    description: |-
      [Crunchy Postgres for Kubernetes](https://www.crunchydata.com/products/crunchy-postgresql-for-kubernetes), is the leading Kubernetes native
      Postgres solution. Built on PGO, the Postgres Operator from Crunchy Data, Crunchy Postgres for Kubernetes gives you a declarative Postgres
      solution that automatically manages your PostgreSQL clusters.

      Designed for your GitOps workflows, it is [easy to get started](https://access.crunchydata.com/documentation/postgres-operator/latest/quickstart)
      with Crunchy Postgres for Kubernetes. Within a few moments, you can have a production grade Postgres cluster complete with high availability, disaster
      recovery, and monitoring, all over secure TLS communications. Even better, Crunchy Postgres for Kubernetes lets you easily customize your Postgres
      cluster to tailor it to your workload!

      With conveniences like cloning Postgres clusters to using rolling updates to roll out disruptive changes with minimal downtime, Crunchy Postgres
      for Kubernetes is ready to support your Postgres data at every stage of your release pipeline. Built for resiliency and uptime, Crunchy Postgres
      for Kubernetes will keep your Postgres cluster in a desired state so you do not need to worry about it.

      Crunchy Postgres for Kubernetes is developed with many years of production experience in automating Postgres management on Kubernetes, providing
      a seamless cloud native Postgres solution to keep your data always available.

      Crunchy Postgres for Kubernetes is made available to users without an active Crunchy Data subscription in connection with Crunchy Data's
      [Developer Program](https://www.crunchydata.com/developers/terms-of-use).
      For more information, please contact us at [info@crunchydata.com](mailto:info@crunchydata.com).

      - **PostgreSQL Cluster Provisioning**: [Create, Scale, & Delete PostgreSQL clusters with ease][provisioning],
        while fully customizing your Pods and PostgreSQL configuration!
      - **High-Availability**: Safe, automated failover backed by a [distributed consensus based high-availability solution][high-availability].
        Uses [Pod Anti-Affinity][k8s-anti-affinity] to help resiliency; you can configure how aggressive this can be!
        Failed primaries automatically heal, allowing for faster recovery time. You can even create regularly scheduled
        backups as well and set your backup retention policy
      - **Disaster Recovery**: [Backups][backups] and [restores][disaster-recovery] leverage the open source [pgBackRest][] utility and
        [includes support for full, incremental, and differential backups as well as efficient delta restores][backups].
        Set how long you want your backups retained for. Works great with very large databases!
      - **Monitoring**: [Track the health of your PostgreSQL clusters][monitoring] using the open source [pgMonitor][] library and OpenTelemetry.
      - **Clone**: [Create new clusters from your existing clusters or backups][clone] with efficient data cloning.
      - **TLS**: All connections are over [TLS][tls]. You can also [bring your own TLS infrastructure][tls] if you do not want to use the provided defaults.
      - **Connection Pooling**: Advanced [connection pooling][pool] support using [pgBouncer][].
      - **Affinity and Tolerations**: Have your PostgreSQL clusters deployed to [Kubernetes Nodes][k8s-nodes] of your preference.
        Set your [pod anti-affinity][k8s-anti-affinity], node affinity, Pod tolerations and more rules to customize your deployment topology!
      - **PostgreSQL Major Version Upgrades**: Perform a [PostgreSQL major version upgrade][major-version-upgrade] declaratively.
      - **Database Administration**: Easily deploy [pgAdmin4][pgadmin] to administer your PostgresClusters' databases.
        The automatic discovery of PostgresClusters ensures that you are able to seamlessly access any databases within your environment from the pgAdmin4 GUI.
      - **Full Customizability**: Crunchy PostgreSQL for Kubernetes makes it easy to get your own PostgreSQL-as-a-Service up and running
        and fully customize your deployments, including:
          - Choose the resources for your Postgres cluster: [container resources and storage size][resize-cluster]. [Resize at any time][resize-cluster] with minimal disruption.
          - Use your own container image repository, including support `imagePullSecrets` and private repositories
          - [Customize your PostgreSQL configuration][customize-cluster]

      and much more!

      [backups]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/backups-disaster-recovery
      [clone]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/backups-disaster-recovery/disaster-recovery
      [customize-cluster]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/day-two/customize-cluster
      [disaster-recovery]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/backups-disaster-recovery/disaster-recovery
      [high-availability]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/day-two/high-availability
      [major-version-upgrade]: https://access.crunchydata.com/documentation/postgres-operator/v5/guides/major-postgres-version-upgrade/
      [monitoring]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/day-two/monitoring
      [pool]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/basic-setup/connection-pooling
      [provisioning]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/basic-setup/create-cluster
      [resize-cluster]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/cluster-management/resize-cluster
      [tls]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/day-two/customize-cluster#customize-tls

      [k8s-anti-affinity]: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#inter-pod-affinity-and-anti-affinity
      [k8s-nodes]: https://kubernetes.io/docs/concepts/architecture/nodes/

      [pgAdmin]: https://www.pgadmin.org/
      [pgBackRest]: https://www.pgbackrest.org
      [pgBouncer]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/basic-setup/connection-pooling
      [pgMonitor]: https://github.com/CrunchyData/pgmonitor

      ## Post-Installation

      ### Tutorial

      Want to [learn more about the PostgreSQL Operator][tutorial]? Browse through the [tutorial][] to learn more about what you can do,
      [join the Discord server][discord] for community support, or check out the [PGO GitHub repo][ghrepo] to learn more
      about the open source Postgres Operator project that powers Crunchy Postgres for Kubernetes.

      [tutorial]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials
      [discord]: https://discord.gg/a7vWKG8Ec9
      [ghrepo]: https://github.com/CrunchyData/postgres-operator
    displayName: Crunchy Postgres for Kubernetes
    installModes:
    - supported: true
      type: OwnNamespace
    - supported: true
      type: SingleNamespace
    - supported: true
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - postgres
    - postgresql
    - database
    - sql
    - operator
    - crunchy data
    labels:
      app.kubernetes.io/version: 5.8.0
    links:
    - name: Crunchy Data
      url: https://www.crunchydata.com/
    - name: Documentation
      url: https://access.crunchydata.com/documentation/postgres-operator/v5/
    maintainers:
    - email: info@crunchydata.com
      name: Crunchy Data
    maturity: stable
    minKubeVersion: 1.25.0
    provider:
      name: Crunchy Data
      url: https://www.crunchydata.com/
relatedImages:
- image: registry.connect.redhat.com/crunchydata/crunchy-pgadmin4@sha256:c57e0e847fd8bd06dab0bc388b5295cca2423beee0ed28b61f9a4070f29fdcec
  name: STANDALONE_PGADMIN
- image: registry.connect.redhat.com/crunchydata/crunchy-pgbackrest@sha256:7074c0c345e6c649f0bbbcb5275112913c99f0d7d057f85ec0ca6b40dbbac5f6
  name: PGBACKREST
- image: registry.connect.redhat.com/crunchydata/crunchy-pgbouncer@sha256:c83ea67e061fece41c07ab1a84c0d649767945fcddbafd5abc748f8466a8fe88
  name: PGBOUNCER
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-exporter@sha256:29a5299023ca0eefd1d3374a455e65a035b141a6a7c9de400c767b0c22b13c4d
  name: PGEXPORTER
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:37536b5cb2d78cd247c3f608a1ef926980f4ea6f5bd4e8d2d6f8abc10881201c
  name: POSTGRES_16_GIS_3.3
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:764b2b617806e894d01c8cac476cfc5512b19a948d4d095b57d53baaad205ad3
  name: POSTGRES_17_GIS_3.4
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:c0d67523b61509e473cc0517c8f4e6dda3fe2e4a9b3069621ca2a590ffb1baaf
  name: POSTGRES_16_GIS_3.4
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:d8904c8f29c4501c20590b1a500277394944d0b90eda78084713632dd0529080
  name: POSTGRES_17_GIS_3.5
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:9df3b62150e5cccca61a364d0de75435a55f0d8654489ad73ceb693f3c76b70c
  name: POSTGRES_16
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:c31386ee9cc091bd98074e5e1f2482286187d94b43044ca74e6282bd2ddab051
  name: POSTGRES_17
- image: registry.connect.redhat.com/crunchydata/crunchy-upgrade@sha256:d4e88d42a4a0f7c1c73fbd01337d3e555ba6f71d43a71249a0511048f4ea2c99
  name: PGUPGRADE
- image: registry.connect.redhat.com/crunchydata/postgres-operator-bundle@sha256:1d78bbc0a992fdb70ebd5d1396ecfa04b63ea5c74ab9299c4eb16017491d1699
  name: ""
- image: registry.connect.redhat.com/crunchydata/postgres-operator@sha256:f9c96a9764c25c73d9c37cc6022b3b810ebafa37d08687991c822360f15ac4bc
  name: postgres-operator
schema: olm.bundle
---
image: registry.connect.redhat.com/crunchydata/postgres-operator-bundle@sha256:3f1fa4f99b4a839503d600783b8cab03e1c1000a510ce36f07a2c3ad9221e522
name: postgresoperator.v5.8.1
package: crunchy-postgres-operator
properties:
- type: olm.gvk
  value:
    group: postgres-operator.crunchydata.com
    kind: CrunchyBridgeCluster
    version: v1beta1
- type: olm.gvk
  value:
    group: postgres-operator.crunchydata.com
    kind: PGAdmin
    version: v1beta1
- type: olm.gvk
  value:
    group: postgres-operator.crunchydata.com
    kind: PGUpgrade
    version: v1beta1
- type: olm.gvk
  value:
    group: postgres-operator.crunchydata.com
    kind: PostgresCluster
    version: v1beta1
- type: olm.package
  value:
    packageName: crunchy-postgres-operator
    version: 5.8.1
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "CrunchyBridgeCluster",
            "metadata": {
              "name": "example-crunchybridgecluster"
            },
            "spec": {
              "clusterName": "example-bridge-cluster",
              "isHa": false,
              "majorVersion": 16,
              "plan": "standard-4",
              "provider": "aws",
              "region": "us-west-2",
              "secret": "crunchy-bridge-api-key",
              "storage": "10Gi"
            }
          },
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "PGAdmin",
            "metadata": {
              "name": "example-pgadmin",
              "namespace": "openshift-operators"
            },
            "spec": {
              "dataVolumeClaimSpec": {
                "accessModes": [
                  "ReadWriteOnce"
                ],
                "resources": {
                  "requests": {
                    "storage": "1Gi"
                  }
                }
              },
              "serverGroups": [
                {
                  "name": "Crunchy Postgres for Kubernetes",
                  "postgresClusterSelector": {}
                }
              ]
            }
          },
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "PGUpgrade",
            "metadata": {
              "name": "example-upgrade"
            },
            "spec": {
              "fromPostgresVersion": 16,
              "postgresClusterName": "example",
              "toPostgresVersion": 17
            }
          },
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "PostgresCluster",
            "metadata": {
              "name": "example"
            },
            "spec": {
              "backups": {
                "pgbackrest": {
                  "repos": [
                    {
                      "name": "repo1",
                      "volume": {
                        "volumeClaimSpec": {
                          "accessModes": [
                            "ReadWriteOnce"
                          ],
                          "resources": {
                            "requests": {
                              "storage": "1Gi"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              },
              "instances": [
                {
                  "dataVolumeClaimSpec": {
                    "accessModes": [
                      "ReadWriteOnce"
                    ],
                    "resources": {
                      "requests": {
                        "storage": "1Gi"
                      }
                    }
                  },
                  "replicas": 1
                }
              ],
              "postgresVersion": 16
            }
          }
        ]
      capabilities: Auto Pilot
      categories: Database
      certified: "true"
      containerImage: registry.connect.redhat.com/crunchydata/postgres-operator@sha256:06ad84c34762c7484912bf64e62e54e31936352448cf63b3d17890729997b20e
      createdAt: 2019-12-31 19:40Z
      description: Production Postgres Made Easy
      features.operators.openshift.io/cnf: "false"
      features.operators.openshift.io/cni: "false"
      features.operators.openshift.io/csi: "false"
      features.operators.openshift.io/disconnected: "true"
      features.operators.openshift.io/fips-compliant: "false"
      features.operators.openshift.io/proxy-aware: "false"
      features.operators.openshift.io/tls-profiles: "false"
      features.operators.openshift.io/token-auth-aws: "false"
      features.operators.openshift.io/token-auth-azure: "false"
      features.operators.openshift.io/token-auth-gcp: "false"
      olm.properties: '[]'
      repository: https://github.com/CrunchyData/postgres-operator
      support: crunchydata.com
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: CrunchyBridgeCluster is the Schema for the crunchybridgeclusters
          API
        displayName: Crunchy Bridge Cluster
        kind: CrunchyBridgeCluster
        name: crunchybridgeclusters.postgres-operator.crunchydata.com
        resources:
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: CronJob
          name: ""
          version: v1beta1
        - kind: Deployment
          name: ""
          version: v1
        - kind: Job
          name: ""
          version: v1
        - kind: PersistentVolumeClaim
          name: ""
          version: v1
        - kind: Secret
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: StatefulSet
          name: ""
          version: v1
        specDescriptors:
        - description: The ID of the cluster's major Postgres version. Currently Bridge
            offers 13-16
          displayName: Postgres Version
          path: majorVersion
        statusDescriptors:
        - description: conditions represent the observations of postgres cluster's
            current state.
          displayName: Conditions
          path: conditions
          x-descriptors:
          - urn:alm:descriptor:io.kubernetes.conditions
        version: v1beta1
      - description: PGAdmin is the Schema for the PGAdmin API
        displayName: PGAdmin
        kind: PGAdmin
        name: pgadmins.postgres-operator.crunchydata.com
        statusDescriptors:
        - description: 'conditions represent the observations of pgAdmin''s current
            state. Known .status.conditions.type is: "PersistentVolumeResizing"'
          displayName: Conditions
          path: conditions
          x-descriptors:
          - urn:alm:descriptor:io.kubernetes.conditions
        version: v1beta1
      - description: PGUpgrade is the Schema for the pgupgrades API
        displayName: PGUpgrade
        kind: PGUpgrade
        name: pgupgrades.postgres-operator.crunchydata.com
        version: v1beta1
      - description: PostgresCluster is the Schema for the postgresclusters API
        displayName: Postgres Cluster
        kind: PostgresCluster
        name: postgresclusters.postgres-operator.crunchydata.com
        resources:
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: CronJob
          name: ""
          version: v1beta1
        - kind: Deployment
          name: ""
          version: v1
        - kind: Job
          name: ""
          version: v1
        - kind: PersistentVolumeClaim
          name: ""
          version: v1
        - kind: Secret
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: StatefulSet
          name: ""
          version: v1
        specDescriptors:
        - description: The image name to use for PostgreSQL containers. When omitted,
            the value comes from an operator environment variable. For standard PostgreSQL
            images, the format is RELATED_IMAGE_POSTGRES_{postgresVersion}, e.g. RELATED_IMAGE_POSTGRES_13.
            For PostGIS enabled PostgreSQL images, the format is RELATED_IMAGE_POSTGRES_{postgresVersion}_GIS_{postGISVersion},
            e.g. RELATED_IMAGE_POSTGRES_13_GIS_3.1.
          displayName: Image
          path: image
        - description: The major version of PostgreSQL installed in the PostgreSQL
            image
          displayName: Postgres Version
          path: postgresVersion
        - description: Specifies one or more sets of PostgreSQL pods that replicate
            data for this cluster.
          displayName: Instance Sets
          path: instances
        statusDescriptors:
        - description: 'conditions represent the observations of postgrescluster''s
            current state. Known .status.conditions.type are: "PersistentVolumeResizing",
            "Progressing", "ProxyAvailable"'
          displayName: Conditions
          path: conditions
          x-descriptors:
          - urn:alm:descriptor:io.kubernetes.conditions
        version: v1beta1
    description: |-
      [Crunchy Postgres for Kubernetes](https://www.crunchydata.com/products/crunchy-postgresql-for-kubernetes), is the leading Kubernetes native
      Postgres solution. Built on PGO, the Postgres Operator from Crunchy Data, Crunchy Postgres for Kubernetes gives you a declarative Postgres
      solution that automatically manages your PostgreSQL clusters.

      Designed for your GitOps workflows, it is [easy to get started](https://access.crunchydata.com/documentation/postgres-operator/latest/quickstart)
      with Crunchy Postgres for Kubernetes. Within a few moments, you can have a production grade Postgres cluster complete with high availability, disaster
      recovery, and monitoring, all over secure TLS communications. Even better, Crunchy Postgres for Kubernetes lets you easily customize your Postgres
      cluster to tailor it to your workload!

      With conveniences like cloning Postgres clusters to using rolling updates to roll out disruptive changes with minimal downtime, Crunchy Postgres
      for Kubernetes is ready to support your Postgres data at every stage of your release pipeline. Built for resiliency and uptime, Crunchy Postgres
      for Kubernetes will keep your Postgres cluster in a desired state so you do not need to worry about it.

      Crunchy Postgres for Kubernetes is developed with many years of production experience in automating Postgres management on Kubernetes, providing
      a seamless cloud native Postgres solution to keep your data always available.

      Crunchy Postgres for Kubernetes is made available to users without an active Crunchy Data subscription in connection with Crunchy Data's
      [Developer Program](https://www.crunchydata.com/developers/terms-of-use).
      For more information, please contact us at [info@crunchydata.com](mailto:info@crunchydata.com).

      - **PostgreSQL Cluster Provisioning**: [Create, Scale, & Delete PostgreSQL clusters with ease][provisioning],
        while fully customizing your Pods and PostgreSQL configuration!
      - **High-Availability**: Safe, automated failover backed by a [distributed consensus based high-availability solution][high-availability].
        Uses [Pod Anti-Affinity][k8s-anti-affinity] to help resiliency; you can configure how aggressive this can be!
        Failed primaries automatically heal, allowing for faster recovery time. You can even create regularly scheduled
        backups as well and set your backup retention policy
      - **Disaster Recovery**: [Backups][backups] and [restores][disaster-recovery] leverage the open source [pgBackRest][] utility and
        [includes support for full, incremental, and differential backups as well as efficient delta restores][backups].
        Set how long you want your backups retained for. Works great with very large databases!
      - **Monitoring**: [Track the health of your PostgreSQL clusters][monitoring] using the open source [pgMonitor][] library and OpenTelemetry.
      - **Clone**: [Create new clusters from your existing clusters or backups][clone] with efficient data cloning.
      - **TLS**: All connections are over [TLS][tls]. You can also [bring your own TLS infrastructure][tls] if you do not want to use the provided defaults.
      - **Connection Pooling**: Advanced [connection pooling][pool] support using [pgBouncer][].
      - **Affinity and Tolerations**: Have your PostgreSQL clusters deployed to [Kubernetes Nodes][k8s-nodes] of your preference.
        Set your [pod anti-affinity][k8s-anti-affinity], node affinity, Pod tolerations and more rules to customize your deployment topology!
      - **PostgreSQL Major Version Upgrades**: Perform a [PostgreSQL major version upgrade][major-version-upgrade] declaratively.
      - **Database Administration**: Easily deploy [pgAdmin4][pgadmin] to administer your PostgresClusters' databases.
        The automatic discovery of PostgresClusters ensures that you are able to seamlessly access any databases within your environment from the pgAdmin4 GUI.
      - **Full Customizability**: Crunchy PostgreSQL for Kubernetes makes it easy to get your own PostgreSQL-as-a-Service up and running
        and fully customize your deployments, including:
          - Choose the resources for your Postgres cluster: [container resources and storage size][resize-cluster]. [Resize at any time][resize-cluster] with minimal disruption.
          - Use your own container image repository, including support `imagePullSecrets` and private repositories
          - [Customize your PostgreSQL configuration][customize-cluster]

      and much more!

      [backups]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/backups-disaster-recovery
      [clone]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/backups-disaster-recovery/disaster-recovery
      [customize-cluster]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/day-two/customize-cluster
      [disaster-recovery]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/backups-disaster-recovery/disaster-recovery
      [high-availability]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/day-two/high-availability
      [major-version-upgrade]: https://access.crunchydata.com/documentation/postgres-operator/v5/guides/major-postgres-version-upgrade/
      [monitoring]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/day-two/monitoring
      [pool]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/basic-setup/connection-pooling
      [provisioning]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/basic-setup/create-cluster
      [resize-cluster]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/cluster-management/resize-cluster
      [tls]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/day-two/customize-cluster#customize-tls

      [k8s-anti-affinity]: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#inter-pod-affinity-and-anti-affinity
      [k8s-nodes]: https://kubernetes.io/docs/concepts/architecture/nodes/

      [pgAdmin]: https://www.pgadmin.org/
      [pgBackRest]: https://www.pgbackrest.org
      [pgBouncer]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/basic-setup/connection-pooling
      [pgMonitor]: https://github.com/CrunchyData/pgmonitor

      ## Post-Installation

      ### Tutorial

      Want to [learn more about the PostgreSQL Operator][tutorial]? Browse through the [tutorial][] to learn more about what you can do,
      [join the Discord server][discord] for community support, or check out the [PGO GitHub repo][ghrepo] to learn more
      about the open source Postgres Operator project that powers Crunchy Postgres for Kubernetes.

      [tutorial]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials
      [discord]: https://discord.gg/a7vWKG8Ec9
      [ghrepo]: https://github.com/CrunchyData/postgres-operator
    displayName: Crunchy Postgres for Kubernetes
    installModes:
    - supported: true
      type: OwnNamespace
    - supported: true
      type: SingleNamespace
    - supported: true
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - postgres
    - postgresql
    - database
    - sql
    - operator
    - crunchy data
    labels:
      app.kubernetes.io/version: 5.8.1
    links:
    - name: Crunchy Data
      url: https://www.crunchydata.com/
    - name: Documentation
      url: https://access.crunchydata.com/documentation/postgres-operator/v5/
    maintainers:
    - email: info@crunchydata.com
      name: Crunchy Data
    maturity: stable
    minKubeVersion: 1.25.0
    provider:
      name: Crunchy Data
      url: https://www.crunchydata.com/
relatedImages:
- image: registry.connect.redhat.com/crunchydata/crunchy-pgadmin4@sha256:4f1c5d64d2cfc1217edba1d975ca93044d4709e1c109fa7b9a7f92676fc0823e
  name: STANDALONE_PGADMIN
- image: registry.connect.redhat.com/crunchydata/crunchy-pgbackrest@sha256:826e579759b43ee2f1533f6d8d64f694a756d384db66e54f99aa43a7d015ae0f
  name: PGBACKREST
- image: registry.connect.redhat.com/crunchydata/crunchy-pgbouncer@sha256:6469e24ea7d0174f2cbe033e97fafc3ebb4f3c73e88a9ddcc160b9d0cc0023b1
  name: PGBOUNCER
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-exporter@sha256:a0c232306de7a66abbd6d669961dfc9e4257d8149fe1ada006215b3616ad7258
  name: PGEXPORTER
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:0b2ba65c743c1b86d4cb8a64fe59e5f7870571a0d159f9c18792539611e3f796
  name: POSTGRES_16_GIS_3.4
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:30048ee7e3ba8956dc16c1f75f8d72a04aafd689c5ad68f4efc3ff24da5ab7c3
  name: POSTGRES_17_GIS_3.4
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:7f361a69855efd5891c84edddc3f65fa4d5bc48dcdf24319febbf320e0f1d1e2
  name: POSTGRES_16_GIS_3.3
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:de2e02922d399c049f4481d4077dae56ca2f00c1798aacc5207a173b541e3d0b
  name: POSTGRES_17_GIS_3.5
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:33797d8f5986eb07194dff59e6befe6290e4983172c47249e7f87265ceef590f
  name: POSTGRES_16
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:75a4247265bea34f10f77367e33a5d3e54081d28c272421ede499c6d9d733a68
  name: POSTGRES_17
- image: registry.connect.redhat.com/crunchydata/crunchy-upgrade@sha256:1cf0380bdf536ed13ee98f5052ca506c0f4386127921ad04ae5a7f08cdb3eab8
  name: PGUPGRADE
- image: registry.connect.redhat.com/crunchydata/postgres-operator-bundle@sha256:3f1fa4f99b4a839503d600783b8cab03e1c1000a510ce36f07a2c3ad9221e522
  name: ""
- image: registry.connect.redhat.com/crunchydata/postgres-operator@sha256:06ad84c34762c7484912bf64e62e54e31936352448cf63b3d17890729997b20e
  name: postgres-operator
schema: olm.bundle
---
image: registry.connect.redhat.com/crunchydata/postgres-operator-bundle@sha256:204bd530fc6e8df6abbfbf428c42c2039c9d1730ec5c07d028c39d8d13c20601
name: postgresoperator.v5.8.2
package: crunchy-postgres-operator
properties:
- type: olm.gvk
  value:
    group: postgres-operator.crunchydata.com
    kind: CrunchyBridgeCluster
    version: v1beta1
- type: olm.gvk
  value:
    group: postgres-operator.crunchydata.com
    kind: PGAdmin
    version: v1beta1
- type: olm.gvk
  value:
    group: postgres-operator.crunchydata.com
    kind: PGUpgrade
    version: v1beta1
- type: olm.gvk
  value:
    group: postgres-operator.crunchydata.com
    kind: PostgresCluster
    version: v1beta1
- type: olm.package
  value:
    packageName: crunchy-postgres-operator
    version: 5.8.2
- type: olm.csv.metadata
  value:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "CrunchyBridgeCluster",
            "metadata": {
              "name": "example-crunchybridgecluster"
            },
            "spec": {
              "clusterName": "example-bridge-cluster",
              "isHa": false,
              "majorVersion": 16,
              "plan": "standard-4",
              "provider": "aws",
              "region": "us-west-2",
              "secret": "crunchy-bridge-api-key",
              "storage": "10Gi"
            }
          },
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "PGAdmin",
            "metadata": {
              "name": "example-pgadmin",
              "namespace": "openshift-operators"
            },
            "spec": {
              "dataVolumeClaimSpec": {
                "accessModes": [
                  "ReadWriteOnce"
                ],
                "resources": {
                  "requests": {
                    "storage": "1Gi"
                  }
                }
              },
              "serverGroups": [
                {
                  "name": "Crunchy Postgres for Kubernetes",
                  "postgresClusterSelector": {}
                }
              ]
            }
          },
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "PGUpgrade",
            "metadata": {
              "name": "example-upgrade"
            },
            "spec": {
              "fromPostgresVersion": 16,
              "postgresClusterName": "example",
              "toPostgresVersion": 17
            }
          },
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "PostgresCluster",
            "metadata": {
              "name": "example"
            },
            "spec": {
              "backups": {
                "pgbackrest": {
                  "repos": [
                    {
                      "name": "repo1",
                      "volume": {
                        "volumeClaimSpec": {
                          "accessModes": [
                            "ReadWriteOnce"
                          ],
                          "resources": {
                            "requests": {
                              "storage": "1Gi"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              },
              "instances": [
                {
                  "dataVolumeClaimSpec": {
                    "accessModes": [
                      "ReadWriteOnce"
                    ],
                    "resources": {
                      "requests": {
                        "storage": "1Gi"
                      }
                    }
                  },
                  "replicas": 1
                }
              ],
              "postgresVersion": 16
            }
          }
        ]
      capabilities: Auto Pilot
      categories: Database
      certified: "true"
      containerImage: registry.connect.redhat.com/crunchydata/postgres-operator@sha256:2e010468471f3c55acdfe67e7b71d15af973fb5708d4a1199eeace03e4da4d69
      createdAt: 2019-12-31 19:40Z
      description: Production Postgres Made Easy
      features.operators.openshift.io/cnf: "false"
      features.operators.openshift.io/cni: "false"
      features.operators.openshift.io/csi: "false"
      features.operators.openshift.io/disconnected: "true"
      features.operators.openshift.io/fips-compliant: "false"
      features.operators.openshift.io/proxy-aware: "false"
      features.operators.openshift.io/tls-profiles: "false"
      features.operators.openshift.io/token-auth-aws: "false"
      features.operators.openshift.io/token-auth-azure: "false"
      features.operators.openshift.io/token-auth-gcp: "false"
      repository: https://github.com/CrunchyData/postgres-operator
      support: crunchydata.com
    apiServiceDefinitions: {}
    crdDescriptions:
      owned:
      - description: CrunchyBridgeCluster is the Schema for the crunchybridgeclusters
          API
        displayName: Crunchy Bridge Cluster
        kind: CrunchyBridgeCluster
        name: crunchybridgeclusters.postgres-operator.crunchydata.com
        resources:
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: CronJob
          name: ""
          version: v1beta1
        - kind: Deployment
          name: ""
          version: v1
        - kind: Job
          name: ""
          version: v1
        - kind: PersistentVolumeClaim
          name: ""
          version: v1
        - kind: Secret
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: StatefulSet
          name: ""
          version: v1
        specDescriptors:
        - description: The ID of the cluster's major Postgres version. Currently Bridge
            offers 13-16
          displayName: Postgres Version
          path: majorVersion
        statusDescriptors:
        - description: conditions represent the observations of postgres cluster's
            current state.
          displayName: Conditions
          path: conditions
          x-descriptors:
          - urn:alm:descriptor:io.kubernetes.conditions
        version: v1beta1
      - description: PGAdmin is the Schema for the PGAdmin API
        displayName: PGAdmin
        kind: PGAdmin
        name: pgadmins.postgres-operator.crunchydata.com
        statusDescriptors:
        - description: 'conditions represent the observations of pgAdmin''s current
            state. Known .status.conditions.type is: "PersistentVolumeResizing"'
          displayName: Conditions
          path: conditions
          x-descriptors:
          - urn:alm:descriptor:io.kubernetes.conditions
        version: v1beta1
      - description: PGUpgrade is the Schema for the pgupgrades API
        displayName: PGUpgrade
        kind: PGUpgrade
        name: pgupgrades.postgres-operator.crunchydata.com
        version: v1beta1
      - description: PostgresCluster is the Schema for the postgresclusters API
        displayName: Postgres Cluster
        kind: PostgresCluster
        name: postgresclusters.postgres-operator.crunchydata.com
        resources:
        - kind: ConfigMap
          name: ""
          version: v1
        - kind: CronJob
          name: ""
          version: v1beta1
        - kind: Deployment
          name: ""
          version: v1
        - kind: Job
          name: ""
          version: v1
        - kind: PersistentVolumeClaim
          name: ""
          version: v1
        - kind: Secret
          name: ""
          version: v1
        - kind: Service
          name: ""
          version: v1
        - kind: StatefulSet
          name: ""
          version: v1
        specDescriptors:
        - description: The image name to use for PostgreSQL containers. When omitted,
            the value comes from an operator environment variable. For standard PostgreSQL
            images, the format is RELATED_IMAGE_POSTGRES_{postgresVersion}, e.g. RELATED_IMAGE_POSTGRES_13.
            For PostGIS enabled PostgreSQL images, the format is RELATED_IMAGE_POSTGRES_{postgresVersion}_GIS_{postGISVersion},
            e.g. RELATED_IMAGE_POSTGRES_13_GIS_3.1.
          displayName: Image
          path: image
        - description: The major version of PostgreSQL installed in the PostgreSQL
            image
          displayName: Postgres Version
          path: postgresVersion
        - description: Specifies one or more sets of PostgreSQL pods that replicate
            data for this cluster.
          displayName: Instance Sets
          path: instances
        statusDescriptors:
        - description: 'conditions represent the observations of postgrescluster''s
            current state. Known .status.conditions.type are: "PersistentVolumeResizing",
            "Progressing", "ProxyAvailable"'
          displayName: Conditions
          path: conditions
          x-descriptors:
          - urn:alm:descriptor:io.kubernetes.conditions
        version: v1beta1
    description: |-
      [Crunchy Postgres for Kubernetes](https://www.crunchydata.com/products/crunchy-postgresql-for-kubernetes), is the leading Kubernetes native
      Postgres solution. Built on PGO, the Postgres Operator from Crunchy Data, Crunchy Postgres for Kubernetes gives you a declarative Postgres
      solution that automatically manages your PostgreSQL clusters.

      Designed for your GitOps workflows, it is [easy to get started](https://access.crunchydata.com/documentation/postgres-operator/latest/quickstart)
      with Crunchy Postgres for Kubernetes. Within a few moments, you can have a production grade Postgres cluster complete with high availability, disaster
      recovery, and monitoring, all over secure TLS communications. Even better, Crunchy Postgres for Kubernetes lets you easily customize your Postgres
      cluster to tailor it to your workload!

      With conveniences like cloning Postgres clusters to using rolling updates to roll out disruptive changes with minimal downtime, Crunchy Postgres
      for Kubernetes is ready to support your Postgres data at every stage of your release pipeline. Built for resiliency and uptime, Crunchy Postgres
      for Kubernetes will keep your Postgres cluster in a desired state so you do not need to worry about it.

      Crunchy Postgres for Kubernetes is developed with many years of production experience in automating Postgres management on Kubernetes, providing
      a seamless cloud native Postgres solution to keep your data always available.

      Crunchy Postgres for Kubernetes is made available to users without an active Crunchy Data subscription in connection with Crunchy Data's
      [Developer Program](https://www.crunchydata.com/developers/terms-of-use).
      For more information, please contact us at [info@crunchydata.com](mailto:info@crunchydata.com).

      - **PostgreSQL Cluster Provisioning**: [Create, Scale, & Delete PostgreSQL clusters with ease][provisioning],
        while fully customizing your Pods and PostgreSQL configuration!
      - **High-Availability**: Safe, automated failover backed by a [distributed consensus based high-availability solution][high-availability].
        Uses [Pod Anti-Affinity][k8s-anti-affinity] to help resiliency; you can configure how aggressive this can be!
        Failed primaries automatically heal, allowing for faster recovery time. You can even create regularly scheduled
        backups as well and set your backup retention policy
      - **Disaster Recovery**: [Backups][backups] and [restores][disaster-recovery] leverage the open source [pgBackRest][] utility and
        [includes support for full, incremental, and differential backups as well as efficient delta restores][backups].
        Set how long you want your backups retained for. Works great with very large databases!
      - **Monitoring**: [Track the health of your PostgreSQL clusters][monitoring] using the open source [pgMonitor][] library and OpenTelemetry.
      - **Clone**: [Create new clusters from your existing clusters or backups][clone] with efficient data cloning.
      - **TLS**: All connections are over [TLS][tls]. You can also [bring your own TLS infrastructure][tls] if you do not want to use the provided defaults.
      - **Connection Pooling**: Advanced [connection pooling][pool] support using [pgBouncer][].
      - **Affinity and Tolerations**: Have your PostgreSQL clusters deployed to [Kubernetes Nodes][k8s-nodes] of your preference.
        Set your [pod anti-affinity][k8s-anti-affinity], node affinity, Pod tolerations and more rules to customize your deployment topology!
      - **PostgreSQL Major Version Upgrades**: Perform a [PostgreSQL major version upgrade][major-version-upgrade] declaratively.
      - **Database Administration**: Easily deploy [pgAdmin4][pgadmin] to administer your PostgresClusters' databases.
        The automatic discovery of PostgresClusters ensures that you are able to seamlessly access any databases within your environment from the pgAdmin4 GUI.
      - **Full Customizability**: Crunchy PostgreSQL for Kubernetes makes it easy to get your own PostgreSQL-as-a-Service up and running
        and fully customize your deployments, including:
          - Choose the resources for your Postgres cluster: [container resources and storage size][resize-cluster]. [Resize at any time][resize-cluster] with minimal disruption.
          - Use your own container image repository, including support `imagePullSecrets` and private repositories
          - [Customize your PostgreSQL configuration][customize-cluster]

      and much more!

      [backups]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/backups-disaster-recovery
      [clone]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/backups-disaster-recovery/disaster-recovery
      [customize-cluster]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/day-two/customize-cluster
      [disaster-recovery]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/backups-disaster-recovery/disaster-recovery
      [high-availability]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/day-two/high-availability
      [major-version-upgrade]: https://access.crunchydata.com/documentation/postgres-operator/v5/guides/major-postgres-version-upgrade/
      [monitoring]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/day-two/monitoring
      [pool]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/basic-setup/connection-pooling
      [provisioning]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/basic-setup/create-cluster
      [resize-cluster]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/cluster-management/resize-cluster
      [tls]: https://access.crunchydata.com/documentation/postgres-operator/latest/tutorials/day-two/customize-cluster#customize-tls

      [k8s-anti-affinity]: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/#inter-pod-affinity-and-anti-affinity
      [k8s-nodes]: https://kubernetes.io/docs/concepts/architecture/nodes/

      [pgAdmin]: https://www.pgadmin.org/
      [pgBackRest]: https://www.pgbackrest.org
      [pgBouncer]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials/basic-setup/connection-pooling
      [pgMonitor]: https://github.com/CrunchyData/pgmonitor

      ## Post-Installation

      ### Tutorial

      Want to [learn more about the PostgreSQL Operator][tutorial]? Browse through the [tutorial][] to learn more about what you can do,
      [join the Discord server][discord] for community support, or check out the [PGO GitHub repo][ghrepo] to learn more
      about the open source Postgres Operator project that powers Crunchy Postgres for Kubernetes.

      [tutorial]: https://access.crunchydata.com/documentation/postgres-operator/v5/tutorials
      [discord]: https://discord.gg/a7vWKG8Ec9
      [ghrepo]: https://github.com/CrunchyData/postgres-operator
    displayName: Crunchy Postgres for Kubernetes
    installModes:
    - supported: true
      type: OwnNamespace
    - supported: true
      type: SingleNamespace
    - supported: true
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
    keywords:
    - postgres
    - postgresql
    - database
    - sql
    - operator
    - crunchy data
    labels:
      app.kubernetes.io/version: 5.8.2
    links:
    - name: Crunchy Data
      url: https://www.crunchydata.com/
    - name: Documentation
      url: https://access.crunchydata.com/documentation/postgres-operator/v5/
    maintainers:
    - email: info@crunchydata.com
      name: Crunchy Data
    maturity: stable
    minKubeVersion: 1.25.0
    provider:
      name: Crunchy Data
      url: https://www.crunchydata.com/
relatedImages:
- image: registry.connect.redhat.com/crunchydata/crunchy-pgadmin4@sha256:df32cf56ae68a4150e85fc9ad5d1515c712338b43114c51d8ec4228673c53cf7
  name: STANDALONE_PGADMIN
- image: registry.connect.redhat.com/crunchydata/crunchy-pgbackrest@sha256:2c35208eef1a69efef6c817c58cebd5218a4671259b4809d042c5efeebd71de4
  name: PGBACKREST
- image: registry.connect.redhat.com/crunchydata/crunchy-pgbouncer@sha256:fa2ab1d1cb2e9c1c88b85e3f5a6574e5c4bd91aedb7d62a56bf89dd737673c4e
  name: PGBOUNCER
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-exporter@sha256:136b9bcf46b1e3567485b52841f62714aa8387db483f70e0f670fdc411d56de2
  name: PGEXPORTER
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:02902870f6180fdb272caf75438db2cb019bd63b0d876d30b940f750612e1fbe
  name: POSTGRES_16_GIS_3.4
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:309b9dd772cbed5f273651d81acd6f8f95604a5d26c90e005d92a97963209293
  name: POSTGRES_17_GIS_3.4
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:550a9d43745a387dc5b09a2142a7e454a8f47992c10489344e8689fe16ac35e5
  name: POSTGRES_17_GIS_3.5
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres-gis@sha256:777f938c8cdbd881e4fe6801bee0ffa24d45f3539efacac0a370446423585b8c
  name: POSTGRES_16_GIS_3.3
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:583a290f224701d5215d4e44e723cb6c542b1306ced074cd4d3bbe5810f22c0b
  name: POSTGRES_17
- image: registry.connect.redhat.com/crunchydata/crunchy-postgres@sha256:d760cb80dc20a9f62d03c51736cd9fe3d04a325ff78099fda05882c555c382d4
  name: POSTGRES_16
- image: registry.connect.redhat.com/crunchydata/crunchy-upgrade@sha256:0448e87a79ed21a5e5248d46c523c3f7f684f6a221e67b3c54b9a6c4278a6284
  name: PGUPGRADE
- image: registry.connect.redhat.com/crunchydata/postgres-operator-bundle@sha256:204bd530fc6e8df6abbfbf428c42c2039c9d1730ec5c07d028c39d8d13c20601
  name: ""
- image: registry.connect.redhat.com/crunchydata/postgres-operator@sha256:2e010468471f3c55acdfe67e7b71d15af973fb5708d4a1199eeace03e4da4d69
  name: postgres-operator
schema: olm.bundle

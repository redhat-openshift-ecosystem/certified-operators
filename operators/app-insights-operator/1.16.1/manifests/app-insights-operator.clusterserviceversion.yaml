apiVersion: operators.coreos.com/v1alpha1
kind: ClusterServiceVersion
metadata:
  annotations:
    alm-examples: |-
      [
        {
          "apiVersion": "appinsights.randoli/v1beta1",
          "kind": "RandoliAgent",
          "metadata": {
            "name": "randoliagent-sample"
          },
          "spec": {
            "affinity": {},
            "anomalyDetection": {
              "customQueries": {
                "path": "/prometheus"
              },
              "defaultsQueries": {
                "enabled": true
              }
            },
            "cert-manager": {
              "crds": {
                "enabled": true
              },
              "enabled": false
            },
            "costManagement": {
              "vpaOperator": {
                "enabled": false
              }
            },
            "deploymentAnnotations": {},
            "extraEnv": [],
            "extraEnvFrom": [],
            "extraVolumeMounts": [],
            "extraVolumes": [],
            "global": {
              "alerts": {
                "slack": {
                  "api_url": null,
                  "channel": null
                }
              },
              "opencost": {
                "url": null
              },
              "openshift": {
                "enabled": false
              },
              "prometheus": {
                "bearerTokenKey": "token",
                "install": true,
                "passwordKey": "",
                "secretName": "",
                "tlsCertConfigmapKey": "",
                "tlsCertConfigmapName": "",
                "tlsInsecureSkipVerify": true,
                "url": "",
                "usernameKey": ""
              },
              "secrets": {
                "cert": "randoli-agent-cert",
                "config": "randoli-agent-secret"
              }
            },
            "image": {
              "digest": "",
              "pullPolicy": "Always",
              "registry": "docker.io",
              "repository": "randoli/insights-agent",
              "tag": "1.16"
            },
            "imagePullSecrets": [],
            "labels": {
              "app": "randoli-agent"
            },
            "logs": {
              "vector": {
                "agent": {
                  "containerSecurityContext": {
                    "privileged": true
                  }
                }
              }
            },
            "network": {
              "standaloneConsole": {
                "enable": true
              }
            },
            "nodeSelector": {},
            "observability": {
              "logs": {
                "analyzers": {
                  "enabled": true
                }
              },
              "netobserv": {
                "enabled": false
              },
              "otel": {
                "operator": {
                  "enabled": false
                }
              },
              "security": {
                "cronSpec": "0 10,20 * * *",
                "imagePullSecrets": "",
                "mode": "INTERVAL_SCANNING"
              },
              "tracing": null,
              "vector": null
            },
            "prometheus": {
              "alertRelabelConfigs": {},
              "alertmanager": {
                "additionalPeers": [],
                "affinity": {},
                "automountServiceAccountToken": true,
                "baseURL": "",
                "command": [],
                "config": {
                  "enabled": true,
                  "global": {},
                  "templates": [
                    "/etc/alertmanager/*.tmpl"
                  ]
                },
                "configAnnotations": {},
                "configmapReload": {
                  "enabled": true,
                  "extraArgs": {},
                  "extraEnv": [],
                  "extraVolumeMounts": [],
                  "image": {
                    "pullPolicy": "IfNotPresent",
                    "repository": "quay.io/prometheus-operator/prometheus-config-reloader",
                    "tag": "v0.66.0"
                  },
                  "name": "configmap-reload",
                  "resources": {},
                  "securityContext": {}
                },
                "dnsConfig": {},
                "enabled": true,
                "extraArgs": {},
                "extraContainers": [],
                "extraEnv": [],
                "extraInitContainers": [],
                "extraPodConfigs": {},
                "extraSecretMounts": [],
                "extraVolumeMounts": [],
                "extraVolumes": [],
                "fullnameOverride": "randoli-alerts",
                "global": {
                  "alerts": {
                    "slack": {
                      "api_url": null,
                      "channel": null
                    }
                  },
                  "opencost": {
                    "url": null
                  },
                  "openshift": {
                    "enabled": false
                  },
                  "prometheus": {
                    "bearerTokenKey": "token",
                    "install": true,
                    "passwordKey": "",
                    "secretName": "",
                    "tlsCertConfigmapKey": "",
                    "tlsCertConfigmapName": "",
                    "tlsInsecureSkipVerify": true,
                    "url": "",
                    "usernameKey": ""
                  },
                  "secrets": {
                    "cert": "randoli-agent-cert",
                    "config": "randoli-agent-secret"
                  }
                },
                "hostAliases": [],
                "image": {
                  "pullPolicy": "IfNotPresent",
                  "repository": "quay.io/prometheus/alertmanager",
                  "tag": ""
                },
                "imagePullSecrets": [],
                "ingress": {
                  "annotations": {},
                  "className": "",
                  "enabled": false,
                  "hosts": [
                    {
                      "host": "alertmanager.domain.com",
                      "paths": [
                        {
                          "path": "/",
                          "pathType": "ImplementationSpecific"
                        }
                      ]
                    }
                  ],
                  "tls": []
                },
                "ingressPerReplica": {
                  "annotations": {},
                  "className": "",
                  "enabled": false,
                  "hostDomain": "domain.com",
                  "hostPrefix": "alertmanager",
                  "labels": {},
                  "pathType": "ImplementationSpecific",
                  "paths": [
                    "/"
                  ],
                  "tlsSecretName": "",
                  "tlsSecretPerReplica": {
                    "enabled": false,
                    "prefix": "alertmanager"
                  }
                },
                "livenessProbe": {
                  "httpGet": {
                    "path": "/",
                    "port": "http"
                  }
                },
                "minReadySeconds": 0,
                "nameOverride": "",
                "namespaceOverride": "",
                "nodeSelector": {},
                "persistence": {
                  "accessModes": [
                    "ReadWriteOnce"
                  ],
                  "enabled": true,
                  "size": "2Gi"
                },
                "podAnnotations": {},
                "podAntiAffinity": "",
                "podAntiAffinityTopologyKey": "kubernetes.io/hostname",
                "podDisruptionBudget": {},
                "podLabels": {},
                "podSecurityContext": {
                  "fsGroup": 65534,
                  "runAsGroup": 65534,
                  "runAsNonRoot": true,
                  "runAsUser": 65534
                },
                "priorityClassName": "",
                "readinessProbe": {
                  "httpGet": {
                    "path": "/",
                    "port": "http"
                  }
                },
                "replicaCount": 1,
                "resources": {},
                "revisionHistoryLimit": 10,
                "schedulerName": "",
                "securityContext": {
                  "runAsGroup": 65534,
                  "runAsNonRoot": true,
                  "runAsUser": 65534
                },
                "service": {
                  "annotations": {},
                  "clusterPort": 9094,
                  "extraPorts": [],
                  "ipDualStack": {
                    "enabled": false,
                    "ipFamilies": [
                      "IPv6",
                      "IPv4"
                    ],
                    "ipFamilyPolicy": "PreferDualStack"
                  },
                  "labels": {},
                  "loadBalancerIP": "",
                  "loadBalancerSourceRanges": [],
                  "port": 9093,
                  "type": "ClusterIP"
                },
                "serviceAccount": {
                  "annotations": {},
                  "create": true,
                  "name": ""
                },
                "servicePerReplica": {
                  "annotations": {},
                  "enabled": false,
                  "externalTrafficPolicy": "Cluster",
                  "loadBalancerSourceRanges": [],
                  "type": "ClusterIP"
                },
                "statefulSet": {
                  "annotations": {}
                },
                "templates": {},
                "testFramework": {
                  "annotations": {
                    "helm.sh/hook": "test-success"
                  },
                  "enabled": false
                },
                "tolerations": [],
                "topologySpreadConstraints": [],
                "verticalPodAutoscaler": {
                  "enabled": false
                }
              },
              "commonMetaLabels": {},
              "configmapReload": {
                "env": [],
                "prometheus": {
                  "containerPort": 8080,
                  "containerPortName": "metrics",
                  "containerSecurityContext": {},
                  "enabled": true,
                  "extraArgs": {},
                  "extraConfigmapMounts": [],
                  "extraVolumeDirs": [],
                  "extraVolumeMounts": [],
                  "image": {
                    "digest": "",
                    "pullPolicy": "IfNotPresent",
                    "repository": "quay.io/prometheus-operator/prometheus-config-reloader",
                    "tag": "v0.78.2"
                  },
                  "livenessProbe": {
                    "httpGet": {
                      "path": "/healthz",
                      "port": "metrics",
                      "scheme": "HTTP"
                    },
                    "initialDelaySeconds": 2,
                    "periodSeconds": 10
                  },
                  "name": "configmap-reload",
                  "readinessProbe": {
                    "httpGet": {
                      "path": "/healthz",
                      "port": "metrics",
                      "scheme": "HTTP"
                    },
                    "periodSeconds": 10
                  },
                  "resources": {},
                  "startupProbe": {
                    "enabled": false,
                    "httpGet": {
                      "path": "/healthz",
                      "port": "metrics",
                      "scheme": "HTTP"
                    },
                    "periodSeconds": 10
                  }
                },
                "reloadUrl": ""
              },
              "extraManifests": [],
              "extraScrapeConfigs": "- job_name: 'opencost'\n  scrape_interval: 1m\n  scrape_timeout: 10s\n  metrics_path: \"/metrics\"\n  static_configs:\n    - targets: ['{{ include \"prometheus.opencost.url\" . }}']\n",
              "forceNamespace": "",
              "global": {
                "alerts": {
                  "slack": {
                    "api_url": null,
                    "channel": null
                  }
                },
                "opencost": {
                  "url": null
                },
                "openshift": {
                  "enabled": false
                },
                "prometheus": {
                  "bearerTokenKey": "token",
                  "install": true,
                  "passwordKey": "",
                  "secretName": "",
                  "tlsCertConfigmapKey": "",
                  "tlsCertConfigmapName": "",
                  "tlsInsecureSkipVerify": true,
                  "url": "",
                  "usernameKey": ""
                },
                "secrets": {
                  "cert": "randoli-agent-cert",
                  "config": "randoli-agent-secret"
                }
              },
              "imagePullSecrets": [],
              "kube-state-metrics": {
                "affinity": {},
                "annotations": {},
                "automountServiceAccountToken": true,
                "autosharding": {
                  "enabled": false
                },
                "collectors": [
                  "certificatesigningrequests",
                  "configmaps",
                  "cronjobs",
                  "daemonsets",
                  "deployments",
                  "endpoints",
                  "horizontalpodautoscalers",
                  "ingresses",
                  "jobs",
                  "leases",
                  "limitranges",
                  "mutatingwebhookconfigurations",
                  "namespaces",
                  "networkpolicies",
                  "nodes",
                  "persistentvolumeclaims",
                  "persistentvolumes",
                  "poddisruptionbudgets",
                  "pods",
                  "replicasets",
                  "replicationcontrollers",
                  "resourcequotas",
                  "secrets",
                  "services",
                  "statefulsets",
                  "storageclasses",
                  "validatingwebhookconfigurations",
                  "volumeattachments"
                ],
                "containerSecurityContext": {
                  "allowPrivilegeEscalation": false,
                  "capabilities": {
                    "drop": [
                      "ALL"
                    ]
                  },
                  "readOnlyRootFilesystem": true
                },
                "containers": [],
                "customLabels": {},
                "customResourceState": {
                  "config": {},
                  "enabled": false
                },
                "enabled": true,
                "extraArgs": [],
                "extraManifests": [],
                "fullnameOverride": "randoli-kube-state-metrics",
                "global": {
                  "alerts": {
                    "slack": {
                      "api_url": null,
                      "channel": null
                    }
                  },
                  "imagePullSecrets": [],
                  "imageRegistry": "",
                  "opencost": {
                    "url": null
                  },
                  "openshift": {
                    "enabled": false
                  },
                  "prometheus": {
                    "bearerTokenKey": "token",
                    "install": true,
                    "passwordKey": "",
                    "secretName": "",
                    "tlsCertConfigmapKey": "",
                    "tlsCertConfigmapName": "",
                    "tlsInsecureSkipVerify": true,
                    "url": "",
                    "usernameKey": ""
                  },
                  "secrets": {
                    "cert": "randoli-agent-cert",
                    "config": "randoli-agent-secret"
                  }
                },
                "hostNetwork": false,
                "image": {
                  "pullPolicy": "IfNotPresent",
                  "registry": "registry.k8s.io",
                  "repository": "kube-state-metrics/kube-state-metrics",
                  "sha": "",
                  "tag": ""
                },
                "imagePullSecrets": [],
                "initContainers": [],
                "kubeRBACProxy": {
                  "containerSecurityContext": {
                    "allowPrivilegeEscalation": false,
                    "capabilities": {
                      "drop": [
                        "ALL"
                      ]
                    },
                    "readOnlyRootFilesystem": true
                  },
                  "enabled": false,
                  "extraArgs": [],
                  "image": {
                    "pullPolicy": "IfNotPresent",
                    "registry": "quay.io",
                    "repository": "brancz/kube-rbac-proxy",
                    "sha": "",
                    "tag": "v0.18.0"
                  },
                  "resources": {},
                  "volumeMounts": []
                },
                "kubeTargetVersionOverride": "",
                "kubeconfig": {
                  "enabled": false,
                  "secret": null
                },
                "livenessProbe": {
                  "failureThreshold": 3,
                  "httpGet": {
                    "httpHeaders": [],
                    "scheme": "http"
                  },
                  "initialDelaySeconds": 5,
                  "periodSeconds": 10,
                  "successThreshold": 1,
                  "timeoutSeconds": 5
                },
                "metricAllowlist": [],
                "metricAnnotationsAllowList": [],
                "metricDenylist": [],
                "metricLabelsAllowlist": [],
                "namespaceOverride": "",
                "namespaces": "",
                "namespacesDenylist": "",
                "networkPolicy": {
                  "enabled": false,
                  "flavor": "kubernetes"
                },
                "nodeSelector": {},
                "podAnnotations": {},
                "podDisruptionBudget": {},
                "podLabels": {},
                "podSecurityPolicy": {
                  "additionalVolumes": [],
                  "annotations": {},
                  "enabled": false
                },
                "prometheus": {
                  "monitor": {
                    "additionalLabels": {},
                    "annotations": {},
                    "enabled": false,
                    "http": {
                      "bearerTokenFile": "",
                      "bearerTokenSecret": {},
                      "enableHttp2": false,
                      "honorLabels": false,
                      "interval": "",
                      "metricRelabelings": [],
                      "proxyUrl": "",
                      "relabelings": [],
                      "scheme": "",
                      "scrapeTimeout": "",
                      "tlsConfig": {}
                    },
                    "jobLabel": "",
                    "labelLimit": 0,
                    "labelNameLengthLimit": 0,
                    "labelValueLengthLimit": 0,
                    "metrics": {
                      "bearerTokenFile": "",
                      "bearerTokenSecret": {},
                      "enableHttp2": false,
                      "honorLabels": false,
                      "interval": "",
                      "metricRelabelings": [],
                      "proxyUrl": "",
                      "relabelings": [],
                      "scheme": "",
                      "scrapeTimeout": "",
                      "tlsConfig": {}
                    },
                    "namespace": "",
                    "namespaceSelector": [],
                    "podTargetLabels": [],
                    "sampleLimit": 0,
                    "selectorOverride": {},
                    "targetLabels": [],
                    "targetLimit": 0
                  }
                },
                "prometheusScrape": true,
                "rbac": {
                  "create": true,
                  "extraRules": [],
                  "useClusterRole": true
                },
                "readinessProbe": {
                  "failureThreshold": 3,
                  "httpGet": {
                    "httpHeaders": [],
                    "scheme": "http"
                  },
                  "initialDelaySeconds": 5,
                  "periodSeconds": 10,
                  "successThreshold": 1,
                  "timeoutSeconds": 5
                },
                "releaseLabel": false,
                "releaseNamespace": false,
                "replicas": 1,
                "resources": {},
                "revisionHistoryLimit": 10,
                "securityContext": {
                  "enabled": true,
                  "fsGroup": 65534,
                  "runAsGroup": 65534,
                  "runAsNonRoot": true,
                  "runAsUser": 65534,
                  "seccompProfile": {
                    "type": "RuntimeDefault"
                  }
                },
                "selectorOverride": {},
                "selfMonitor": {
                  "enabled": false
                },
                "service": {
                  "annotations": {},
                  "clusterIP": "",
                  "ipDualStack": {
                    "enabled": false,
                    "ipFamilies": [
                      "IPv6",
                      "IPv4"
                    ],
                    "ipFamilyPolicy": "PreferDualStack"
                  },
                  "loadBalancerIP": "",
                  "loadBalancerSourceRanges": [],
                  "nodePort": 0,
                  "port": 8080,
                  "type": "ClusterIP"
                },
                "serviceAccount": {
                  "annotations": {},
                  "automountServiceAccountToken": true,
                  "create": true,
                  "imagePullSecrets": [],
                  "name": null
                },
                "startupProbe": {
                  "enabled": false,
                  "failureThreshold": 3,
                  "httpGet": {
                    "httpHeaders": [],
                    "scheme": "http"
                  },
                  "initialDelaySeconds": 0,
                  "periodSeconds": 10,
                  "successThreshold": 1,
                  "timeoutSeconds": 5
                },
                "tolerations": [],
                "topologySpreadConstraints": [],
                "verticalPodAutoscaler": {
                  "controlledResources": [],
                  "enabled": false,
                  "maxAllowed": {},
                  "minAllowed": {}
                },
                "volumeMounts": [],
                "volumes": []
              },
              "networkPolicy": {
                "enabled": false
              },
              "podSecurityPolicy": {
                "enabled": false
              },
              "prometheus-node-exporter": {
                "affinity": {},
                "commonLabels": {},
                "configmaps": [],
                "containerSecurityContext": {
                  "allowPrivilegeEscalation": false,
                  "readOnlyRootFilesystem": true
                },
                "daemonsetAnnotations": {},
                "dnsConfig": {},
                "enabled": true,
                "endpoints": [],
                "env": {},
                "extraArgs": [],
                "extraHostVolumeMounts": [],
                "extraInitContainers": [],
                "extraManifests": [],
                "extraVolumeMounts": [],
                "extraVolumes": [],
                "fullnameOverride": "randoli-prometheus-node-exporter",
                "global": {
                  "alerts": {
                    "slack": {
                      "api_url": null,
                      "channel": null
                    }
                  },
                  "imagePullSecrets": [],
                  "imageRegistry": "",
                  "opencost": {
                    "url": null
                  },
                  "openshift": {
                    "enabled": false
                  },
                  "prometheus": {
                    "bearerTokenKey": "token",
                    "install": true,
                    "passwordKey": "",
                    "secretName": "",
                    "tlsCertConfigmapKey": "",
                    "tlsCertConfigmapName": "",
                    "tlsInsecureSkipVerify": true,
                    "url": "",
                    "usernameKey": ""
                  },
                  "secrets": {
                    "cert": "randoli-agent-cert",
                    "config": "randoli-agent-secret"
                  }
                },
                "hostIPC": false,
                "hostNetwork": true,
                "hostPID": true,
                "hostProcFsMount": {
                  "mountPropagation": ""
                },
                "hostRootFsMount": {
                  "enabled": true,
                  "mountPropagation": "HostToContainer"
                },
                "hostSysFsMount": {
                  "mountPropagation": ""
                },
                "image": {
                  "digest": "",
                  "pullPolicy": "IfNotPresent",
                  "registry": "quay.io",
                  "repository": "prometheus/node-exporter",
                  "tag": ""
                },
                "imagePullSecrets": [],
                "kubeRBACProxy": {
                  "containerSecurityContext": {},
                  "enableHostPort": false,
                  "enableProxyEndpointsHostPort": false,
                  "enabled": false,
                  "env": {},
                  "extraArgs": [],
                  "extraVolumeMounts": [],
                  "image": {
                    "pullPolicy": "IfNotPresent",
                    "registry": "quay.io",
                    "repository": "brancz/kube-rbac-proxy",
                    "sha": "",
                    "tag": "v0.18.1"
                  },
                  "port": 8100,
                  "portName": "http",
                  "proxyEndpointsPort": 8888,
                  "resources": {},
                  "tls": {
                    "enabled": false,
                    "tlsClientAuth": false
                  }
                },
                "livenessProbe": {
                  "failureThreshold": 3,
                  "httpGet": {
                    "httpHeaders": [],
                    "scheme": "http"
                  },
                  "initialDelaySeconds": 0,
                  "periodSeconds": 10,
                  "successThreshold": 1,
                  "timeoutSeconds": 1
                },
                "nameOverride": "",
                "namespaceOverride": "",
                "networkPolicy": {
                  "enabled": false
                },
                "nodeSelector": {
                  "kubernetes.io/os": "linux"
                },
                "podAnnotations": {
                  "cluster-autoscaler.kubernetes.io/safe-to-evict": "true"
                },
                "podLabels": {},
                "prometheus": {
                  "monitor": {
                    "additionalLabels": {},
                    "apiVersion": "",
                    "attachMetadata": {
                      "node": false
                    },
                    "basicAuth": {},
                    "bearerTokenFile": null,
                    "enabled": false,
                    "interval": "",
                    "jobLabel": "",
                    "labelLimit": 0,
                    "labelNameLengthLimit": 0,
                    "labelValueLengthLimit": 0,
                    "metricRelabelings": [],
                    "namespace": "",
                    "podTargetLabels": [],
                    "proxyUrl": "",
                    "relabelings": [],
                    "sampleLimit": 0,
                    "scheme": "http",
                    "scrapeTimeout": "10s",
                    "selectorOverride": {},
                    "targetLabels": [],
                    "targetLimit": 0,
                    "tlsConfig": {}
                  },
                  "podMonitor": {
                    "additionalLabels": {},
                    "apiVersion": "",
                    "attachMetadata": {
                      "node": false
                    },
                    "authorization": {},
                    "basicAuth": {},
                    "bearerTokenSecret": {},
                    "enableHttp2": "",
                    "enabled": false,
                    "filterRunning": "",
                    "followRedirects": "",
                    "honorLabels": true,
                    "honorTimestamps": true,
                    "interval": "",
                    "jobLabel": "",
                    "labelLimit": 0,
                    "labelNameLengthLimit": 0,
                    "labelValueLengthLimit": 0,
                    "metricRelabelings": [],
                    "namespace": "",
                    "oauth2": {},
                    "params": {},
                    "path": "/metrics",
                    "podTargetLabels": [],
                    "proxyUrl": "",
                    "relabelings": [],
                    "sampleLimit": 0,
                    "scheme": "http",
                    "scrapeTimeout": "",
                    "selectorOverride": {},
                    "targetLimit": 0,
                    "tlsConfig": {}
                  }
                },
                "rbac": {
                  "create": true,
                  "pspAnnotations": {},
                  "pspEnabled": false
                },
                "readinessProbe": {
                  "failureThreshold": 3,
                  "httpGet": {
                    "httpHeaders": [],
                    "scheme": "http"
                  },
                  "initialDelaySeconds": 0,
                  "periodSeconds": 10,
                  "successThreshold": 1,
                  "timeoutSeconds": 1
                },
                "releaseLabel": false,
                "resources": {},
                "restartPolicy": null,
                "revisionHistoryLimit": 10,
                "secrets": [],
                "securityContext": {
                  "fsGroup": 65534,
                  "runAsGroup": 65534,
                  "runAsNonRoot": true,
                  "runAsUser": 65534
                },
                "service": {
                  "annotations": {
                    "randoli.prometheus.io/scrape": "true"
                  },
                  "clusterIP": "",
                  "enabled": true,
                  "externalTrafficPolicy": "",
                  "ipDualStack": {
                    "enabled": false,
                    "ipFamilies": [
                      "IPv6",
                      "IPv4"
                    ],
                    "ipFamilyPolicy": "PreferDualStack"
                  },
                  "labels": {},
                  "listenOnAllInterfaces": true,
                  "nodePort": null,
                  "port": 9111,
                  "portName": "metrics",
                  "servicePort": "",
                  "targetPort": 9111,
                  "type": "ClusterIP"
                },
                "serviceAccount": {
                  "annotations": {},
                  "automountServiceAccountToken": false,
                  "create": true,
                  "imagePullSecrets": [],
                  "name": null
                },
                "sidecarHostVolumeMounts": [],
                "sidecarVolumeMount": [],
                "sidecars": [],
                "terminationGracePeriodSeconds": null,
                "terminationMessageParams": {
                  "enabled": false,
                  "terminationMessagePath": "/dev/termination-log",
                  "terminationMessagePolicy": "File"
                },
                "tlsSecret": {
                  "caItem": "",
                  "certItem": "tls.crt",
                  "enabled": false,
                  "keyItem": "tls.key",
                  "secretName": "prometheus-node-exporter-tls",
                  "volumeName": "prometheus-node-exporter-tls"
                },
                "tolerations": [
                  {
                    "effect": "NoSchedule",
                    "operator": "Exists"
                  }
                ],
                "updateStrategy": {
                  "rollingUpdate": {
                    "maxUnavailable": 1
                  },
                  "type": "RollingUpdate"
                },
                "version": "",
                "verticalPodAutoscaler": {
                  "controlledResources": [],
                  "enabled": false,
                  "maxAllowed": {},
                  "minAllowed": {}
                }
              },
              "prometheus-pushgateway": {
                "enabled": false,
                "serviceAnnotations": {
                  "randoli.prometheus.io/probe": "pushgateway"
                }
              },
              "rbac": {
                "create": true
              },
              "ruleFiles": {},
              "scrapeConfigFiles": [],
              "server": {
                "affinity": {},
                "alertmanagers": [],
                "baseURL": "",
                "clusterRoleNameOverride": "",
                "command": [],
                "configMapAnnotations": {},
                "configMapOverrideName": "",
                "configPath": "/etc/config/prometheus.yml",
                "containerSecurityContext": {},
                "defaultFlagsOverride": [],
                "deploymentAnnotations": {},
                "dnsConfig": {},
                "dnsPolicy": "ClusterFirst",
                "emptyDir": {
                  "sizeLimit": ""
                },
                "enableServiceLinks": true,
                "env": [],
                "exemplars": {},
                "extraArgs": {},
                "extraConfigmapLabels": {},
                "extraConfigmapMounts": [],
                "extraFlags": [
                  "web.enable-lifecycle",
                  "web.enable-otlp-receiver"
                ],
                "extraHostPathMounts": [],
                "extraInitContainers": [],
                "extraSecretMounts": [],
                "extraVolumeMounts": [],
                "extraVolumes": [],
                "fullnameOverride": "randoli-prometheus",
                "global": {
                  "evaluation_interval": "1m",
                  "scrape_interval": "1m",
                  "scrape_timeout": "10s"
                },
                "hostAliases": [],
                "hostNetwork": false,
                "image": {
                  "digest": "",
                  "pullPolicy": "IfNotPresent",
                  "repository": "quay.io/prometheus/prometheus",
                  "tag": ""
                },
                "ingress": {
                  "annotations": {},
                  "enabled": false,
                  "extraLabels": {},
                  "extraPaths": [],
                  "hosts": [],
                  "path": "/",
                  "pathType": "Prefix",
                  "tls": []
                },
                "livenessProbeFailureThreshold": 3,
                "livenessProbeInitialDelay": 30,
                "livenessProbePeriodSeconds": 15,
                "livenessProbeSuccessThreshold": 1,
                "livenessProbeTimeout": 10,
                "name": "server",
                "nodeSelector": {},
                "persistentVolume": {
                  "accessModes": [
                    "ReadWriteOnce"
                  ],
                  "annotations": {},
                  "enabled": true,
                  "existingClaim": "",
                  "labels": {},
                  "mountPath": "/data",
                  "size": "8Gi",
                  "statefulSetNameOverride": "",
                  "subPath": ""
                },
                "podAnnotations": {},
                "podAntiAffinity": "",
                "podAntiAffinityTopologyKey": "kubernetes.io/hostname",
                "podDisruptionBudget": {
                  "enabled": false
                },
                "podLabels": {},
                "podSecurityPolicy": {
                  "annotations": {}
                },
                "portName": "",
                "prefixURL": "",
                "priorityClassName": "",
                "probeHeaders": [],
                "probeScheme": "HTTP",
                "readinessProbeFailureThreshold": 3,
                "readinessProbeInitialDelay": 30,
                "readinessProbePeriodSeconds": 5,
                "readinessProbeSuccessThreshold": 1,
                "readinessProbeTimeout": 4,
                "releaseNamespace": false,
                "remoteRead": [],
                "remoteWrite": [],
                "replicaCount": 1,
                "resources": {},
                "retention": "3d",
                "retentionSize": "",
                "revisionHistoryLimit": 10,
                "securityContext": {
                  "fsGroup": 65534,
                  "runAsGroup": 65534,
                  "runAsNonRoot": true,
                  "runAsUser": 65534
                },
                "service": {
                  "additionalPorts": [],
                  "annotations": {},
                  "clusterIP": "",
                  "enabled": true,
                  "externalIPs": [],
                  "gRPC": {
                    "enabled": false,
                    "servicePort": 10901
                  },
                  "labels": {},
                  "loadBalancerIP": "",
                  "loadBalancerSourceRanges": [],
                  "servicePort": 80,
                  "sessionAffinity": "None",
                  "statefulsetReplica": {
                    "enabled": false,
                    "replica": 0
                  },
                  "type": "ClusterIP"
                },
                "sidecarContainers": {},
                "sidecarTemplateValues": {},
                "startupProbe": {
                  "enabled": false,
                  "failureThreshold": 30,
                  "periodSeconds": 5,
                  "timeoutSeconds": 10
                },
                "statefulSet": {
                  "annotations": {},
                  "enabled": false,
                  "headless": {
                    "annotations": {},
                    "gRPC": {
                      "enabled": false,
                      "servicePort": 10901
                    },
                    "labels": {},
                    "servicePort": 80
                  },
                  "labels": {},
                  "podManagementPolicy": "OrderedReady",
                  "pvcDeleteOnStsDelete": false,
                  "pvcDeleteOnStsScale": false
                },
                "storagePath": "",
                "strategy": {
                  "type": "Recreate"
                },
                "tcpSocketProbeEnabled": false,
                "terminationGracePeriodSeconds": 300,
                "tolerations": [],
                "topologySpreadConstraints": [],
                "tsdb": {
                  "out_of_order_time_window": "30m"
                },
                "verticalAutoscaler": {
                  "enabled": false
                }
              },
              "serverFiles": {
                "alerting_rules.yml": {},
                "alerts": {},
                "prometheus.yml": {
                  "otlp": {
                    "promote_resource_attributes": [
                      "service.instance.id",
                      "service.name",
                      "service.namespace",
                      "cloud.availability_zone",
                      "cloud.region",
                      "container.name",
                      "deployment.environment.name",
                      "k8s.cluster.name",
                      "k8s.container.name",
                      "k8s.cronjob.name",
                      "k8s.daemonset.name",
                      "k8s.deployment.name",
                      "k8s.job.name",
                      "k8s.namespace.name",
                      "k8s.pod.name",
                      "k8s.replicaset.name",
                      "k8s.statefulset.name"
                    ]
                  },
                  "rule_files": [
                    "/etc/config/recording_rules.yml",
                    "/etc/config/alerting_rules.yml",
                    "/etc/config/rules",
                    "/etc/config/alerts"
                  ],
                  "scrape_configs": [
                    {
                      "job_name": "prometheus",
                      "static_configs": [
                        {
                          "targets": [
                            "localhost:9090"
                          ]
                        }
                      ]
                    },
                    {
                      "bearer_token_file": "/var/run/secrets/kubernetes.io/serviceaccount/token",
                      "job_name": "kubernetes-apiservers",
                      "kubernetes_sd_configs": [
                        {
                          "role": "endpoints"
                        }
                      ],
                      "relabel_configs": [
                        {
                          "action": "keep",
                          "regex": "default;kubernetes;https",
                          "source_labels": [
                            "__meta_kubernetes_namespace",
                            "__meta_kubernetes_service_name",
                            "__meta_kubernetes_endpoint_port_name"
                          ]
                        }
                      ],
                      "scheme": "https",
                      "tls_config": {
                        "ca_file": "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt",
                        "insecure_skip_verify": true
                      }
                    },
                    {
                      "bearer_token_file": "/var/run/secrets/kubernetes.io/serviceaccount/token",
                      "job_name": "kubernetes-nodes",
                      "kubernetes_sd_configs": [
                        {
                          "role": "node"
                        }
                      ],
                      "relabel_configs": [
                        {
                          "action": "labelmap",
                          "regex": "__meta_kubernetes_node_label_(.+)"
                        },
                        {
                          "replacement": "kubernetes.default.svc:443",
                          "target_label": "__address__"
                        },
                        {
                          "regex": "(.+)",
                          "replacement": "/api/v1/nodes/$1/proxy/metrics",
                          "source_labels": [
                            "__meta_kubernetes_node_name"
                          ],
                          "target_label": "__metrics_path__"
                        }
                      ],
                      "scheme": "https",
                      "tls_config": {
                        "ca_file": "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt",
                        "insecure_skip_verify": true
                      }
                    },
                    {
                      "bearer_token_file": "/var/run/secrets/kubernetes.io/serviceaccount/token",
                      "job_name": "kubernetes-nodes-cadvisor",
                      "kubernetes_sd_configs": [
                        {
                          "role": "node"
                        }
                      ],
                      "relabel_configs": [
                        {
                          "action": "labelmap",
                          "regex": "__meta_kubernetes_node_label_(.+)"
                        },
                        {
                          "replacement": "kubernetes.default.svc:443",
                          "target_label": "__address__"
                        },
                        {
                          "regex": "(.+)",
                          "replacement": "/api/v1/nodes/$1/proxy/metrics/cadvisor",
                          "source_labels": [
                            "__meta_kubernetes_node_name"
                          ],
                          "target_label": "__metrics_path__"
                        }
                      ],
                      "scheme": "https",
                      "tls_config": {
                        "ca_file": "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt",
                        "insecure_skip_verify": true
                      }
                    },
                    {
                      "honor_labels": true,
                      "job_name": "kubernetes-service-endpoints",
                      "kubernetes_sd_configs": [
                        {
                          "role": "endpoints"
                        }
                      ],
                      "relabel_configs": [
                        {
                          "action": "keep",
                          "regex": true,
                          "source_labels": [
                            "__meta_kubernetes_service_annotation_randoli_prometheus_io_scrape"
                          ]
                        },
                        {
                          "action": "drop",
                          "regex": true,
                          "source_labels": [
                            "__meta_kubernetes_service_annotation_randoli_prometheus_io_scrape_slow"
                          ]
                        },
                        {
                          "action": "replace",
                          "regex": "(https?)",
                          "source_labels": [
                            "__meta_kubernetes_service_annotation_randoli_prometheus_io_scheme"
                          ],
                          "target_label": "__scheme__"
                        },
                        {
                          "action": "replace",
                          "regex": "(.+)",
                          "source_labels": [
                            "__meta_kubernetes_service_annotation_randoli_prometheus_io_path"
                          ],
                          "target_label": "__metrics_path__"
                        },
                        {
                          "action": "replace",
                          "regex": "(.+?)(?::\\d+)?;(\\d+)",
                          "replacement": "$1:$2",
                          "source_labels": [
                            "__address__",
                            "__meta_kubernetes_service_annotation_randoli_prometheus_io_port"
                          ],
                          "target_label": "__address__"
                        },
                        {
                          "action": "labelmap",
                          "regex": "__meta_kubernetes_service_annotation_randoli_prometheus_io_param_(.+)",
                          "replacement": "__param_$1"
                        },
                        {
                          "action": "labelmap",
                          "regex": "__meta_kubernetes_service_label_(.+)"
                        },
                        {
                          "action": "replace",
                          "source_labels": [
                            "__meta_kubernetes_namespace"
                          ],
                          "target_label": "namespace"
                        },
                        {
                          "action": "replace",
                          "source_labels": [
                            "__meta_kubernetes_service_name"
                          ],
                          "target_label": "service"
                        },
                        {
                          "action": "replace",
                          "source_labels": [
                            "__meta_kubernetes_pod_node_name"
                          ],
                          "target_label": "node"
                        }
                      ]
                    },
                    {
                      "honor_labels": true,
                      "job_name": "kubernetes-service-endpoints-slow",
                      "kubernetes_sd_configs": [
                        {
                          "role": "endpoints"
                        }
                      ],
                      "relabel_configs": [
                        {
                          "action": "keep",
                          "regex": true,
                          "source_labels": [
                            "__meta_kubernetes_service_annotation_randoli_prometheus_io_scrape_slow"
                          ]
                        },
                        {
                          "action": "replace",
                          "regex": "(https?)",
                          "source_labels": [
                            "__meta_kubernetes_service_annotation_randoli_prometheus_io_scheme"
                          ],
                          "target_label": "__scheme__"
                        },
                        {
                          "action": "replace",
                          "regex": "(.+)",
                          "source_labels": [
                            "__meta_kubernetes_service_annotation_randoli_prometheus_io_path"
                          ],
                          "target_label": "__metrics_path__"
                        },
                        {
                          "action": "replace",
                          "regex": "(.+?)(?::\\d+)?;(\\d+)",
                          "replacement": "$1:$2",
                          "source_labels": [
                            "__address__",
                            "__meta_kubernetes_service_annotation_randoli_prometheus_io_port"
                          ],
                          "target_label": "__address__"
                        },
                        {
                          "action": "labelmap",
                          "regex": "__meta_kubernetes_service_annotation_randoli_prometheus_io_param_(.+)",
                          "replacement": "__param_$1"
                        },
                        {
                          "action": "labelmap",
                          "regex": "__meta_kubernetes_service_label_(.+)"
                        },
                        {
                          "action": "replace",
                          "source_labels": [
                            "__meta_kubernetes_namespace"
                          ],
                          "target_label": "namespace"
                        },
                        {
                          "action": "replace",
                          "source_labels": [
                            "__meta_kubernetes_service_name"
                          ],
                          "target_label": "service"
                        },
                        {
                          "action": "replace",
                          "source_labels": [
                            "__meta_kubernetes_pod_node_name"
                          ],
                          "target_label": "node"
                        }
                      ],
                      "scrape_interval": "5m",
                      "scrape_timeout": "30s"
                    },
                    {
                      "honor_labels": true,
                      "job_name": "prometheus-pushgateway",
                      "kubernetes_sd_configs": [
                        {
                          "role": "service"
                        }
                      ],
                      "relabel_configs": [
                        {
                          "action": "keep",
                          "regex": "pushgateway",
                          "source_labels": [
                            "__meta_kubernetes_service_annotation_randoli_prometheus_io_probe"
                          ]
                        }
                      ]
                    },
                    {
                      "honor_labels": true,
                      "job_name": "kubernetes-services",
                      "kubernetes_sd_configs": [
                        {
                          "role": "service"
                        }
                      ],
                      "metrics_path": "/probe",
                      "params": {
                        "module": [
                          "http_2xx"
                        ]
                      },
                      "relabel_configs": [
                        {
                          "action": "keep",
                          "regex": true,
                          "source_labels": [
                            "__meta_kubernetes_service_annotation_randoli_prometheus_io_probe"
                          ]
                        },
                        {
                          "source_labels": [
                            "__address__"
                          ],
                          "target_label": "__param_target"
                        },
                        {
                          "replacement": "blackbox",
                          "target_label": "__address__"
                        },
                        {
                          "source_labels": [
                            "__param_target"
                          ],
                          "target_label": "instance"
                        },
                        {
                          "action": "labelmap",
                          "regex": "__meta_kubernetes_service_label_(.+)"
                        },
                        {
                          "source_labels": [
                            "__meta_kubernetes_namespace"
                          ],
                          "target_label": "namespace"
                        },
                        {
                          "source_labels": [
                            "__meta_kubernetes_service_name"
                          ],
                          "target_label": "service"
                        }
                      ]
                    },
                    {
                      "honor_labels": true,
                      "job_name": "kubernetes-pods",
                      "kubernetes_sd_configs": [
                        {
                          "role": "pod"
                        }
                      ],
                      "relabel_configs": [
                        {
                          "action": "keep",
                          "regex": true,
                          "source_labels": [
                            "__meta_kubernetes_pod_annotation_randoli_prometheus_io_scrape"
                          ]
                        },
                        {
                          "action": "drop",
                          "regex": true,
                          "source_labels": [
                            "__meta_kubernetes_pod_annotation_randoli_prometheus_io_scrape_slow"
                          ]
                        },
                        {
                          "action": "replace",
                          "regex": "(https?)",
                          "source_labels": [
                            "__meta_kubernetes_pod_annotation_randoli_prometheus_io_scheme"
                          ],
                          "target_label": "__scheme__"
                        },
                        {
                          "action": "replace",
                          "regex": "(.+)",
                          "source_labels": [
                            "__meta_kubernetes_pod_annotation_randoli_prometheus_io_path"
                          ],
                          "target_label": "__metrics_path__"
                        },
                        {
                          "action": "replace",
                          "regex": "(\\d+);(([A-Fa-f0-9]{1,4}::?){1,7}[A-Fa-f0-9]{1,4})",
                          "replacement": "[$2]:$1",
                          "source_labels": [
                            "__meta_kubernetes_pod_annotation_randoli_prometheus_io_port",
                            "__meta_kubernetes_pod_ip"
                          ],
                          "target_label": "__address__"
                        },
                        {
                          "action": "replace",
                          "regex": "(\\d+);((([0-9]+?)(\\.|$)){4})",
                          "replacement": "$2:$1",
                          "source_labels": [
                            "__meta_kubernetes_pod_annotation_randoli_prometheus_io_port",
                            "__meta_kubernetes_pod_ip"
                          ],
                          "target_label": "__address__"
                        },
                        {
                          "action": "labelmap",
                          "regex": "__meta_kubernetes_pod_annotation_randoli_prometheus_io_param_(.+)",
                          "replacement": "__param_$1"
                        },
                        {
                          "action": "labelmap",
                          "regex": "__meta_kubernetes_pod_label_(.+)"
                        },
                        {
                          "action": "replace",
                          "source_labels": [
                            "__meta_kubernetes_namespace"
                          ],
                          "target_label": "namespace"
                        },
                        {
                          "action": "replace",
                          "source_labels": [
                            "__meta_kubernetes_pod_name"
                          ],
                          "target_label": "pod"
                        },
                        {
                          "action": "drop",
                          "regex": "Pending|Succeeded|Failed|Completed",
                          "source_labels": [
                            "__meta_kubernetes_pod_phase"
                          ]
                        },
                        {
                          "action": "replace",
                          "source_labels": [
                            "__meta_kubernetes_pod_node_name"
                          ],
                          "target_label": "node"
                        }
                      ]
                    },
                    {
                      "honor_labels": true,
                      "job_name": "kubernetes-pods-slow",
                      "kubernetes_sd_configs": [
                        {
                          "role": "pod"
                        }
                      ],
                      "relabel_configs": [
                        {
                          "action": "keep",
                          "regex": true,
                          "source_labels": [
                            "__meta_kubernetes_pod_annotation_randoli_prometheus_io_scrape_slow"
                          ]
                        },
                        {
                          "action": "replace",
                          "regex": "(https?)",
                          "source_labels": [
                            "__meta_kubernetes_pod_annotation_randoli_prometheus_io_scheme"
                          ],
                          "target_label": "__scheme__"
                        },
                        {
                          "action": "replace",
                          "regex": "(.+)",
                          "source_labels": [
                            "__meta_kubernetes_pod_annotation_randoli_prometheus_io_path"
                          ],
                          "target_label": "__metrics_path__"
                        },
                        {
                          "action": "replace",
                          "regex": "(\\d+);(([A-Fa-f0-9]{1,4}::?){1,7}[A-Fa-f0-9]{1,4})",
                          "replacement": "[$2]:$1",
                          "source_labels": [
                            "__meta_kubernetes_pod_annotation_randoli_prometheus_io_port",
                            "__meta_kubernetes_pod_ip"
                          ],
                          "target_label": "__address__"
                        },
                        {
                          "action": "replace",
                          "regex": "(\\d+);((([0-9]+?)(\\.|$)){4})",
                          "replacement": "$2:$1",
                          "source_labels": [
                            "__meta_kubernetes_pod_annotation_randoli_prometheus_io_port",
                            "__meta_kubernetes_pod_ip"
                          ],
                          "target_label": "__address__"
                        },
                        {
                          "action": "labelmap",
                          "regex": "__meta_kubernetes_pod_annotation_randoli_prometheus_io_param_(.+)",
                          "replacement": "__param_$1"
                        },
                        {
                          "action": "labelmap",
                          "regex": "__meta_kubernetes_pod_label_(.+)"
                        },
                        {
                          "action": "replace",
                          "source_labels": [
                            "__meta_kubernetes_namespace"
                          ],
                          "target_label": "namespace"
                        },
                        {
                          "action": "replace",
                          "source_labels": [
                            "__meta_kubernetes_pod_name"
                          ],
                          "target_label": "pod"
                        },
                        {
                          "action": "drop",
                          "regex": "Pending|Succeeded|Failed|Completed",
                          "source_labels": [
                            "__meta_kubernetes_pod_phase"
                          ]
                        },
                        {
                          "action": "replace",
                          "source_labels": [
                            "__meta_kubernetes_pod_node_name"
                          ],
                          "target_label": "node"
                        }
                      ],
                      "scrape_interval": "5m",
                      "scrape_timeout": "30s"
                    }
                  ]
                },
                "recording_rules.yml": {},
                "rules": {}
              },
              "serviceAccounts": {
                "server": {
                  "annotations": {},
                  "create": true,
                  "name": ""
                }
              }
            },
            "resources": {
              "limits": {
                "memory": "2Gi"
              },
              "requests": {
                "cpu": "50m",
                "memory": "512Mi"
              }
            },
            "rightsizing": {
              "recommender": {
                "extraArgs": {
                  "pod-recommendation-min-cpu-millicores": 25,
                  "pod-recommendation-min-memory-mb": 25
                }
              }
            },
            "securityContext": {},
            "serviceAccount": {
              "annotations": {},
              "automountServiceAccountToken": true,
              "create": true,
              "labels": {}
            },
            "tags": {
              "costManagement": false,
              "observability": false
            },
            "tektonPipeline": {
              "enabled": false
            },
            "tolerations": [],
            "topologySpreadConstraints": [],
            "tracing": {
              "agent": {
                "enabled": false
              },
              "allInOne": {
                "args": [
                  "--badger.span-store-ttl=2h"
                ],
                "enabled": true
              },
              "collector": {
                "enabled": false
              },
              "provisionDataStore": {
                "cassandra": false
              },
              "query": {
                "enabled": false
              },
              "storage": {
                "badger": {
                  "ephemeral": false,
                  "persistence": {
                    "mountPath": "/mnt/data",
                    "size": "10Gi",
                    "useExistingPvcName": "randoli-jaeger-storage"
                  }
                },
                "type": "badger"
              }
            }
          }
        }
      ]
    categories: Developer Tools
    containerImage: docker.io/randoli/app-insights-operator:1.16.1@sha256:bf23221ec0c81de5f8ddea5e1a8b77fe9f6fe03e2969859f79b34fe7f1cdeb6c
    createdAt: "2025-05-30T18:43:28Z"
    description: Randoli Agent connects OpenShift clusters to Randoli Observability & Cost Management.
    features.operators.openshift.io/disconnected: "true"
    features.operators.openshift.io/fips-compliant: "false"
    features.operators.openshift.io/proxy-aware: "false"
    features.operators.openshift.io/tls-profiles: "false"
    features.operators.openshift.io/token-auth-aws: "false"
    features.operators.openshift.io/token-auth-azure: "false"
    features.operators.openshift.io/token-auth-gcp: "false"
    olm.properties: '[]'
    operators.openshift.io/valid-subscription: ""
    operators.operatorframework.io/builder: operator-sdk-v1.39.2
    operators.operatorframework.io/project_layout: helm.sdk.operatorframework.io/v1
    support: Randoli
  name: app-insights-operator.v1.16.1
  namespace: randoli-agents
spec:
  apiservicedefinitions: {}
  customresourcedefinitions:
    owned:
      - kind: RandoliAgent
        name: randoliagents.appinsights.randoli
        version: v1beta1
  description: |-
    Randoli Agent connects OpenShift clusters to Randoli Observability & Cost Management platforms.

    This operator provides a container-based agent to be installed in your OpenShift clusters for connecting to Randoli Observability & Cost Management platforms

    **Prerequisites**

    If you are using the Randoli Observability platform, you will need to install the following Operators:
    - Red Hat build of OpenTelemetry Operator
    - Network Observability

    If you are using the Randoli Cost Management platform, you will need to install the following Operator:
    - VerticalPodAutoscaler

    For additional information please use our Openshift installation guide here: [https://docs.insights.randoli.io/agent/openshift](https://docs.insights.randoli.io/agent/openshift)

     **Randoli Observability for Kubernetes**

    [Product Page](https://www.randoli.io/product/kubernetes-observability)

    **Randoli Cost Management for Kubernetes**

    [Product Page](https://www.randoli.io/product/kubernetes-cost-management)
  displayName: Randoli Agent
  icon:
    - base64data: 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
      mediatype: image/png
  install:
    spec:
      clusterPermissions:
        - rules:
            - apiGroups:
                - ""
              resources:
                - namespaces
              verbs:
                - get
            - apiGroups:
                - ""
              resources:
                - secrets
              verbs:
                - '*'
            - apiGroups:
                - ""
              resources:
                - events
              verbs:
                - create
            - apiGroups:
                - appinsights.randoli
              resources:
                - randoliagents
                - randoliagents/status
                - randoliagents/finalizers
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - ""
              resources:
                - configmaps
                - persistentvolumeclaims
                - serviceaccounts
                - services
              verbs:
                - '*'
            - apiGroups:
                - ""
              resources:
                - pods
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - apps
              resources:
                - daemonsets
                - deployments
                - statefulsets
              verbs:
                - '*'
            - apiGroups:
                - apps
              resources:
                - replicasets
              verbs:
                - get
                - list
                - watch
            - apiGroups:
                - rbac.authorization.k8s.io
              resources:
                - clusterrolebindings
                - clusterroles
              verbs:
                - '*'
            - apiGroups:
                - rbac.authorization.k8s.io
              resources:
                - roles
                - rolebindings
              verbs:
                - create
                - get
                - list
                - update
                - watch
            - apiGroups:
                - networking.k8s.io
              resources:
                - ingresses
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - apiextensions.k8s.io
              resources:
                - customresourcedefinitions
              verbs:
                - create
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - apiregistration.k8s.io
              resources:
                - apiservices
              verbs:
                - create
                - get
                - list
                - patch
                - watch
            - apiGroups:
                - scheduling.k8s.io
              resources:
                - priorityclasses
              verbs:
                - create
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - batch
              resources:
                - cronjobs
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - batch
              resources:
                - jobs
              verbs:
                - create
                - delete
                - get
                - list
                - watch
            - apiGroups:
                - autoscaling
              resources:
                - horizontalpodautoscalers
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - policy
              resources:
                - poddisruptionbudgets
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - monitoring.coreos.com
              resources:
                - podmonitors
                - servicemonitors
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - observability.kaasops.io
              resources:
                - vectors
              verbs:
                - '*'
            - apiGroups:
                - opentelemetry.io
              resources:
                - instrumentations
                - opentelemetrycollectors
              verbs:
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - opentelemetry.io
              resources:
                - opampbridges
                - targetallocators
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - opentelemetry.io
              resources:
                - opampbridges/finalizers
              verbs:
                - update
            - apiGroups:
                - opentelemetry.io
              resources:
                - opampbridges/status
                - opentelemetrycollectors/finalizers
                - opentelemetrycollectors/status
                - targetallocators/status
              verbs:
                - get
                - patch
                - update
            - apiGroups:
                - flows.netobserv.io
              resources:
                - flowcollectors
              verbs:
                - create
                - delete
            - apiGroups:
                - config.openshift.io
              resources:
                - infrastructures
                - infrastructures/status
              verbs:
                - get
                - list
                - watch
            - apiGroups:
                - route.openshift.io
              resources:
                - routes
                - routes/custom-host
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - authentication.k8s.io
              resources:
                - tokenreviews
              verbs:
                - create
            - apiGroups:
                - authorization.k8s.io
              resources:
                - subjectaccessreviews
              verbs:
                - create
          serviceAccountName: app-insights-operator-controller-manager
      deployments:
        - label:
            app.kubernetes.io/managed-by: kustomize
            app.kubernetes.io/name: app-insights-operator
            control-plane: controller-manager
          name: app-insights-operator-controller-manager
          spec:
            replicas: 1
            selector:
              matchLabels:
                control-plane: controller-manager
            strategy: {}
            template:
              metadata:
                annotations:
                  kubectl.kubernetes.io/default-container: manager
                labels:
                  control-plane: controller-manager
              spec:
                containers:
                  - args:
                      - --metrics-require-rbac
                      - --metrics-secure
                      - --metrics-bind-address=:8443
                      - --leader-elect
                      - --leader-election-id=app-insights-operator
                      - --health-probe-bind-address=:8081
                    image: docker.io/randoli/app-insights-operator:1.16.1@sha256:bf23221ec0c81de5f8ddea5e1a8b77fe9f6fe03e2969859f79b34fe7f1cdeb6c
                    livenessProbe:
                      httpGet:
                        path: /healthz
                        port: 8081
                      initialDelaySeconds: 15
                      periodSeconds: 20
                    name: manager
                    readinessProbe:
                      httpGet:
                        path: /readyz
                        port: 8081
                      initialDelaySeconds: 5
                      periodSeconds: 10
                    resources:
                      limits:
                        cpu: 500m
                        memory: 200Mi
                      requests:
                        cpu: 10m
                        memory: 64Mi
                    securityContext:
                      allowPrivilegeEscalation: false
                      capabilities:
                        drop:
                          - ALL
                securityContext:
                  runAsNonRoot: true
                serviceAccountName: app-insights-operator-controller-manager
                terminationGracePeriodSeconds: 10
      permissions:
        - rules:
            - apiGroups:
                - ""
              resources:
                - configmaps
              verbs:
                - get
                - list
                - watch
                - create
                - update
                - patch
                - delete
            - apiGroups:
                - coordination.k8s.io
              resources:
                - leases
              verbs:
                - get
                - list
                - watch
                - create
                - update
                - patch
                - delete
            - apiGroups:
                - ""
              resources:
                - events
              verbs:
                - create
                - patch
          serviceAccountName: app-insights-operator-controller-manager
    strategy: deployment
  installModes:
    - supported: false
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
  keywords:
    - developer tools
    - insights
    - monitoring
  links:
    - name: Randoli Observability for Kubernetes
      url: https://www.randoli.io/product/kubernetes-observability
    - name: Randoli Cost Management for Kubernetes
      url: https://www.randoli.io/product/kubernetes-cost-management
  maintainers:
    - email: contact@randoli.ca
      name: Randoli Inc.
  maturity: beta
  minKubeVersion: 1.24.0
  provider:
    name: Randoli
    url: https://www.randoli.io
  relatedImages:
    - image: docker.io/randoli/app-insights-operator:1.16.1@sha256:bf23221ec0c81de5f8ddea5e1a8b77fe9f6fe03e2969859f79b34fe7f1cdeb6c
      name: manager
  version: 1.16.1

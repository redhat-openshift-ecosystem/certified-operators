apiVersion: operators.coreos.com/v1alpha1
kind: ClusterServiceVersion
metadata:
  annotations:
    alm-examples: |-
      [
        {
          "apiVersion": "operator.ibm.com/v1alpha1",
          "kind": "OperandBindInfo",
          "metadata": {
            "labels": {
              "app.kubernetes.io/instance": "operand-deployment-lifecycle-manager",
              "app.kubernetes.io/managed-by": "operand-deployment-lifecycle-manager",
              "app.kubernetes.io/name": "operand-deployment-lifecycle-manager"
            },
            "name": "example-service"
          },
          "spec": {
            "bindings": {
              "public": {
                "configmap": "mongodb-configmap",
                "secret": "mongodb-secret"
              }
            },
            "description": "Binding information that should be accessible to MongoDB adopters",
            "operand": "mongodb-atlas-kubernetes",
            "registry": "example-service"
          }
        },
        {
          "apiVersion": "operator.ibm.com/v1alpha1",
          "kind": "OperandConfig",
          "metadata": {
            "labels": {
              "app.kubernetes.io/instance": "operand-deployment-lifecycle-manager",
              "app.kubernetes.io/managed-by": "operand-deployment-lifecycle-manager",
              "app.kubernetes.io/name": "operand-deployment-lifecycle-manager"
            },
            "name": "example-service"
          },
          "spec": {
            "services": [
              {
                "name": "jaeger",
                "spec": {
                  "jaeger": {
                    "strategy": "allinone"
                  }
                }
              },
              {
                "name": "mongodb-atlas-kubernetes",
                "spec": {
                  "atlasDeployment": {
                    "deploymentSpec": {
                      "name": "test-deployment"
                    },
                    "projectRef": {
                      "name": "my-project"
                    }
                  }
                }
              }
            ]
          }
        },
        {
          "apiVersion": "operator.ibm.com/v1alpha1",
          "kind": "OperandRegistry",
          "metadata": {
            "labels": {
              "app.kubernetes.io/instance": "operand-deployment-lifecycle-manager",
              "app.kubernetes.io/managed-by": "operand-deployment-lifecycle-manager",
              "app.kubernetes.io/name": "operand-deployment-lifecycle-manager"
            },
            "name": "example-service"
          },
          "spec": {
            "operators": [
              {
                "channel": "stable",
                "installMode": "cluster",
                "name": "jaeger",
                "namespace": "default",
                "packageName": "jaeger",
                "sourceName": "community-operators",
                "sourceNamespace": "openshift-marketplace"
              },
              {
                "channel": "stable",
                "name": "mongodb-atlas-kubernetes",
                "namespace": "default",
                "packageName": "mongodb-atlas-kubernetes",
                "sourceName": "community-operators",
                "sourceNamespace": "openshift-marketplace"
              }
            ]
          }
        },
        {
          "apiVersion": "operator.ibm.com/v1alpha1",
          "kind": "OperandRequest",
          "metadata": {
            "labels": {
              "app.kubernetes.io/instance": "operand-deployment-lifecycle-manager",
              "app.kubernetes.io/managed-by": "operand-deployment-lifecycle-manager",
              "app.kubernetes.io/name": "operand-deployment-lifecycle-manager"
            },
            "name": "example-service"
          },
          "spec": {
            "requests": [
              {
                "operands": [
                  {
                    "name": "jaeger"
                  },
                  {
                    "name": "mongodb-atlas-kubernetes"
                  }
                ],
                "registry": "example-service"
              }
            ]
          }
        }
      ]
    capabilities: Seamless Upgrades
    categories: Developer Tools, Monitoring, Logging & Tracing, Security
    certified: "false"
    containerImage: icr.io/cpopen/odlm:4.4.0
    createdAt: "2025-02-14T21:16:49Z"
    description: The Operand Deployment Lifecycle Manager provides a Kubernetes CRD-based API to manage the lifecycle of operands.
    features.operators.openshift.io/disconnected: "true"
    features.operators.openshift.io/fips-compliant: "true"
    features.operators.openshift.io/proxy-aware: "false"
    features.operators.openshift.io/tls-profiles: "false"
    features.operators.openshift.io/token-auth-aws: "false"
    features.operators.openshift.io/token-auth-azure: "false"
    features.operators.openshift.io/token-auth-gcp: "false"
    nss.operator.ibm.com/managed-operators: ibm-odlm
    olm.skipRange: '>=1.2.0 <4.4.0'
    operators.openshift.io/infrastructure-features: '["disconnected"]'
    operators.operatorframework.io/builder: operator-sdk-v1.32.0
    operators.operatorframework.io/project_layout: go.kubebuilder.io/v3
    repository: https://github.com/IBM/operand-deployment-lifecycle-manager
    support: IBM
  labels:
    operatorframework.io/arch.amd64: supported
    operatorframework.io/arch.ppc64le: supported
    operatorframework.io/arch.s390x: supported
    operatorframework.io/os.linux: supported
  name: operand-deployment-lifecycle-manager.v4.4.0
  namespace: placeholder
spec:
  apiservicedefinitions: {}
  customresourcedefinitions:
    owned:
      - description: OperandBindInfo is the Schema for the operandbindinfoes API. Documentation For additional details regarding install parameters check https://ibm.biz/icpfs39install. License By installing this product you accept the license terms https://ibm.biz/icpfs39license
        displayName: OperandBindInfo
        kind: OperandBindInfo
        name: operandbindinfos.operator.ibm.com
        statusDescriptors:
          - description: Phase describes the overall phase of OperandBindInfo.
            displayName: Phase
            path: phase
            x-descriptors:
              - urn:alm:descriptor:io.kubernetes.phase
        version: v1alpha1
      - description: OperandConfig is the Schema for the operandconfigs API. Documentation For additional details regarding install parameters check https://ibm.biz/icpfs39install. License By installing this product you accept the license terms https://ibm.biz/icpfs39license
        displayName: OperandConfig
        kind: OperandConfig
        name: operandconfigs.operator.ibm.com
        specDescriptors:
          - description: Services is a list of configuration of service.
            displayName: Operand Services Config List
            path: services
        statusDescriptors:
          - description: Phase describes the overall phase of operands in the OperandConfig.
            displayName: Phase
            path: phase
            x-descriptors:
              - urn:alm:descriptor:io.kubernetes.phase
        version: v1alpha1
      - description: OperandRegistry is the Schema for the operandregistries API. Documentation For additional details regarding install parameters check https://ibm.biz/icpfs39install. License By installing this product you accept the license terms https://ibm.biz/icpfs39license
        displayName: OperandRegistry
        kind: OperandRegistry
        name: operandregistries.operator.ibm.com
        specDescriptors:
          - description: Operators is a list of operator OLM definition.
            displayName: Operators Registry List
            path: operators
        statusDescriptors:
          - description: Conditions represents the current state of the Request Service.
            displayName: Conditions
            path: conditions
            x-descriptors:
              - urn:alm:descriptor:io.kubernetes.conditions
          - description: Phase describes the overall phase of operators in the OperandRegistry.
            displayName: Phase
            path: phase
            x-descriptors:
              - urn:alm:descriptor:io.kubernetes.phase
        version: v1alpha1
      - description: OperandRequest is the Schema for the operandrequests API. Documentation For additional details regarding install parameters check https://ibm.biz/icpfs39install. License By installing this product you accept the license terms https://ibm.biz/icpfs39license
        displayName: OperandRequest
        kind: OperandRequest
        name: operandrequests.operator.ibm.com
        specDescriptors:
          - description: Requests defines a list of operands installation.
            displayName: Operators Request List
            path: requests
        statusDescriptors:
          - description: Conditions represents the current state of the Request Service.
            displayName: Conditions
            path: conditions
            x-descriptors:
              - urn:alm:descriptor:io.kubernetes.conditions
          - description: Phase is the cluster running phase.
            displayName: Phase
            path: phase
            x-descriptors:
              - urn:alm:descriptor:io.kubernetes.phase
        version: v1alpha1
      - description: OperatorConfig is the Schema for the operatorconfigs API. Documentation For additional details regarding install parameters check https://ibm.biz/icpfs39install. License By installing this product you accept the license terms https://ibm.biz/icpfs39license
        displayName: OperatorConfig
        kind: OperatorConfig
        name: operatorconfigs.operator.ibm.com
        version: v1alpha1
  description: |-
    # Introduction

    The operand is the instance managed by the operator. ODLM is used to manage the lifecycle of for a group of operands, compared with operator lifecycle manager, ODLM focus on the management of operands but not operators.

    # Details

    ### What are operands?

    Operator is a method of packaging, deploying and managing a Kubernetes application.
    Operands are the services and applications that Operator manage.

    For example, cert-manager operator deploys a cert-manager deployment, then the cert-manager-operator is an operator and the cert-manager deployment is an operand.

    The ODLM will have four CRDs:

    | Resource                 | Short Name | Description                                                                                |
    |--------------------------|------------|--------------------------------------------------------------------------------------------|
    | OperandRequest | opreq | It defines which operator/operand want to be installed in the cluster |
    | OperandRegistry | opreg | It defines the OLM information, like channel and catalog source, for each operator |
    | OperandConfig | opcon | It defines the parameters that should be used to install the operator's operand |
    | OperandBindInfo | opbi | It identifies secrets and/or configmaps that should be shared with requests |

    ### Goal

    1. A single entry point to manage a group of operands
    1. User can select a set of operands to install
    1. The install can be invoked through either OCP UI or CLI

    ## Prerequisites
    - [operator-sdk] version v1.3.0.
    - [go] version 1.15.7+
    - [oc] version v3.11+ or [kubectl] v1.11.3+
    - Access to an Openshift v4.3+ cluster

    ### Resources Required

    #### Minimum scheduling capacity

    | Software                   | Memory (MB) | CPU (cores) |
    | -------------------------- | ----------- | ----------- |
    | Operand Deployment Lifecycle Manager | 200          | 0.2        |
    | **Total**                  | 200         | 0.2         |

    ## Installing

    ### Create Operator NS, Group, Subscription

    ```yaml
    apiVersion: v1
    kind: Namespace
    metadata:
      name: odlm

    ---
    apiVersion: operators.coreos.com/v1alpha2
    kind: OperatorGroup
    metadata:
      name: operatorgroup
      namespace: odlm
    spec:
      targetNamespaces:
      - odlm

    ---
    apiVersion: v1
    data:
      namespaces: odlm
    kind: ConfigMap
    metadata:
      name: namespace-scope
      namespace: odlm

    ---
    apiVersion: operators.coreos.com/v1alpha1
    kind: Subscription
    metadata:
      name: operand-deployment-lifecycle-manager
      namespace: odlm
    spec:
      channel: v3.20
      name: ibm-odlm
      source: opencloud-operators
      sourceNamespace: olm
      config:
        env:
        - name: INSTALL_SCOPE
          value: namespaced
    END
    ```

    ## Configuration

    OperandRegistry defines the OLM information used for installation, like package name and catalog source, for each operator.

    Following is an example of the OperandRegistry CR:

    **NOTE:** The "spec.operators[*].name" parameter must be unique for each entry.

    ```yaml
    apiVersion: operator.ibm.com/v1alpha1
    kind: OperandRegistry
    metadata:
      name: example-service [1]
      namespace: example-service-ns [2]
    spec:
      operators:
      - name: jenkins [3]
        namespace: default [4]
        channel: alpha [5]
        packageName: jenkins-operator [6]
        scope: public [7]
        sourceName: community-operators [8]
        sourceNamespace: openshift-marketplace [9]
        installMode: cluster [10]
        installPlanApproval: Manual [11]
    ```

    The OperandRegistry Custom Resource (CR) lists OLM Operator information for operands that may be requested for installation and/or access by an application that runs in a namespace. The registry CR specifies:

    1. `name` of the OperandRegistry
    2. `namespace` of the OperandRegistry
    3. `name` is the name of the operator, which should be the same as the services name in the OperandConfig and OperandRequest.
    4. `namespace` defines the namespace where the operator and its CR will be deployed. (1) When InstallMode is `cluster`, the operator will be deployed into the `openshift-operators` namespace and the operator CRs will be deployed into the namespace this parameter defines. (2) When InstallMode is empty or set to `namespace`, it is the namespace where both operator and operator CR will be deployed.
    5. `channel` is the name of OLM channel that is subscribed for the operator.
    6. `packageName` is the name of the package in CatalogSource that is subscribed for the operator.
    7. (optional) `scope` is an indicator, either public or private, that dictates whether deployment can be requested from other namespaces (public) or only from the namespace of this OperandRegistry (private). The default value is private.
    8. `sourceName` is the name of the CatalogSource.
    9. `sourceNamespace` is the namespace of the CatalogSource.
    10. (optional) `installMode` is the install mode of the operator, can be either `namespace` (OLM one namespace) or `cluster` (OLM all namespaces). The default value is `namespace`. Operator is deployed in `openshift-operators` namespace when InstallMode is set to `cluster`.
    11. (optional) `installPlanApproval` is the approval mode for emitted installplan. The default value is `Automatic`.

    ### OperandConfig Spec

    OperandConfig defines the individual operand configuration. The OperandConfig Custom Resource (CR) defines the parameters for each operator that is listed in the OperandRegistry that should be used to install the operator instance by specifying an installation CR.

    ```yaml
    apiVersion: operator.ibm.com/v1alpha1
    Kind: OperandConfigs
    metadata:
      name: example-service [1]
      namespace: example-service-ns [2]
    spec:
      services:
      - name: jenkins [3]
        spec: [4]
          jenkins:
            port: 8081
    ```

    OperandConfig defines the individual operand deployment config:

    1. `name` of the OperandConfig
    2. `namespace` of the OperandConfig
    3. `name` is the name of the operator, which should be the same as the services name in the OperandRegistry and OperandRequest.
    4. `spec` defines a map. Its key is the kind name of the custom resource. Its value is merged to the spec field of custom resource. For more details, you can check the following topic **How does ODLM create the individual operator CR?**

    #### How does Operator create the individual operator CR

    Jenkins Operator has one CRD: Jenkins:

    The OperandConfig CR has

    ```yaml
    - name: jenkins
      spec:
        jenkins:
          service:
            port: 8081
    ```

    The Jenkins Operator CSV has

    ```yaml
    apiVersion: operators.coreos.com/v1alpha1
    kind: ClusterServiceVersion
    metadata:
      annotations:
      alm-examples: |-
        [
        {
          "apiVersion":"jenkins.io/v1alpha2",
          "kind":"Jenkins",
          "metadata": {
            "name":"example"
          },
          "spec":{
            ...
            "service":{"port":8080,"type":"ClusterIP"},
            ...
          }
        }
      ]
    ```

    The ODLM will deep merge the OperandConfig CR spec and Jenkins Operator CSV alm-examples to create the Jenkins CR.

    ```yaml
    apiVersion: jenkins.io/v1alpha2
    kind: Jenkins
    metadata:
      name: example
    spec:
      ...
      service:
        port: 8081
        type: ClusterIP
      ...
    ```

    For day2 operations, the ODLM will patch the OperandConfigs CR spec to the existing Jenkins CR.

    ### OperandRequest Spec

    OperandRequest defines which operator/operand you want to install in the cluster.

    **NOTE:** OperandRequest custom resource is used to trigger a deployment for Operators and Operands.

    #### OperandRequest sample to create custom resource via OperandConfig

    ```yaml
    apiVersion: operator.ibm.com/v1alpha1
    kind: OperandRequest
    metadata:
      name: example-service [1]
      namespace: example-service-ns [2]
    spec:
      requests:
      - registry: example-service [3]
        registryNamespace: example-service-ns [4]
        operands: [5]
        - name: jenkins [6]
          bindings: [7]
            public:
              secret: jenkins-operator-credential [8]
              configmap: jenkins-operator-base-configuration [9]
    ```

    1. `name` of the OperandRequest
    2. `namespace` of the OperandRequest
    3. `registry` identifies the name of the OperandRegistry CR from which this operand deployment is being requested.
    4. (optional) `registryNamespace` identifies the namespace in which the OperandRegistry CR is defined. **Note:** If the `registryNamespace` is not specified then it is assumed that the OperandRegistry CR is in the current (OperandRequest's) namespace.
    5. `operands` in the CR is a list of operands.
    6. `name` of operands in the CR must match a name specification in an OperandRegistry's CR.
    7. (optional) The `bindings` of the operands is a map to get and rename the secret and/or configmap from the provider and create them in the requester's namespace. If the requester wants to rename the secret and/or configmap, they need to know the key of the binding in the OperandBindInfo. If the key of the bindings map is prefixed with public, it means the secret and/or configmap can be shared with the requester in the other namespace. If the key of the bindings map is prefixed with private, it means the secret and/or configmap can only be shared within its own namespace.
    8. (optional) `secret` names a secret that should be created in the requester's namespace with formatted data that can be used to interact with the service.
    9. (optional) `configmap` names a configmap that should be created in the requester's namespace with formatted data that can be used to interact with the service.

    #### OperandRequest sample to create custom resource via OperandRequest

    ```yaml
    apiVersion: operator.ibm.com/v1alpha1
    kind: OperandRequest
    metadata:
      name: example-service
      namespace: example-service-ns
    spec:
      requests:
      - registry: example-service
        registryNamespace: example-service-ns
        operands:
        - name: jenkins
          kind: Jenkins [1]
          apiVersion: "jenkins.io/v1alpha2" [2]
          instanceName: "example" [3]
          spec: [4]
            service:
              port: 8081
    ```

    1. `kind` of the target custom resource. If it is set in the operand item, ODLM will create CR according to OperandRequest only and get rid of the alm-example and OperandConfig.
    2. `apiVersion` of the target custom resource.
    3. `instanceName` is the name of the custom resource. If `instanceName` is not set, the name of the custom resource will be created with the name of the OperandRequest as a prefix.
    4. `spec` is the spec field of the target CR.

    ### OperandBindInfo Spec

    The ODLM will use the OperandBindInfo to copy the generated secret and/or configmap to a requester's namespace when a service is requested with the OperandRequest CR. An example specification for an OperandBindInfo CR is shown below.

    ```yaml
    apiVersion: operator.ibm.com/v1alpha1
    kind: OperandBindInfo
    metadata:
      name: publicjenkinsbinding [1]
      namespace: example-service-ns [2]
    spec:
      operand: jenkins [3]
      registry: example-service [4]
      description: "Binding information that should be accessible to jenkins adopters" [5]
      bindings: [6]
        public:
          secret: jenkins-operator-credentials-example [7]
          configmap: jenkins-operator-base-configuration-example [8]
    ```

    Fields in this CR are described below.

    1. `name` of the OperandBindInfo
    2. `namespace` of the OperandBindInfo
    3. The `operand` should be the the individual operator name.
    4. The `registry` section must match the name in the OperandRegistry CR in the current namespace.
    5. `description` is used to add a detailed description of a service.
    6. The `bindings` section is used to specify information about the access/configuration data that is to be shared. If the key of the bindings map is prefixed with public, it means the secret and/or configmap can be shared with the requester in the other namespace. If the key of the bindings map is prefixed with private, it means the secret and/or configmap can only be shared within its own namespace. If the key of the bindings map is prefixed with protected, it means the secret and/or configmap can only be shared if it is explicitly declared in the OperandRequest.
    7. The `secret` field names an existing secret, if any, that has been created and holds information that is to be shared with the requester.
    8. The `configmap` field identifies a configmap object, if any, that should be shared with the requester

    ODLM will use the OperandBindInfo CR to pass information to an adopter when they create a OperandRequest to access the service, assuming that both have compatible scopes. ODLM will copy the information from the shared service's "OperandBindInfo.bindinfo[].secret" and/or "OperandBindInfo.bindinfo[].configmap" to the requester namespace.

    **NOTE:** If in the OperandRequest, there is no secret and/or configmap name specified in the bindings or no bindings field in the element of operands, ODLM will copy the secret and/or configmap to the requester's namespace and rename them to the name of the OperandBindInfo + secret/configmap name.

    ### E2E Use Case

    1. User installs ODLM from OLM

        The ODLM will automatically generate two default CRD CRs, since OperandRegistry and OperandConfigs CRs don't define the state, so it should be fine.

    2. **Optional:** Users can update the OperandConfigs CR with their own parameter values

        Users can skip this step if the default configurations match the requirement.

    3. User creates the OperandRequest CR from OLM

        This tells ODLM that users want to install some of the individual operator/operand.

    4. The rest works will be done by OLM and ODLM

        Finally, users will get what they want.

    ### Operator/Operand Upgrade

    - For operator/operand upgrade, you only need to publish your operator OLM to your operator channel, and OLM will handle the upgrade automatically.
    - If there are major version, then you may want to update `channel` in `OperandRegistry` to trigger upgrade.

    ### Limitations

    ODLM depends on NamespaceScope Operator

    ### SecurityContextConstraints Requirements

    The Operand Deployment Lifecycle Manager supports running under the OpenShift Container Platform default restricted security context constraints.
  displayName: Operand Deployment Lifecycle Manager
  icon:
    - base64data: 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
      mediatype: image/png
  install:
    spec:
      clusterPermissions:
        - rules:
            - apiGroups:
                - apiextensions.k8s.io
              resources:
                - customresourcedefinitions
              verbs:
                - get
            - apiGroups:
                - operator.ibm.com
              resources:
                - auditloggings
                - certmanagers
              verbs:
                - delete
                - get
            - apiGroups:
                - operators.coreos.com
              resources:
                - catalogsources
              verbs:
                - get
          serviceAccountName: operand-deployment-lifecycle-manager
      deployments:
        - label:
            app.kubernetes.io/instance: operand-deployment-lifecycle-manager
            app.kubernetes.io/managed-by: operand-deployment-lifecycle-manager
            app.kubernetes.io/name: operand-deployment-lifecycle-manager
            productName: IBM_Cloud_Platform_Common_Services
          name: operand-deployment-lifecycle-manager
          spec:
            replicas: 1
            selector:
              matchLabels:
                name: operand-deployment-lifecycle-manager
            strategy: {}
            template:
              metadata:
                annotations:
                  productID: 068a62892a1e4db39641342e592daa25
                  productMetric: FREE
                  productName: IBM Cloud Platform Common Services
                labels:
                  app.kubernetes.io/instance: operand-deployment-lifecycle-manager
                  app.kubernetes.io/managed-by: operand-deployment-lifecycle-manager
                  app.kubernetes.io/name: operand-deployment-lifecycle-manager
                  intent: projected-odlm
                  name: operand-deployment-lifecycle-manager
                  productName: IBM_Cloud_Platform_Common_Services
              spec:
                affinity:
                  nodeAffinity:
                    requiredDuringSchedulingIgnoredDuringExecution:
                      nodeSelectorTerms:
                        - matchExpressions:
                            - key: kubernetes.io/arch
                              operator: In
                              values:
                                - amd64
                                - ppc64le
                                - s390x
                containers:
                  - args:
                      - -v=1
                    command:
                      - /manager
                    env:
                      - name: OPERATOR_NAMESPACE
                        valueFrom:
                          fieldRef:
                            apiVersion: v1
                            fieldPath: metadata.namespace
                      - name: WATCH_NAMESPACE
                        valueFrom:
                          fieldRef:
                            fieldPath: metadata.annotations['olm.targetNamespaces']
                    image: icr.io/cpopen/odlm:4.4.0
                    imagePullPolicy: IfNotPresent
                    livenessProbe:
                      failureThreshold: 10
                      httpGet:
                        path: /readyz
                        port: 8081
                      initialDelaySeconds: 120
                      periodSeconds: 60
                      timeoutSeconds: 10
                    name: manager
                    readinessProbe:
                      failureThreshold: 10
                      httpGet:
                        path: /healthz
                        port: 8081
                      initialDelaySeconds: 5
                      periodSeconds: 20
                      timeoutSeconds: 3
                    resources:
                      limits:
                        cpu: 500m
                        memory: 512Mi
                      requests:
                        cpu: 200m
                        ephemeral-storage: 256Mi
                        memory: 200Mi
                    securityContext:
                      allowPrivilegeEscalation: false
                      capabilities:
                        drop:
                          - ALL
                      privileged: false
                      readOnlyRootFilesystem: true
                      runAsNonRoot: true
                      seccompProfile:
                        type: RuntimeDefault
                serviceAccount: operand-deployment-lifecycle-manager
                serviceAccountName: operand-deployment-lifecycle-manager
                terminationGracePeriodSeconds: 10
      permissions:
        - rules:
            - apiGroups:
                - ""
              resources:
                - configmaps
                - namespaces
                - secrets
                - services
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - '*'
              resources:
                - '*'
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - k8s.keycloak.org
              resources:
                - keycloakrealmimports
                - keycloaks
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - operator.ibm.com
              resources:
                - operandbindinfos
                - operandbindinfos/finalizers
                - operandbindinfos/status
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - operator.ibm.com
              resources:
                - operandconfigs
                - operandconfigs/finalizers
                - operandconfigs/status
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - operator.ibm.com
              resources:
                - operandregistries
                - operandregistries/finalizers
                - operandregistries/status
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - operator.ibm.com
              resources:
                - operandrequests
                - operandrequests/finalizers
                - operandrequests/status
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - operator.ibm.com
              resources:
                - operatorconfigs
                - operatorconfigs/finalizers
                - operatorconfigs/status
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - operators.coreos.com
              resources:
                - clusterserviceversions
                - subscriptions
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - operators.coreos.com
              resources:
                - installplans
                - operatorgroups
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - packages.operators.coreos.com
              resources:
                - packagemanifests
              verbs:
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - route.openshift.io
              resources:
                - routes
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
          serviceAccountName: operand-deployment-lifecycle-manager
    strategy: deployment
  installModes:
    - supported: true
      type: OwnNamespace
    - supported: true
      type: SingleNamespace
    - supported: true
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
  keywords:
    - IBM
    - Cloud
  labels:
    name: operand-deployment-lifecycle-manager
  links:
    - name: IBM Operand Deployment Lifecycle Manager Project
      url: https://github.com/IBM/operand-deployment-lifecycle-manager
  maintainers:
    - email: support@ibm.com
      name: IBM Support
  maturity: stable
  minKubeVersion: 1.19.0
  provider:
    name: IBM
  version: 4.4.0
  relatedImages:
    - image: icr.io/cpopen/odlm:4.4.0
      name: ODLM_IMAGE

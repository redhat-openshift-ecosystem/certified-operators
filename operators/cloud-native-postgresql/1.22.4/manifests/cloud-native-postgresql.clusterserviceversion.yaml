apiVersion: operators.coreos.com/v1alpha1
kind: ClusterServiceVersion
metadata:
  annotations:
    alm-examples: |-
      [
        {
          "apiVersion": "postgresql.k8s.enterprisedb.io/v1",
          "kind": "Backup",
          "metadata": {
            "name": "backup-sample"
          },
          "spec": {
            "cluster": {
              "name": "cluster-sample"
            }
          }
        },
        {
          "apiVersion": "postgresql.k8s.enterprisedb.io/v1",
          "kind": "Cluster",
          "metadata": {
            "name": "cluster-sample"
          },
          "spec": {
            "instances": 3,
            "logLevel": "info",
            "primaryUpdateStrategy": "unsupervised",
            "storage": {
              "size": "1Gi"
            },
            "walStorage": {
              "size": "1Gi"
            }
          }
        },
        {
          "apiVersion": "postgresql.k8s.enterprisedb.io/v1",
          "kind": "Pooler",
          "metadata": {
            "name": "pooler-sample-rw"
          },
          "spec": {
            "cluster": {
              "name": "cluster-sample"
            },
            "instances": 1,
            "pgbouncer": {
              "poolMode": "session"
            },
            "type": "rw"
          }
        },
        {
          "apiVersion": "postgresql.k8s.enterprisedb.io/v1",
          "kind": "ScheduledBackup",
          "metadata": {
            "name": "scheduledbackup-sample"
          },
          "spec": {
            "cluster": {
              "name": "cluster-sample"
            },
            "schedule": "0 0 0 * * *"
          }
        }
      ]
    capabilities: Auto Pilot
    categories: Database
    certified: "true"
    containerImage: quay.io/enterprisedb/cloud-native-postgresql@sha256:fcbd977855d674a8fca7d8aaff6614e66dc7941efa11b638f5213908546837b9
    createdAt: "2024-06-13T16:54:27Z"
    description: EDB Postgres for Kubernetes is an open source operator designed to manage highly available PostgreSQL databases with a primary/standby architecture on any supported Kubernetes cluster.
    features.operators.openshift.io/disconnected: "true"
    features.operators.openshift.io/fips-compliant: "true"
    features.operators.openshift.io/proxy-aware: "false"
    features.operators.openshift.io/tls-profiles: "false"
    features.operators.openshift.io/token-auth-aws: "false"
    features.operators.openshift.io/token-auth-azure: "false"
    features.operators.openshift.io/token-auth-gcp: "false"
    olm.skipRange: '>= 1.18.0 < 1.22.4'
    operators.operatorframework.io/builder: operator-sdk-v1.34.2
    operators.operatorframework.io/project_layout: go.kubebuilder.io/v4
    repository: https://github.com/EnterpriseDB/cloud-native-postgres
    support: EnterpriseDB Corporation
  labels:
    operatorframework.io/arch.amd64: supported
    operatorframework.io/arch.ppc64le: supported
    operatorframework.io/arch.s390x: supported
  name: cloud-native-postgresql.v1.22.4
  namespace: placeholder
spec:
  apiservicedefinitions: {}
  customresourcedefinitions:
    owned:
      - description: PostgreSQL backup (physical base backup)
        displayName: Backups
        kind: Backup
        name: backups.postgresql.k8s.enterprisedb.io
        resources:
          - kind: PersistentVolumeClaim
            name: ""
            version: v1
        specDescriptors:
          - description: The cluster to backup
            displayName: Cluster
            path: cluster
          - description: The name of the cluster to backup
            displayName: Cluster Name
            path: cluster.name
            x-descriptors:
              - urn:alm:descriptor:io.kubernetes:Clusters
        statusDescriptors:
          - description: Current backupphase
            displayName: Phase
            path: phase
            x-descriptors:
              - urn:alm:descriptor:io.kubernetes.phase
        version: v1
      - description: PostgreSQL cluster (primary/standby architecture)
        displayName: Cluster
        kind: Cluster
        name: clusters.postgresql.k8s.enterprisedb.io
        resources:
          - kind: Service
            name: ""
            version: v1
          - kind: Pod
            name: ""
            version: v1
          - kind: Secret
            name: ""
            version: v1
          - kind: PersistentVolumeClaim
            name: ""
            version: v1
          - kind: Job
            name: ""
            version: v1
        specDescriptors:
          - displayName: Description
            path: description
            x-descriptors:
              - urn:alm:descriptor:com.tectonic.ui:text
              - urn:alm:descriptor:com.tectonic.ui:advanced
          - description: Name of the PostgreSQL container image
            displayName: Image Name
            path: imageName
            x-descriptors:
              - urn:alm:descriptor:com.tectonic.ui:text
              - urn:alm:descriptor:com.tectonic.ui:advanced
          - description: When to pull the image
            displayName: ImagePullPolicy
            path: imagePullPolicy
            x-descriptors:
              - urn:alm:descriptor:com.tectonic.ui:imagePullPolicy
              - urn:alm:descriptor:com.tectonic.ui:advanced
          - description: Postgres user Id used inside the container
            displayName: Postgres UID
            path: postgresUID
            x-descriptors:
              - urn:alm:descriptor:com.tectonic.ui:hidden
              - urn:alm:descriptor:com.tectonic.ui:advanced
          - description: Postgres group Id used inside the container
            displayName: Postgres GID
            path: postgresGID
            x-descriptors:
              - urn:alm:descriptor:com.tectonic.ui:hidden
              - urn:alm:descriptor:com.tectonic.ui:advanced
          - description: Number of instances required in the cluster
            displayName: Instances
            path: instances
            x-descriptors:
              - urn:alm:descriptor:com.tectonic.ui:podCount
          - description: Minimum number of instances required in synchronous replication with the primary. Undefined or 0 allow writes to complete when no standby is available.
            displayName: Min Synchronous Replicas
            path: minSyncReplicas
            x-descriptors:
              - urn:alm:descriptor:com.tectonic.ui:number
              - urn:alm:descriptor:com.tectonic.ui:advanced
          - description: The target value for the synchronous replication quorum, that can be decreased if the number of ready standbys is lower than this. Undefined or 0 disable synchronous replication.
            displayName: Max Synchronous Replicas
            path: maxSyncReplicas
            x-descriptors:
              - urn:alm:descriptor:com.tectonic.ui:number
              - urn:alm:descriptor:com.tectonic.ui:advanced
          - description: Options for postgresql.conf
            displayName: PostgreSQL Configuration
            path: postgresql
            x-descriptors:
              - urn:alm:descriptor:com.tectonic.ui:advanced
          - description: Options for postgresql.conf
            displayName: PostgreSQL configuration parameter
            path: postgresql.parameters[0]
          - description: PostgreSQL Host Based Authentication rules
            displayName: pg_hba rules
            path: postgresql.pg_hba[0]
          - description: Boolean to enable edb_audit logging
            displayName: EPAS Configuration
            path: postgresql.epas.audit
          - description: maximum number of seconds to wait when promoting an instance to primary
            displayName: pgctl Timeout
            path: postgresql.promotionTimeout
          - description: List of shared preload libraries to add to the default ones
            displayName: Preload Libraries
            path: postgresql.shared_preload_libraries[0]
          - description: Options to specify LDAP configuration
            displayName: LDAP Authentication configuration
            path: postgresql.ldap
          - description: The IP or hostname of your LDAP server
            displayName: LDAP Server hostname or IP Address
            path: postgresql.ldap.server
            x-descriptors:
              - urn:alm:descriptor:com.tectonic.ui:text
          - description: The port of your LDAP server
            displayName: LDAP Server port
            path: postgresql.ldap.port
            x-descriptors:
              - urn:alm:descriptor:com.tectonic.ui:text
          - description: LDAP scheme
            displayName: LDAP scheme to be used
            path: postgresql.ldap.scheme
            x-descriptors:
              - urn:alm:descriptor:com.tectonic.ui:select:ldap
              - urn:alm:descriptor:com.tectonic.ui:select:ldaps
          - description: Boolean to enable TLS
            displayName: Enable LDAP over TLS
            path: postgresql.ldap.tls
            x-descriptors:
              - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
          - description: Instructions to bootstrap the cluster
            displayName: Bootstrap Configuration
            path: bootstrap
            x-descriptors:
              - urn:alm:descriptor:com.tectonic.ui:advanced
          - description: The name of the Bootstrap secret
            displayName: Bootstrap Configuration Secret Name
            path: bootstrap.initdb.secret.name
            x-descriptors:
              - urn:alm:descriptor:io.kubernetes:Secret
          - description: Replica cluster configuration
            displayName: Replica
            path: replica
            x-descriptors:
              - urn:alm:descriptor:io.kubernetes:Secret
              - urn:alm:descriptor:com.tectonic.ui:advanced
          - description: |
              The secret containing the superuser password.
              If not defined a new secret will be created with a randomly generated password
            displayName: Superuser Secret
            path: superuserSecret
            x-descriptors:
              - urn:alm:descriptor:com.tectonic.ui:advanced
          - description: Name of hte Superuser Secret
            displayName: Superuser Secret
            path: superuserSecret.name
            x-descriptors:
              - urn:alm:descriptor:io.kubernetes:Secret
          - description: Boolean to enable or disable use of SuperUserSecret to update postgres user password
            displayName: Enable Super User Access
            path: enableSuperuserAccess
            x-descriptors:
              - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
              - urn:alm:descriptor:com.tectonic.ui:advanced
          - description: The configuration for the CA and related certificates
            displayName: Certificates
            path: certificates
            x-descriptors:
              - urn:alm:descriptor:com.tectonic.ui:advanced
          - description: Secret for pulling the image. If empty, no secret will be used
            displayName: Image Pull Secret
            path: imagePullSecrets[0].name
            x-descriptors:
              - urn:alm:descriptor:io.kubernetes:Secret
          - description: Configuration of the storage of the instances
            displayName: Storage
            path: storage
          - description: StorageClass to use for database data (PGDATA). Applied after evaluating the PVC template, if available.
            displayName: Storage Class
            path: storage.storageClass
            x-descriptors:
              - urn:alm:descriptor:io.kubernetes:StorageClass
          - description: Storage size for database data (PGDATA). (default size 1G)
            displayName: Storage Size
            path: storage.size
            x-descriptors:
              - urn:alm:descriptor:com.tectonic.ui:text
          - description: Configuration of the WAL Storage of instances
            displayName: WAL Storage
            path: walStorage
          - description: Storage size for WAL Storage. (default size 1G)
            displayName: WAL Storage Size
            path: walStorage.size
            x-descriptors:
              - urn:alm:descriptor:com.tectonic.ui:text
          - displayName: Resize in-use volumes
            path: storage.resizeInUseVolumes
            x-descriptors:
              - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
          - description: Template to be used to generate the Persistent Volume Claim
            displayName: PVC template
            path: storage.pvcTemplate
            x-descriptors:
              - urn:alm:descriptor:com.tectonic.ui:advanced
          - description: The time in seconds that is allowed for a PostgreSQL instance to successfully start up (default 30)
            displayName: Maximum Start Delay
            path: startDelay
            x-descriptors:
              - urn:alm:descriptor:com.tectonic.ui:number
              - urn:alm:descriptor:com.tectonic.ui:advanced
          - description: The time in seconds that is allowed for a PostgreSQL instance node to gracefully shutdown (default 30)
            displayName: Maximum Stop Delay
            path: stopDelay
            x-descriptors:
              - urn:alm:descriptor:com.tectonic.ui:number
              - urn:alm:descriptor:com.tectonic.ui:advanced
          - description: Affinity/Anti-affinity rules for Pods
            displayName: Pod Affinity
            path: affinity
            x-descriptors:
              - urn:alm:descriptor:com.tectonic.ui:advanced
          - description: activates anti-affinity for the pods
            displayName: Pod Anti-Affinity
            path: affinity.enablePodAntiAffinity
            x-descriptors:
              - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
          - description: Key value pair of which nodes the pods can run
            displayName: Node Selector
            path: affinity.nodeSelector
            x-descriptors:
              - urn:alm:descriptor:com.tectonic.ui:selector:core:v1:Node
          - path: resources
            x-descriptors:
              - urn:alm:descriptor:com.tectonic.ui:resourceRequirements
          - displayName: Primary Update Strategy
            path: primaryUpdateStrategy
            x-descriptors:
              - urn:alm:descriptor:com.tectonic.ui:advanced
          - displayName: Primary Update Method
            path: primaryUpdateMethod
            x-descriptors:
              - urn:alm:descriptor:com.tectonic.ui:advanced
          - description: S3-compatible object storage Endpoint. If empty the S3 default is used
            displayName: Object Storage Endpoint
            path: backup.barmanObjectStore.endpointURL
            x-descriptors:
              - urn:alm:descriptor:com.tectonic.ui:text
          - description: Name of the Secret containing the Secret Access Key
            path: backup.barmanObjectStore.s3Credentials.secretAccessKey.name
            x-descriptors:
              - urn:alm:descriptor:io.kubernetes:Secret
          - description: Key inside the Secret containing the Secret Access Key
            path: backup.barmanObjectStore.s3Credentials.secretAccessKey.key
            x-descriptors:
              - urn:alm:descriptor:io.kubernetes:text
          - description: Name of the Secret containing the Access Key Id
            path: backup.barmanObjectStore.s3Credentials.accessKeyId.name
            x-descriptors:
              - urn:alm:descriptor:io.kubernetes:Secret
          - description: Key inside the Secret containing the Access Key Id
            path: backup.barmanObjectStore.s3Credentials.accessKeyId.key
            x-descriptors:
              - urn:alm:descriptor:io.kubernetes:text
          - description: WAL compression algorithm
            displayName: WAL compression
            path: backup.barmanObjectStore.wal.compression
            x-descriptors:
              - urn:alm:descriptor:io.kubernetes:text
          - description: WAL encryprion algorithm
            displayName: WAL encryption
            path: backup.barmanObjectStore.wal.encryption
            x-descriptors:
              - urn:alm:descriptor:io.kubernetes:text
          - description: Data compression algorithm
            displayName: Data compression
            path: backup.barmanObjectStore.data.compression
            x-descriptors:
              - urn:alm:descriptor:io.kubernetes:text
          - description: Data encryprion algorithm
            displayName: Data encryption
            path: backup.barmanObjectStore.data.encryption
            x-descriptors:
              - urn:alm:descriptor:io.kubernetes:text
          - displayName: Immediate Checkpoint
            path: backup.barmanObjectStore.data.immediateCheckpoint
            x-descriptors:
              - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
          - displayName: Jobs
            path: backup.barmanObjectStore.data.jobs
            x-descriptors:
              - urn:alm:descriptor:com.tectonic.ui:number
          - description: Maintenance window for Kubernetes node upgrades is in progress
            displayName: In Progress
            path: nodeMaintenanceWindow.inProgress
            x-descriptors:
              - urn:alm:descriptor:com.tectonic.ui:advanced
              - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
          - description: Should the existing PVCs be reused during Kubernetes upgrades?
            displayName: Kubernetes Node Upgrade Maintenance Window to reuse PVCs
            path: nodeMaintenanceWindow.reusePVC
            x-descriptors:
              - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
          - description: The configuration of the monitoring infrastructure of this cluster
            displayName: Monitoring
            path: monitoring
            x-descriptors:
              - urn:alm:descriptor:com.tectonic.ui:advanced
          - displayName: Custom queries ConfigMap name
            path: monitoring.customQueriesConfigMap[0].name
            x-descriptors:
              - urn:alm:descriptor:io.kubernetes:ConfigMap
          - displayName: Custom queries ConfigMap key
            path: monitoring.customQueriesConfigMap[0].key
            x-descriptors:
              - urn:alm:descriptor:io.kubernetes:text
          - displayName: Custom queries Secret name
            path: monitoring.customQueriesSecret[0].name
            x-descriptors:
              - urn:alm:descriptor:io.kubernetes:Secret
          - displayName: Custom queries Secret key
            path: monitoring.customQueriesSecret[0].key
            x-descriptors:
              - urn:alm:descriptor:io.kubernetes:text
          - displayName: Enable PodMonitor resource
            path: monitoring.enablePodMonitor
            x-descriptors:
              - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
          - description: List of external clusters which are used in the configuration
            displayName: External Clusters
            path: externalClusters
            x-descriptors:
              - urn:alm:descriptor:io.kubernetes:text
              - urn:alm:descriptor:com.tectonic.ui:advanced
          - description: One of error, info (default), debug or trace
            displayName: Log Level
            path: logLevel
            x-descriptors:
              - urn:alm:descriptor:com.tectonic.ui:advanced
        statusDescriptors:
          - description: Status Pods
            displayName: Working Pods
            path: instancesStatus
            x-descriptors:
              - urn:alm:descriptor:com.tectonic.ui:podStatuses
          - description: Current Primary Pod
            displayName: Current Primary Pod
            path: currentPrimary
            x-descriptors:
              - urn:alm:descriptor:io.kubernetes:Pod
          - description: Shows the date when the current primary was elected
            displayName: Current Primary election date
            path: currentPrimaryTimestamp
            x-descriptors:
              - urn:alm:descriptor:text
          - description: Service for written process
            displayName: Write Service
            path: writeService
            x-descriptors:
              - urn:alm:descriptor:io.kubernetes:Service
          - description: Service for read process
            displayName: Read Service
            path: readService
            x-descriptors:
              - urn:alm:descriptor:io.kubernetes:Service
          - description: Current cluster phase
            displayName: Phase
            path: phase
            x-descriptors:
              - urn:alm:descriptor:io.kubernetes.phase
          - description: Current phase reason
            displayName: Phase Reason
            path: phaseReason
            x-descriptors:
              - urn:alm:descriptor:io.kubernetes.phase:reason
          - description: Postgres user Id used inside the container
            displayName: Postgres UID
            path: postgresUID
            x-descriptors:
              - urn:alm:descriptor:com.tectonic.ui:hidden
          - description: Postgres group Id used inside the container
            displayName: Postgres GID
            path: postgresGID
            x-descriptors:
              - urn:alm:descriptor:com.tectonic.ui:hidden
          - description: Show the current condition of the cluster
            displayName: Cluster Condition
            path: conditions
            x-descriptors:
              - urn:alm:descriptor:io.kubernetes.conditions
        version: v1
      - description: Pooler for a Postgres Cluster (with PgBouncer)
        displayName: Pooler
        kind: Pooler
        name: poolers.postgresql.k8s.enterprisedb.io
        resources:
          - kind: Service
            name: ""
            version: v1
          - kind: Deployment
            name: ""
            version: v1
        specDescriptors:
          - description: The cluster behind the pooler
            displayName: Cluster
            path: cluster
          - description: Name of the cluster behind the pooler
            displayName: Cluster Name
            path: cluster.name
            x-descriptors:
              - urn:alm:descriptor:com.tectonic.ui:text
          - description: Service type of the cluster to connect to ('rw' or 'rw')
            path: type
            x-descriptors:
              - urn:alm:descriptor:io.kubernetes:text
          - description: Number of instances required in the cluster.
            displayName: Instances
            path: instances
            x-descriptors:
              - urn:alm:descriptor:com.tectonic.ui:podCount
          - description: Pod Template Spec for pod to be created.
            path: template
            x-descriptors:
              - urn:alm:descriptor:com.tectonic.ui:advanced
          - description: The PgBouncer configuration
            displayName: PgBouncer
            path: pgbouncer
            x-descriptors:
              - urn:alm:descriptor:com.tectonic.ui:advanced
          - description: The poolmode to use. One of 'session' or 'transaction'.
            displayName: PgBouncer PoolMode
            path: pgbouncer.poolMode
            x-descriptors:
              - urn:alm:descriptor:io.kubernetes:text
          - description: The secret containing the credentials of the user that needs to be used for the authentication query. An AuthQuery must also be specified.
            displayName: PgBouncer AuthQuerySecret
            path: pgbouncer.authQuerySecret
          - description: The name of the secret containing the credentials of the user that needs to be used for the authentication query.
            displayName: PgBouncer AuthQuerySecret Name
            path: pgbouncer.authQuerySecret.name
            x-descriptors:
              - urn:alm:descriptor:com.tectonic.ui:text
          - description: The query that will be used to download the hashed password of a certain user. When this is specified an AuthQuerySecret must also be specified.
            displayName: PgBouncer AuthQuery
            path: pgbouncer.authQuery
            x-descriptors:
              - urn:alm:descriptor:com.tectonic.ui:text
          - description: Boolean to pause PgBouncer causing it to disconnect from the PostgreSQL server.
            displayName: Paused
            path: pgbouncer.paused
            x-descriptors:
              - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
        statusDescriptors:
          - description: The name of the secret for server TLS
            path: secrets.serverTLS.name
          - description: The name of the CA secret for the server
            path: secrets.serverCA.name
          - description: The name of the CA secret for the client
            path: secrets.clientCA.name
          - description: The authQuery secret
            path: secrets.pgBouncerSecrets.authQuery.name
        version: v1
      - description: Backup scheduler for a given Postgres cluster
        displayName: Scheduled Backups
        kind: ScheduledBackup
        name: scheduledbackups.postgresql.k8s.enterprisedb.io
        resources:
          - kind: PersistentVolumeClaim
            name: ""
            version: v1
        specDescriptors:
          - description: The PostgreSQL cluster to backup
            displayName: Cluster
            path: cluster
          - description: The name of the PostgreSQL cluster to backup
            displayName: Cluster name
            path: cluster.name
            x-descriptors:
              - urn:alm:descriptor:io.kubernetes:Clusters
          - description: Whether the first backup needs to be taken immediately after this object is created
            path: immediate
            x-descriptors:
              - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
              - urn:alm:descriptor:com.tectonic.ui:advanced
          - description: The schedule in Kubernetes CronJobs format, see https://pkg.go.dev/github.com/robfig/cron#hdr-CRON_Expression_Format
            displayName: Schedule
            path: schedule
            x-descriptors:
              - urn:alm:descriptor:com.tectonic.ui:text
          - description: If this is true, the schedule is suspended (defaults to `False`)
            displayName: Schedule is suspended
            path: suspend
            x-descriptors:
              - urn:alm:descriptor:com.tectonic.ui:booleanSwitch
              - urn:alm:descriptor:com.tectonic.ui:advanced
        statusDescriptors:
          - description: When the next backup is scheduled
            displayName: Next backup
            path: nextScheduleTime
          - description: When the last backup was scheduled
            displayName: Last backup
            path: lastScheduleTime
        version: v1
  description: |
    Main features:

    * Direct integration with Kubernetes API server for High Availability,
      without requiring an external tool
    * Self-Healing capability, through:
        * failover of the primary instance by promoting the most aligned replica
        * automated recreation of a replica
    * Planned switchover of the primary instance by promoting a selected replica
    * Scale up/down capabilities
    * Definition of an arbitrary number of instances (minimum 1 - one primary server)
    * Definition of the *read-write* service, to connect your applications to the only primary server of the cluster
    * Definition of the *read-only* service, to connect your applications to any of the instances for reading workloads
    * Declarative management of PostgreSQL configuration
    * Declarative management of Postgres roles, users and groups
    * Support for Local Persistent Volumes with PVC templates
    * Reuse of Persistent Volumes storage in Pods
    * Separate volume for WAL files
    * Rolling updates for PostgreSQL minor versions
    * In-place or rolling updates for operator upgrades
    * TLS connections and client certificate authentication
    * Support for custom TLS certificates (including integration with cert-manager)
    * Continuous WAL archiving to an object store (AWS S3 and S3-compatible, Azure Blob Storage, and Google Cloud Storage)
    * Backups on volume snapshots (where supported by the underlying storage classes)
    * Backups on object stores (AWS S3 and S3-compatible, Azure Blob Storage, and Google Cloud Storage)
    * Full recovery and Point-In-Time recovery from an existing backup on volume snapshots or object stores
    * Offline import of existing PostgreSQL databases, including major upgrades of PostgreSQL
    * Fencing of an entire PostgreSQL cluster, or a subset of the instances in a declarative way
    * Hibernation of a PostgreSQL cluster in a declarative way
    * Support for Synchronous Replicas
    * Support for HA physical replication slots at cluster level
    * Backup from a standby
    * Backup retention policies (based on recovery window, only on object stores)
    * Parallel WAL archiving and restore to allow the database to keep up with WAL
      generation on high write systems
    * Support tagging backup files uploaded to an object store to enable optional
      retention management at the object store layer Replica clusters for
    * PostgreSQL deployments across multiple Kubernetes
      clusters, enabling private, public, hybrid, and multi-cloud architectures
    * Connection pooling with PgBouncer
    * Support for node affinity via `nodeSelector`
    * Native customizable exporter of user defined metrics for Prometheus through the `metrics` port (9187)
    * Standard output logging of PostgreSQL error messages in JSON format
    * Automatically set `readOnlyRootFilesystem` security context for pods
    * `cnp` plugin for `kubectl`
    * Simple bind and search+bind LDAP client authentication
    * Multi-arch format container images
  displayName: EDB Postgres for Kubernetes
  icon:
    - base64data: 
      mediatype: image/svg+xml
  install:
    spec:
      clusterPermissions:
        - rules:
            - apiGroups:
                - ""
              resources:
                - nodes
              verbs:
                - get
                - list
                - watch
          serviceAccountName: postgresql-operator-manager
      deployments:
        - label:
            app.kubernetes.io/name: cloud-native-postgresql
          name: postgresql-operator-controller-manager
          spec:
            replicas: 1
            selector:
              matchLabels:
                app.kubernetes.io/name: cloud-native-postgresql
            strategy: {}
            template:
              metadata:
                labels:
                  app.kubernetes.io/name: cloud-native-postgresql
              spec:
                containers:
                  - args:
                      - controller
                      - --leader-elect
                      - --config-map-name=postgresql-operator-controller-manager-config
                      - --secret-name=postgresql-operator-controller-manager-config
                      - --webhook-port=9443
                    command:
                      - /manager
                    env:
                      - name: WATCH_NAMESPACE
                        valueFrom:
                          fieldRef:
                            fieldPath: metadata.annotations['olm.targetNamespaces']
                      - name: WEBHOOK_CERT_DIR
                        value: /apiserver.local.config/certificates
                      - name: RELATED_IMAGE_CNP
                        value: quay.io/enterprisedb/cloud-native-postgresql@sha256:fcbd977855d674a8fca7d8aaff6614e66dc7941efa11b638f5213908546837b9
                      - name: OPERATOR_IMAGE_NAME
                        value: quay.io/enterprisedb/cloud-native-postgresql@sha256:fcbd977855d674a8fca7d8aaff6614e66dc7941efa11b638f5213908546837b9
                      - name: OPERATOR_NAMESPACE
                        valueFrom:
                          fieldRef:
                            fieldPath: metadata.namespace
                      - name: MONITORING_QUERIES_CONFIGMAP
                        value: postgresql-operator-default-monitoring
                    image: quay.io/enterprisedb/cloud-native-postgresql@sha256:fcbd977855d674a8fca7d8aaff6614e66dc7941efa11b638f5213908546837b9
                    livenessProbe:
                      httpGet:
                        path: /readyz
                        port: 9443
                        scheme: HTTPS
                    name: manager
                    ports:
                      - containerPort: 8080
                        name: metrics
                        protocol: TCP
                      - containerPort: 9443
                        name: webhook-server
                        protocol: TCP
                    readinessProbe:
                      httpGet:
                        path: /readyz
                        port: 9443
                        scheme: HTTPS
                    resources: {}
                    securityContext:
                      allowPrivilegeEscalation: false
                      capabilities:
                        drop:
                          - ALL
                      readOnlyRootFilesystem: true
                      seccompProfile:
                        type: RuntimeDefault
                    volumeMounts:
                      - mountPath: /controller
                        name: scratch-data
                      - mountPath: /run/secrets/k8s.enterprisedb.io/webhook
                        name: webhook-certificates
                imagePullSecrets:
                  - name: postgresql-operator-pull-secret
                securityContext:
                  runAsNonRoot: true
                serviceAccountName: postgresql-operator-manager
                terminationGracePeriodSeconds: 10
                volumes:
                  - emptyDir: {}
                    name: scratch-data
                  - name: webhook-certificates
                    secret:
                      defaultMode: 420
                      optional: true
                      secretName: postgresql-operator-webhook-cert
      permissions:
        - rules:
            - apiGroups:
                - ""
              resources:
                - configmaps
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - ""
              resources:
                - configmaps/status
              verbs:
                - get
                - patch
                - update
            - apiGroups:
                - ""
              resources:
                - events
              verbs:
                - create
                - patch
            - apiGroups:
                - ""
              resources:
                - nodes
              verbs:
                - get
                - list
                - watch
            - apiGroups:
                - ""
              resources:
                - persistentvolumeclaims
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - watch
            - apiGroups:
                - ""
              resources:
                - pods
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - watch
            - apiGroups:
                - ""
              resources:
                - pods/exec
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - watch
            - apiGroups:
                - ""
              resources:
                - pods/status
              verbs:
                - get
            - apiGroups:
                - ""
              resources:
                - secrets
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - ""
              resources:
                - secrets/status
              verbs:
                - get
                - patch
                - update
            - apiGroups:
                - ""
              resources:
                - serviceaccounts
              verbs:
                - create
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - ""
              resources:
                - services
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - admissionregistration.k8s.io
              resources:
                - mutatingwebhookconfigurations
              verbs:
                - get
                - list
                - patch
                - update
            - apiGroups:
                - admissionregistration.k8s.io
              resources:
                - validatingwebhookconfigurations
              verbs:
                - get
                - list
                - patch
                - update
            - apiGroups:
                - apiextensions.k8s.io
              resources:
                - customresourcedefinitions
              verbs:
                - get
                - list
                - update
            - apiGroups:
                - apps
              resources:
                - deployments
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - batch
              resources:
                - jobs
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - watch
            - apiGroups:
                - coordination.k8s.io
              resources:
                - leases
              verbs:
                - create
                - get
                - update
            - apiGroups:
                - monitoring.coreos.com
              resources:
                - podmonitors
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - watch
            - apiGroups:
                - policy
              resources:
                - poddisruptionbudgets
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - postgresql.k8s.enterprisedb.io
              resources:
                - backups
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - postgresql.k8s.enterprisedb.io
              resources:
                - backups/status
              verbs:
                - get
                - patch
                - update
            - apiGroups:
                - postgresql.k8s.enterprisedb.io
              resources:
                - clusters
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - postgresql.k8s.enterprisedb.io
              resources:
                - clusters/finalizers
              verbs:
                - update
            - apiGroups:
                - postgresql.k8s.enterprisedb.io
              resources:
                - clusters/status
              verbs:
                - get
                - patch
                - update
                - watch
            - apiGroups:
                - postgresql.k8s.enterprisedb.io
              resources:
                - poolers
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - postgresql.k8s.enterprisedb.io
              resources:
                - poolers/finalizers
              verbs:
                - update
            - apiGroups:
                - postgresql.k8s.enterprisedb.io
              resources:
                - poolers/status
              verbs:
                - get
                - patch
                - update
                - watch
            - apiGroups:
                - postgresql.k8s.enterprisedb.io
              resources:
                - scheduledbackups
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - postgresql.k8s.enterprisedb.io
              resources:
                - scheduledbackups/status
              verbs:
                - get
                - patch
                - update
            - apiGroups:
                - rbac.authorization.k8s.io
              resources:
                - rolebindings
              verbs:
                - create
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - rbac.authorization.k8s.io
              resources:
                - roles
              verbs:
                - create
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - snapshot.storage.k8s.io
              resources:
                - volumesnapshots
              verbs:
                - create
                - get
                - list
                - patch
                - watch
          serviceAccountName: postgresql-operator-manager
    strategy: deployment
  installModes:
    - supported: true
      type: OwnNamespace
    - supported: true
      type: SingleNamespace
    - supported: true
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
  keywords:
    - postgresql
    - postgres
    - database
    - sql
    - cloudnativepg
    - cloudnative-pg
    - cnp
  links:
    - name: EDB Postgres for Kubernetes
      url: https://www.enterprisedb.com/products/postgresql-on-kubernetes-ha-clusters-k8s-containers-scalable
    - name: Documentation
      url: https://www.enterprisedb.com/docs/postgres_for_kubernetes/latest/
  maintainers:
    - email: jonathan.gonzalez@enterprisedb.com
      name: Jonathan Gonzalez V.
    - email: john.long@enterprisedb.com
      name: John Long
    - email: gabriele.bartolini@enterprisedb.com
      name: Gabriele Bartolini
  maturity: stable
  minKubeVersion: 1.23.0
  provider:
    name: The EDB Postgres for Kubernetes Contributors
  relatedImages:
    - image: quay.io/enterprisedb/cloud-native-postgresql@sha256:fcbd977855d674a8fca7d8aaff6614e66dc7941efa11b638f5213908546837b9
      name: cnp
    - image: quay.io/enterprisedb/cloud-native-postgresql@sha256:fcbd977855d674a8fca7d8aaff6614e66dc7941efa11b638f5213908546837b9
      name: manager
    - image: quay.io/enterprisedb/cloud-native-postgresql@sha256:fcbd977855d674a8fca7d8aaff6614e66dc7941efa11b638f5213908546837b9
      name: cloud-native-postgresql-fcbd977855d674a8fca7d8aaff6614e66dc7941efa11b638f5213908546837b9-annotation
  replaces: cloud-native-postgresql.v1.22.3
  version: 1.22.4
  webhookdefinitions:
    - admissionReviewVersions:
        - v1
      containerPort: 443
      deploymentName: postgresql-operator-controller-manager
      failurePolicy: Fail
      generateName: mbackup.k8s.enterprisedb.io
      rules:
        - apiGroups:
            - postgresql.k8s.enterprisedb.io
          apiVersions:
            - v1
          operations:
            - CREATE
            - UPDATE
          resources:
            - backups
      sideEffects: None
      targetPort: 9443
      type: MutatingAdmissionWebhook
      webhookPath: /mutate-postgresql-k8s-enterprisedb-io-v1-backup
    - admissionReviewVersions:
        - v1
      containerPort: 443
      deploymentName: postgresql-operator-controller-manager
      failurePolicy: Fail
      generateName: mcluster.k8s.enterprisedb.io
      rules:
        - apiGroups:
            - postgresql.k8s.enterprisedb.io
          apiVersions:
            - v1
          operations:
            - CREATE
            - UPDATE
          resources:
            - clusters
      sideEffects: None
      targetPort: 9443
      type: MutatingAdmissionWebhook
      webhookPath: /mutate-postgresql-k8s-enterprisedb-io-v1-cluster
    - admissionReviewVersions:
        - v1
      containerPort: 443
      deploymentName: postgresql-operator-controller-manager
      failurePolicy: Fail
      generateName: mscheduledbackup.k8s.enterprisedb.io
      rules:
        - apiGroups:
            - postgresql.k8s.enterprisedb.io
          apiVersions:
            - v1
          operations:
            - CREATE
            - UPDATE
          resources:
            - scheduledbackups
      sideEffects: None
      targetPort: 9443
      type: MutatingAdmissionWebhook
      webhookPath: /mutate-postgresql-k8s-enterprisedb-io-v1-scheduledbackup
    - admissionReviewVersions:
        - v1
      containerPort: 443
      deploymentName: postgresql-operator-controller-manager
      failurePolicy: Fail
      generateName: vbackup.k8s.enterprisedb.io
      rules:
        - apiGroups:
            - postgresql.k8s.enterprisedb.io
          apiVersions:
            - v1
          operations:
            - CREATE
            - UPDATE
          resources:
            - backups
      sideEffects: None
      targetPort: 9443
      type: ValidatingAdmissionWebhook
      webhookPath: /validate-postgresql-k8s-enterprisedb-io-v1-backup
    - admissionReviewVersions:
        - v1
      containerPort: 443
      deploymentName: postgresql-operator-controller-manager
      failurePolicy: Fail
      generateName: vcluster.k8s.enterprisedb.io
      rules:
        - apiGroups:
            - postgresql.k8s.enterprisedb.io
          apiVersions:
            - v1
          operations:
            - CREATE
            - UPDATE
          resources:
            - clusters
      sideEffects: None
      targetPort: 9443
      type: ValidatingAdmissionWebhook
      webhookPath: /validate-postgresql-k8s-enterprisedb-io-v1-cluster
    - admissionReviewVersions:
        - v1
      containerPort: 443
      deploymentName: postgresql-operator-controller-manager
      failurePolicy: Fail
      generateName: vpooler.k8s.enterprisedb.io
      rules:
        - apiGroups:
            - postgresql.k8s.enterprisedb.io
          apiVersions:
            - v1
          operations:
            - CREATE
            - UPDATE
          resources:
            - poolers
      sideEffects: None
      targetPort: 9443
      type: ValidatingAdmissionWebhook
      webhookPath: /validate-postgresql-k8s-enterprisedb-io-v1-pooler
    - admissionReviewVersions:
        - v1
      containerPort: 443
      deploymentName: postgresql-operator-controller-manager
      failurePolicy: Fail
      generateName: vscheduledbackup.k8s.enterprisedb.io
      rules:
        - apiGroups:
            - postgresql.k8s.enterprisedb.io
          apiVersions:
            - v1
          operations:
            - CREATE
            - UPDATE
          resources:
            - scheduledbackups
      sideEffects: None
      targetPort: 9443
      type: ValidatingAdmissionWebhook
      webhookPath: /validate-postgresql-k8s-enterprisedb-io-v1-scheduledbackup

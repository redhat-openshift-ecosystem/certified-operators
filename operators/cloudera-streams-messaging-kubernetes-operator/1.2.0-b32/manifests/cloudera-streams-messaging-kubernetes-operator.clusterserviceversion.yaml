apiVersion: operators.coreos.com/v1alpha1
kind: ClusterServiceVersion
metadata:
  annotations:
    alm-examples-metadata: |-
      {
        "my-cluster": {
          "description": "Example Kafka cluster with Ephemeral storage"
        },
        "my-connect-cluster": {
          "description": "Example Kafka Connect cluster"
        },
        "my-topic": {
          "description": "Example KafkaTopic custom resource"
        },
        "my-user": {
          "description": "Example KafkaUser custom resource"
        },
        "my-source-connector": {
          "description": "Example Kafka Connect source connector"
        },
        "my-rebalance": {
          "description": "Example Cruise Control rebalance request"
        },
        "my-pool": {
          "description": "Example KafkaNodePool custom resource"
        }
      }
    alm-examples: |-
      [
        {
          "apiVersion": "kafka.strimzi.io/v1beta2",
          "kind": "Kafka",
          "metadata": {
            "name": "my-cluster"
          },
          "spec": {
            "kafka": {
              "version": "3.8.0.1.2",
              "replicas": 3,
              "listeners": [
                {
                  "name": "plain",
                  "port": 9092,
                  "type": "internal",
                  "tls": false
                },
                {
                  "name": "tls",
                  "port": 9093,
                  "type": "internal",
                  "tls": true
                }
              ],
              "config": {
                "offsets.topic.replication.factor": 3,
                "transaction.state.log.replication.factor": 3,
                "transaction.state.log.min.isr": 2,
                "default.replication.factor": 3,
                "min.insync.replicas": 2,
                "inter.broker.protocol.version": "3.8"
              },
              "storage": {
                "type": "ephemeral"
              }
            },
            "zookeeper": {
              "replicas": 3,
              "storage": {
                "type": "ephemeral"
              }
            },
            "entityOperator": {
              "topicOperator": {},
              "userOperator": {}
            }
          }
        },
        {
          "apiVersion": "kafka.strimzi.io/v1beta2",
          "kind": "KafkaConnect",
          "metadata": {
            "name": "my-connect-cluster"
          },
          "spec": {
            "version": "3.8.0.1.2",
            "replicas": 1,
            "bootstrapServers": "my-cluster-kafka-bootstrap:9093",
            "tls": {
              "trustedCertificates": [
                {
                  "secretName": "my-cluster-cluster-ca-cert",
                  "pattern": "*.crt"
                }
              ]
            },
            "config": {
              "group.id": "connect-cluster",
              "offset.storage.topic": "connect-cluster-offsets",
              "config.storage.topic": "connect-cluster-configs",
              "status.storage.topic": "connect-cluster-status",
              "config.storage.replication.factor": -1,
              "offset.storage.replication.factor": -1,
              "status.storage.replication.factor": -1
            }
          }
        },
        {
          "apiVersion": "kafka.strimzi.io/v1beta2",
          "kind": "KafkaTopic",
          "metadata": {
            "name": "my-topic",
            "labels": {
              "strimzi.io/cluster": "my-cluster"
            }
          },
          "spec": {
            "partitions": 10,
            "replicas": 3,
            "config": {
              "retention.ms": 604800000,
              "segment.bytes": 1073741824
            }
          }
        },
        {
          "apiVersion": "kafka.strimzi.io/v1beta2",
          "kind": "KafkaUser",
          "metadata": {
            "name": "my-user",
            "labels": {
              "strimzi.io/cluster": "my-cluster"
            }
          },
          "spec": {
            "authentication": {
              "type": "tls"
            },
            "authorization": {
              "type": "simple",
              "acls": [
                {
                  "resource": {
                    "type": "topic",
                    "name": "my-topic",
                    "patternType": "literal"
                  },
                  "operations": [
                    "Read",
                    "Describe",
                    "Write",
                    "Create"
                  ],
                  "host": "*"
                },
                {
                  "resource": {
                    "type": "group",
                    "name": "my-group",
                    "patternType": "literal"
                  },
                  "operations": [
                    "Read"
                  ],
                  "host": "*"
                }
              ]
            }
          }
        },
        {
          "apiVersion": "kafka.strimzi.io/v1beta2",
          "kind": "KafkaConnector",
          "metadata": {
            "name": "my-source-connector",
            "labels": {
              "strimzi.io/cluster": "my-connect-cluster"
            }
          },
          "spec": {
            "class": "org.apache.kafka.connect.file.FileStreamSourceConnector",
            "tasksMax": 1,
            "config": {
              "file": "/opt/kafka/LICENSE",
              "topic": "my-topic"
            }
          }
        },
        {
          "apiVersion": "kafka.strimzi.io/v1beta2",
          "kind": "KafkaRebalance",
          "metadata": {
            "name": "my-rebalance",
            "labels": {
              "strimzi.io/cluster": "my-cluster"
            }
          },
          "spec": {
            "goals": [
              "CpuCapacityGoal",
              "NetworkInboundCapacityGoal",
              "DiskCapacityGoal",
              "RackAwareGoal",
              "MinTopicLeadersPerBrokerGoal",
              "NetworkOutboundCapacityGoal",
              "ReplicaCapacityGoal"
            ]
          }
        },
        {
          "apiVersion": "kafka.strimzi.io/v1beta2",
          "kind": "KafkaNodePool",
          "metadata": {
            "name": "my-pool",
            "labels": {
              "strimzi.io/cluster": "my-cluster"
            }
          },
          "spec": {
            "replicas": 3,
            "roles": [
              "broker"
            ],
            "storage": {
              "type": "jbod",
              "volumes": [
                {
                  "id": 0,
                  "type": "persistent-claim",
                  "size": "100Gi",
                  "deleteClaim": false
                }
              ]
            }
          }
        }
      ]
    capabilities: Deep Insights
    categories: Streaming & Messaging
    containerImage: docker-private.infra.cloudera.com/cloudera/kafka-operator@sha256:0c1343a3a8973f0e7154e7487054a71a22498e6d86ed2661420d4b138f30aaec
    createdAt: 2024-10-31 11:20:52
    description: Operator for deploying and managing Cloudera Streams Messaging Kafka clusters on OpenShift
    support: Cloudera
    operators.openshift.io/infrastructure-features: |-
      ["disconnected", "proxy", "proxy-aware", "fips"]
    operators.operatorframework.io/internal-objects: |-
      ["strimzipodsets.core.strimzi.io"]
    features.operators.openshift.io/disconnected: "true"
    features.operators.openshift.io/fips-compliant: "true"
    features.operators.openshift.io/proxy-aware: "true"
    features.operators.openshift.io/tls-profiles: "false"
    features.operators.openshift.io/token-auth-aws: "false"
    features.operators.openshift.io/token-auth-azure: "false"
    features.operators.openshift.io/token-auth-gcp: "false"
    operators.openshift.io/valid-subscription: A valid Cloudera Streams Messaging - Kubernetes Operator license is required. Contact a Cloudera account team to learn more.
  labels:
    operatorframework.io/arch.amd64: supported
    operatorframework.io/arch.arm64: supported
    operatorframework.io/arch.s390x: supported
    operatorframework.io/arch.ppc64le: supported
    operatorframework.io/os.linux: supported
  name: cloudera-streams-messaging-kubernetes-operator.1.2.0-b32
  namespace: placeholder
spec:
  MinKubeVersion: 1.23.0
  customresourcedefinitions:
    owned:
    - description: Represents a Kafka cluster
      displayName: Kafka
      kind: Kafka
      name: kafkas.kafka.strimzi.io
      resources:
      - kind: Route
        name: ''
        version: route.openshift.io/v1
      - kind: Service
        name: ''
        version: v1
      - kind: Deployment
        name: ''
        version: v1
      - kind: ReplicaSet
        name: ''
        version: v1
      - kind: Pod
        name: ''
        version: v1
      - kind: ConfigMap
        name: ''
        version: v1
      - kind: Secret
        name: ''
        version: v1
      specDescriptors:
      - description: Kafka version
        displayName: Version
        path: kafka.version
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:text
      - description: The desired number of Kafka brokers.
        displayName: Kafka Brokers
        path: kafka.replicas
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:podCount
      - description: The type of storage used by Kafka brokers
        displayName: Kafka storage
        path: kafka.storage.type
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:select:ephemeral
        - urn:alm:descriptor:com.tectonic.ui:select:persistent-claim
        - urn:alm:descriptor:com.tectonic.ui:select:jbod
      - description: Limits describes the minimum/maximum amount of compute resources required/allowed
        displayName: Kafka Resource Requirements
        path: kafka.resources
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:resourceRequirements
      - description: The desired number of Zookeeper nodes.
        displayName: Zookeeper Nodes
        path: zookeeper.replicas
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:podCount
      - description: The type of storage used by Zookeeper nodes
        displayName: Zookeeper storage
        path: zookeeper.storage.type
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:select:ephemeral
        - urn:alm:descriptor:com.tectonic.ui:select:persistent-claim
        - urn:alm:descriptor:com.tectonic.ui:select:jbod
      - description: Limits describes the minimum/maximum amount of compute resources required/allowed
        displayName: Zookeeper Resource Requirements
        path: zookeeper.resources
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:resourceRequirements
      statusDescriptors:
      - description: Kafka Cluster ID
        displayName: Cluster ID
        path: clusterId
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:text
      - description: Kafka cluster conditions
        displayName: Conditions
        path: conditions
        x-descriptors:
        - urn:alm:descriptor:io.kubernetes.conditions
      version: v1beta2
    - description: Represents a pool of Kafka brokers
      displayName: Kafka Node Pool
      kind: KafkaNodePool
      name: kafkanodepools.kafka.strimzi.io
      resources:
      - kind: Route
        name: ''
        version: route.openshift.io/v1
      - kind: Service
        name: ''
        version: v1
      - kind: Pod
        name: ''
        version: v1
      - kind: ConfigMap
        name: ''
        version: v1
      - kind: Secret
        name: ''
        version: v1
      specDescriptors:
      - description: The desired number of Kafka brokers in this pool.
        displayName: Kafka Brokers
        path: replicas
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:podCount
      - description: The type of storage used by this pool of Kafka nodes
        displayName: Kafka storage
        path: storage.type
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:select:ephemeral
        - urn:alm:descriptor:com.tectonic.ui:select:persistent-claim
        - urn:alm:descriptor:com.tectonic.ui:select:jbod
      - description: Limits describes the minimum/maximum amount of compute resources required/allowed
        displayName: Kafka Resource Requirements
        path: resources
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:resourceRequirements
      statusDescriptors:
      - description: Kafka Cluster ID
        displayName: Cluster ID
        path: clusterId
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:text
      - description: List of node IDs in this Node Pool
        displayName: Node IDs
        path: nodeIds
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:text
      - description: Kafka cluster conditions
        displayName: Conditions
        path: conditions
        x-descriptors:
        - urn:alm:descriptor:io.kubernetes.conditions
      version: v1beta2
    - description: Represents a Kafka Connect cluster
      displayName: Kafka Connect
      kind: KafkaConnect
      name: kafkaconnects.kafka.strimzi.io
      resources:
      - kind: Service
        name: ''
        version: v1
      - kind: Deployment
        name: ''
        version: v1
      - kind: ReplicaSet
        name: ''
        version: v1
      - kind: Pod
        name: ''
        version: v1
      specDescriptors:
      - description: The desired number of Kafka Connect nodes.
        displayName: Connect nodes
        path: replicas
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:podCount
      - description: Kafka Connect version
        displayName: Version
        path: version
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:text
      - description: The address of the bootstrap server
        displayName: Bootstrap server
        path: bootstrapServers
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:text
      - description: Limits describes the minimum/maximum amount of compute resources required/allowed
        displayName: Resource Requirements
        path: resources
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:resourceRequirements
      statusDescriptors:
      - description: Kafka Connect conditions
        displayName: Conditions
        path: conditions
        x-descriptors:
        - urn:alm:descriptor:io.kubernetes.conditions
      version: v1beta2
    - description: Represents a Kafka MirrorMaker cluster
      displayName: Kafka Mirror Maker
      kind: KafkaMirrorMaker
      name: kafkamirrormakers.kafka.strimzi.io
      resources:
      - kind: Deployment
        name: ''
        version: v1
      - kind: ReplicaSet
        name: ''
        version: v1
      - kind: Pod
        name: ''
        version: v1
      specDescriptors:
      - description: The desired number of Kafka MirrorMaker nodes.
        displayName: MirrorMaker nodes
        path: replicas
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:podCount
      - description: Kafka Mirror Maker version
        displayName: Version
        path: version
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:text
      - description: The bootstrap address of the Source cluster
        displayName: Source cluster
        path: consumer.bootstrapServers
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:text
      - description: The bootstrap address of the Target cluster
        displayName: Target cluster
        path: producer.bootstrapServers
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:text
      - description: Expression specifying the topics which should be mirrored
        displayName: Mirrored topics
        path: include
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:text
      - description: Limits describes the minimum/maximum amount of compute resources required/allowed
        displayName: Resource Requirements
        path: resources
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:resourceRequirements
      statusDescriptors:
      - description: Kafka MirrorMaker conditions
        displayName: Conditions
        path: conditions
        x-descriptors:
        - urn:alm:descriptor:io.kubernetes.conditions
      version: v1beta2
    - description: Represents a Kafka Bridge cluster
      displayName: Kafka Bridge
      kind: KafkaBridge
      name: kafkabridges.kafka.strimzi.io
      resources:
      - kind: Deployment
        name: ''
        version: v1
      - kind: ReplicaSet
        name: ''
        version: v1
      - kind: Pod
        name: ''
        version: v1
      - kind: Service
        name: ''
        version: v1
      specDescriptors:
      - description: The desired number of Kafka Bridge nodes.
        displayName: Bridge nodes
        path: replicas
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:podCount
      - description: The bootstrap address of the Kafka cluster
        displayName: Kafka cluster
        path: bootstrapServers
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:text
      - description: The port where the HTTP Bridge is listening
        displayName: HTTP port
        path: http.port
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:number
      - description: Limits describes the minimum/maximum amount of compute resources required/allowed
        displayName: Resource Requirements
        path: resources
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:resourceRequirements
      statusDescriptors:
      - description: Kafka Bridge conditions
        displayName: Conditions
        path: conditions
        x-descriptors:
        - urn:alm:descriptor:io.kubernetes.conditions
      version: v1beta2
    - description: Represents a topic inside a Kafka cluster
      displayName: Kafka Topic
      kind: KafkaTopic
      name: kafkatopics.kafka.strimzi.io
      specDescriptors:
      - description: The number of partitions
        displayName: Partitions
        path: partitions
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:text
      - description: The number of replicas
        displayName: Replication factor
        path: replicas
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:text
      statusDescriptors:
      - description: Kafka topic conditions
        displayName: Conditions
        path: conditions
        x-descriptors:
        - urn:alm:descriptor:io.kubernetes.conditions
      version: v1beta2
    - description: Represents a user inside a Kafka cluster
      displayName: Kafka User
      kind: KafkaUser
      name: kafkausers.kafka.strimzi.io
      resources:
      - kind: Secret
        name: ''
        version: v1
      specDescriptors:
      - description: Authentication type
        displayName: Authentication type
        path: authentication.type
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:select:tls
        - urn:alm:descriptor:com.tectonic.ui:select:scram-sha-512
      - description: Authorization type
        displayName: Authorization type
        path: authorization.type
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:select:simple
      statusDescriptors:
      - description: Kafka user conditions
        displayName: Conditions
        path: conditions
        x-descriptors:
        - urn:alm:descriptor:io.kubernetes.conditions
      version: v1beta2
    - description: Represents a Connector inside a Kafka Connect cluster
      displayName: Kafka Connector
      kind: KafkaConnector
      name: kafkaconnectors.kafka.strimzi.io
      specDescriptors:
      - description: Class of the Kafka Connect connector
        displayName: Class
        path: class
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:text
      - description: Maximum number of tasks used by the connector
        displayName: Max number of tasks
        path: tasksMax
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:text
      statusDescriptors:
      - description: Connector conditions
        displayName: Conditions
        path: conditions
        x-descriptors:
        - urn:alm:descriptor:io.kubernetes.conditions
      version: v1beta2
    - description: Represents a Kafka MirrorMaker 2 cluster
      displayName: Kafka MirrorMaker 2
      kind: KafkaMirrorMaker2
      name: kafkamirrormaker2s.kafka.strimzi.io
      resources:
      - kind: Deployment
        name: ''
        version: v1
      - kind: ReplicaSet
        name: ''
        version: v1
      - kind: Pod
        name: ''
        version: v1
      specDescriptors:
      - description: The desired number of Kafka MirrorMaker 2 nodes.
        displayName: MirrorMaker2 nodes
        path: replicas
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:podCount
      - description: Kafka MirrorMaker 2 version
        displayName: Version
        path: version
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:text
      - description: The Kafka cluster where the underlying Kafka Connect connects
        displayName: Connect cluster
        path: connectCluster
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:text
      - description: Limits describes the minimum/maximum amount of compute resources required/allowed
        displayName: Resource Requirements
        path: resources
        x-descriptors:
        - urn:alm:descriptor:com.tectonic.ui:resourceRequirements
      statusDescriptors:
      - description: Kafka MirrorMaker conditions
        displayName: Conditions
        path: conditions
        x-descriptors:
        - urn:alm:descriptor:io.kubernetes.conditions
      version: v1beta2
    - description: Triggeres rebalance of replicas in a Kafka cluster
      displayName: Kafka Rebalance
      kind: KafkaRebalance
      name: kafkarebalances.kafka.strimzi.io
      resources: []
      specDescriptors:
      - description: Skip hard Cruise Cotnrol goals
        displayName: Skip hard goals
        path: 'skipHardGoalCheck'
        x-descriptors:
        - 'urn:alm:descriptor:com.tectonic.ui:booleanSwitch'
      statusDescriptors:
      - description: Kafka Rebalance conditions
        displayName: Conditions
        path: conditions
        x-descriptors:
        - urn:alm:descriptor:io.kubernetes.conditions
      version: v1beta2
    - description: Internal custom resource used to manage Strimzi pods
      displayName: Strimzi Pod Set
      kind: StrimziPodSet
      name: strimzipodsets.core.strimzi.io
      resources: []
      specDescriptors:
      - description: Selector used to match pods managed by this resource
        displayName: Pod Selector
        path: 'selector'
        x-descriptors:
        - 'urn:alm:descriptor:com.tectonic.ui:selector:core:v1:Pod'
      statusDescriptors:
      - displayName: Pods
        description: Number of desired pods
        path: pods
        x-descriptors:
        - 'urn:alm:descriptor:com.tectonic.ui:podCount'
      - displayName: Ready Pods
        description: Number of pods which are ready
        path: readyPods
        x-descriptors:
        - 'urn:alm:descriptor:com.tectonic.ui:podCount'
      - displayName: Up-to-date Pods
        description: Number of pods which are up-to-date
        path: currentPods
        x-descriptors:
        - 'urn:alm:descriptor:com.tectonic.ui:podCount'
      version: v1beta2
  description: |-
    Cloudera Streams Messaging - Kubernetes Operator allows you to deploy and manage Streams Messaging components as container applications on Kubernetes. It includes several services and components such as Strimzi, Kafka, Cruise Control, and others.

    You can find the documentation at https://docs.cloudera.com/csm-operator.

    Installation prerequisites:
      - Secret 'cloudera-container-repository-credentials' containing valid credentials to docker-private.infra.cloudera.com.
        ```oc create secret docker-registry cloudera-container-repository-credentials --docker-username=<<USERNAME>> --docker-password=<<PASSWORD>> --docker-server=<<DOCKER_SERVER>>```
      - Secret 'csm-op-license' containing a valid license obtained from Cloudera.
        ```oc create secret generic csm-op-license --from-file=license.txt=/path/to/license.txt```
  displayName: Cloudera Streams Messaging - Kubernetes Operator
  icon:
  - base64data: PD94bWwgdmVyc2lvbj0iMS4wIiBlbmNvZGluZz0iVVRGLTgiPz4KPHN2ZyB3aWR0aD0iMTkycHgiIGhlaWdodD0iMTkycHgiIHZpZXdCb3g9IjAgMCAxOTIgMTkyIiB2ZXJzaW9uPSIxLjEiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyIgeG1sbnM6eGxpbms9Imh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmsiPgogICAgPHRpdGxlPmljLWNsb3VkZXJhLWxnPC90aXRsZT4KICAgIDxnIGlkPSJTeW1ib2xzIiBzdHJva2U9Im5vbmUiIHN0cm9rZS13aWR0aD0iMSIgZmlsbD0ibm9uZSIgZmlsbC1ydWxlPSJldmVub2RkIj4KICAgICAgICA8ZyBpZD0ic2VydmljZS1sb2dvcy9jbG91ZGVyYS9jbG91ZGVyYS1sYXJnZSIgZmlsbD0iI0Y5NjcwMiI+CiAgICAgICAgICAgIDxwYXRoIGQ9Ik0xNTQuNjE1ODk0LDE0MS41NDI3MzcgTDE1Ny41ODM4MDMsMTQ0LjQ5NjQxMyBMMTE4LjI1OTUzLDE4My42NTUwOTEgQzExNi4xOTQ4MDYsMTgzLjg3MDM5OCAxMTQuMDgzODczLDE4My45MjY4MzcgMTExLjk3NzE0LDE4NCBMMTExLjk3NzE0LDE4NCBMMTU0LjYxNTg5NCwxNDEuNTQyNzM3IFogTTE0Ny42NDc5MjMsMTM0LjYwNDIxMSBMMTUwLjYxNzkzMywxMzcuNTU5OTc3IEwxMDQuMDc0NDc4LDE4My45MDUzMDcgQzEwMi4yMjE4OTcsMTgzLjgwNDk3IDEwMC4zNzM1MTgsMTgzLjcwMjU0MiA5OC41NTI0NDQsMTgzLjQ4OTMyNiBMOTguNTUyNDQ0LDE4My40ODkzMjYgTDE0Ny42NDc5MjMsMTM0LjYwNDIxMSBaIE0xNDAuNjc5OTUzLDEyNy42NjU2ODUgTDE0My42NDk5NjIsMTMwLjYyMTQ1MiBMOTEuNjEzODc5NSwxODIuNDM1MTU4IEM4OS45OTg2NDc5LDE4Mi4xMTUzMzMgODguNDMxNzI2MiwxODEuNjcyMTc3IDg2Ljg1MDEwMTUsMTgxLjI2NjY0OCBMODYuODUwMTAxNSwxODEuMjY2NjQ4IEwxNDAuNjc5OTUzLDEyNy42NjU2ODUgWiBNMTYxLjU4NDkxNCwxNDguNDgxNDcxIEwxNjQuNTUyODI0LDE1MS40MzcyMzggTDEzNS45MTc2NDUsMTc5Ljk0OTcyMiBDMTMzLjI3MzIwMiwxODAuNzkyMTM2IDEzMC41NzQxNDgsMTgxLjQ5ODY3NyAxMjcuODI4ODg0LDE4Mi4wOTIzMzkgTDEyNy44Mjg4ODQsMTgyLjA5MjMzOSBMMTYxLjU4NDkxNCwxNDguNDgxNDcxIFogTTEyMi43Mzc0MzksMTM3LjU2NTQxMiBMODAuNjU5NTAwNiwxNzkuNDY0NTUgQzc5LjE5MzM5OTYsMTc4Ljk3MTIyNiA3Ny43NDIwMDE3LDE3OC40NDY1NDYgNzYuMzExNjA4LDE3Ny44ODAwNTkgTDc2LjMxMTYwOCwxNzcuODgwMDU5IEwxMTUuMDIwNDU1LDEzOS4zMzgwMzYgQzExNy42NzMyOTksMTM4Ljk3MDEzMyAxMjAuMjU0NzI5LDEzOC4zODQ4MzMgMTIyLjczNzQzOSwxMzcuNTY1NDEyIEwxMjIuNzM3NDM5LDEzNy41NjU0MTIgWiBNMTAxLjMyMjQ5MywxMzkuMDk5MzE3IEMxMDMuMDcyMTUyLDEzOS40MDQ1MDkgMTA0Ljg1NTQxOCwxMzkuNTk0NzMyIDEwNi42NjgwOSwxMzkuNjg4Nzk4IEwxMDYuNjY4MDksMTM5LjY4ODc5OCBMNzAuNzczODIxMSwxNzUuNDI5NzQxIEM2OS40MzU4NDY0LDE3NC43OTAwOTEgNjguMDY2MzY1MywxNzQuMjA4OTcyIDY2Ljc2NjE5ODQsMTczLjUwNjYxMSBMNjYuNzY2MTk4NCwxNzMuNTA2NjExIFogTTE2OC41NTMwOTUsMTU1LjQxODUzNCBMMTcxLjUsMTU4LjM1MzM5NiBDMTY1LjEyNzI5MiwxNjQuNjk5NzI0IDE1Ny43NTI2NzgsMTcwLjAyODA0NiAxNDkuNjgyODIxLDE3NC4yMDg3NjMgTDE0OS42ODI4MjEsMTc0LjIwODc2MyBMMTY4LjU1MzA5NSwxNTUuNDE4NTM0IFogTTkwLjcwMTQ1MjIsMTM1LjgwMDUyMyBDOTIuMDgxNDM1NSwxMzYuNDMxODExIDkzLjQ5NTAyNTcsMTM2Ljk5NjIwOCA5NC45NDY0MjM3LDEzNy40ODUzNTEgTDk0Ljk0NjQyMzcsMTM3LjQ4NTM1MSBMNjEuNzkxMTE3LDE3MC40OTYyODcgQzYwLjU4MTI2ODYsMTY5LjczMzMwNiA1OS4zNzk4MjIsMTY4Ljk2ODIzNSA1OC4yMDk4ODE4LDE2OC4xNTA5MDUgTDU4LjIwOTg4MTgsMTY4LjE1MDkwNSBaIE04Mi4wMzUwNzMsMTMwLjU1MjA1MiBDODMuMTU0NjAyOSwxMzEuNDIxNjQxIDg0LjMxNjE0MTMsMTMyLjIzNjg4IDg1LjUxOTY4ODQsMTMyLjk5NTY4IEw4NS41MTk2ODg0LDEzMi45OTU2OCBMNTMuNjM1MTQyNiwxNjQuNzQxOTQ5IEM1Mi41Mzg3MTc1LDE2My44NjgxNzkgNTEuNDk0ODAzMiwxNjIuOTMzNzg5IDUwLjQ0MjQ4NzEsMTYyLjAwNzc2IEw1MC40NDI0ODcxLDE2Mi4wMDc3NiBaIE03MC4wMTA5NDQ1LDExNi4yMTU1NCBDNzIuMDk0NTcyMywxMjAuMTkxNDAxIDc0Ljc0OTUxNzMsMTIzLjgzMDcxNCA3Ny45MDY0NjU0LDEyNi45NzQ2MTMgTDc3LjkwNjQ2NTQsMTI2Ljk3NDYxMyBMNDYuMzk5OTk3MiwxNTguMzQ2NzA3IEM0My4yNzI0NTUxLDE1NS4yMjk5ODMgNDAuNDUzNjc2NSwxNTEuODIwNjA5IDM3LjgxOTczNTcsMTQ4LjI2NyBMMzcuODE5NzM1NywxNDguMjY3IFogTTY1LjExMzU3OTEsOTQuNTM5MTUzMiBDNjUuMDk0Njc1Miw5NS4wNTMzODEzIDY1LjAzNTg2MzEsOTUuNTU3MTU3NiA2NS4wMzU4NjMxLDk2LjA3NTU2NjQgQzY1LjAzNTg2MzEsMTAxLjIwMTEyNSA2NS45NzI2NTU0LDEwNi4xMDMwMTQgNjcuNjA2NzkwOSwxMTAuNjc2NzE4IEw2Ny42MDY3OTA5LDExMC42NzY3MTggTDM0LjU1MDIwNDUsMTQzLjU4OTQwNiBDMzIuMDY5NTk1MiwxMzkuNzQ5NDE4IDI5Ljg2NDE0MjQsMTM1LjcxNTAyNyAyNy45OTg5NTk1LDEzMS40OTI1MDQgTDI3Ljk5ODk1OTUsMTMxLjQ5MjUwNCBaIE0xMDguOTUzMzU5LDggQzEzMy4zNzkyNzQsOCAxNTUuNDkyNjE0LDE3Ljg2MDIxOTIgMTcxLjUsMzMuNzk3MTA5NCBMMTcxLjUsMzMuNzk3MTA5NCBMMTM5Ljk5MzUzMiw2NS4xNjkyMDM4IEMxMzIuMDQxMjk5LDU3LjI1MDkyNzMgMTIxLjA2MDI0NSw1Mi4zNDQ4NTY4IDEwOC45NTMzNTksNTIuMzQ0ODU2OCBDOTYuODQ0MzczMyw1Mi4zNDQ4NTY4IDg1Ljg2NTQxOTQsNTcuMjUwOTI3MyA3Ny45MTMxODY4LDY1LjE2OTIwMzggQzcyLjQyMjY1OTYsNzAuNjM1NDkwMiA2OC40MjM0Mzg2LDc3LjU2MjkzNyA2Ni40NDQ4MzI0LDg1LjI4MjYyOTUgTDY2LjQ0NDgzMjQsODUuMjgyNjI5NSBMMjUuNzY3ODgxNSwxMjUuNzgzMzE4IEMyNC4wNTgxMzA1LDEyMS4wNDAyOTUgMjIuNzQ1MzYxLDExNi4xMjM3NzMgMjEuODY5NDgxMiwxMTEuMDQyMTEyIEwyMS44Njk0ODEyLDExMS4wNDIxMTIgTDcyLjkyNjc2MzEsNjAuMjA0NjAzMyBMNjguOTQ0MzQ1NSw1Ni4yNDEyODQzIEwyMC45MDMyODI4LDEwNC4wNzI4NTggQzIwLjY2NTkzNDEsMTAxLjQzNjkxNyAyMC41LDk4Ljc3NTg5MSAyMC41LDk2LjA3NTE0ODQgQzIwLjUsOTIuMzUwMTMwMiAyMC44MDY2NjMsODguNzA0NTQ1NyAyMS4yNTYxNTUyLDg1LjEwMDc2ODMgTDIxLjI1NjE1NTIsODUuMTAwNzY4MyBMNTkuNTkzMjI1OCw0Ni45MjY2NDg2IEw1NS42MTA4MDgyLDQyLjk2MTIzOTMgTDIzLjA1ODMyNTIsNzUuMzc2NDIyNCBDMjYuOTMzNjIwOCw1OS4zODEwMDIyIDM1LjEwMDA5NzQsNDUuMDU1Nzc4MSA0Ni40MDY3MTg2LDMzLjc5NzEwOTQgQzYyLjQxNDEwNDksMTcuODYwMjE5MiA4NC41Mjc0NDQ3LDggMTA4Ljk1MzM1OSw4IFoiIGlkPSJjbG91ZGVyYSI+PC9wYXRoPgogICAgICAgIDwvZz4KICAgIDwvZz4KPC9zdmc+
    mediatype: image/svg+xml
  install:
    spec:
      permissions:
      - rules:
        - apiGroups:
          - "rbac.authorization.k8s.io"
          resources:
                # The cluster operator needs to access and manage rolebindings to grant Strimzi components cluster permissions
          - rolebindings
          verbs:
          - get
          - list
          - watch
          - create
          - delete
          - patch
          - update
        - apiGroups:
          - "rbac.authorization.k8s.io"
          resources:
                # The cluster operator needs to access and manage roles to grant the entity operator permissions
          - roles
          verbs:
          - get
          - list
          - watch
          - create
          - delete
          - patch
          - update
        - apiGroups:
          - ""
          resources:
                # The cluster operator needs to access and delete pods, this is to allow it to monitor pod health and coordinate rolling updates
          - pods
                # The cluster operator needs to access and manage service accounts to grant Strimzi components cluster permissions
          - serviceaccounts
                # The cluster operator needs to access and manage config maps for Strimzi components configuration
          - configmaps
                # The cluster operator needs to access and manage services and endpoints to expose Strimzi components to network traffic
          - services
          - endpoints
                # The cluster operator needs to access and manage secrets to handle credentials
                # The entity operator user-operator needs to access and manage secrets to store generated credentials
          - secrets
                # The cluster operator needs to access and manage persistent volume claims to bind them to Strimzi components for persistent data
          - persistentvolumeclaims
          verbs:
          - get
          - list
          - watch
          - create
          - delete
          - patch
          - update
        - apiGroups:
          - "kafka.strimzi.io"
          resources:
                # The Cluster Operator operates the Strimzi custom resources
          - kafkas
          - kafkanodepools
          - kafkaconnects
          - kafkaconnectors
          - kafkamirrormakers
          - kafkabridges
          - kafkamirrormaker2s
          - kafkarebalances
          - kafkatopics
          - kafkausers
          verbs:
          - get
          - list
          - watch
          - create
          - delete
          - patch
          - update
        - apiGroups:
          - "kafka.strimzi.io"
          resources:
                # The Cluster Operator needs to manage the status of the Strimzi custom resources
          - kafkas/status
          - kafkanodepools/status
          - kafkaconnects/status
          - kafkaconnectors/status
          - kafkamirrormakers/status
          - kafkabridges/status
          - kafkamirrormaker2s/status
          - kafkarebalances/status
          - kafkatopics/status
          - kafkausers/status
          verbs:
          - get
          - patch
          - update
        - apiGroups:
          - "core.strimzi.io"
          resources:
                # The cluster operator uses StrimziPodSets to manage the Kafka and ZooKeeper pods
          - strimzipodsets
          verbs:
          - get
          - list
          - watch
          - create
          - delete
          - patch
          - update
        - apiGroups:
          - "core.strimzi.io"
          resources:
                # The Cluster Operator needs to manage the status of the StrimziPodSet custom resource
          - strimzipodsets/status
          verbs:
          - get
          - patch
          - update
        - apiGroups:
          - "apps"
          resources:
                # The cluster operator needs to access and manage deployments to run deployment based Strimzi components
          - deployments
                # The cluster operator needs to access and manage stateful sets to run stateful sets based Strimzi components
          - statefulsets
                # The cluster operator needs to access replica-sets to manage Strimzi components and to determine error states
          - replicasets
          verbs:
          - get
          - list
          - watch
          - create
          - delete
          - patch
          - update
        - apiGroups:
          - "apps"
          resources:
                # The Cluster Operator needs to scale Deployments while migrating Connect and Mirror Maker 2 clusters from Deployments to StrimziPodSets
          - deployments/scale
          verbs:
          - get
          - patch
          - update
        - apiGroups:
          - "events.k8s.io"       # new events api, used by cluster operator
          resources:
          - events
          verbs:
          - create
        - apiGroups:
                # Kafka Connect Build on OpenShift requirement
          - build.openshift.io
          resources:
          - buildconfigs
          - buildconfigs/instantiate
          - builds
          verbs:
          - get
          - list
          - watch
          - create
          - delete
          - patch
          - update
        - apiGroups:
          - networking.k8s.io
          resources:
                # The cluster operator needs to access and manage network policies to lock down communication between Strimzi components
          - networkpolicies
                # The cluster operator needs to access and manage ingresses which allow external access to the services in a cluster
          - ingresses
          verbs:
          - get
          - list
          - watch
          - create
          - delete
          - patch
          - update
        - apiGroups:
          - route.openshift.io
          resources:
                # The cluster operator needs to access and manage routes to expose Strimzi components for external access
          - routes
          - routes/custom-host
          verbs:
          - get
          - list
          - watch
          - create
          - delete
          - patch
          - update
        - apiGroups:
          - image.openshift.io
          resources:
                # The cluster operator needs to verify the image stream when used for Kafka Connect image build
          - imagestreams
          verbs:
          - get
        - apiGroups:
          - policy
          resources:
                # The cluster operator needs to access and manage pod disruption budgets this limits the number of concurrent disruptions
                # that a Strimzi component experiences, allowing for higher availability
          - poddisruptionbudgets
          verbs:
          - get
          - list
          - watch
          - create
          - delete
          - patch
          - update
        - apiGroups:
          - coordination.k8s.io
          resources:
                # The cluster operator needs to access and manage leases for leader election
                # The "create" verb cannot be used with "resourceNames"
          - leases
          verbs:
          - create
        - apiGroups:
          - coordination.k8s.io
          resources:
                # The cluster operator needs to access and manage leases for leader election
          - leases
          resourceNames:
                # The default RBAC files give the operator only access to the Lease resource names strimzi-cluster-operator
                # If you want to use another resource name or resource namespace, you have to configure the RBAC resources accordingly
          - strimzi-cluster-operator
          verbs:
          - get
          - list
          - watch
          - delete
          - patch
          - update
        serviceAccountName: strimzi-cluster-operator
      clusterPermissions:
      - rules:
        - apiGroups:
          - "rbac.authorization.k8s.io"
          resources:
                # The cluster operator needs to create and manage cluster role bindings in the case of an install where a user
                # has specified they want their cluster role bindings generated
          - clusterrolebindings
          verbs:
          - get
          - list
          - watch
          - create
          - delete
          - patch
          - update
        - apiGroups:
          - storage.k8s.io
          resources:
                # The cluster operator requires "get" permissions to view storage class details
                # This is because only a persistent volume of a supported storage class type can be resized
          - storageclasses
          verbs:
          - get
        - apiGroups:
          - ""
          resources:
                # The cluster operator requires "list" permissions to view all nodes in a cluster
                # The listing is used to determine the node addresses when NodePort access is configured
                # These addresses are then exposed in the custom resource states
                # The Kafka Brokers require "get" permissions to view the node they are on
                # This information is used to generate a Rack ID that is used for High Availability configurations
          - nodes
          verbs:
          - get
          - list
        serviceAccountName: strimzi-cluster-operator
      deployments:
      - name: strimzi-cluster-operator
        spec:
          replicas: 1
          selector:
            matchLabels:
              name: strimzi-cluster-operator
              strimzi.io/kind: cluster-operator
          template:
            metadata:
              labels:
                name: strimzi-cluster-operator
                strimzi.io/kind: cluster-operator
            spec:
              serviceAccountName: strimzi-cluster-operator
              volumes:
              - name: strimzi-tmp
                emptyDir:
                  medium: Memory
                  sizeLimit: 1Mi
              - name: co-config-volume
                configMap:
                  name: strimzi-cluster-operator
              - name: csm-op-license
                secret:
                  secretName: csm-op-license
                  optional: false
              containers:
              - name: strimzi-cluster-operator
                image: docker-private.infra.cloudera.com/cloudera/kafka-operator@sha256:0c1343a3a8973f0e7154e7487054a71a22498e6d86ed2661420d4b138f30aaec
                ports:
                - containerPort: 8080
                  name: http
                args:
                - /opt/strimzi/bin/cluster_operator_run.sh
                volumeMounts:
                - name: strimzi-tmp
                  mountPath: /tmp
                - name: co-config-volume
                  mountPath: /opt/strimzi/custom-config/
                - name: csm-op-license
                  mountPath: /opt/strimzi/cloudera-license/
                  readOnly: true
                env:
                - name: STRIMZI_NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.annotations['olm.targetNamespaces']
                - name: STRIMZI_FULL_RECONCILIATION_INTERVAL_MS
                  value: "120000"
                - name: STRIMZI_OPERATION_TIMEOUT_MS
                  value: "300000"
                - name: STRIMZI_DEFAULT_KAFKA_EXPORTER_IMAGE
                  value: docker-private.infra.cloudera.com/cloudera/kafka@sha256:97ff89bbbf548822bbc469fe05af8957aae6f5b159062db481bdaac2f52e5c1c
                - name: STRIMZI_DEFAULT_CRUISE_CONTROL_IMAGE
                  value: docker-private.infra.cloudera.com/cloudera/kafka@sha256:97ff89bbbf548822bbc469fe05af8957aae6f5b159062db481bdaac2f52e5c1c
                - name: STRIMZI_KAFKA_IMAGES
                  value: |
                    3.7.0.1.1=docker-private.infra.cloudera.com/cloudera/kafka:0.43.0.1.2.0-b32-kafka-3.7.0.1.1
                    3.8.0.1.2=docker-private.infra.cloudera.com/cloudera/kafka:0.43.0.1.2.0-b32-kafka-3.8.0.1.2
                - name: STRIMZI_KAFKA_CONNECT_IMAGES
                  value: |
                    3.7.0.1.1=docker-private.infra.cloudera.com/cloudera/kafka:0.43.0.1.2.0-b32-kafka-3.7.0.1.1
                    3.8.0.1.2=docker-private.infra.cloudera.com/cloudera/kafka:0.43.0.1.2.0-b32-kafka-3.8.0.1.2
                - name: STRIMZI_KAFKA_MIRROR_MAKER_IMAGES
                  value: |
                    3.7.0.1.1=docker-private.infra.cloudera.com/cloudera/kafka:0.43.0.1.2.0-b32-kafka-3.7.0.1.1
                    3.8.0.1.2=docker-private.infra.cloudera.com/cloudera/kafka:0.43.0.1.2.0-b32-kafka-3.8.0.1.2
                - name: STRIMZI_KAFKA_MIRROR_MAKER_2_IMAGES
                  value: |
                    3.7.0.1.1=docker-private.infra.cloudera.com/cloudera/kafka:0.43.0.1.2.0-b32-kafka-3.7.0.1.1
                    3.8.0.1.2=docker-private.infra.cloudera.com/cloudera/kafka:0.43.0.1.2.0-b32-kafka-3.8.0.1.2
                - name: STRIMZI_DEFAULT_TOPIC_OPERATOR_IMAGE
                  value: docker-private.infra.cloudera.com/cloudera/kafka-operator@sha256:0c1343a3a8973f0e7154e7487054a71a22498e6d86ed2661420d4b138f30aaec
                - name: STRIMZI_DEFAULT_USER_OPERATOR_IMAGE
                  value: docker-private.infra.cloudera.com/cloudera/kafka-operator@sha256:0c1343a3a8973f0e7154e7487054a71a22498e6d86ed2661420d4b138f30aaec
                - name: STRIMZI_DEFAULT_KAFKA_INIT_IMAGE
                  value: docker-private.infra.cloudera.com/cloudera/kafka-operator@sha256:0c1343a3a8973f0e7154e7487054a71a22498e6d86ed2661420d4b138f30aaec
                - name: STRIMZI_DEFAULT_KANIKO_EXECUTOR_IMAGE
                  value: docker-private.infra.cloudera.com/cloudera/kaniko-executor@sha256:9956499ef8ba48dcb27b3ae02cf8c4d500f3b93b5894872d4b4fcd7646cf1bc6
                - name: STRIMZI_DEFAULT_MAVEN_BUILDER
                  value: docker-private.infra.cloudera.com/cloudera/maven-builder@sha256:33d1f25166b66d7f0dbe30de721ed156948a967b2c2f8c50176920ee9dbf4df6
                - name: STRIMZI_OPERATOR_NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.namespace
                - name: STRIMZI_FEATURE_GATES
                  value: ""
                - name: STRIMZI_LEADER_ELECTION_ENABLED
                  value: "true"
                - name: STRIMZI_LEADER_ELECTION_LEASE_NAME
                  value: "strimzi-cluster-operator"
                - name: STRIMZI_LEADER_ELECTION_LEASE_NAMESPACE
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.namespace
                - name: STRIMZI_LEADER_ELECTION_IDENTITY
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.name
                - name: STRIMZI_IMAGE_PULL_SECRETS
                  value: cloudera-container-repository-credentials
                livenessProbe:
                  httpGet:
                    path: /healthy
                    port: http
                  initialDelaySeconds: 10
                  periodSeconds: 30
                readinessProbe:
                  httpGet:
                    path: /ready
                    port: http
                  initialDelaySeconds: 10
                  periodSeconds: 30
                resources:
                  limits:
                    cpu: 1000m
                    memory: 384Mi
                  requests:
                    cpu: 200m
                    memory: 384Mi
              imagePullSecrets:
              - name: cloudera-container-repository-credentials
    strategy: deployment
  installModes:
  - supported: true
    type: OwnNamespace
  - supported: true
    type: SingleNamespace
  - supported: true
    type: MultiNamespace
  - supported: true
    type: AllNamespaces
  relatedImages:
  - name: kafka-3.7.0.1.1
    image: docker-private.infra.cloudera.com/cloudera/kafka@sha256:645c7d9c2fe298cc203a0834236f41920a5a10eb1f2f94b7ce82b7ffd48150b1
  - name: kafka-3.8.0.1.2
    image: docker-private.infra.cloudera.com/cloudera/kafka@sha256:97ff89bbbf548822bbc469fe05af8957aae6f5b159062db481bdaac2f52e5c1c
  - name: kafka-operator
    image: docker-private.infra.cloudera.com/cloudera/kafka-operator@sha256:0c1343a3a8973f0e7154e7487054a71a22498e6d86ed2661420d4b138f30aaec
  - name: kaniko-executor
    image: docker-private.infra.cloudera.com/cloudera/kaniko-executor@sha256:9956499ef8ba48dcb27b3ae02cf8c4d500f3b93b5894872d4b4fcd7646cf1bc6
  - name: maven-builder
    image: docker-private.infra.cloudera.com/cloudera/maven-builder@sha256:33d1f25166b66d7f0dbe30de721ed156948a967b2c2f8c50176920ee9dbf4df6
  - name: kafka-operator-0c1343a3a8973f0e7154e7487054a71a22498e6d86ed2661420d4b138f30aaec-annotation
    image: docker-private.infra.cloudera.com/cloudera/kafka-operator@sha256:0c1343a3a8973f0e7154e7487054a71a22498e6d86ed2661420d4b138f30aaec
  - name: strimzi-cluster-operator
    image: docker-private.infra.cloudera.com/cloudera/kafka-operator@sha256:0c1343a3a8973f0e7154e7487054a71a22498e6d86ed2661420d4b138f30aaec
  keywords:
  - kafka
  - messaging
  - kafka-connect
  - kafka-streams
  - data-streaming
  - data-streams
  - streaming
  - streams
  labels:
    name: strimzi-cluster-operator
  links:
  - name: Documentation
    url: https://docs.cloudera.com/csm-operator
  maintainers:
  - email: support@cloudera.com
    name: Cloudera
  maturity: stable
  provider:
    name: Cloudera
    url: https://cloudera.com
  selector:
    matchLabels:
      name: strimzi-cluster-operator
  version: 1.2.0-b32

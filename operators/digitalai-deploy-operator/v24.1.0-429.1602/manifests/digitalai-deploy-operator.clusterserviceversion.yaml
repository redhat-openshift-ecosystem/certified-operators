apiVersion: operators.coreos.com/v1alpha1
kind: ClusterServiceVersion
metadata:
  annotations:
    alm-examples: |-
      [
        {
          "apiVersion": "xld.digital.ai/v1alpha1",
          "kind": "DigitalaiDeploy",
          "metadata": {
            "name": "daideploy-minimal"
          },
          "spec": {
            "auth": {
              "adminPassword": "admin"
            },
            "centralConfiguration": {
              "diagnosticMode": {
                "enabled": false
              },
              "replicaCount": 1
            },
            "haproxy-ingress": {
              "install": false
            },
            "hooks": {
              "genSelfSigned": {
                "enabled": false
              },
              "getLicense": {
                "enabled": true
              }
            },
            "ingress": {
              "enabled": false
            },
            "k8sSetup": {
              "platform": "Openshift"
            },
            "keystore": {
              "keystore": "zs7OzgAAAAIAAAABAAAAAwAWZGVwbG95aXQtcGFzc3N3b3JkLWtleQAAAY66C46srO0ABXNyADNjb20uc3VuLmNyeXB0by5wcm92aWRlci5TZWFsZWRPYmplY3RGb3JLZXlQcm90ZWN0b3LNV8pZ5zC7UwIAAHhyABlqYXZheC5jcnlwdG8uU2VhbGVkT2JqZWN0PjY9psO3VHACAARbAA1lbmNvZGVkUGFyYW1zdAACW0JbABBlbmNyeXB0ZWRDb250ZW50cQB+AAJMAAlwYXJhbXNBbGd0ABJMamF2YS9sYW5nL1N0cmluZztMAAdzZWFsQWxncQB+AAN4cHVyAAJbQqzzF/gGCFTgAgAAeHAAAAARMA8ECPqEw2Wp+c6yAgMDDUB1cQB+AAUAAACQFrl6s2pnsB+GJD8vlN3Y0SItmbtfPy6n2A5qREEJWWLN9OYLu7BokScBMyFChFjIhQGwCpjMP4j+VLCgpW6GKREmYHQgKjWqWn7A+DMF9eT68ygZAD+ceIZB5buvsGM2LCYzyHJcmtujv+hpqevoTgOKKMd4U3wVV96n4B5QbkVXHYtGZWbWxk5gCHLoWhV5dAAWUEJFV2l0aE1ENUFuZFRyaXBsZURFU3QAFlBCRVdpdGhNRDVBbmRUcmlwbGVERVP+nQgVx6wurZB9hBxaIkk/6EEAPQ==",
              "passphrase": "test1234"
            },
            "licenseAcceptEula": true,
            "master": {
              "persistence": {
                "size": "1Gi",
                "storageClass": ""
              },
              "replicaCount": 1
            },
            "nginx-ingress-controller": {
              "install": false
            },
            "postgresql": {
              "install": true,
              "primary": {
                "persistence": {
                  "size": "1Gi",
                  "storageClass": ""
                }
              }
            },
            "rabbitmq": {
              "install": true,
              "persistence": {
                "size": "1Gi",
                "storageClass": ""
              },
              "replicaCount": 1
            },
            "route": {
              "annotations": {
                "haproxy.router.openshift.io/cookie_name": "SESSION_XLD",
                "haproxy.router.openshift.io/disable_cookies": "false",
                "haproxy.router.openshift.io/rewrite-target": "/"
              },
              "enabled": false,
              "hostname": "\u003cmandatory-deploy-hostname\u003e",
              "path": "/",
              "tls": {
                "enabled": true,
                "termination": "edge"
              }
            },
            "worker": {
              "persistence": {
                "size": "1Gi",
                "storageClass": ""
              },
              "replicaCount": 1
            }
          }
        },
        {
          "apiVersion": "xld.digital.ai/v1alpha1",
          "kind": "DigitalaiDeploy",
          "metadata": {
            "name": "daideploy-placeholders"
          },
          "spec": {
            "auth": {
              "adminPassword": "\u003cmandatory-admin-password\u003e"
            },
            "centralConfiguration": {
              "diagnosticMode": {
                "enabled": false
              },
              "replicaCount": 1
            },
            "external": {
              "db": {
                "enabled": false,
                "main": {
                  "maxPoolSize": 10,
                  "password": "\u003cxld-password\u003e",
                  "url": "jdbc:postgresql://\u003cxld-db-host\u003e:5432/\u003cxld-database-name\u003e",
                  "username": "\u003cxld-username\u003e"
                },
                "report": {
                  "maxPoolSize": 10,
                  "password": "\u003cxld-report-password\u003e",
                  "url": "jdbc:postgresql://\u003cxld-report-db-host\u003e:5432/\u003cxld-report-database-name\u003e",
                  "username": "\u003cxld-report-username\u003e"
                }
              },
              "mq": {
                "driverClassName": "\u003cdriver-class-name\u003e",
                "enabled": false,
                "password": "\u003cpassword\u003e",
                "queueName": "\u003cqueue-name\u003e",
                "queueType": "\u003cclassic-or-quorum\u003e",
                "url": "\u003cqueue-url\u003e",
                "username": "\u003cusername\u003e"
              }
            },
            "haproxy-ingress": {
              "install": false
            },
            "hooks": {
              "genSelfSigned": {
                "enabled": false
              },
              "getLicense": {
                "enabled": true
              }
            },
            "ingress": {
              "enabled": false
            },
            "k8sSetup": {
              "platform": "Openshift"
            },
            "keystore": {
              "keystore": "\u003cmandatory-enter base64 encoded keystore\u003e",
              "passphrase": "\u003cmandatory-keystore-passphrase\u003e"
            },
            "license": "\u003clicense\u003e",
            "licenseAcceptEula": true,
            "master": {
              "diagnosticMode": {
                "enabled": false
              },
              "persistence": {
                "accessModes": [
                  "ReadWriteOnce"
                ],
                "size": "\u003cdeploy-master-storage-size\u003e",
                "storageClass": "\u003cmandatory-deploy-storage-class-rwo\u003e"
              },
              "replicaCount": "\u003cdeploy-master-replica-count\u003e",
              "volumePermissions": {
                "enabled": false
              }
            },
            "nginx-ingress-controller": {
              "install": false
            },
            "oidc": {
              "accessTokenUri": "",
              "clientId": "",
              "clientSecret": "",
              "emailClaim": "",
              "enabled": false,
              "fullNameClaim": "",
              "issuer": "",
              "keyRetrievalUri": "",
              "logoutUri": "",
              "postLogoutRedirectUri": "",
              "redirectUri": "",
              "rolesClaimName": "",
              "scopes": "[\"openid\"]",
              "userAuthorizationUri": "",
              "userNameClaimName": ""
            },
            "postgresql": {
              "install": true,
              "primary": {
                "persistence": {
                  "size": "\u003cpostgresql-storage-size\u003e",
                  "storageClass": "\u003cpostgresql-storage-class-rwo\u003e"
                }
              },
              "securityContext": {
                "enabled": true,
                "fsGroup": 1001
              }
            },
            "rabbitmq": {
              "install": true,
              "persistence": {
                "size": "\u003crabbitmq-storage-size\u003e",
                "storageClass": "\u003crabbitmq-storage-class-rwo\u003e"
              },
              "podSecurityContext": {
                "enabled": true,
                "fsGroup": 1001,
                "runAsUser": 1001
              },
              "replicaCount": "\u003crabbitmq-replica-count\u003e",
              "securityContext": {
                "enabled": true,
                "fsGroup": 1001
              },
              "volumePermissions": {
                "enabled": true
              }
            },
            "route": {
              "annotations": {
                "haproxy.router.openshift.io/cookie_name": "SESSION_XLD",
                "haproxy.router.openshift.io/disable_cookies": "false",
                "haproxy.router.openshift.io/rewrite-target": "/"
              },
              "enabled": true,
              "hostname": "\u003cmandatory-deploy-hostname\u003e",
              "path": "/",
              "tls": {
                "enabled": true,
                "termination": "edge"
              }
            },
            "ssl": {
              "enabled": false,
              "keystore": "",
              "keystoreKeypassword": "",
              "keystorePassword": "",
              "keystoreType": ""
            },
            "worker": {
              "diagnosticMode": {
                "enabled": false
              },
              "persistence": {
                "accessModes": [
                  "ReadWriteOnce"
                ],
                "size": "\u003cdeploy-worker-storage-size\u003e",
                "storageClass": "\u003cmandatory-deploy-storage-class-rwo\u003e"
              },
              "replicaCount": "\u003cdeploy-worker-replica-count\u003e",
              "volumePermissions": {
                "enabled": false
              }
            }
          }
        },
        {
          "apiVersion": "xld.digital.ai/v1alpha1",
          "kind": "DigitalaiDeploy",
          "metadata": {
            "name": "digitalaideploy-sample"
          },
          "spec": {
            "appContextRoot": "/",
            "auth": {
              "adminPassword": null
            },
            "busyBox": {
              "image": {
                "pullPolicy": "IfNotPresent",
                "pullSecrets": [],
                "registry": "docker.io",
                "repository": "library/busybox",
                "tag": "stable"
              }
            },
            "centralConfiguration": {
              "affinity": {},
              "args": [
                "--",
                "/opt/xebialabs/central-configuration-server/bin/run-in-operator.sh"
              ],
              "command": [
                "/opt/xebialabs/tini"
              ],
              "configuration": {
                "bin_run-in-operator-sh": {
                  "content": "#!/bin/bash\n\necho \"Delete empty files to replace them with latest configuration\"\nfind /opt/xebialabs/central-configuration-server/centralConfiguration -maxdepth 1 -type f -empty -print -delete\n{{- if .Values.oidc.enabled }}\nif [[ ${GENERATE_XL_CONFIG,,} != \"true\" ]]; then\n  echo \"Not generating deploy-oidc.yaml as GENERATE_XL_CONFIG != 'true'\"\nelif [[ -e ${APP_HOME}/central-conf/deploy-oidc.yaml.template \u0026\u0026 ! -f \"${APP_HOME}/centralConfiguration/deploy-oidc.yaml\" ]]; then\n  echo \"Generate configuration file deploy-oidc.yaml from environment parameters\"\n  sed -e \"s#\\${XL_DB_DRIVER}#${XL_DB_DRIVER}#g\" \\\n  -e \"s#\\${HOSTNAME_SUFFIX}#${HOSTNAME_SUFFIX}#g\" \\\n  -e \"s#\\${DNS_RESOLVER}#${DNS_RESOLVER}#g\" \\\n  -e \"s#\\${HOSTNAME}#${HOSTNAME}#g\" \\\n  -e \"s#\\${XLD_TASK_QUEUE_DRIVER_CLASS_NAME}#${JMS_DRIVER_CLASS_NAME}#g\" \\\n  -e \"s#\\${XL_CLUSTER_MODE}#${XL_CLUSTER_MODE}#g\" \\\n  -e \"s#\\${XL_DB_URL}#${XL_DB_URL}#g\" \\\n  -e \"s#\\${XL_DB_USERNAME}#${XL_DB_USERNAME}#g\" \\\n  -e \"s#\\${XL_DB_PASSWORD}#${XL_DB_PASSWORD}#g\" \\\n  -e \"s#\\${XL_DB_MAX_POOL_SIZE}#${XL_DB_MAX_POOL_SIZE}#g\" \\\n  -e \"s#\\${XL_REPORT_DB_URL}#${XL_REPORT_DB_URL}#g\" \\\n  -e \"s#\\${XL_REPORT_DB_USERNAME}#${XL_REPORT_DB_USERNAME}#g\" \\\n  -e \"s#\\${XL_REPORT_DB_PASSWORD}#${XL_REPORT_DB_PASSWORD}#g\" \\\n  -e \"s#\\${XL_REPORT_DB_MAX_POOL_SIZE}#${XL_REPORT_DB_MAX_POOL_SIZE}#g\" \\\n  -e \"s#\\${XL_METRICS_ENABLED}#${XL_METRICS_ENABLED}#g\" \\\n  -e \"s#\\${XLD_IN_PROCESS}#${XLD_IN_PROCESS}#g\" \\\n  -e \"s#\\${XLD_TASK_QUEUE_NAME}#${XLD_TASK_QUEUE_NAME}#g\" \\\n  -e \"s#\\${XLD_TASK_QUEUE_IN_PROCESS_MAX_DISK_USAGE}#${XLD_TASK_QUEUE_IN_PROCESS_MAX_DISK_USAGE}#g\" \\\n  -e \"s#\\${XLD_TASK_QUEUE_IN_PROCESS_SHUTDOWN_TIMEOUT}#${XLD_TASK_QUEUE_IN_PROCESS_SHUTDOWN_TIMEOUT}#g\" \\\n  -e \"s#\\${XLD_TASK_QUEUE_DRIVER_CLASS_NAME}#${XLD_TASK_QUEUE_DRIVER_CLASS_NAME}#g\" \\\n  -e \"s#\\${XLD_TASK_QUEUE_URL}#${XLD_TASK_QUEUE_URL}#g\" \\\n  -e \"s#\\${XLD_TASK_QUEUE_USERNAME}#${XLD_TASK_QUEUE_USERNAME}#g\" \\\n  -e \"s#\\${XLD_TASK_QUEUE_PASSWORD}#${XLD_TASK_QUEUE_PASSWORD}#g\" \\\n  -e \"s#\\${HOSTNAME_SUFFIX}#${HOSTNAME_SUFFIX}#g\" \\\n  -e \"s#\\${XL_LICENSE_KIND}#${XL_LICENSE_KIND}#g\" \\\n  -e \"s#\\${GENERATE_XL_CONFIG}#${GENERATE_XL_CONFIG}#g\" \\\n  -e \"s#\\${USE_IP_AS_HOSTNAME}#${USE_IP_AS_HOSTNAME}#g\" \\\n  -e \"s#\\${ENABLE_SATELLITE}#${ENABLE_SATELLITE}#g\" \\\n  -e \"s#\\${CENTRAL_CONFIG_ENCRYPT_KEY}#${CENTRAL_CONFIG_ENCRYPT_KEY}#g\" \\\n  -e \"s#\\${USE_CACHE}#${USE_CACHE}#g\" \\\n  -e \"s#\\${OIDC_CLIENT_ID}#${OIDC_CLIENT_ID}#g\" \\\n  -e \"s#\\${OIDC_CLIENT_SECRET}#${OIDC_CLIENT_SECRET}#g\" \\\n  -e \"s#\\${OIDC_CLIENT_AUTH_JWT_KEYSTORE_PASSWORD}#${OIDC_CLIENT_AUTH_JWT_KEYSTORE_PASSWORD}#g\" \\\n  -e \"s#\\${OIDC_CLIENT_AUTH_JWT_KEY_PASSWORD}#${OIDC_CLIENT_AUTH_JWT_KEY_PASSWORD}#g\" \\\n  -e \"s#\\${OIDC_ACCESS_TOKEN_SECRET_KEY}#${OIDC_ACCESS_TOKEN_SECRET_KEY}#g\" \\\n  ${APP_HOME}/central-conf/deploy-oidc.yaml.template \u003e ${APP_HOME}/centralConfiguration/deploy-oidc.yaml\nfi\n{{- end }}\n\n# copy central-conf files\ncd ${APP_HOME}/central-conf\necho \"... Copying default centralConfiguration from ${APP_HOME}/central-conf\"\nfor f in *; do\n  if [[ $f == *.template ]]; then\n    continue\n  fi\n  if [ -f ${APP_HOME}/centralConfiguration/$f ]; then\n    echo \"... Not copying $f because it already exists in the centralConfiguration directory\"\n  else\n    echo \"... Copying $f to the centralConfiguration directory\"\n    cp -R $f ${APP_HOME}/centralConfiguration/\n  fi\ndone\ncd ${APP_HOME}\n\nexec /opt/xebialabs/central-configuration-server/bin/run-in-container.sh $@\n",
                  "mode": 493,
                  "path": "bin/run-in-operator.sh"
                },
                "central-conf_deploy-oidc-yaml-template": {
                  "content": "deploy.security:\n  {{- if .Values.oidc.enabled }}\n  auth:\n    providers:\n      oidc:\n        clientId: \"${OIDC_CLIENT_ID}\"\n        clientSecret: \"${OIDC_CLIENT_SECRET}\"\n        {{- if .Values.oidc.clientAuthMethod }}\n        clientAuthMethod: {{ .Values.oidc.clientAuthMethod | quote }}\n        {{- end }}\n        {{- if .Values.oidc.clientAuthJwt.enable }}\n        clientAuthJwt:\n          jwsAlg: {{ .Values.oidc.clientAuthJwt.jwsAlg | quote }}\n          tokenKeyId: {{ .Values.oidc.clientAuthJwt.tokenKeyId | quote }}\n          {{- if .Values.oidc.clientAuthJwt.keyStore.enable }}\n          keyStore:\n            path: {{ .Values.oidc.clientAuthJwt.keyStore.path | quote }}\n            password: \"${OIDC_CLIENT_AUTH_JWT_KEYSTORE_PASSWORD}\"\n            type: {{ .Values.oidc.clientAuthJwt.keyStore.type | quote }}\n          {{- end }}\n          {{- if .Values.oidc.clientAuthJwt.key.enable }}\n          key:\n            alias: {{ .Values.oidc.clientAuthJwt.key.alias | quote }}\n            password: \"${OIDC_CLIENT_AUTH_JWT_KEY_PASSWORD}\"\n          {{- end }}\n        {{- end }}\n        issuer: {{ .Values.oidc.issuer | quote }}\n        keyRetrievalUri: {{ .Values.oidc.keyRetrievalUri | quote }}\n        accessTokenUri: {{ .Values.oidc.accessTokenUri | quote }}\n        userAuthorizationUri: {{ .Values.oidc.userAuthorizationUri | quote }}\n        logoutUri: {{ .Values.oidc.logoutUri | quote }}\n        redirectUri: {{ .Values.oidc.redirectUri | quote }}\n        postLogoutRedirectUri: {{ .Values.oidc.postLogoutRedirectUri | quote }}\n        rolesClaimName: {{ .Values.oidc.rolesClaimName | quote }}\n        userNameClaimName: {{ .Values.oidc.userNameClaimName | quote }}\n        {{- if .Values.oidc.scopes }}\n        scopes: {{ .Values.oidc.scopes }}\n        {{- end }}\n        {{- if .Values.oidc.idTokenJWSAlg }}\n        idTokenJWSAlg: {{ .Values.oidc.idTokenJWSAlg | quote }}\n        {{- end }}\n        {{- if .Values.oidc.accessToken.enable }}\n        access-token:\n          {{- if .Values.oidc.accessToken.issuer }}\n          issuer: {{ .Values.oidc.accessToken.issuer | quote }}\n          {{- end }}\n          {{- if .Values.oidc.accessToken.audience }}\n          audience: {{ .Values.oidc.accessToken.audience | quote }}\n          {{- end }}\n          {{- if .Values.oidc.accessToken.keyRetrievalUri }}\n          keyRetrievalUri: {{ .Values.oidc.accessToken.keyRetrievalUri | quote }}\n          {{- end }}\n          {{- if .Values.oidc.accessToken.jwsAlg }}\n          jwsAlg: {{ .Values.oidc.accessToken.jwsAlg | quote }}\n          {{- end }}\n          {{- if .Values.oidc.accessToken.secretKey }}\n          secretKey: \"${OIDC_ACCESS_TOKEN_SECRET_KEY}\"\n          {{- end }}\n        {{- end }}\n        loginMethodDescription: {{ default \"External login (OpenID Connect)\" .Values.oidc.loginMethodDescription | quote }}\n        {{- if .Values.oidc.proxyHost }}\n        proxyHost: {{ .Values.oidc.proxyHost | quote }}\n        {{- end }}\n        {{- if .Values.oidc.proxyPort }}\n        proxyPort: {{ .Values.oidc.proxyPort | quote }}\n        {{- end }}\n  {{- end }}\n",
                  "mode": 432,
                  "path": "central-conf/deploy-oidc.yaml.template"
                },
                "central-conf_deploy-server-yaml-template": {
                  "content": "deploy.server:\n  bind-hostname: 0.0.0.0\n  bind-port: {{ .Values.master.containerPorts.deployPekko }}\n  license:\n    daysBeforeWarning: 10\n  {{- if .Values.oidc.enabled }}    \n  security:\n    auth:\n      provider: \"oidc\"\n  {{- end }}\npekko:\n  io:\n    dns:\n      resolver: \"${DNS_RESOLVER}\"\n  # loggers:\n  #  - \"org.apache.pekko.event.slf4j.Slf4jLogger\"\n  loglevel: \"INFO\"\n",
                  "mode": 432,
                  "path": "central-conf/deploy-server.yaml.template"
                }
              },
              "containerPorts": {
                "ccHttp": 8888,
                "ccHttps": 8843
              },
              "containerSecurityContext": {
                "enabled": true,
                "runAsNonRoot": true,
                "runAsUser": 10001
              },
              "debugMode": {
                "enabled": false,
                "remoteJvmParams": "{{- if .Values.centralConfiguration.debugMode.enabled }} -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:8001{{- end }}"
              },
              "diagnosticMode": {
                "args": [
                  "--",
                  "sleep",
                  "infinity"
                ],
                "command": [
                  "/opt/xebialabs/tini"
                ],
                "enabled": false
              },
              "dnsConfig": {},
              "dnsPolicy": "",
              "encryptKey": null,
              "extraConfiguration": {},
              "extraContainerPorts": [],
              "extraEnvVars": [],
              "extraEnvVarsCM": "",
              "extraEnvVarsSecret": "",
              "extraSecrets": {},
              "extraSecretsPrependReleaseName": false,
              "extraVolumeMounts": [],
              "extraVolumes": [],
              "health": {
                "enabled": true,
                "periodScans": 10,
                "probeFailureThreshold": 12,
                "probesLivenessTimeout": 20,
                "probesReadinessTimeout": 20
              },
              "hostAliases": [],
              "image": {
                "pullPolicy": "IfNotPresent",
                "pullSecrets": [],
                "registry": "docker.io",
                "repository": "xebialabsunsupported/central-configuration",
                "tag": "{{ .Chart.AppVersion }}"
              },
              "initContainers": [],
              "jvmArgs": "",
              "lifecycleHooks": {},
              "logback": {
                "globalLoggingLevel": "info",
                "scanEnabled": true,
                "scanPeriod": "30 seconds"
              },
              "migrateFromEmbedded": false,
              "nodeAffinityPreset": {
                "key": "",
                "type": "",
                "values": []
              },
              "nodeSelector": {},
              "overrideName": "",
              "pdb": {
                "create": false,
                "maxUnavailable": "",
                "minAvailable": 1
              },
              "podAffinityPreset": "",
              "podAnnotations": {},
              "podAntiAffinityPreset": "soft",
              "podLabels": {
                "app.kubernetes.io/component": "centralConfiguration"
              },
              "podManagementPolicy": "OrderedReady",
              "podSecurityContext": {
                "enabled": true,
                "fsGroup": 10001,
                "runAsGroup": 10001,
                "runAsUser": 10001
              },
              "priorityClassName": "",
              "replicaCount": 1,
              "resources": {
                "limits": {},
                "requests": {}
              },
              "schedulerName": "",
              "service": {
                "annotations": {},
                "clusterIP": "",
                "externalIPs": [],
                "externalTrafficPolicy": "Cluster",
                "extraPorts": [],
                "labels": {
                  "app.kubernetes.io/component": "centralConfiguration"
                },
                "loadBalancerIP": "",
                "loadBalancerSourceRanges": [],
                "nodePorts": {
                  "ccHttp": "",
                  "ccHttps": ""
                },
                "portEnabled": true,
                "portNames": {
                  "ccHttp": "deploy-http-cc",
                  "ccHttps": "deploy-https-cc"
                },
                "ports": {
                  "ccHttp": 8888,
                  "ccHttps": 8843
                },
                "sessionAffinity": "None",
                "sessionAffinityConfig": {},
                "type": "ClusterIP"
              },
              "sidecars": [],
              "ssl": {
                "enabled": false,
                "keystore": {
                  "valueFrom": {
                    "secretKeyRef": {
                      "key": "keystore.{{ .Values.ssl.keystoreType }}",
                      "name": "{{ include \"common.tplvalues.render\" ( dict \"value\" .Values.hooks.genSelfSigned.name \"context\" $ ) }}"
                    }
                  }
                },
                "keystoreKeypassword": "changeme",
                "keystorePassword": "changeme",
                "keystoreType": "pkcs12"
              },
              "statefulsetAnnotations": {},
              "statefulsetLabels": {
                "app.kubernetes.io/component": "centralConfiguration"
              },
              "terminationGracePeriodSeconds": 10,
              "tolerations": [],
              "topologySpreadConstraints": [],
              "updateStrategy": {
                "type": "RollingUpdate"
              },
              "useIpAsHostname": false
            },
            "clusterDomain": "cluster.local",
            "clusterMode": "full",
            "commonAnnotations": {},
            "commonLabels": {},
            "external": {
              "db": {
                "enabled": false,
                "main": {
                  "maxPoolSize": "",
                  "password": null,
                  "url": "",
                  "username": null
                },
                "report": {
                  "maxPoolSize": "",
                  "password": null,
                  "url": "",
                  "username": null
                }
              },
              "mq": {
                "driverClassName": "",
                "enabled": false,
                "password": null,
                "queueName": "",
                "queueType": "classic",
                "url": "",
                "username": null
              }
            },
            "externalCentralConfig": true,
            "extraDeploy": [],
            "fullnameOverride": "",
            "generateXlConfig": true,
            "global": {
              "imagePullSecrets": [],
              "imageRegistry": "",
              "postgresql": {
                "service": {
                  "ports": {
                    "postgresql": ""
                  }
                }
              },
              "storageClass": ""
            },
            "haproxy-ingress": {
              "controller": {
                "ingressClass": "haproxy-daid",
                "service": {
                  "type": "LoadBalancer"
                }
              },
              "install": false
            },
            "hooks": {
              "genSelfSigned": {
                "configuration": {
                  "bin_gen-self-signed": {
                    "content": "#!/bin/bash\n\necho \"Generating deploy self-signed cert\"\nHOSTNAME=\"{{- include \"deploy.hostname\" . -}}\"\nSTOREPASS=\"{{- .Values.ssl.keystorePassword -}}\"\nKEYPASS=\"{{- .Values.ssl.keystoreKeypassword -}}\"\nKEYTYPE=\"{{- .Values.ssl.keystoreType -}}\"\nkeytool -genkey -keyalg RSA -alias dai-deploy -keystore conf/keystore.$KEYTYPE -validity 365 -keysize 2048 -storepass \"$STOREPASS\" -storetype \"$KEYTYPE\" -keypass \"$KEYPASS\" \\\n  -dname \"CN=$HOSTNAME,OU=,O=Digital.ai Deploy,L=,ST=,C=\" \\\n  -ext \"SAN=DNS:{{- include \"common.names.fullname\" . -}}.local\"\nkeytool -export -alias dai-deploy -keystore conf/keystore.$KEYTYPE -rfc -file conf/public.cert -storepass \"$STOREPASS\" -storetype \"$KEYTYPE\" -keypass \"$KEYPASS\"\n",
                    "mode": 493,
                    "path": "bin/gen-self-signed.sh"
                  },
                  "bin_install-self-signed": {
                    "content": "#!/bin/bash\n\nKEYSTORE_FILE_PATH=\"/opt/xebialabs/xl-deploy-server/conf/keystore.{{- .Values.ssl.keystoreType -}}\"\nCERT_FILE_PATH=\"/opt/xebialabs/xl-deploy-server/conf/public.cert\"\nkubectl create secret generic {{ include \"common.tplvalues.render\" ( dict \"value\" $.Values.hooks.genSelfSigned.name \"context\" $ ) }} --from-file=$KEYSTORE_FILE_PATH --from-file=$CERT_FILE_PATH\n",
                    "mode": 493,
                    "path": "bin/install-self-signed.sh"
                  }
                },
                "deletePolicy": "before-hook-creation,hook-succeeded",
                "enabled": false,
                "genCommand": [
                  "/opt/xebialabs/xl-deploy-server/bin/gen-self-signed.sh"
                ],
                "image": {
                  "pullPolicy": "IfNotPresent",
                  "pullSecrets": [],
                  "registry": "docker.io",
                  "repository": "bitnami/kubectl",
                  "tag": "1.28.7-debian-12-r3"
                },
                "installCommand": [
                  "/opt/xebialabs/xl-deploy-server/bin/install-self-signed.sh"
                ],
                "name": "{{ include \"common.names.fullname\" . }}-self-signed"
              },
              "getLicense": {
                "configuration": {
                  "bin_get-license": {
                    "content": "#!/bin/bash\n\necho \"Requesting unregistered license\"\nSERVER_PATH_PART=https://download.xebialabs.com\necho -e $(curl -X POST \"${SERVER_PATH_PART}/api/unregistered/xl-deploy\" | jq --raw-output .license) \u003e ${APP_HOME}/conf/deployit-license.lic\nfile_size=$(stat -c%s \"${APP_HOME}/conf/deployit-license.lic\")\nif [ \"$file_size\" -lt 10 ]; then\n  echo \"License file is NOT valid\"\n  exit 1\nfi\n",
                    "mode": 493,
                    "path": "bin/get-license.sh"
                  },
                  "bin_install-license": {
                    "content": "#!/bin/bash\n\nFILE_PATH=\"/opt/xebialabs/xl-deploy-server/conf/deployit-license.lic\"\nkubectl create secret generic {{ include \"common.tplvalues.render\" ( dict \"value\" $.Values.hooks.getLicense.name \"context\" $ ) }} --from-file=$FILE_PATH\n",
                    "mode": 493,
                    "path": "bin/install-license.sh"
                  }
                },
                "deletePolicy": "before-hook-creation,hook-succeeded",
                "enabled": true,
                "getCommand": [
                  "/opt/xebialabs/xl-deploy-server/bin/get-license.sh"
                ],
                "image": {
                  "pullPolicy": "IfNotPresent",
                  "pullSecrets": [],
                  "registry": "docker.io",
                  "repository": "bitnami/kubectl",
                  "tag": "1.28.7-debian-12-r3"
                },
                "installCommand": [
                  "/opt/xebialabs/xl-deploy-server/bin/install-license.sh"
                ],
                "name": "{{ include \"common.names.fullname\" . }}-license"
              }
            },
            "ingress": {
              "annotations": null,
              "enabled": false,
              "extraHosts": [],
              "extraPaths": [],
              "extraRules": [],
              "extraTls": [],
              "hostname": "",
              "ingressClassName": "",
              "path": "/",
              "pathType": "ImplementationSpecific",
              "secrets": [],
              "selfSigned": false,
              "tls": false
            },
            "k8sSetup": {
              "platform": "PlainK8s",
              "validateValues": true
            },
            "keystore": {
              "keystore": null,
              "passphrase": null
            },
            "kubeVersion": "",
            "license": null,
            "licenseAcceptEula": false,
            "master": {
              "affinity": {},
              "args": [
                "--",
                "/opt/xebialabs/xl-deploy-server/bin/run-in-operator.sh"
              ],
              "clusterNodeHostnameSuffix": ".{{ include \"deploy.names.master\" $ }}.{{ include \"common.names.namespace\" . }}.svc.cluster.local",
              "command": [
                "/opt/xebialabs/tini"
              ],
              "configuration": {
                "bin_run-in-operator-sh": {
                  "content": "#!/bin/bash\n\n{{- if .Values.master.podServiceTemplate.enabled }}\nPOD_NUMBER=$(echo $POD_NAME | grep -Eo \"[0-9]+$\")\n{{- if contains .Values.master.podServiceTemplate.serviceMode \"SingleHostname;MultiService\" }}\nexport SERVER_PORT=$(echo $SERVER_PORT+$POD_NUMBER | bc)\n{{- end }}\n{{- if or .Values.master.podServiceTemplate.overrideHostname .Values.master.podServiceTemplate.overrideHostnames }}\nallMasters=(\n{{- range $podNumber := untilStep 0 (int .Values.master.replicaCount) 1 }}\n{{- $newValues := merge (dict \"podNumber\" $podNumber) $ }}\n{{- $masterHostname := include \"deploy.masterHostname\" $newValues }}\n\"{{ $masterHostname }}\"\n{{- end }}\n)\nexport OVERRIDE_HOSTNAME=$(echo ${allMasters[$POD_NUMBER]})\necho \"Using master hostname: $OVERRIDE_HOSTNAME\"\n{{- end }}\n{{- end }}\necho \"Using master port: $SERVER_PORT\"\nexec /opt/xebialabs/xl-deploy-server/bin/run-in-container.sh $@\n",
                  "mode": 493,
                  "path": "bin/run-in-operator.sh"
                }
              },
              "containerPorts": {
                "deployClusterPekko": 25520,
                "deployHttp": 4516,
                "deployHttps": 4517,
                "deployJmxExporter": 9100,
                "deployPekko": 8180
              },
              "containerSecurityContext": {
                "enabled": true,
                "runAsNonRoot": true,
                "runAsUser": 10001
              },
              "debugMode": {
                "enabled": false,
                "remoteJvmParams": "{{- if .Values.master.debugMode.enabled }} -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:8001{{- end }}"
              },
              "diagnosticMode": {
                "args": [
                  "--",
                  "sleep",
                  "infinity"
                ],
                "command": [
                  "/opt/xebialabs/tini"
                ],
                "enabled": false
              },
              "dnsConfig": {},
              "dnsPolicy": "",
              "extraConfiguration": {},
              "extraContainerPorts": [],
              "extraEnvVars": [],
              "extraEnvVarsCM": "",
              "extraEnvVarsSecret": "",
              "extraSecrets": {},
              "extraSecretsPrependReleaseName": false,
              "extraVolumeMounts": [],
              "extraVolumes": [],
              "forceUpgrade": true,
              "health": {
                "enabled": true,
                "periodScans": 10,
                "probeFailureThreshold": 12,
                "probesLivenessTimeout": 60,
                "probesReadinessTimeout": 60
              },
              "hostAliases": [],
              "image": {
                "pullPolicy": "IfNotPresent",
                "pullSecrets": [],
                "registry": "docker.io",
                "repository": "xebialabsunsupported/xl-deploy",
                "tag": "{{ .Chart.AppVersion }}"
              },
              "initContainers": [],
              "jvmArgs": "",
              "lifecycleHooks": {},
              "logback": {
                "globalLoggingLevel": "info",
                "scanEnabled": true,
                "scanPeriod": "30 seconds"
              },
              "nodeAffinityPreset": {
                "key": "",
                "type": "",
                "values": []
              },
              "nodeSelector": {},
              "overrideName": "",
              "pdb": {
                "create": false,
                "maxUnavailable": "",
                "minAvailable": 1
              },
              "persistence": {
                "accessModes": [
                  "ReadWriteOnce"
                ],
                "annotations": {
                  "helm.sh/resource-policy": "keep"
                },
                "enabled": true,
                "existingClaim": "",
                "paths": [
                  "/opt/xebialabs/xl-deploy-server/work"
                ],
                "selector": {},
                "single": false,
                "size": "8Gi",
                "storageClass": ""
              },
              "podAffinityPreset": "",
              "podAnnotations": {},
              "podAntiAffinityPreset": "soft",
              "podLabels": {
                "app.kubernetes.io/component": "master"
              },
              "podManagementPolicy": "OrderedReady",
              "podSecurityContext": {
                "enabled": true,
                "fsGroup": 10001,
                "runAsGroup": 10001,
                "runAsUser": 10001
              },
              "podServiceTemplate": {
                "annotations": {},
                "clusterIPs": [],
                "enabled": false,
                "externalIPs": [],
                "externalTrafficPolicy": "Local",
                "extraPorts": [],
                "labels": {
                  "app.kubernetes.io/component": "master"
                },
                "loadBalancerIP": "",
                "loadBalancerSourceRanges": [],
                "name": "{{ printf \"%s-%d\" (include \"deploy.names.master\" $) .podNumber }}",
                "nodePorts": {
                  "deployPekko": 32180
                },
                "overrideHostname": "{{ include \"deploy.names.master\" . }}-{{ .podNumber }}",
                "overrideHostnameSuffix": ".{{ include \"common.names.namespace\" . }}.svc.cluster.local",
                "overrideHostnames": [],
                "podLabels": {
                  "statefulset.kubernetes.io/pod-name": "{{ printf \"%s-%d\" (include \"deploy.names.master\" $) .podNumber }}"
                },
                "portEnabled": true,
                "portNames": {
                  "deployPekko": "deploy-pekko"
                },
                "ports": {
                  "deployPekko": 32180
                },
                "publishNotReadyAddresses": true,
                "serviceMode": "MultiService",
                "sessionAffinity": "None",
                "sessionAffinityConfig": {},
                "type": "NodePort"
              },
              "priorityClassName": "",
              "replicaCount": 3,
              "resources": {
                "limits": {},
                "requests": {}
              },
              "schedulerName": "",
              "services": {
                "lb": {
                  "annotations": {},
                  "clusterIP": "",
                  "externalIPs": [],
                  "externalTrafficPolicy": "Cluster",
                  "extraPorts": [],
                  "labels": {
                    "app.kubernetes.io/component": "master"
                  },
                  "loadBalancerIP": "",
                  "loadBalancerSourceRanges": [],
                  "nodePorts": {
                    "deployHttp": "",
                    "deployHttps": ""
                  },
                  "portEnabled": true,
                  "portNames": {
                    "deployHttp": "deploy-http",
                    "deployHttps": "deploy-https"
                  },
                  "ports": {
                    "deployHttp": 80,
                    "deployHttps": 443
                  },
                  "publishNotReadyAddresses": true,
                  "sessionAffinity": "None",
                  "sessionAffinityConfig": {},
                  "type": "ClusterIP"
                },
                "pekko": {
                  "annotations": {},
                  "clusterIP": "None",
                  "externalIPs": [],
                  "externalTrafficPolicy": "Cluster",
                  "extraPorts": [],
                  "labels": {
                    "app.kubernetes.io/component": "master"
                  },
                  "loadBalancerIP": "",
                  "loadBalancerSourceRanges": [],
                  "nodePorts": {
                    "deployClusterPekko": "",
                    "deployPekko": ""
                  },
                  "portEnabled": true,
                  "portNames": {
                    "deployClusterPekko": "cluster-pekko",
                    "deployJmxExporter": "deploy-jmx",
                    "deployPekko": "deploy-pekko"
                  },
                  "ports": {
                    "deployClusterPekko": 25520,
                    "deployPekko": 8180
                  },
                  "publishNotReadyAddresses": true,
                  "sessionAffinity": "None",
                  "sessionAffinityConfig": {},
                  "type": "ClusterIP"
                }
              },
              "sidecars": [],
              "statefulsetAnnotations": {},
              "statefulsetLabels": {
                "app.kubernetes.io/component": "master"
              },
              "terminationGracePeriodSeconds": 90,
              "tolerations": [],
              "topologySpreadConstraints": [],
              "updateStrategy": {
                "type": "OnDelete"
              },
              "useIpAsHostname": false,
              "volumePermissions": {
                "containerSecurityContext": {
                  "runAsUser": 0
                },
                "enabled": false,
                "image": {
                  "digest": "",
                  "pullPolicy": "IfNotPresent",
                  "pullSecrets": [],
                  "registry": "docker.io",
                  "repository": "bitnami/os-shell",
                  "tag": "12-debian-12-r16"
                },
                "resources": {
                  "limits": {},
                  "requests": {}
                },
                "script": "#!/bin/bash\n\ndeclare -a paths=( {{ range $path := .Values.master.persistence.paths }} \"{{ $path }}\"{{ end }} )\nfor path in \"${paths[@]}\"; do\n  echo \"Changing ownership to {{ .Values.master.containerSecurityContext.runAsUser }}:{{ .Values.master.podSecurityContext.fsGroup }} for ${path}\"\n  chown \"{{ .Values.master.containerSecurityContext.runAsUser }}:{{ .Values.master.podSecurityContext.fsGroup }}\" \"${path}\"\n  find \"${path}\" -mindepth 1 -maxdepth 1 -not -name \".snapshot\" -not -name \"lost+found\" | \\\n    xargs -r chown -R \"{{ .Values.master.containerSecurityContext.runAsUser }}:{{ .Values.master.podSecurityContext.fsGroup }}\"\ndone\n"
              }
            },
            "metrics": {
              "enabled": false
            },
            "nameOverride": "",
            "namespaceOverride": "",
            "networkPolicy": {
              "additionalRules": [],
              "allowExternal": true,
              "enabled": false
            },
            "nginx-ingress-controller": {
              "defaultBackend": {
                "image": {
                  "tag": "1.25.4-debian-12-r3"
                }
              },
              "extraArgs": {
                "ingress-class": "nginx-daid"
              },
              "image": {
                "tag": "1.9.6-debian-12-r8"
              },
              "ingressClassResource": {
                "controllerClass": "k8s.io/ingress-nginx-daid",
                "name": "nginx-daid"
              },
              "install": false,
              "replicaCount": 1,
              "service": {
                "type": "LoadBalancer"
              }
            },
            "oidc": {
              "accessToken": {
                "audience": null,
                "enable": false,
                "issuer": null,
                "jwsAlg": null,
                "keyRetrievalUri": null,
                "secretKey": null
              },
              "accessTokenUri": null,
              "clientAuthJwt": {
                "enable": false,
                "jwsAlg": null,
                "key": {
                  "alias": null,
                  "enable": false,
                  "password": null
                },
                "keyStore": {
                  "enable": false,
                  "password": null,
                  "path": null,
                  "type": null
                },
                "tokenKeyId": null
              },
              "clientAuthMethod": null,
              "clientId": null,
              "clientSecret": null,
              "emailClaim": null,
              "enabled": false,
              "idTokenJWSAlg": null,
              "issuer": null,
              "keyRetrievalUri": null,
              "loginMethodDescription": null,
              "logoutUri": null,
              "postLogoutRedirectUri": null,
              "proxyHost": null,
              "proxyPort": null,
              "redirectUri": null,
              "rolesClaimName": null,
              "scopes": null,
              "userAuthorizationUri": null,
              "userNameClaimName": null
            },
            "postgresql": {
              "auth": {
                "enablePostgresUser": true,
                "postgresPassword": "postgres",
                "username": "postgres"
              },
              "hasReport": true,
              "image": {
                "tag": "15.6.0-debian-12-r7"
              },
              "install": true,
              "primary": {
                "extendedConfiguration": "max_connections = 300\n",
                "initdb": {
                  "scriptsSecret": "{{ include \"postgresql.v1.primary.fullname\" . }}-deploy"
                },
                "persistence": {
                  "accessModes": [
                    "ReadWriteOnce"
                  ],
                  "enabled": true,
                  "existingClaim": "",
                  "size": "8Gi",
                  "storageClass": ""
                },
                "resources": {
                  "requests": {
                    "cpu": "250m",
                    "memory": "256Mi"
                  }
                },
                "service": {
                  "ports": {
                    "postgresql": 5432
                  },
                  "type": "ClusterIP"
                }
              },
              "serviceAccount": {
                "create": true
              },
              "volumePermissions": {
                "enabled": true,
                "image": {
                  "tag": "12-debian-12-r16"
                }
              }
            },
            "rabbitmq": {
              "auth": {
                "existingErlangSecret": "{{ include \"common.names.fullname\" . }}-deploy",
                "password": "guest",
                "username": "guest"
              },
              "clustering": {
                "forceBoot": true
              },
              "extraConfiguration": "raft.wal_max_size_bytes = 1048576\n",
              "extraPlugins": "rabbitmq_jms_topic_exchange",
              "image": {
                "tag": "3.12.13-debian-12-r2"
              },
              "install": true,
              "loadDefinition": {
                "enabled": true,
                "existingSecret": "{{ include \"common.names.fullname\" . }}-deploy",
                "file": "/app/deploy_load_definition.json"
              },
              "persistence": {
                "accessModes": [
                  "ReadWriteOnce"
                ],
                "enabled": true,
                "size": "8Gi",
                "storageClass": ""
              },
              "replicaCount": 3,
              "service": {
                "type": "ClusterIP"
              },
              "volumePermissions": {
                "enabled": true,
                "image": {
                  "tag": "12-debian-12-r16"
                }
              }
            },
            "rbac": {
              "create": true
            },
            "route": {
              "annotations": {
                "haproxy.router.openshift.io/cookie_name": "SESSION_XLD",
                "haproxy.router.openshift.io/disable_cookies": "false",
                "haproxy.router.openshift.io/rewrite-target": "/"
              },
              "enabled": false,
              "hostname": "",
              "path": "/",
              "tls": {
                "caCertificate": "",
                "certificate": "",
                "destinationCACertificate": "",
                "enabled": false,
                "insecureEdgeTerminationPolicy": "",
                "key": "",
                "secretName": "",
                "selfSigned": false,
                "termination": "edge"
              }
            },
            "satellite": {
              "enabled": false
            },
            "serviceAccount": {
              "annotations": {},
              "automountServiceAccountToken": true,
              "create": true,
              "name": ""
            },
            "ssl": {
              "enabled": false,
              "keystore": {
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "keystore.{{ .Values.ssl.keystoreType }}",
                    "name": "{{ include \"common.tplvalues.render\" ( dict \"value\" .Values.hooks.genSelfSigned.name \"context\" $ ) }}"
                  }
                }
              },
              "keystoreKeypassword": "changeme",
              "keystorePassword": "changeme",
              "keystoreType": "pkcs12"
            },
            "truststore": {
              "params": "{{- if .Values.truststore.truststore }} -Djavax.net.ssl.trustStore=$(TRUSTSTORE) -Djavax.net.ssl.trustStorePassword=$(TRUSTSTORE_PASSWORD) -Djavax.net.ssl.trustStoreType=$(TRUSTSTORE_TYPE){{- end }}",
              "password": null,
              "truststore": {},
              "type": "pkcs12"
            },
            "usaCache": false,
            "worker": {
              "affinity": {},
              "args": "- --\n- /opt/xebialabs/deploy-task-engine/bin/run-in-operator.sh",
              "command": [
                "/opt/xebialabs/tini"
              ],
              "configuration": {
                "bin_run-in-operator-sh": {
                  "content": "#!/bin/bash\n\n{{- if .Values.worker.podServiceTemplate.enabled }}\nPOD_NUMBER=$(echo $POD_NAME | grep -Eo \"[0-9]+$\")\n{{- if contains .Values.worker.podServiceTemplate.serviceMode \"SingleHostname;MultiService\" }}\nexport SERVER_PORT=$(echo $SERVER_PORT+$POD_NUMBER | bc)\n{{- end }}\n{{- if or .Values.worker.podServiceTemplate.overrideHostname .Values.worker.podServiceTemplate.overrideHostnames }}\nallWorkers=(\n{{- range $podNumber := untilStep 0 (int .Values.worker.replicaCount) 1 }}\n{{- $newValues := merge (dict \"podNumber\" $podNumber) $ }}\n{{- $workerHostname := include \"deploy.workerHostname\" $newValues }}\n\"{{ $workerHostname }}\"\n{{- end }}\n)\nexport OVERRIDE_HOSTNAME=$(echo ${allWorkers[$POD_NUMBER]})\necho \"Using worker hostname: $OVERRIDE_HOSTNAME\"\n{{- end }}\n{{- end }}\necho \"Using worker port: $SERVER_PORT\"\nexec /opt/xebialabs/deploy-task-engine/bin/run-in-container.sh \\\n  -name \"$POD_NAME\" \\\n  {{- if .Values.worker.podServiceTemplate.enabled }}\n  {{- if or .Values.worker.podServiceTemplate.overrideHostname .Values.worker.podServiceTemplate.overrideHostnames }}\n  -hostname \"$OVERRIDE_HOSTNAME$HOSTNAME_SUFFIX\" \\\n  {{- else }}\n  -hostname \"$POD_NAME$HOSTNAME_SUFFIX\" \\\n  {{- end }}\n  {{- end }}\n  {{- include \"deploy.workerMasters\" $ }}\n  -api \"{{ include \"deploy.masterLbUrl\" . }}\" \\\n  $@\n",
                  "mode": 493,
                  "path": "bin/run-in-operator.sh"
                }
              },
              "containerPorts": {
                "deployJmxExporter": 9100,
                "deployPekko": 8180
              },
              "containerSecurityContext": {
                "enabled": true,
                "runAsNonRoot": true,
                "runAsUser": 10001
              },
              "debugMode": {
                "enabled": false,
                "remoteJvmParams": "{{- if .Values.worker.debugMode.enabled }} -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:8001{{- end }}"
              },
              "diagnosticMode": {
                "args": [
                  "--",
                  "sleep",
                  "infinity"
                ],
                "command": [
                  "/opt/xebialabs/tini"
                ],
                "enabled": false
              },
              "dnsConfig": {},
              "dnsPolicy": "",
              "extraConfiguration": {},
              "extraContainerPorts": [],
              "extraEnvVars": [],
              "extraEnvVarsCM": "",
              "extraEnvVarsSecret": "",
              "extraSecrets": {},
              "extraSecretsPrependReleaseName": false,
              "extraVolumeMounts": [],
              "extraVolumes": [],
              "health": {
                "enabled": true,
                "periodScans": 10,
                "probeFailureThreshold": 12,
                "probesLivenessTimeout": 60,
                "probesReadinessTimeout": 60
              },
              "hostAliases": [],
              "image": {
                "pullPolicy": "IfNotPresent",
                "pullSecrets": [],
                "registry": "docker.io",
                "repository": "xebialabsunsupported/deploy-task-engine",
                "tag": "{{ .Chart.AppVersion }}"
              },
              "initContainers": [],
              "jvmArgs": "",
              "lifecycleHooks": {},
              "logback": {
                "globalLoggingLevel": "info",
                "scanEnabled": true,
                "scanPeriod": "30 seconds"
              },
              "nodeAffinityPreset": {
                "key": "",
                "type": "",
                "values": []
              },
              "nodeSelector": {},
              "overrideName": "",
              "pdb": {
                "create": false,
                "maxUnavailable": "",
                "minAvailable": 1
              },
              "persistence": {
                "accessModes": [
                  "ReadWriteOnce"
                ],
                "annotations": {
                  "helm.sh/resource-policy": "keep"
                },
                "enabled": true,
                "existingClaim": "",
                "paths": [
                  "/opt/xebialabs/deploy-task-engine/work"
                ],
                "selector": {},
                "single": false,
                "size": "8Gi",
                "storageClass": ""
              },
              "podAffinityPreset": "",
              "podAnnotations": {},
              "podAntiAffinityPreset": "soft",
              "podLabels": {
                "app.kubernetes.io/component": "worker"
              },
              "podManagementPolicy": "OrderedReady",
              "podSecurityContext": {
                "enabled": true,
                "fsGroup": 10001,
                "runAsGroup": 10001,
                "runAsUser": 10001
              },
              "podServiceTemplate": {
                "annotations": {},
                "clusterIPs": [],
                "enabled": false,
                "externalIPs": [],
                "externalTrafficPolicy": "Local",
                "extraPorts": [],
                "labels": {
                  "app.kubernetes.io/component": "worker"
                },
                "loadBalancerIP": "",
                "loadBalancerSourceRanges": [],
                "name": "{{ printf \"%s-%d\" (include \"deploy.names.worker\" $) .podNumber }}",
                "nodePorts": {
                  "deployPekko": 32185
                },
                "overrideHostname": "{{ include \"deploy.names.worker\" . }}-{{ .podNumber }}",
                "overrideHostnameSuffix": ".{{ include \"common.names.namespace\" . }}.svc.cluster.local",
                "overrideHostnames": [],
                "podLabels": {
                  "statefulset.kubernetes.io/pod-name": "{{ printf \"%s-%d\" (include \"deploy.names.worker\" $) .podNumber }}"
                },
                "portEnabled": true,
                "portNames": {
                  "deployPekko": "deploy-pekko"
                },
                "ports": {
                  "deployPekko": 32185
                },
                "publishNotReadyAddresses": true,
                "serviceMode": "MultiService",
                "sessionAffinity": "None",
                "sessionAffinityConfig": {},
                "type": "NodePort"
              },
              "priorityClassName": "",
              "replicaCount": 3,
              "resources": {
                "limits": {},
                "requests": {}
              },
              "schedulerName": "",
              "services": {
                "pekko": {
                  "annotations": {},
                  "clusterIP": "None",
                  "externalIPs": [],
                  "externalTrafficPolicy": "Cluster",
                  "extraPorts": [],
                  "labels": {
                    "app.kubernetes.io/component": "worker"
                  },
                  "loadBalancerIP": "",
                  "loadBalancerSourceRanges": [],
                  "nodePorts": {
                    "deployPekko": ""
                  },
                  "portEnabled": true,
                  "portNames": {
                    "deployJmxExporter": "deploy-jmx",
                    "deployPekko": "deploy-pekko"
                  },
                  "ports": {
                    "deployPekko": 8180
                  },
                  "publishNotReadyAddresses": true,
                  "sessionAffinity": "None",
                  "sessionAffinityConfig": {},
                  "type": "ClusterIP"
                }
              },
              "sidecars": [],
              "statefulsetAnnotations": {},
              "statefulsetLabels": {
                "app.kubernetes.io/component": "worker"
              },
              "terminationGracePeriodSeconds": 90,
              "tolerations": [],
              "topologySpreadConstraints": [],
              "updateStrategy": {
                "type": "OnDelete"
              },
              "useIpAsHostname": false,
              "volumePermissions": {
                "containerSecurityContext": {
                  "runAsUser": 0
                },
                "enabled": false,
                "image": {
                  "digest": "",
                  "pullPolicy": "IfNotPresent",
                  "pullSecrets": [],
                  "registry": "docker.io",
                  "repository": "bitnami/os-shell",
                  "tag": "12-debian-12-r16"
                },
                "resources": {
                  "limits": {},
                  "requests": {}
                },
                "script": "#!/bin/bash\n\ndeclare -a paths=( {{ range $path := .Values.worker.persistence.paths }} \"{{ $path }}\"{{ end }} )\nfor path in \"${paths[@]}\"; do\n  echo \"Changing ownership to {{ .Values.worker.containerSecurityContext.runAsUser }}:{{ .Values.worker.podSecurityContext.fsGroup }} for ${path}\"\n  chown \"{{ .Values.worker.containerSecurityContext.runAsUser }}:{{ .Values.worker.podSecurityContext.fsGroup }}\" \"${path}\"\n  find \"${path}\" -mindepth 1 -maxdepth 1 -not -name \".snapshot\" -not -name \"lost+found\" | \\\n    xargs -r chown -R \"{{ .Values.worker.containerSecurityContext.runAsUser }}:{{ .Values.worker.podSecurityContext.fsGroup }}\"\ndone\n"
              }
            },
            "xldInProcess": false
          }
        }
      ]
    alm-examples-metadata: |-
      {
        "digitalaideploy-minimal": {
          "description": "Minimal configuration for the Digital.ai Deploy operator with embedded Postgresql and RabbitMQ and route setup"
        },
        "digitalaideploy-placeholders": {
          "description": "Configuration for the Digital.ai Deploy operator with placeholders to set. Set at least mandatory placeholders, others that are not set delete"
        },
        "digitalaideploy-sample": {
          "description": "Sample configuration with all default values"
        },
      }
    capabilities: Basic Install
    categories: Integration & Delivery
    containerImage: docker.io/xebialabsunsupported/deploy-operator:24.1.0-429.1602
    createdAt: "2024-04-30T15:11:43Z"
    description: Digital.ai Deploy enables organizations to achieve fast, secure,
      and reliable deployments to hybrid infrastructure — including containers, private
      and public clouds, middleware, and mainframe.
    operators.operatorframework.io/builder: operator-sdk-v1.33.0
    operators.operatorframework.io/project_layout: helm.sdk.operatorframework.io/v1
    repository: https://github.com/digital-ai/deploy-helm-chart
    support: Digital.ai
  name: digitalai-deploy-operator.v24.1.0-429.1602
  namespace: placeholder
spec:
  apiservicedefinitions: {}
  customresourcedefinitions:
    owned:
    - kind: DigitalaiDeploy
      name: digitalaideploys.xld.digital.ai
      version: v1alpha1
  description: "Digital.ai Deploy enables organizations to achieve fast, secure, and
    reliable deployments to hybrid infrastructure — including containers, private
    and public clouds, middleware, and mainframe.\n\n## About this Operator\n\nDigital.ai
    Deploy operator is based on helm chart that is available from [here](https://github.com/digital-ai/deploy-helm-chart).\nThe
    operator includes subcharts which are dependencies for the Deploy containers to
    run successfully.\nNginx Ingress and Haproxy ingress are disabled and not used
    with installations on the Openshift (and the images are not used in the installation)\n\n###
    Subcharts include:\n\n- [PostgresSQL](https://github.com/bitnami/charts/tree/main/bitnami/postgresql)\n-
    [RabbitMQ](https://github.com/bitnami/charts/tree/main/bitnami/rabbitmq)\n- [Nginx
    Ingress controller](https://github.com/bitnami/charts/tree/main/bitnami/nginx-ingress-controller)\n-
    [Haproxy Ingress controller](https://github.com/jcmoraisjr/haproxy-ingress/)\n\n##
    Installation\n  \nThe installation can be done using the sample configuration
    provided below. Please note that this is a minimal configuration and it's not
    recommended for production use.\n  \n```\napiVersion: xld.digital.ai/v1alpha1\nkind:
    DigitalaiDeploy\nmetadata:\n  name: daideploy-doc\nspec:\n  k8sSetup:\n    platform:
    Openshift\n  auth:\n    adminPassword: 'admin'\n  licenseAcceptEula: true\n  keystore:\n
    \   passphrase: 'test1234'\n    keystore: 'zs7OzgAAAAIAAAABAAAAAwAWZGVwbG95aXQtcGFzc3N3b3JkLWtleQAAAY66C46srO0ABXNyADNjb20uc3VuLmNyeXB0by5wcm92aWRlci5TZWFsZWRPYmplY3RGb3JLZXlQcm90ZWN0b3LNV8pZ5zC7UwIAAHhyABlqYXZheC5jcnlwdG8uU2VhbGVkT2JqZWN0PjY9psO3VHACAARbAA1lbmNvZGVkUGFyYW1zdAACW0JbABBlbmNyeXB0ZWRDb250ZW50cQB+AAJMAAlwYXJhbXNBbGd0ABJMamF2YS9sYW5nL1N0cmluZztMAAdzZWFsQWxncQB+AAN4cHVyAAJbQqzzF/gGCFTgAgAAeHAAAAARMA8ECPqEw2Wp+c6yAgMDDUB1cQB+AAUAAACQFrl6s2pnsB+GJD8vlN3Y0SItmbtfPy6n2A5qREEJWWLN9OYLu7BokScBMyFChFjIhQGwCpjMP4j+VLCgpW6GKREmYHQgKjWqWn7A+DMF9eT68ygZAD+ceIZB5buvsGM2LCYzyHJcmtujv+hpqevoTgOKKMd4U3wVV96n4B5QbkVXHYtGZWbWxk5gCHLoWhV5dAAWUEJFV2l0aE1ENUFuZFRyaXBsZURFU3QAFlBCRVdpdGhNRDVBbmRUcmlwbGVERVP+nQgVx6wurZB9hBxaIkk/6EEAPQ=='\n
    \ hooks:\n    getLicense:\n      enabled: true\n  centralConfiguration:\n    replicaCount:
    1\n  master:\n    replicaCount: 1\n    persistence:\n      storageClass: ''\n
    \     size: 1Gi\n  worker:\n    replicaCount: 1\n    persistence:\n      storageClass:
    ''\n      size: 1Gi\n  postgresql:\n    install: true\n    primary:\n      persistence:\n
    \       size: 1Gi\n        storageClass: ''\n  rabbitmq:\n    install: true\n
    \   persistence:\n      size: 1Gi\n      storageClass: ''\n    replicaCount: 1\n```\n\n###
    Configuration Details\n\nThe sample configuration uses:\n\n  - Autogenerated limited
    license\n  - Simple administrator initial password\n  - Default keystore setup\n
    \ - Only one replica is set for all pods\n  - All Pods are missing resource limit
    setup\n  - Default storage class and minimal size for persistent storage\n  -
    Embedded PostgreSQL for DB management\n  - Embedded RabbitMQ for message queue
    management\n\n## Customize Your Configuration\n\nConfigurations can be further
    personalized. Here are some areas you might want to consider:\n\n  - **External
    DB:** For avoiding uncertified container images required by the subcharts, refer
    to these [instructions for setting up an external DB](https://docs.digital.ai/bundle/devops-deploy-version-v.23.3/page/deploy/operator/xl-op-deploy-external-db-migration.html).\n
    \ - **External Message Queue:** To set up an external message queue, follow this
    [guide](https://docs.digital.ai/bundle/devops-deploy-version-v.23.3/page/deploy/operator/xl-op-deploy-external-mq-migration.html).\n
    \ - **Custom License:** To apply a custom license, refer to this [process](https://docs.digital.ai/bundle/devops-deploy-version-v.23.3/page/deploy/operator/xl-op-deploy-license-update.html).\n
    \ - **Custom Configuration:** For modifying the configuration files, use this
    [guide](https://docs.digital.ai/bundle/devops-deploy-version-v.23.3/page/deploy/operator/xl-op-deploy-customize.html).\n
    \ - **Truststore Setup:** For modifying default truststore for Deploy, use this
    [guide](https://docs.digital.ai/bundle/devops-deploy-version-v.23.3/page/deploy/operator/xl-op-deploy-setup-truststore.html)\n
    \ - **Plugin Management:** Managing plugins can be done using the following methods:\n
    \              - [Plugin Management using XL CLI](https://docs.digital.ai/bundle/devops-deploy-version-v.23.3/page/deploy/operator/xl-op-deploy-plugin-management.html)\n
    \              - [Managing Plugins Offline for Kubernetes Environment](https://docs.digital.ai/bundle/devops-deploy-version-v.23.3/page/deploy/operator/xl-op-deploy-offline-plugin-management.html)"
  displayName: Digital.ai Deploy
  icon:
  - base64data: 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
    mediatype: image/jpg
  install:
    spec:
      clusterPermissions:
      - rules:
        - apiGroups:
          - ""
          resources:
          - namespaces
          verbs:
          - get
        - apiGroups:
          - ""
          resources:
          - secrets
          verbs:
          - '*'
        - apiGroups:
          - ""
          resources:
          - events
          verbs:
          - create
        - apiGroups:
          - xld.digital.ai
          resources:
          - digitalaideploys
          - digitalaideploys/status
          - digitalaideploys/finalizers
          verbs:
          - create
          - delete
          - get
          - list
          - patch
          - update
          - watch
        - apiGroups:
          - ""
          resources:
          - pods
          - services
          - services/finalizers
          - endpoints
          - persistentvolumeclaims
          - events
          - configmaps
          - secrets
          verbs:
          - create
          - delete
          - get
          - list
          - patch
          - update
          - watch
        - apiGroups:
          - apps
          resources:
          - deployments
          - daemonsets
          - replicasets
          - statefulsets
          verbs:
          - create
          - delete
          - get
          - list
          - patch
          - update
          - watch
        - apiGroups:
          - ""
          resources:
          - serviceaccounts
          verbs:
          - create
          - delete
          - get
          - list
          - patch
          - update
          - watch
        - apiGroups:
          - batch
          resources:
          - jobs
          verbs:
          - create
          - delete
          - get
          - list
          - patch
          - update
          - watch
        - apiGroups:
          - rbac.authorization.k8s.io
          resources:
          - rolebindings
          - roles
          verbs:
          - create
          - delete
          - get
          - list
          - patch
          - update
          - watch
        - apiGroups:
          - security.openshift.io
          resources:
          - securitycontextconstraints
          verbs:
          - create
          - delete
          - get
          - list
          - patch
          - update
          - watch
        - apiGroups:
          - route.openshift.io
          resources:
          - '*'
          verbs:
          - create
          - delete
          - get
          - list
          - patch
          - update
          - watch
        - apiGroups:
          - authentication.k8s.io
          resources:
          - tokenreviews
          verbs:
          - create
        - apiGroups:
          - authorization.k8s.io
          resources:
          - subjectaccessreviews
          verbs:
          - create
        serviceAccountName: xld-controller-manager
      deployments:
      - label:
          app.kubernetes.io/component: manager
          app.kubernetes.io/created-by: xld
          app.kubernetes.io/instance: controller-manager
          app.kubernetes.io/managed-by: kustomize
          app.kubernetes.io/name: deployment
          app.kubernetes.io/part-of: xld
          control-plane: controller-manager
        name: xld-controller-manager
        spec:
          replicas: 1
          selector:
            matchLabels:
              control-plane: controller-manager
          strategy: {}
          template:
            metadata:
              annotations:
                kubectl.kubernetes.io/default-container: manager
              labels:
                control-plane: controller-manager
            spec:
              containers:
              - args:
                - --secure-listen-address=0.0.0.0:8443
                - --upstream=http://127.0.0.1:8080/
                - --logtostderr=true
                - --v=0
                image: gcr.io/kubebuilder/kube-rbac-proxy:v0.14.1
                name: kube-rbac-proxy
                ports:
                - containerPort: 8443
                  name: https
                  protocol: TCP
                resources:
                  limits:
                    cpu: 500m
                    memory: 128Mi
                  requests:
                    cpu: 5m
                    memory: 64Mi
                securityContext:
                  allowPrivilegeEscalation: false
                  capabilities:
                    drop:
                    - ALL
              - args:
                - --health-probe-bind-address=:8081
                - --metrics-bind-address=127.0.0.1:8080
                - --leader-elect
                - --leader-election-id=xld
                env:
                - name: POD_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.name
                - name: RELATED_IMAGE_GET_LICENSE
                  value: docker.io/bitnami/kubectl:1.28.7-debian-12-r3
                - name: RELATED_IMAGE_GEN_SELF_SIGNED
                  value: docker.io/bitnami/kubectl:1.28.7-debian-12-r3
                - name: RELATED_IMAGE_DEPLOY_CENTRAL_CONFIGURATION
                  value: xebialabsunsupported/central-configuration:24.1.0-rc.2-redhat
                - name: RELATED_IMAGE_DEPLOY_MASTER
                  value: docker.io/xebialabsunsupported/xl-deploy:24.1.0-rc.2-redhat
                - name: RELATED_IMAGE_DEPLOY_MASTER_VOLUME_PERMISSIONS
                  value: docker.io/xebialabsunsupported/xl-deploy:24.1.0-rc.2-redhat
                - name: RELATED_IMAGE_DEPLOY_WORKER
                  value: docker.io/xebialabsunsupported/deploy-task-engine:24.1.0-rc.2-redhat
                - name: RELATED_IMAGE_DEPLOY_WORKER_VOLUME_PERMISSIONS
                  value: docker.io/xebialabsunsupported/deploy-task-engine:24.1.0-rc.2-redhat
                - name: RELATED_IMAGE_DEPLOY_BUSY_BOX
                  value: docker.io/xebialabsunsupported/xl-deploy:24.1.0-rc.2-redhat
                - name: RELATED_IMAGE_POSTGRESQL
                  value: docker.io/bitnami/postgresql:15.6.0-debian-12-r7
                - name: RELATED_IMAGE_POSTGRESQL_VOLUME_PERMISSIONS
                  value: docker.io/bitnami/os-shell:12-debian-12-r16
                - name: RELATED_IMAGE_RABBITMQ
                  value: docker.io/bitnami/rabbitmq:3.12.13-debian-12-r2
                - name: RELATED_IMAGE_RABBITMQ_VOLUME_PERMISSIONS
                  value: docker.io/bitnami/os-shell:12-debian-12-r16
                image: docker.io/xebialabsunsupported/deploy-operator:24.1.0-429.1602
                livenessProbe:
                  httpGet:
                    path: /healthz
                    port: 8081
                  initialDelaySeconds: 15
                  periodSeconds: 20
                name: manager
                readinessProbe:
                  httpGet:
                    path: /readyz
                    port: 8081
                  initialDelaySeconds: 5
                  periodSeconds: 10
                resources:
                  limits:
                    cpu: 500m
                    memory: 512Mi
                  requests:
                    cpu: 10m
                    memory: 64Mi
                securityContext:
                  allowPrivilegeEscalation: false
                  capabilities:
                    drop:
                    - ALL
              securityContext:
                runAsNonRoot: true
              serviceAccountName: xld-controller-manager
              terminationGracePeriodSeconds: 10
      permissions:
      - rules:
        - apiGroups:
          - ""
          resources:
          - configmaps
          verbs:
          - get
          - list
          - watch
          - create
          - update
          - patch
          - delete
        - apiGroups:
          - coordination.k8s.io
          resources:
          - leases
          verbs:
          - get
          - list
          - watch
          - create
          - update
          - patch
          - delete
        - apiGroups:
          - ""
          resources:
          - events
          verbs:
          - create
          - patch
        serviceAccountName: xld-controller-manager
    strategy: deployment
  installModes:
  - supported: true
    type: OwnNamespace
  - supported: true
    type: SingleNamespace
  - supported: true
    type: MultiNamespace
  - supported: true
    type: AllNamespaces
  keywords:
  - digitalai
  - digital.ai
  - deploy
  - devops
  links:
  - name: Digital.ai Deploy
    url: https://digital.ai/products/deploy/
  - name: Digital.ai Deploy Documentation
    url: https://docs.digital.ai/bundle/devops-deploy-version-v.24.1/page/deploy/operator/xl-op-before-you-begin.html
  - name: Digital.ai Deploy Helm Chart
    url: https://github.com/digital-ai/deploy-helm-chart
  maintainers:
  - email: support@digital.ai
    name: support
  maturity: alpha
  provider:
    name: Digital.ai
    url: https://digital.ai
  relatedImages:
  - image: docker.io/bitnami/kubectl:1.28.7-debian-12-r3
    name: ""
  - image: xebialabsunsupported/central-configuration:24.1.0-rc.2-redhat
    name: deploy-central-configuration
  - image: docker.io/xebialabsunsupported/xl-deploy:24.1.0-rc.2-redhat
    name: ""
  - image: docker.io/xebialabsunsupported/deploy-task-engine:24.1.0-rc.2-redhat
    name: ""
  - image: docker.io/bitnami/postgresql:15.6.0-debian-12-r7
    name: postgresql
  - image: docker.io/bitnami/os-shell:12-debian-12-r16
    name: ""
  - image: docker.io/bitnami/rabbitmq:3.12.13-debian-12-r2
    name: rabbitmq
  version: 24.1.0-429.1602

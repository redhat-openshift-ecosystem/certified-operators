apiVersion: operators.coreos.com/v1alpha1
kind: ClusterServiceVersion
metadata:
  annotations:
    alm-examples: |-
      [
        {
          "apiVersion": "xlr.digital.ai/v1alpha1",
          "kind": "DigitalaiRelease",
          "metadata": {
            "name": "dairelease-minimal"
          },
          "spec": {
            "auth": {
              "adminPassword": "admin"
            },
            "haproxy-ingress": {
              "install": false
            },
            "hooks": {
              "genSelfSigned": {
                "enabled": false
              },
              "getLicense": {
                "enabled": true
              }
            },
            "ingress": {
              "enabled": false
            },
            "k8sSetup": {
              "platform": "Openshift"
            },
            "keystore": {
              "keystore": "zs7OzgAAAAIAAAABAAAAAwAWZGVwbG95aXQtcGFzc3N3b3JkLWtleQAAAY66Cf9nrO0ABXNyADNjb20uc3VuLmNyeXB0by5wcm92aWRlci5TZWFsZWRPYmplY3RGb3JLZXlQcm90ZWN0b3LNV8pZ5zC7UwIAAHhyABlqYXZheC5jcnlwdG8uU2VhbGVkT2JqZWN0PjY9psO3VHACAARbAA1lbmNvZGVkUGFyYW1zdAACW0JbABBlbmNyeXB0ZWRDb250ZW50cQB+AAJMAAlwYXJhbXNBbGd0ABJMamF2YS9sYW5nL1N0cmluZztMAAdzZWFsQWxncQB+AAN4cHVyAAJbQqzzF/gGCFTgAgAAeHAAAAARMA8ECD0yEJAHFhBOAgMDDUB1cQB+AAUAAACQUhNP1jw1dwOxWArpm0JBAX40fr4fvvAmyGGrx7mzlCVjb4uOxi4IroUoxcbBx8cpjiS6QzCUg6chsCQ0IABB6s7Tow2VR8vRlxXyxpJXvlUwfH8hwJn/ZK8rQuDsCkzd2rC+lYR0pEO0lUP3/AQ7dHJ4TgloyZOKKbWRNJvE4K4EOafqASuNTkyrr0SPflRydAAWUEJFV2l0aE1ENUFuZFRyaXBsZURFU3QAFlBCRVdpdGhNRDVBbmRUcmlwbGVERVO3iVKkgrEJQ78wacyjhp3UZBSB/Q==",
              "passphrase": "test1234"
            },
            "licenseAcceptEula": true,
            "nginx-ingress-controller": {
              "install": false
            },
            "persistence": {
              "accessModes": [
                "ReadWriteOnce"
              ],
              "size": "1Gi",
              "storageClass": ""
            },
            "postgresql": {
              "install": true,
              "primary": {
                "persistence": {
                  "size": "1Gi",
                  "storageClass": ""
                }
              }
            },
            "rabbitmq": {
              "install": true,
              "persistence": {
                "size": "1Gi",
                "storageClass": ""
              },
              "replicaCount": 1
            },
            "replicaCount": 1,
            "route": {
              "annotations": {
                "haproxy.router.openshift.io/cookie_name": "JSESSIONID",
                "haproxy.router.openshift.io/disable_cookies": "false",
                "haproxy.router.openshift.io/rewrite-target": "/",
                "haproxy.router.openshift.io/timeout": "120s"
              },
              "enabled": false,
              "hostname": "\u003cmandatory-release-hostname\u003e",
              "path": "/",
              "tls": {
                "enabled": true,
                "termination": "edge"
              }
            }
          }
        },
        {
          "apiVersion": "xlr.digital.ai/v1alpha1",
          "kind": "DigitalaiRelease",
          "metadata": {
            "name": "dairelease-placeholders"
          },
          "spec": {
            "appHostname": "\u003cmandatory-release-hostname\u003e",
            "appProtocol": "http",
            "auth": {
              "adminPassword": "\u003cmandatory-admin-password\u003e"
            },
            "diagnosticMode": {
              "enabled": false
            },
            "external": {
              "db": {
                "enabled": false,
                "main": {
                  "maxPoolSize": 10,
                  "password": "\u003cxlr-password\u003e",
                  "url": "jdbc:postgresql://\u003cxlr-db-host\u003e:5432/\u003cxlr-database-name\u003e",
                  "username": "\u003cxlr-username\u003e"
                },
                "report": {
                  "maxPoolSize": 10,
                  "password": "\u003cxlr-report-password\u003e",
                  "url": "jdbc:postgresql://\u003cxlr-report-db-host\u003e:5432/\u003cxlr-report-database-name\u003e",
                  "username": "\u003cxlr-report-username\u003e"
                }
              },
              "mq": {
                "enabled": false,
                "password": "\u003cpassword\u003e",
                "queueName": "\u003cqueue-name\u003e",
                "queueType": "\u003cclassic-or-quorum\u003e",
                "url": "\u003cqueue-url\u003e",
                "username": "\u003cusername\u003e"
              }
            },
            "haproxy-ingress": {
              "install": false
            },
            "hooks": {
              "genSelfSigned": {
                "enabled": false
              },
              "getLicense": {
                "enabled": true
              },
              "installReleaseRunner": {
                "answersSecret": "remote-runner-answers",
                "enabled": false,
                "releaseName": "remote-runner"
              }
            },
            "ingress": {
              "enabled": false
            },
            "k8sSetup": {
              "platform": "Openshift"
            },
            "keystore": {
              "keystore": "\u003cmandatory-enter base64 encoded keystore\u003e",
              "passphrase": "\u003cmandatory-keystore-passphrase\u003e"
            },
            "license": "\u003clicense\u003e",
            "licenseAcceptEula": true,
            "nginx-ingress-controller": {
              "install": false
            },
            "oidc": {
              "accessTokenUri": "",
              "clientId": "",
              "clientSecret": "",
              "emailClaim": "",
              "enabled": false,
              "fullNameClaim": "",
              "issuer": "",
              "keyRetrievalUri": "",
              "logoutUri": "",
              "postLogoutRedirectUri": "",
              "redirectUri": "",
              "rolesClaim": "",
              "scopes": "[\"openid\"]",
              "userAuthorizationUri": "",
              "userNameClaim": ""
            },
            "persistence": {
              "accessModes": [
                "ReadWriteMany"
              ],
              "size": "\u003crelease-storage-size\u003e",
              "storageClass": "\u003cmandatory-release-storage-class-rwx\u003e"
            },
            "postgresql": {
              "install": true,
              "primary": {
                "persistence": {
                  "size": "\u003cpostgresql-storage-size\u003e",
                  "storageClass": "\u003cpostgresql-storage-class-rwo\u003e"
                }
              },
              "securityContext": {
                "enabled": true,
                "fsGroup": 1001
              }
            },
            "rabbitmq": {
              "install": true,
              "persistence": {
                "size": "\u003crabbitmq-storage-size\u003e",
                "storageClass": "\u003crabbitmq-storage-class-rwo\u003e"
              },
              "podSecurityContext": {
                "enabled": true,
                "fsGroup": 1001,
                "runAsUser": 1001
              },
              "replicaCount": "\u003crabbitmq-replica-count\u003e",
              "securityContext": {
                "enabled": true,
                "fsGroup": 1001
              },
              "volumePermissions": {
                "enabled": true
              }
            },
            "replicaCount": "\u003crelease-replica-count\u003e",
            "route": {
              "annotations": {
                "haproxy.router.openshift.io/cookie_name": "JSESSIONID",
                "haproxy.router.openshift.io/disable_cookies": "false",
                "haproxy.router.openshift.io/rewrite-target": "/",
                "haproxy.router.openshift.io/timeout": "120s"
              },
              "enabled": true,
              "hostname": "\u003cmandatory-release-hostname\u003e",
              "path": "/",
              "tls": {
                "enabled": true,
                "termination": "edge"
              }
            },
            "ssl": {
              "enabled": false,
              "keystore": "",
              "keystoreKeypassword": "",
              "keystorePassword": "",
              "keystoreType": ""
            },
            "volumePermissions": {
              "enabled": false
            }
          }
        },
        {
          "apiVersion": "xlr.digital.ai/v1alpha1",
          "kind": "DigitalaiRelease",
          "metadata": {
            "name": "digitalairelease-sample"
          },
          "spec": {
            "affinity": {},
            "appContextRoot": "/",
            "appHostname": "",
            "appProtocol": "http",
            "args": [
              "--",
              "/opt/xebialabs/xl-release-server/bin/run-in-container.sh"
            ],
            "auth": {
              "adminPassword": null
            },
            "busyBox": {
              "image": {
                "pullPolicy": "IfNotPresent",
                "pullSecrets": [],
                "registry": "docker.io",
                "repository": "library/busybox",
                "tag": "stable"
              }
            },
            "clusterDomain": "cluster.local",
            "clusterMode": "full",
            "command": [
              "/opt/xebialabs/tini"
            ],
            "commonAnnotations": {},
            "commonLabels": {},
            "configuration": {
              "default-conf_xl-release-conf-template": {
                "content": "xl {\n  cluster {\n    # mode: \"default\", \"hot-standby\", \"full\"\n    mode = ${XL_CLUSTER_MODE}\n    name = \"xl-release_cluster\"\n    pekko {\n      loglevel = \"INFO\"\n      actor.debug.receive = off\n      remote {\n          log-received-messages = off\n          log-sent-messages = off\n      }\n    }\n  }\n\n  server {\n      http2 {\n          enabled = ${XLR_HTTP2_ENABLED}\n      }\n  }\n\n  license {\n    kind = ${XL_LICENSE_KIND}\n    product = \"xl-release\"\n  }\n\n  database {\n    db-driver-classname=\"${XL_DB_DRIVER}\"\n    db-password=\"\"\"${XL_DB_PASSWORD}\"\"\"\n    db-url=\"${XL_DB_URL}\"\n    db-username=${XL_DB_USERNAME}\n    max-pool-size=${XL_DB_MAX_POOL_SIZE}\n  }\n\n  # TODO Release does not support (H2) running in one schema.\n  reporting {\n    db-driver-classname=\"${XL_DB_DRIVER}\"\n    db-password=\"\"\"${XL_REPORT_DB_PASSWORD}\"\"\"\n    db-url=\"${XL_REPORT_DB_URL}\"\n    db-username=${XL_REPORT_DB_USERNAME}\n    max-pool-size=${XL_REPORT_DB_MAX_POOL_SIZE}\n  }\n\n  # Task queue\n  queue {\n    embedded=${ENABLE_EMBEDDED_QUEUE}\n    connector=\"${XLR_TASK_QUEUE_CONNECTOR_TYPE}\"\n    password=\"\"\"${XLR_TASK_QUEUE_PASSWORD}\"\"\"\n    queueName=\"${XLR_TASK_QUEUE_NAME}\"\n    url=\"${XLR_TASK_QUEUE_URL}\"\n    username=\"${XLR_TASK_QUEUE_USERNAME}\"\n    queueType=\"${XLR_TASK_QUEUE_TYPE}\"\n  }\n\n  metrics {\n    enabled = ${XL_METRICS_ENABLED}\n  }\n\n  {{- if .Values.oidc.enabled }}\n  security {\n    auth {\n      providers {\n        oidc {\n          clientId=\"\"\n          clientId=${?OIDC_CLIENT_ID}\n          clientSecret=\"\"\n          clientSecret=${?OIDC_CLIENT_SECRET}\n          {{- if .Values.oidc.clientAuthMethod }}\n          clientAuthMethod={{ .Values.oidc.clientAuthMethod | quote }}\n          {{- end }}\n          {{- if .Values.oidc.clientAuthJwt.enable }}\n          clientAuthJwt {\n              jwsAlg={{ default \"\" .Values.oidc.clientAuthJwt.jwsAlg | quote }}\n              tokenKeyId={{ default \"\" .Values.oidc.clientAuthJwt.tokenKeyId | quote }}\n              {{- if .Values.oidc.clientAuthJwt.keyStore.enable }}\n              keyStore {\n                  path={{ default \"\" .Values.oidc.clientAuthJwt.keyStore.path | quote }}\n                  password=\"\"\n                  password=${?OIDC_CLIENT_AUTH_JWT_KEYSTORE_PASSWORD}\n                  type={{ default \"\" .Values.oidc.clientAuthJwt.keyStore.type | quote }}\n              }\n              {{- end }}\n              {{- if .Values.oidc.clientAuthJwt.key.enable }}\n              key {\n                  alias={{ default \"\" .Values.oidc.clientAuthJwt.key.alias | quote }}\n                  password=\"\"\n                  password=${?OIDC_CLIENT_AUTH_JWT_KEY_PASSWORD}\n              }\n              {{- end }}\n          }\n          {{- end }}\n          issuer={{ .Values.oidc.issuer | quote }}\n          keyRetrievalUri={{ default \"\" .Values.oidc.keyRetrievalUri | quote }}\n          accessTokenUri={{ default \"\" .Values.oidc.accessTokenUri | quote }}\n          userAuthorizationUri={{ default \"\" .Values.oidc.userAuthorizationUri | quote }}\n          logoutUri={{ default \"\" .Values.oidc.logoutUri | quote }}\n          redirectUri={{ .Values.oidc.redirectUri | quote }}\n          postLogoutRedirectUri={{ .Values.oidc.postLogoutRedirectUri | quote }}\n          userNameClaim={{ default \"\" .Values.oidc.userNameClaim | quote }}\n          fullNameClaim={{ default \"\" .Values.oidc.fullNameClaim | quote }}\n          emailClaim={{ default \"\" .Values.oidc.emailClaim | quote }}\n          {{- if .Values.oidc.externalIdClaim }}\n          externalIdClaim={{ .Values.oidc.externalIdClaim | quote }}\n          {{- end }}\n          rolesClaim={{ default \"\" .Values.oidc.rolesClaim | quote }}\n          {{- if .Values.oidc.scopes }}\n          scopes={{ .Values.oidc.scopes }}\n          {{- else }}\n          scopes=[\"openid\"]\n          {{- end }}\n          {{- if .Values.oidc.idTokenJWSAlg }}\n          idTokenJWSAlg={{ .Values.oidc.idTokenJWSAlg | quote }}\n          {{- end }}\n          {{- if .Values.oidc.accessToken.enable }}\n          access-token {\n              issuer={{ default \"\" .Values.oidc.accessToken.issuer | quote }}\n              audience={{ default \"\" .Values.oidc.accessToken.audience | quote }}\n              keyRetrievalUri={{ default \"\" .Values.oidc.accessToken.keyRetrievalUri | quote }}\n              jwsAlg={{ default \"\" .Values.oidc.accessToken.jwsAlg | quote }}\n              secretKey=\"\"\n              secretKey=${?OIDC_ACCESS_TOKEN_SECRET_KEY}\n              }\n          {{- end }}\n          {{- if .Values.oidc.proxyHost }}\n          proxyHost={{ .Values.oidc.proxyHost | quote }}\n          {{- end }}\n          {{- if .Values.oidc.proxyPort }}\n          proxyPort={{ .Values.oidc.proxyPort | quote }}\n          {{- end }}\n        }\n      }\n    }\n  }\n  {{- end }}\n}\n",
                "mode": 432,
                "path": "default-conf/xl-release.conf.template"
              }
            },
            "containerPorts": {
              "releaseHttp": 5516,
              "releaseHttps": 5543
            },
            "containerSecurityContext": {
              "enabled": true,
              "runAsNonRoot": true,
              "runAsUser": 10001
            },
            "debugMode": {
              "enabled": false,
              "remoteJvmParams": "{{- if .Values.debugMode.enabled }} -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=localhost:8001{{- end }}"
            },
            "diagnosticMode": {
              "args": [
                "--",
                "sleep",
                "infinity"
              ],
              "command": [
                "/opt/xebialabs/tini"
              ],
              "enabled": false
            },
            "dnsConfig": {},
            "dnsPolicy": "",
            "enableEmbeddedQueue": false,
            "external": {
              "db": {
                "enabled": false,
                "main": {
                  "maxPoolSize": "",
                  "password": null,
                  "url": "",
                  "username": null
                },
                "report": {
                  "maxPoolSize": "",
                  "password": null,
                  "url": "",
                  "username": null
                }
              },
              "mq": {
                "connector": "",
                "enabled": false,
                "password": null,
                "queueName": "",
                "queueType": "",
                "url": "",
                "username": null
              }
            },
            "extraConfiguration": {},
            "extraContainerPorts": [],
            "extraDeploy": [],
            "extraEnvVars": [],
            "extraEnvVarsCM": "",
            "extraEnvVarsSecret": "",
            "extraSecrets": {},
            "extraSecretsPrependReleaseName": false,
            "extraVolumeMounts": [],
            "extraVolumes": [],
            "forceRemoveMissingTypes": false,
            "forceUpgrade": true,
            "fullnameOverride": "",
            "generateXlConfig": true,
            "global": {
              "imagePullSecrets": [],
              "imageRegistry": "",
              "postgresql": {
                "service": {
                  "ports": {
                    "postgresql": ""
                  }
                }
              },
              "storageClass": ""
            },
            "haproxy-ingress": {
              "controller": {
                "ingressClass": "haproxy-dair",
                "service": {
                  "type": "LoadBalancer"
                }
              },
              "install": false
            },
            "health": {
              "enabled": true,
              "periodScans": 10,
              "probeFailureThreshold": 12,
              "probesLivenessTimeout": 60,
              "probesReadinessTimeout": 60
            },
            "hooks": {
              "genSelfSigned": {
                "configuration": {
                  "bin_gen-self-signed": {
                    "content": "#!/bin/bash\n\necho \"Generating release self-signed cert\"\nHOSTNAME=\"{{- include \"release.hostname\" . -}}\"\nSTOREPASS=\"{{- .Values.ssl.keystorePassword -}}\"\nKEYPASS=\"{{- .Values.ssl.keystoreKeypassword -}}\"\nKEYTYPE=\"{{- .Values.ssl.keystoreType -}}\"\nkeytool -genkey -keyalg RSA -alias dai-release -keystore conf/keystore.$KEYTYPE -validity 365 -keysize 2048 -storepass \"$STOREPASS\" -storetype \"$KEYTYPE\" -keypass \"$KEYPASS\" \\\n  -dname \"CN=$HOSTNAME,OU=,O=Digital.ai Release,L=,ST=,C=\" \\\n  -ext \"SAN=DNS:{{- include \"common.names.fullname\" . -}}.local\"\nkeytool -export -alias dai-release -keystore conf/keystore.$KEYTYPE -rfc -file conf/public.cert -storepass \"$STOREPASS\" -storetype \"$KEYTYPE\" -keypass \"$KEYPASS\"\n",
                    "mode": 493,
                    "path": "bin/gen-self-signed.sh"
                  },
                  "bin_install-self-signed": {
                    "content": "#!/bin/bash\n\nKEYSTORE_FILE_PATH=\"/opt/xebialabs/xl-release-server/conf/keystore.{{- .Values.ssl.keystoreType -}}\"\nCERT_FILE_PATH=\"/opt/xebialabs/xl-release-server/conf/public.cert\"\nkubectl create secret generic {{ include \"common.tplvalues.render\" ( dict \"value\" $.Values.hooks.genSelfSigned.name \"context\" $ ) }} \\\n  --from-file=$KEYSTORE_FILE_PATH \\\n  --from-file=$CERT_FILE_PATH \\\n  --from-literal=host={{- include \"release.hostname\" . -}}\n",
                    "mode": 493,
                    "path": "bin/install-self-signed.sh"
                  }
                },
                "deletePolicy": "before-hook-creation,hook-succeeded",
                "enabled": false,
                "genCommand": [
                  "/opt/xebialabs/xl-release-server/bin/gen-self-signed.sh"
                ],
                "image": {
                  "pullPolicy": "IfNotPresent",
                  "pullSecrets": [],
                  "registry": "docker.io",
                  "repository": "bitnami/kubectl",
                  "tag": "1.28.7-debian-12-r3"
                },
                "installCommand": [
                  "/opt/xebialabs/xl-release-server/bin/install-self-signed.sh"
                ],
                "name": "{{ include \"release.name\" . }}-self-signed"
              },
              "getLicense": {
                "configuration": {
                  "bin_get-license": {
                    "content": "#!/bin/bash\n\necho \"Requesting unregistered license\"\nSERVER_PATH_PART=https://download.xebialabs.com\necho -e $(curl -X POST \"${SERVER_PATH_PART}/api/unregistered/xl-release\" | jq --raw-output .license) \u003e ${APP_HOME}/conf/xl-release-license.lic\nfile_size=$(stat -c%s \"${APP_HOME}/conf/xl-release-license.lic\")\nif [ \"$file_size\" -lt 10 ]; then\n  echo \"License file is NOT valid\"\n  exit 1\nfi\n",
                    "mode": 493,
                    "path": "bin/get-license.sh"
                  },
                  "bin_install-license": {
                    "content": "#!/bin/bash\n\nFILE_PATH=\"/opt/xebialabs/xl-release-server/conf/xl-release-license.lic\"\nkubectl create secret generic {{ include \"common.tplvalues.render\" ( dict \"value\" $.Values.hooks.getLicense.name \"context\" $ ) }} --from-file=$FILE_PATH\n",
                    "mode": 493,
                    "path": "bin/install-license.sh"
                  }
                },
                "deletePolicy": "before-hook-creation,hook-succeeded",
                "enabled": true,
                "getCommand": [
                  "/opt/xebialabs/xl-release-server/bin/get-license.sh"
                ],
                "image": {
                  "pullPolicy": "IfNotPresent",
                  "pullSecrets": [],
                  "registry": "docker.io",
                  "repository": "bitnami/kubectl",
                  "tag": "1.28.7-debian-12-r3"
                },
                "installCommand": [
                  "/opt/xebialabs/xl-release-server/bin/install-license.sh"
                ],
                "name": "{{ include \"release.name\" . }}-license"
              },
              "installReleaseRunner": {
                "answersSecret": "",
                "deletePolicy": "before-hook-creation,hook-succeeded",
                "enabled": false,
                "image": {
                  "pullPolicy": "IfNotPresent",
                  "pullSecrets": [],
                  "registry": "docker.io",
                  "repository": "xebialabsunsupported/xl-client",
                  "tag": "{{ .Chart.AppVersion }}"
                },
                "installCommand": [
                  "/opt/xebialabs/xl-client/xl",
                  "kube",
                  "upgrade",
                  "--skip-context-check",
                  "--local-repo",
                  "/opt/xebialabs/xl-op-blueprints",
                  "--answers",
                  "/opt/xebialabs/xl-client/generated_answers.yaml"
                ],
                "name": "{{ include \"release.name\" . }}-install-runner",
                "releaseName": ""
              }
            },
            "hostAliases": [],
            "image": {
              "pullPolicy": "IfNotPresent",
              "pullSecrets": [],
              "registry": "docker.io",
              "repository": "xebialabsunsupported/xl-release",
              "tag": "{{ .Chart.AppVersion }}"
            },
            "ingress": {
              "annotations": null,
              "enabled": false,
              "extraHosts": [],
              "extraPaths": [],
              "extraRules": [],
              "extraTls": [],
              "hostname": "",
              "ingressClassName": "",
              "path": "/",
              "pathType": "ImplementationSpecific",
              "secrets": [],
              "selfSigned": false,
              "tls": false
            },
            "initContainers": [],
            "jvmArgs": "",
            "k8sSetup": {
              "platform": "PlainK8s",
              "validateValues": true
            },
            "keystore": {
              "keystore": null,
              "passphrase": null
            },
            "kubeVersion": "",
            "license": null,
            "licenseAcceptEula": false,
            "lifecycleHooks": {},
            "logback": {
              "globalLoggingLevel": "info",
              "scanEnabled": true,
              "scanPeriod": "30 seconds"
            },
            "metrics": {
              "enabled": false
            },
            "nameOverride": "",
            "namespaceOverride": "",
            "networkPolicy": {
              "additionalRules": [],
              "allowExternal": true,
              "enabled": false
            },
            "nginx-ingress-controller": {
              "defaultBackend": {
                "image": {
                  "tag": "1.25.4-debian-12-r3"
                }
              },
              "extraArgs": {
                "ingress-class": "nginx-dair"
              },
              "image": {
                "tag": "1.9.6-debian-12-r8"
              },
              "ingressClassResource": {
                "controllerClass": "k8s.io/ingress-nginx-dair",
                "name": "nginx-dair"
              },
              "install": false,
              "replicaCount": 1,
              "service": {
                "type": "LoadBalancer"
              }
            },
            "nodeAffinityPreset": {
              "key": "",
              "type": "",
              "values": []
            },
            "nodeSelector": {},
            "oidc": {
              "accessToken": {
                "audience": null,
                "enable": false,
                "issuer": null,
                "jwsAlg": null,
                "keyRetrievalUri": null,
                "secretKey": null
              },
              "accessTokenUri": null,
              "clientAuthJwt": {
                "enable": false,
                "jwsAlg": null,
                "key": {
                  "alias": null,
                  "enable": false,
                  "password": null
                },
                "keyStore": {
                  "enable": false,
                  "password": null,
                  "path": null,
                  "type": null
                },
                "tokenKeyId": null
              },
              "clientAuthMethod": null,
              "clientId": null,
              "clientSecret": null,
              "emailClaim": null,
              "enabled": false,
              "external": false,
              "externalIdClaim": null,
              "fullNameClaim": null,
              "idTokenJWSAlg": null,
              "issuer": null,
              "keyRetrievalUri": null,
              "logoutUri": null,
              "postLogoutRedirectUri": null,
              "proxyHost": null,
              "proxyPort": null,
              "redirectUri": null,
              "rolesClaim": null,
              "scopes": [
                "openid"
              ],
              "userAuthorizationUri": null,
              "userNameClaim": null
            },
            "pdb": {
              "create": false,
              "maxUnavailable": "",
              "minAvailable": 1
            },
            "persistence": {
              "accessModes": [
                "ReadWriteMany"
              ],
              "annotations": {
                "helm.sh/resource-policy": "keep"
              },
              "enabled": true,
              "existingClaim": "",
              "paths": [
                "/opt/xebialabs/xl-release-server/reports"
              ],
              "selector": {},
              "single": true,
              "size": "8Gi",
              "storageClass": ""
            },
            "podAffinityPreset": "",
            "podAnnotations": {},
            "podAntiAffinityPreset": "soft",
            "podLabels": {},
            "podManagementPolicy": "OrderedReady",
            "podSecurityContext": {
              "enabled": true,
              "fsGroup": 10001,
              "runAsGroup": 10001,
              "runAsUser": 10001
            },
            "postgresql": {
              "auth": {
                "enablePostgresUser": true,
                "postgresPassword": "postgres",
                "username": "postgres"
              },
              "image": {
                "tag": "15.6.0-debian-12-r7"
              },
              "install": true,
              "primary": {
                "extendedConfiguration": "max_connections = 150\n",
                "initdb": {
                  "scriptsSecret": "{{ include \"postgresql.v1.primary.fullname\" . }}-release"
                },
                "persistence": {
                  "accessModes": [
                    "ReadWriteOnce"
                  ],
                  "enabled": true,
                  "existingClaim": "",
                  "size": "8Gi",
                  "storageClass": ""
                },
                "resources": {
                  "requests": {
                    "cpu": "250m",
                    "memory": "256Mi"
                  }
                },
                "service": {
                  "ports": {
                    "postgresql": 5432
                  },
                  "type": "ClusterIP"
                }
              },
              "serviceAccount": {
                "create": true
              },
              "volumePermissions": {
                "enabled": true,
                "image": {
                  "tag": "12-debian-12-r16"
                }
              }
            },
            "priorityClassName": "",
            "rabbitmq": {
              "auth": {
                "existingErlangSecret": "{{ include \"common.names.fullname\" . }}-release",
                "password": "guest",
                "username": "guest"
              },
              "clustering": {
                "forceBoot": true
              },
              "extraConfiguration": "raft.wal_max_size_bytes = 1048576\n",
              "extraPlugins": "rabbitmq_amqp1_0, rabbitmq_jms_topic_exchange",
              "image": {
                "tag": "3.12.13-debian-12-r2"
              },
              "install": true,
              "loadDefinition": {
                "enabled": true,
                "existingSecret": "{{ include \"common.names.fullname\" . }}-release",
                "file": "/app/release_load_definition.json"
              },
              "persistence": {
                "accessModes": [
                  "ReadWriteOnce"
                ],
                "enabled": true,
                "size": "8Gi",
                "storageClass": ""
              },
              "replicaCount": 3,
              "service": {
                "type": "ClusterIP"
              },
              "volumePermissions": {
                "enabled": true,
                "image": {
                  "tag": "12-debian-12-r16"
                }
              }
            },
            "rbac": {
              "create": true
            },
            "replicaCount": 3,
            "resources": {
              "limits": {},
              "requests": {}
            },
            "route": {
              "annotations": {
                "haproxy.router.openshift.io/cookie_name": "JSESSIONID",
                "haproxy.router.openshift.io/disable_cookies": "false",
                "haproxy.router.openshift.io/rewrite-target": "/",
                "haproxy.router.openshift.io/timeout": "120s"
              },
              "enabled": false,
              "hostname": "",
              "path": "/",
              "tls": {
                "caCertificate": "",
                "certificate": "",
                "destinationCACertificate": "",
                "enabled": false,
                "insecureEdgeTerminationPolicy": "",
                "key": "",
                "secretName": "",
                "selfSigned": false,
                "termination": "edge"
              }
            },
            "schedulerName": "",
            "service": {
              "annotations": {},
              "annotationsHeadless": {},
              "clusterIP": "",
              "externalIPs": [],
              "externalTrafficPolicy": "Cluster",
              "extraPorts": [],
              "labels": {},
              "loadBalancerIP": "",
              "loadBalancerSourceRanges": [],
              "nodePorts": {
                "releaseHttp": "",
                "releaseHttps": ""
              },
              "portEnabled": true,
              "portNames": {
                "releaseHttp": "release-http",
                "releaseHttps": "release-https"
              },
              "ports": {
                "releaseHttp": 80,
                "releaseHttps": 443
              },
              "sessionAffinity": "None",
              "sessionAffinityConfig": {},
              "type": "ClusterIP"
            },
            "serviceAccount": {
              "annotations": {},
              "automountServiceAccountToken": true,
              "create": true,
              "name": ""
            },
            "sidecars": [],
            "ssl": {
              "enabled": false,
              "keystore": {
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "keystore.{{ .Values.ssl.keystoreType }}",
                    "name": "{{ include \"common.tplvalues.render\" ( dict \"value\" .Values.hooks.genSelfSigned.name \"context\" $ ) }}"
                  }
                }
              },
              "keystoreKeypassword": null,
              "keystorePassword": null,
              "keystoreType": "pkcs12"
            },
            "statefulsetAnnotations": {},
            "statefulsetLabels": {},
            "terminationGracePeriodSeconds": 200,
            "tolerations": [],
            "topologySpreadConstraints": [],
            "truststore": {
              "params": "{{- if .Values.truststore.truststore }} -Djavax.net.ssl.trustStore=$(TRUSTSTORE) -Djavax.net.ssl.trustStorePassword=$(TRUSTSTORE_PASSWORD) -Djavax.net.ssl.trustStoreType=$(TRUSTSTORE_TYPE){{- end }}",
              "password": null,
              "truststore": {},
              "type": "pkcs12"
            },
            "updateStrategy": {
              "type": "RollingUpdate"
            },
            "useIpAsHostname": false,
            "volumePermissions": {
              "containerSecurityContext": {
                "runAsUser": 0
              },
              "enabled": false,
              "image": {
                "digest": "",
                "pullPolicy": "IfNotPresent",
                "pullSecrets": [],
                "registry": "docker.io",
                "repository": "bitnami/os-shell",
                "tag": "12-debian-12-r16"
              },
              "resources": {
                "limits": {},
                "requests": {}
              },
              "script": "#!/bin/bash\n\ndeclare -a paths=( {{ range $path := .Values.persistence.paths }} \"{{ $path }}\"{{ end }} )\nfor path in \"${paths[@]}\"; do\n  echo \"Changing ownership to {{ .Values.containerSecurityContext.runAsUser }}:{{ .Values.podSecurityContext.fsGroup }} for ${path}\"\n  chown \"{{ .Values.containerSecurityContext.runAsUser }}:{{ .Values.podSecurityContext.fsGroup }}\" \"${path}\"\n  find \"${path}\" -mindepth 1 -maxdepth 1 -not -name \".snapshot\" -not -name \"lost+found\" | \\\n    xargs -r chown -R \"{{ .Values.containerSecurityContext.runAsUser }}:{{ .Values.podSecurityContext.fsGroup }}\"\ndone\n"
            }
          }
        }
      ]
    alm-examples-metadata: |-
      {
        "digitalairelease-minimal": {
          "description": "Minimal configuration for the Digital.ai Release operator with embedded Postgresql and RabbitMQ and route setup"
        },
        "digitalairelease-placeholders": {
          "description": "Configuration for the Digital.ai Release operator with placeholders to set. Set at least mandatory placeholders, others that are not set delete"
        },
        "digitalairelease-sample": {
          "description": "Sample configuration with all default values"
        },
      }
    capabilities: Basic Install
    categories: Integration & Delivery
    containerImage: docker.io/xebialabsunsupported/release-operator:24.1.0-429.1602
    createdAt: "2024-04-30T12:20:50Z"
    description: Digital.ai Release empowers developer teams to seamlessly release
      and deploy software on a large scale across hybrid environments, all while ensuring
      that compliance and security requirements are effectively in place.
    operators.operatorframework.io/builder: operator-sdk-v1.33.0
    operators.operatorframework.io/project_layout: helm.sdk.operatorframework.io/v1
    repository: https://github.com/digital-ai/release-helm-chart
    support: Digital.ai
  name: digitalai-release-operator.v24.1.0-429.1602
  namespace: placeholder
spec:
  apiservicedefinitions: {}
  customresourcedefinitions:
    owned:
    - kind: DigitalaiRelease
      name: digitalaireleases.xlr.digital.ai
      version: v1alpha1
  description: "Digital.ai Release empowers developer teams to seamlessly release
    and deploy software on a large scale across hybrid environments, all while ensuring
    that compliance and security requirements are effectively in place.\n\n## About
    this Operator\n\nDigital.ai Releas operator is based on helm chart that is available
    from [here](https://github.com/digital-ai/release-helm-chart).\nThe operator includes
    subcharts which are dependencies for the Release containers to run successfully.\nNginx
    Ingress and Haproxy ingress are disabled and not used with installations on the
    Openshift (and the images are not used in the installation)\n\n### Subcharts include:\n\n-
    [PostgresSQL](https://github.com/bitnami/charts/tree/main/bitnami/postgresql)\n-
    [RabbitMQ](https://github.com/bitnami/charts/tree/main/bitnami/rabbitmq)\n- [Nginx
    Ingress controller](https://github.com/bitnami/charts/tree/main/bitnami/nginx-ingress-controller)\n-
    [Haproxy Ingress controller](https://github.com/jcmoraisjr/haproxy-ingress/)\n\n##
    Installation\n  \nThe installation can be done using the sample configuration
    provided below. Please note that this is a minimal configuration and it's not
    recommended for production use.\n  \n```\napiVersion: xlr.digital.ai/v1alpha1\nkind:
    DigitalaiRelease\nmetadata:\n  name: dairelease-minimal\nspec:\n  k8sSetup:\n
    \   platform: Openshift\n  auth:\n    adminPassword: 'admin'\n  licenseAcceptEula:
    true\n  keystore:\n    passphrase: 'test1234'\n    keystore: 'zs7OzgAAAAIAAAABAAAAAwAWZGVwbG95aXQtcGFzc3N3b3JkLWtleQAAAY66Cf9nrO0ABXNyADNjb20uc3VuLmNyeXB0by5wcm92aWRlci5TZWFsZWRPYmplY3RGb3JLZXlQcm90ZWN0b3LNV8pZ5zC7UwIAAHhyABlqYXZheC5jcnlwdG8uU2VhbGVkT2JqZWN0PjY9psO3VHACAARbAA1lbmNvZGVkUGFyYW1zdAACW0JbABBlbmNyeXB0ZWRDb250ZW50cQB+AAJMAAlwYXJhbXNBbGd0ABJMamF2YS9sYW5nL1N0cmluZztMAAdzZWFsQWxncQB+AAN4cHVyAAJbQqzzF/gGCFTgAgAAeHAAAAARMA8ECD0yEJAHFhBOAgMDDUB1cQB+AAUAAACQUhNP1jw1dwOxWArpm0JBAX40fr4fvvAmyGGrx7mzlCVjb4uOxi4IroUoxcbBx8cpjiS6QzCUg6chsCQ0IABB6s7Tow2VR8vRlxXyxpJXvlUwfH8hwJn/ZK8rQuDsCkzd2rC+lYR0pEO0lUP3/AQ7dHJ4TgloyZOKKbWRNJvE4K4EOafqASuNTkyrr0SPflRydAAWUEJFV2l0aE1ENUFuZFRyaXBsZURFU3QAFlBCRVdpdGhNRDVBbmRUcmlwbGVERVO3iVKkgrEJQ78wacyjhp3UZBSB/Q=='\n
    \ replicaCount: 1\n  hooks:\n    getLicense:\n      enabled: true\n  persistence:\n
    \   storageClass: ''\n    accessModes:\n      - ReadWriteOnce\n    size: 1Gi\n
    \ postgresql:\n    install: true\n    primary:\n      persistence:\n        size:
    1Gi\n        storageClass: ''\n  rabbitmq:\n    install: true\n    persistence:\n
    \     size: 1Gi\n      size: 1Gi\n      storageClass: ''\n    replicaCount: 1\n```\n\n###
    Configuration Details\n\nThe sample configuration uses:\n\n  - Autogenerated limited
    license\n  - Simple administrator initial password\n  - Default keystore setup\n
    \ - Only one replica is set for all pods\n  - All Pods are missing resource limit
    setup\n  - Default storage class and minimal size for persistent storage\n  -
    Release pods are using persistence access mode `ReadWriteOnce`, for Release pods
    the requirement is to have `ReadWriteMany`\n  - Embedded PostgreSQL for DB management\n
    \ - Embedded RabbitMQ for message queue management\n\n## Customize Your Configuration\n\nConfigurations
    can be further personalized. Here are some areas you might want to consider:\n\n
    \ - **External DB:** For avoiding uncertified container images required by the
    subcharts, refer to these [instructions for setting up an external DB](https://docs.digital.ai/bundle/devops-release-version-v.23.3/page/release/operator/xl-op-release-external-db-migration.html).\n
    \ - **External Message Queue:** To set up an external message queue, follow this
    [guide](https://docs.digital.ai/bundle/devops-release-version-v.23.3/page/release/operator/xl-op-release-external-mq-migration.html).\n
    \ - **Custom License:** To apply a custom license, refer to this [process](https://docs.digital.ai/bundle/devops-release-version-v.23.3/page/release/operator/xl-op-release-license-update.html).\n
    \ - **Custom Configuration:** For modifying the configuration files, use this
    [guide](https://docs.digital.ai/bundle/devops-release-version-v.23.3/page/release/operator/xl-op-release-customize.html).\n
    \ - **Truststore Setup:** For modifying default truststore for Release, use this
    [guide](https://docs.digital.ai/bundle/devops-release-version-v.23.3/page/release/operator/xl-op-release-setup-truststore.html).\n
    \ - **Plugin Management:** Managing plugins can be done using the following methods:\n
    \              - [Plugin Management using XL CLI](https://docs.digital.ai/bundle/devops-release-version-v.23.3/page/release/operator/xl-op-release-plugin-management.html)\n
    \              - [Managing Plugins Offline for Kubernetes Environment](https://docs.digital.ai/bundle/devops-release-version-v.23.3/page/release/operator/xl-op-release-offline-plugin-management.html)"
  displayName: Digital.ai Release
  icon:
  - base64data: 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
    mediatype: image/jpg
  install:
    spec:
      clusterPermissions:
      - rules:
        - apiGroups:
          - ""
          resources:
          - namespaces
          verbs:
          - get
        - apiGroups:
          - ""
          resources:
          - secrets
          verbs:
          - '*'
        - apiGroups:
          - ""
          resources:
          - events
          verbs:
          - create
        - apiGroups:
          - xlr.digital.ai
          resources:
          - digitalaireleases
          - digitalaireleases/status
          - digitalaireleases/finalizers
          verbs:
          - create
          - delete
          - get
          - list
          - patch
          - update
          - watch
        - apiGroups:
          - ""
          resources:
          - pods
          - services
          - services/finalizers
          - endpoints
          - persistentvolumeclaims
          - events
          - configmaps
          - secrets
          verbs:
          - create
          - delete
          - get
          - list
          - patch
          - update
          - watch
        - apiGroups:
          - apps
          resources:
          - deployments
          - daemonsets
          - replicasets
          - statefulsets
          verbs:
          - create
          - delete
          - get
          - list
          - patch
          - update
          - watch
        - apiGroups:
          - ""
          resources:
          - serviceaccounts
          verbs:
          - create
          - delete
          - get
          - list
          - patch
          - update
          - watch
        - apiGroups:
          - batch
          resources:
          - jobs
          verbs:
          - create
          - delete
          - get
          - list
          - patch
          - update
          - watch
        - apiGroups:
          - rbac.authorization.k8s.io
          resources:
          - rolebindings
          - roles
          verbs:
          - create
          - delete
          - get
          - list
          - patch
          - update
          - watch
        - apiGroups:
          - security.openshift.io
          resources:
          - securitycontextconstraints
          verbs:
          - create
          - delete
          - get
          - list
          - patch
          - update
          - watch
        - apiGroups:
          - route.openshift.io
          resources:
          - '*'
          verbs:
          - create
          - delete
          - get
          - list
          - patch
          - update
          - watch
        - apiGroups:
          - authentication.k8s.io
          resources:
          - tokenreviews
          verbs:
          - create
        - apiGroups:
          - authorization.k8s.io
          resources:
          - subjectaccessreviews
          verbs:
          - create
        serviceAccountName: xlr-controller-manager
      deployments:
      - label:
          app.kubernetes.io/component: manager
          app.kubernetes.io/created-by: xlr
          app.kubernetes.io/instance: controller-manager
          app.kubernetes.io/managed-by: kustomize
          app.kubernetes.io/name: deployment
          app.kubernetes.io/part-of: xlr
          control-plane: controller-manager
        name: xlr-controller-manager
        spec:
          replicas: 1
          selector:
            matchLabels:
              control-plane: controller-manager
          strategy: {}
          template:
            metadata:
              annotations:
                kubectl.kubernetes.io/default-container: manager
              labels:
                control-plane: controller-manager
            spec:
              containers:
              - args:
                - --secure-listen-address=0.0.0.0:8443
                - --upstream=http://127.0.0.1:8080/
                - --logtostderr=true
                - --v=0
                image: gcr.io/kubebuilder/kube-rbac-proxy:v0.14.1
                name: kube-rbac-proxy
                ports:
                - containerPort: 8443
                  name: https
                  protocol: TCP
                resources:
                  limits:
                    cpu: 500m
                    memory: 128Mi
                  requests:
                    cpu: 5m
                    memory: 64Mi
                securityContext:
                  allowPrivilegeEscalation: false
                  capabilities:
                    drop:
                    - ALL
              - args:
                - --health-probe-bind-address=:8081
                - --metrics-bind-address=127.0.0.1:8080
                - --leader-elect
                - --leader-election-id=xlr
                env:
                - name: POD_NAME
                  valueFrom:
                    fieldRef:
                      fieldPath: metadata.name
                - name: RELATED_IMAGE_GET_LICENSE
                  value: docker.io/bitnami/kubectl:1.28.7-debian-12-r3
                - name: RELATED_IMAGE_GEN_SELF_SIGNED
                  value: docker.io/bitnami/kubectl:1.28.7-debian-12-r3
                - name: RELATED_IMAGE_INSTALL_RELEASE_RUNNER
                  value: docker.io/xebialabsunsupported/xl-client:24.1.0-rc.2-redhat
                - name: RELATED_IMAGE_RELEASE
                  value: docker.io/xebialabsunsupported/xl-release:24.1.0-rc.2-redhat
                - name: RELATED_IMAGE_RELEASE_VOLUME_PERMISSIONS
                  value: docker.io/xebialabsunsupported/xl-release:24.1.0-rc.2-redhat
                - name: RELATED_IMAGE_RELEASE_BUSY_BOX
                  value: docker.io/xebialabsunsupported/xl-release:24.1.0-rc.2-redhat
                - name: RELATED_IMAGE_POSTGRESQL
                  value: docker.io/bitnami/postgresql:15.6.0-debian-12-r7
                - name: RELATED_IMAGE_POSTGRESQL_VOLUME_PERMISSIONS
                  value: docker.io/bitnami/os-shell:12-debian-12-r16
                - name: RELATED_IMAGE_RABBITMQ
                  value: docker.io/bitnami/rabbitmq:3.12.13-debian-12-r2
                - name: RELATED_IMAGE_RABBITMQ_VOLUME_PERMISSIONS
                  value: docker.io/bitnami/os-shell:12-debian-12-r16
                image: docker.io/xebialabsunsupported/release-operator:24.1.0-429.1602
                livenessProbe:
                  httpGet:
                    path: /healthz
                    port: 8081
                  initialDelaySeconds: 15
                  periodSeconds: 20
                name: manager
                readinessProbe:
                  httpGet:
                    path: /readyz
                    port: 8081
                  initialDelaySeconds: 5
                  periodSeconds: 10
                resources:
                  limits:
                    cpu: 500m
                    memory: 512Mi
                  requests:
                    cpu: 10m
                    memory: 64Mi
                securityContext:
                  allowPrivilegeEscalation: false
                  capabilities:
                    drop:
                    - ALL
              securityContext:
                runAsNonRoot: true
              serviceAccountName: xlr-controller-manager
              terminationGracePeriodSeconds: 10
      permissions:
      - rules:
        - apiGroups:
          - ""
          resources:
          - configmaps
          verbs:
          - get
          - list
          - watch
          - create
          - update
          - patch
          - delete
        - apiGroups:
          - coordination.k8s.io
          resources:
          - leases
          verbs:
          - get
          - list
          - watch
          - create
          - update
          - patch
          - delete
        - apiGroups:
          - ""
          resources:
          - events
          verbs:
          - create
          - patch
        serviceAccountName: xlr-controller-manager
    strategy: deployment
  installModes:
  - supported: true
    type: OwnNamespace
  - supported: true
    type: SingleNamespace
  - supported: true
    type: MultiNamespace
  - supported: true
    type: AllNamespaces
  keywords:
  - digitalai-release-operator
  - digitalai
  - digital.ai
  - release
  - devops
  links:
  - name: Digital.ai Release
    url: https://digital.ai/products/release/
  - name: Digital.ai Release Documentation
    url: https://docs.digital.ai/bundle/devops-release-version-v.24.1/page/release/operator/xl-op-before-you-begin.html
  - name: Digital.ai Release Helm Chart
    url: https://github.com/digital-ai/release-helm-chart
  maintainers:
  - email: support@digital.ai
    name: support
  maturity: alpha
  provider:
    name: Digital.ai
    url: https://digital.ai
  relatedImages:
  - image: docker.io/bitnami/kubectl:1.28.7-debian-12-r3
    name: ""
  - image: docker.io/xebialabsunsupported/xl-client:24.1.0-rc.2-redhat
    name: install-release-runner
  - image: docker.io/xebialabsunsupported/xl-release:24.1.0-rc.2-redhat
    name: ""
  - image: docker.io/bitnami/postgresql:15.6.0-debian-12-r7
    name: postgresql
  - image: docker.io/bitnami/os-shell:12-debian-12-r16
    name: ""
  - image: docker.io/bitnami/rabbitmq:3.12.13-debian-12-r2
    name: rabbitmq
  version: 24.1.0-429.1602

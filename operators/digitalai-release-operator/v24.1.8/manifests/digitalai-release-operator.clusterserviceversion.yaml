apiVersion: operators.coreos.com/v1alpha1
kind: ClusterServiceVersion
metadata:
  annotations:
    alm-examples: |-
      [
        {
          "apiVersion": "xlr.digital.ai/v1alpha1",
          "kind": "DigitalaiRelease",
          "metadata": {
            "name": "dair-min"
          },
          "spec": {
            "auth": {
              "adminPassword": "admin"
            },
            "containerSecurityContext": {
              "runAsGroup": null,
              "runAsUser": null
            },
            "hooks": {
              "getLicense": {
                "enabled": true
              }
            },
            "k8sSetup": {
              "platform": "Openshift"
            },
            "keystore": {
              "keystore": "zs7OzgAAAAIAAAABAAAAAwAWZGVwbG95aXQtcGFzc3N3b3JkLWtleQAAAY66Cf9nrO0ABXNyADNjb20uc3VuLmNyeXB0by5wcm92aWRlci5TZWFsZWRPYmplY3RGb3JLZXlQcm90ZWN0b3LNV8pZ5zC7UwIAAHhyABlqYXZheC5jcnlwdG8uU2VhbGVkT2JqZWN0PjY9psO3VHACAARbAA1lbmNvZGVkUGFyYW1zdAACW0JbABBlbmNyeXB0ZWRDb250ZW50cQB+AAJMAAlwYXJhbXNBbGd0ABJMamF2YS9sYW5nL1N0cmluZztMAAdzZWFsQWxncQB+AAN4cHVyAAJbQqzzF/gGCFTgAgAAeHAAAAARMA8ECD0yEJAHFhBOAgMDDUB1cQB+AAUAAACQUhNP1jw1dwOxWArpm0JBAX40fr4fvvAmyGGrx7mzlCVjb4uOxi4IroUoxcbBx8cpjiS6QzCUg6chsCQ0IABB6s7Tow2VR8vRlxXyxpJXvlUwfH8hwJn/ZK8rQuDsCkzd2rC+lYR0pEO0lUP3/AQ7dHJ4TgloyZOKKbWRNJvE4K4EOafqASuNTkyrr0SPflRydAAWUEJFV2l0aE1ENUFuZFRyaXBsZURFU3QAFlBCRVdpdGhNRDVBbmRUcmlwbGVERVO3iVKkgrEJQ78wacyjhp3UZBSB/Q==",
              "passphrase": "test1234"
            },
            "licenseAcceptEula": true,
            "persistence": {
              "accessModes": [
                "ReadWriteOnce"
              ],
              "size": "1Gi",
              "storageClass": ""
            },
            "podSecurityContext": {
              "fsGroup": null,
              "runAsGroup": null,
              "runAsUser": null
            },
            "postgresql": {
              "install": true,
              "primary": {
                "containerSecurityContext": {
                  "enabled": false,
                  "runAsGroup": null,
                  "runAsUser": null
                },
                "persistence": {
                  "size": "1Gi",
                  "storageClass": ""
                },
                "podSecurityContext": {
                  "enabled": false,
                  "fsGroup": null,
                  "runAsGroup": null,
                  "runAsUser": null
                },
                "resourcesPreset": "small",
                "securityContextConstraints": {
                  "enabled": false
                }
              },
              "volumePermissions": {
                "enabled": false
              }
            },
            "rabbitmq": {
              "containerSecurityContext": {
                "enabled": false,
                "runAsGroup": null,
                "runAsUser": null
              },
              "install": true,
              "persistence": {
                "size": "1Gi",
                "storageClass": ""
              },
              "podSecurityContext": {
                "enabled": false,
                "fsGroup": null,
                "runAsGroup": null,
                "runAsUser": null
              },
              "replicaCount": 1,
              "securityContextConstraints": {
                "enabled": false
              },
              "volumePermissions": {
                "enabled": false
              }
            },
            "replicaCount": 1,
            "route": {
              "annotations": {
                "haproxy.router.openshift.io/cookie_name": "JSESSIONID",
                "haproxy.router.openshift.io/disable_cookies": "false",
                "haproxy.router.openshift.io/rewrite-target": "/",
                "haproxy.router.openshift.io/timeout": "120s"
              },
              "enabled": false,
              "hostname": "\u003cmandatory-release-hostname\u003e",
              "path": "/",
              "tls": {
                "enabled": true,
                "termination": "edge"
              }
            },
            "securityContextConstraints": {
              "enabled": false
            },
            "volumePermissions": {
              "enabled": false
            }
          }
        },
        {
          "apiVersion": "xlr.digital.ai/v1alpha1",
          "kind": "DigitalaiRelease",
          "metadata": {
            "name": "dair-placeholders"
          },
          "spec": {
            "appHostname": "\u003cmandatory-release-hostname\u003e",
            "appProtocol": "http",
            "auth": {
              "adminPassword": "\u003cmandatory-admin-password\u003e"
            },
            "containerSecurityContext": {
              "runAsGroup": null,
              "runAsUser": null
            },
            "diagnosticMode": {
              "enabled": false
            },
            "external": {
              "db": {
                "enabled": false,
                "main": {
                  "maxPoolSize": 10,
                  "password": "\u003cxlr-password\u003e",
                  "url": "jdbc:postgresql://\u003cxlr-db-host\u003e:5432/\u003cxlr-database-name\u003e",
                  "username": "\u003cxlr-username\u003e"
                },
                "report": {
                  "maxPoolSize": 10,
                  "password": "\u003cxlr-report-password\u003e",
                  "url": "jdbc:postgresql://\u003cxlr-report-db-host\u003e:5432/\u003cxlr-report-database-name\u003e",
                  "username": "\u003cxlr-report-username\u003e"
                }
              },
              "mq": {
                "enabled": false,
                "password": "\u003cpassword\u003e",
                "queueName": "\u003cqueue-name\u003e",
                "queueType": "\u003cclassic-or-quorum\u003e",
                "url": "\u003cqueue-url\u003e",
                "username": "\u003cusername\u003e"
              }
            },
            "haproxy-ingress": {
              "install": false
            },
            "hooks": {
              "genSelfSigned": {
                "enabled": false
              },
              "getLicense": {
                "enabled": true
              },
              "installReleaseRunner": {
                "answersSecret": "remote-runner-answers",
                "enabled": false,
                "releaseName": "remote-runner"
              }
            },
            "ingress": {
              "enabled": false
            },
            "k8sSetup": {
              "platform": "Openshift"
            },
            "keystore": {
              "keystore": "\u003cmandatory-enter base64 encoded keystore\u003e",
              "passphrase": "\u003cmandatory-keystore-passphrase\u003e"
            },
            "license": "\u003clicense\u003e",
            "licenseAcceptEula": true,
            "nginx-ingress-controller": {
              "install": false
            },
            "oidc": {
              "accessTokenUri": "",
              "clientId": "",
              "clientSecret": "",
              "emailClaim": "",
              "enabled": false,
              "fullNameClaim": "",
              "issuer": "",
              "keyRetrievalUri": "",
              "logoutUri": "",
              "postLogoutRedirectUri": "",
              "redirectUri": "",
              "rolesClaim": "",
              "scopes": "[\"openid\"]",
              "userAuthorizationUri": "",
              "userNameClaim": ""
            },
            "persistence": {
              "accessModes": [
                "ReadWriteMany"
              ],
              "size": "\u003crelease-storage-size\u003e",
              "storageClass": "\u003cmandatory-release-storage-class-rwx\u003e"
            },
            "podSecurityContext": {
              "fsGroup": null,
              "runAsGroup": null,
              "runAsUser": null
            },
            "postgresql": {
              "install": true,
              "primary": {
                "containerSecurityContext": {
                  "enabled": false,
                  "runAsGroup": null,
                  "runAsUser": null
                },
                "persistence": {
                  "size": "\u003cpostgresql-storage-size\u003e",
                  "storageClass": "\u003cpostgresql-storage-class-rwo\u003e"
                },
                "podSecurityContext": {
                  "enabled": false,
                  "fsGroup": null,
                  "runAsGroup": null,
                  "runAsUser": null
                },
                "securityContextConstraints": {
                  "enabled": false
                }
              },
              "volumePermissions": {
                "enabled": false
              }
            },
            "rabbitmq": {
              "containerSecurityContext": {
                "enabled": false,
                "runAsGroup": null,
                "runAsUser": null
              },
              "install": true,
              "persistence": {
                "size": "\u003crabbitmq-storage-size\u003e",
                "storageClass": "\u003crabbitmq-storage-class-rwo\u003e"
              },
              "podSecurityContext": {
                "enabled": false,
                "fsGroup": null,
                "runAsGroup": null,
                "runAsUser": null
              },
              "replicaCount": "\u003crabbitmq-replica-count\u003e",
              "securityContextConstraints": {
                "enabled": false
              },
              "volumePermissions": {
                "enabled": false
              }
            },
            "replicaCount": "\u003crelease-replica-count\u003e",
            "route": {
              "annotations": {
                "haproxy.router.openshift.io/cookie_name": "JSESSIONID",
                "haproxy.router.openshift.io/disable_cookies": "false",
                "haproxy.router.openshift.io/rewrite-target": "/",
                "haproxy.router.openshift.io/timeout": "120s"
              },
              "enabled": true,
              "hostname": "\u003cmandatory-release-hostname\u003e",
              "path": "/",
              "tls": {
                "enabled": true,
                "termination": "edge"
              }
            },
            "securityContextConstraints": {
              "enabled": false
            },
            "ssl": {
              "enabled": false,
              "keystore": "",
              "keystoreKeypassword": "",
              "keystorePassword": "",
              "keystoreType": ""
            },
            "volumePermissions": {
              "enabled": false
            }
          }
        },
        {
          "apiVersion": "xlr.digital.ai/v1alpha1",
          "kind": "DigitalaiRelease",
          "metadata": {
            "name": "digitalairelease-sample"
          },
          "spec": {
            "affinity": {},
            "appContextRoot": "/",
            "appHostname": "",
            "appProtocol": "http",
            "args": [
              "--",
              "/opt/xebialabs/xl-release-server/bin/run-in-container.sh"
            ],
            "auth": {
              "adminPassword": null,
              "sessionStorage": false
            },
            "busyBox": {
              "image": {
                "pullPolicy": "IfNotPresent",
                "pullSecrets": [],
                "registry": "docker.io",
                "repository": "library/busybox",
                "tag": "stable"
              }
            },
            "clusterDomain": "cluster.local",
            "clusterMode": "full",
            "command": [
              "/opt/xebialabs/tini"
            ],
            "common": {
              "exampleValue": "common-chart",
              "global": {
                "imagePullSecrets": [],
                "imageRegistry": "",
                "postgresql": {
                  "service": {
                    "ports": {
                      "postgresql": ""
                    }
                  }
                },
                "storageClass": ""
              }
            },
            "commonAnnotations": {},
            "commonLabels": {},
            "configuration": {
              "default-conf_xl-release-conf-template": {
                "content": "xl {\n  cluster {\n    # mode: \"default\", \"hot-standby\", \"full\"\n    mode = ${XL_CLUSTER_MODE}\n    name = \"xl-release_cluster\"\n    pekko {\n      loglevel = \"INFO\"\n      actor.debug.receive = off\n      remote {\n          log-received-messages = off\n          log-sent-messages = off\n      }\n    }\n  }\n\n  server {\n      http2 {\n          enabled = ${XLR_HTTP2_ENABLED}\n      }\n      session {\n          storage {\n              enabled = {{ include \"common.tplvalues.render\" ( dict \"value\" .Values.auth.sessionStorage \"context\" $ ) }}\n          }\n      }\n  }\n\n  license {\n    kind = ${XL_LICENSE_KIND}\n    product = \"xl-release\"\n  }\n\n  database {\n    db-driver-classname=\"${XL_DB_DRIVER}\"\n    db-password=\"\"\"${XL_DB_PASSWORD}\"\"\"\n    db-url=\"${XL_DB_URL}\"\n    db-username=${XL_DB_USERNAME}\n    max-pool-size=${XL_DB_MAX_POOL_SIZE}\n  }\n\n  # TODO Release does not support (H2) running in one schema.\n  reporting {\n    db-driver-classname=\"${XL_DB_DRIVER}\"\n    db-password=\"\"\"${XL_REPORT_DB_PASSWORD}\"\"\"\n    db-url=\"${XL_REPORT_DB_URL}\"\n    db-username=${XL_REPORT_DB_USERNAME}\n    max-pool-size=${XL_REPORT_DB_MAX_POOL_SIZE}\n  }\n\n  # Task queue\n  queue {\n    embedded=${ENABLE_EMBEDDED_QUEUE}\n    connector=\"${XLR_TASK_QUEUE_CONNECTOR_TYPE}\"\n    password=\"\"\"${XLR_TASK_QUEUE_PASSWORD}\"\"\"\n    queueName=\"${XLR_TASK_QUEUE_NAME}\"\n    url=\"${XLR_TASK_QUEUE_URL}\"\n    username=\"${XLR_TASK_QUEUE_USERNAME}\"\n    queueType=\"${XLR_TASK_QUEUE_TYPE}\"\n  }\n\n  metrics {\n    enabled = ${XL_METRICS_ENABLED}\n  }\n\n  {{- if .Values.oidc.enabled }}\n  security {\n    auth {\n      providers {\n        oidc {\n          clientId=\"\"\n          clientId=${?OIDC_CLIENT_ID}\n          clientSecret=\"\"\n          clientSecret=${?OIDC_CLIENT_SECRET}\n          {{- if .Values.oidc.clientAuthMethod }}\n          clientAuthMethod={{ .Values.oidc.clientAuthMethod | quote }}\n          {{- end }}\n          {{- if .Values.oidc.clientAuthJwt.enable }}\n          clientAuthJwt {\n              jwsAlg={{ default \"\" .Values.oidc.clientAuthJwt.jwsAlg | quote }}\n              tokenKeyId={{ default \"\" .Values.oidc.clientAuthJwt.tokenKeyId | quote }}\n              {{- if .Values.oidc.clientAuthJwt.keyStore.enable }}\n              keyStore {\n                  path={{ default \"\" .Values.oidc.clientAuthJwt.keyStore.path | quote }}\n                  password=\"\"\n                  password=${?OIDC_CLIENT_AUTH_JWT_KEYSTORE_PASSWORD}\n                  type={{ default \"\" .Values.oidc.clientAuthJwt.keyStore.type | quote }}\n              }\n              {{- end }}\n              {{- if .Values.oidc.clientAuthJwt.key.enable }}\n              key {\n                  alias={{ default \"\" .Values.oidc.clientAuthJwt.key.alias | quote }}\n                  password=\"\"\n                  password=${?OIDC_CLIENT_AUTH_JWT_KEY_PASSWORD}\n              }\n              {{- end }}\n          }\n          {{- end }}\n          issuer={{ .Values.oidc.issuer | quote }}\n          keyRetrievalUri={{ default \"\" .Values.oidc.keyRetrievalUri | quote }}\n          accessTokenUri={{ default \"\" .Values.oidc.accessTokenUri | quote }}\n          userAuthorizationUri={{ default \"\" .Values.oidc.userAuthorizationUri | quote }}\n          logoutUri={{ default \"\" .Values.oidc.logoutUri | quote }}\n          redirectUri={{ .Values.oidc.redirectUri | quote }}\n          postLogoutRedirectUri={{ .Values.oidc.postLogoutRedirectUri | quote }}\n          userNameClaim={{ default \"\" .Values.oidc.userNameClaim | quote }}\n          fullNameClaim={{ default \"\" .Values.oidc.fullNameClaim | quote }}\n          emailClaim={{ default \"\" .Values.oidc.emailClaim | quote }}\n          {{- if .Values.oidc.externalIdClaim }}\n          externalIdClaim={{ .Values.oidc.externalIdClaim | quote }}\n          {{- end }}\n          rolesClaim={{ default \"\" .Values.oidc.rolesClaim | quote }}\n          {{- if .Values.oidc.scopes }}\n          scopes={{ .Values.oidc.scopes }}\n          {{- else }}\n          scopes=[\"openid\"]\n          {{- end }}\n          {{- if .Values.oidc.idTokenJWSAlg }}\n          idTokenJWSAlg={{ .Values.oidc.idTokenJWSAlg | quote }}\n          {{- end }}\n          {{- if .Values.oidc.accessToken.enable }}\n          access-token {\n              issuer={{ default \"\" .Values.oidc.accessToken.issuer | quote }}\n              audience={{ default \"\" .Values.oidc.accessToken.audience | quote }}\n              keyRetrievalUri={{ default \"\" .Values.oidc.accessToken.keyRetrievalUri | quote }}\n              jwsAlg={{ default \"\" .Values.oidc.accessToken.jwsAlg | quote }}\n              secretKey=\"\"\n              secretKey=${?OIDC_ACCESS_TOKEN_SECRET_KEY}\n              }\n          {{- end }}\n          {{- if .Values.oidc.proxyHost }}\n          proxyHost={{ .Values.oidc.proxyHost | quote }}\n          {{- end }}\n          {{- if .Values.oidc.proxyPort }}\n          proxyPort={{ .Values.oidc.proxyPort | quote }}\n          {{- end }}\n        }\n      }\n    }\n  }\n  {{- end }}\n}\n",
                "mode": 432,
                "path": "default-conf/xl-release.conf.template"
              }
            },
            "containerPorts": {
              "releaseHttp": 5516,
              "releaseHttps": 5543
            },
            "containerSecurityContext": {
              "allowPrivilegeEscalation": false,
              "capabilities": {
                "drop": [
                  "ALL"
                ]
              },
              "enabled": true,
              "runAsNonRoot": true,
              "seccompProfile": {
                "type": "RuntimeDefault"
              }
            },
            "debugMode": {
              "enabled": false,
              "remoteJvmParams": "{{- if .Values.debugMode.enabled }} -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=localhost:8001{{- end }}"
            },
            "defaultInitContainers": {
              "resources": {
                "limits": {
                  "cpu": "150m",
                  "ephemeral-storage": "2Gi",
                  "memory": "192Mi"
                },
                "requests": {
                  "cpu": "100m",
                  "ephemeral-storage": "50Mi",
                  "memory": "128Mi"
                }
              }
            },
            "diagnosticMode": {
              "args": [
                "--",
                "sleep",
                "infinity"
              ],
              "command": [
                "/opt/xebialabs/tini"
              ],
              "enabled": false
            },
            "dnsConfig": {},
            "dnsPolicy": "",
            "enableEmbeddedQueue": false,
            "external": {
              "db": {
                "enabled": false,
                "main": {
                  "maxPoolSize": "",
                  "password": null,
                  "url": "",
                  "username": null
                },
                "report": {
                  "maxPoolSize": "",
                  "password": null,
                  "url": "",
                  "username": null
                }
              },
              "mq": {
                "connector": "",
                "enabled": false,
                "password": null,
                "queueName": "",
                "queueType": "",
                "url": "",
                "username": null
              }
            },
            "extraConfiguration": {},
            "extraContainerPorts": [],
            "extraDeploy": [],
            "extraEnvVars": [],
            "extraEnvVarsCM": "",
            "extraEnvVarsSecret": "",
            "extraSecrets": {},
            "extraSecretsPrependReleaseName": false,
            "extraVolumeMounts": [],
            "extraVolumes": [],
            "forceRemoveMissingTypes": false,
            "forceUpgrade": true,
            "fullnameOverride": "",
            "generateXlConfig": true,
            "global": {
              "imagePullSecrets": [],
              "imageRegistry": "",
              "postgresql": {
                "service": {
                  "ports": {
                    "postgresql": ""
                  }
                }
              },
              "storageClass": ""
            },
            "haproxy-ingress": {
              "controller": {
                "ingressClass": "haproxy-dair",
                "service": {
                  "type": "LoadBalancer"
                }
              },
              "install": false
            },
            "health": {
              "enabled": true,
              "periodScans": 10,
              "probeFailureThreshold": 12,
              "probesLivenessTimeout": 60,
              "probesReadinessTimeout": 60
            },
            "hooks": {
              "genSelfSigned": {
                "configuration": {
                  "bin_gen-self-signed": {
                    "content": "#!/bin/bash\n\necho \"Generating release self-signed cert\"\nHOSTNAME=\"{{- include \"release.hostname\" . -}}\"\nSTOREPASS=\"{{- .Values.ssl.keystorePassword -}}\"\nKEYPASS=\"{{- .Values.ssl.keystoreKeypassword -}}\"\nKEYTYPE=\"{{- .Values.ssl.keystoreType -}}\"\nkeytool -genkey -keyalg RSA -alias dai-release -keystore conf/keystore.$KEYTYPE -validity 365 -keysize 2048 -storepass \"$STOREPASS\" -storetype \"$KEYTYPE\" -keypass \"$KEYPASS\" \\\n  -dname \"CN=$HOSTNAME,OU=,O=Digital.ai Release,L=,ST=,C=\" \\\n  -ext \"SAN=DNS:{{- include \"common.names.fullname\" . -}}.local\"\nkeytool -export -alias dai-release -keystore conf/keystore.$KEYTYPE -rfc -file conf/public.cert -storepass \"$STOREPASS\" -storetype \"$KEYTYPE\" -keypass \"$KEYPASS\"\n",
                    "mode": 493,
                    "path": "bin/gen-self-signed.sh"
                  },
                  "bin_install-self-signed": {
                    "content": "#!/bin/bash\n\nSECRET_NAME=\"{{ include \"common.tplvalues.render\" ( dict \"value\" $.Values.hooks.genSelfSigned.name \"context\" $ ) }}\"\nKEYSTORE_FILE_PATH=\"/opt/xebialabs/xl-release-server/conf/keystore.{{- .Values.ssl.keystoreType -}}\"\nCERT_FILE_PATH=\"/opt/xebialabs/xl-release-server/conf/public.cert\"\n\nif kubectl get secret \"$SECRET_NAME\" \u003e /dev/null 2\u003e\u00261; then\n  echo \"Secret '$SECRET_NAME' exists skipping creation.\"\nelse\n  kubectl create secret generic $SECRET_NAME \\\n    --from-file=$KEYSTORE_FILE_PATH \\\n    --from-file=$CERT_FILE_PATH \\\n    --from-literal=host={{- include \"release.hostname\" . -}} \\\n    --dry-run=client \\\n    -o yaml | kubectl apply -f -\nfi\n",
                    "mode": 493,
                    "path": "bin/install-self-signed.sh"
                  }
                },
                "containerSecurityContext": {
                  "allowPrivilegeEscalation": false,
                  "capabilities": {
                    "drop": [
                      "ALL"
                    ]
                  },
                  "enabled": true,
                  "runAsNonRoot": true,
                  "seccompProfile": {
                    "type": "RuntimeDefault"
                  }
                },
                "deletePolicy": "before-hook-creation,hook-succeeded",
                "enabled": false,
                "genCommand": [
                  "/opt/xebialabs/xl-release-server/bin/gen-self-signed.sh"
                ],
                "image": {
                  "pullPolicy": "IfNotPresent",
                  "pullSecrets": [],
                  "registry": "docker.io",
                  "repository": "bitnami/kubectl",
                  "tag": "1.28.7-debian-12-r3"
                },
                "installCommand": [
                  "/opt/xebialabs/xl-release-server/bin/install-self-signed.sh"
                ],
                "name": "{{ include \"release.name\" . }}-self-signed"
              },
              "getLicense": {
                "configuration": {
                  "bin_get-license": {
                    "content": "#!/bin/bash\n\necho \"Requesting unregistered license\"\nSERVER_PATH_PART=https://download.xebialabs.com\necho -e $(curl -X POST \"${SERVER_PATH_PART}/api/unregistered/xl-release\" | jq --raw-output .license) \u003e ${APP_HOME}/conf/xl-release-license.lic\nfile_size=$(stat -c%s \"${APP_HOME}/conf/xl-release-license.lic\")\nif [ \"$file_size\" -lt 10 ]; then\n  echo \"License file is NOT valid\"\n  exit 1\nfi\n",
                    "mode": 493,
                    "path": "bin/get-license.sh"
                  },
                  "bin_install-license": {
                    "content": "#!/bin/bash\n\nSECRET_NAME=\"{{ include \"common.tplvalues.render\" ( dict \"value\" $.Values.hooks.getLicense.name \"context\" $ ) }}\"\nFILE_PATH=\"/opt/xebialabs/xl-release-server/conf/xl-release-license.lic\"\n\nif kubectl get secret \"$SECRET_NAME\" \u003e /dev/null 2\u003e\u00261; then\n  echo \"Secret '$SECRET_NAME' exists skipping creation.\"\nelse\n  kubectl create secret generic $SECRET_NAME \\\n    --from-file=$FILE_PATH \\\n    --dry-run=client \\\n    -o yaml | kubectl apply -f -\nfi\n",
                    "mode": 493,
                    "path": "bin/install-license.sh"
                  }
                },
                "containerSecurityContext": {
                  "allowPrivilegeEscalation": false,
                  "capabilities": {
                    "drop": [
                      "ALL"
                    ]
                  },
                  "enabled": true,
                  "runAsNonRoot": true,
                  "seccompProfile": {
                    "type": "RuntimeDefault"
                  }
                },
                "deletePolicy": "before-hook-creation,hook-succeeded",
                "enabled": true,
                "getCommand": [
                  "/opt/xebialabs/xl-release-server/bin/get-license.sh"
                ],
                "image": {
                  "pullPolicy": "IfNotPresent",
                  "pullSecrets": [],
                  "registry": "docker.io",
                  "repository": "bitnami/kubectl",
                  "tag": "1.28.7-debian-12-r3"
                },
                "installCommand": [
                  "/opt/xebialabs/xl-release-server/bin/install-license.sh"
                ],
                "name": "{{ include \"release.name\" . }}-license"
              },
              "installReleaseRunner": {
                "answersSecret": "",
                "containerSecurityContext": {
                  "allowPrivilegeEscalation": false,
                  "capabilities": {
                    "drop": [
                      "ALL"
                    ]
                  },
                  "enabled": true,
                  "runAsNonRoot": true,
                  "seccompProfile": {
                    "type": "RuntimeDefault"
                  }
                },
                "deletePolicy": "before-hook-creation,hook-succeeded",
                "enabled": false,
                "extraEnvVars": [],
                "image": {
                  "pullPolicy": "IfNotPresent",
                  "pullSecrets": [],
                  "registry": "docker.io",
                  "repository": "xebialabsunsupported/xl-client",
                  "tag": "{{ .Chart.AppVersion }}"
                },
                "installCommand": [
                  "/opt/xebialabs/xl-client/xl",
                  "kube",
                  "upgrade",
                  "--skip-context-check",
                  "--local-repo",
                  "/opt/xebialabs/xl-op-blueprints",
                  "--answers",
                  "/opt/xebialabs/xl-client/generated_answers.yaml"
                ],
                "name": "{{ include \"release.name\" . }}-install-runner",
                "releaseName": ""
              }
            },
            "hostAliases": [],
            "image": {
              "pullPolicy": "IfNotPresent",
              "pullSecrets": [],
              "registry": "docker.io",
              "repository": "xebialabsunsupported/xl-release",
              "tag": "{{ .Chart.AppVersion }}"
            },
            "ingress": {
              "annotations": null,
              "enabled": false,
              "extraHosts": [],
              "extraPaths": [],
              "extraRules": [],
              "extraTls": [],
              "hostname": "",
              "ingressClassName": "",
              "path": "/",
              "pathType": "ImplementationSpecific",
              "secrets": [],
              "selfSigned": false,
              "tls": false
            },
            "initContainers": [],
            "jvmArgs": "",
            "k8sSetup": {
              "platform": "PlainK8s",
              "validateValues": true
            },
            "keystore": {
              "keystore": null,
              "passphrase": null
            },
            "kubeVersion": "",
            "license": null,
            "licenseAcceptEula": false,
            "lifecycleHooks": {},
            "logback": {
              "globalLoggingLevel": "info",
              "scanEnabled": true,
              "scanPeriod": "30 seconds"
            },
            "metrics": {
              "enabled": false
            },
            "nameOverride": "",
            "namespaceOverride": "",
            "networkPolicy": {
              "additionalRules": [],
              "allowExternal": true,
              "enabled": false
            },
            "nginx-ingress-controller": {
              "defaultBackend": {
                "image": {
                  "tag": "1.26.0-debian-12-r1"
                }
              },
              "extraArgs": {
                "ingress-class": "nginx-dair"
              },
              "image": {
                "tag": "1.10.1-debian-12-r5"
              },
              "ingressClassResource": {
                "controllerClass": "k8s.io/ingress-nginx-dair",
                "name": "nginx-dair"
              },
              "install": false,
              "replicaCount": 1,
              "service": {
                "type": "LoadBalancer"
              }
            },
            "nodeAffinityPreset": {
              "key": "",
              "type": "",
              "values": []
            },
            "nodeSelector": {},
            "oidc": {
              "accessToken": {
                "audience": null,
                "enable": false,
                "issuer": null,
                "jwsAlg": null,
                "keyRetrievalUri": null,
                "secretKey": null
              },
              "accessTokenUri": null,
              "clientAuthJwt": {
                "enable": false,
                "jwsAlg": null,
                "key": {
                  "alias": null,
                  "enable": false,
                  "password": null
                },
                "keyStore": {
                  "enable": false,
                  "password": null,
                  "path": null,
                  "type": null
                },
                "tokenKeyId": null
              },
              "clientAuthMethod": null,
              "clientId": null,
              "clientSecret": null,
              "emailClaim": null,
              "enabled": false,
              "external": false,
              "externalIdClaim": null,
              "fullNameClaim": null,
              "idTokenJWSAlg": null,
              "issuer": null,
              "keyRetrievalUri": null,
              "logoutUri": null,
              "postLogoutRedirectUri": null,
              "proxyHost": null,
              "proxyPort": null,
              "redirectUri": null,
              "rolesClaim": null,
              "scopes": [
                "openid"
              ],
              "userAuthorizationUri": null,
              "userNameClaim": null
            },
            "pdb": {
              "create": false,
              "maxUnavailable": "",
              "minAvailable": 1
            },
            "persistence": {
              "accessModes": [
                "ReadWriteMany"
              ],
              "annotations": {
                "helm.sh/resource-policy": "keep"
              },
              "enabled": true,
              "existingClaim": "",
              "paths": [
                "/opt/xebialabs/xl-release-server/reports"
              ],
              "selector": {},
              "single": true,
              "size": "8Gi",
              "storageClass": ""
            },
            "podAffinityPreset": "",
            "podAnnotations": {},
            "podAntiAffinityPreset": "soft",
            "podLabels": {},
            "podManagementPolicy": "OrderedReady",
            "podSecurityContext": {
              "enabled": true,
              "fsGroup": 10001,
              "runAsUser": 10001
            },
            "postgresql": {
              "architecture": "standalone",
              "audit": {
                "clientMinMessages": "error",
                "logConnections": false,
                "logDisconnections": false,
                "logHostname": false,
                "logLinePrefix": "",
                "logTimezone": "",
                "pgAuditLog": "",
                "pgAuditLogCatalog": "off"
              },
              "auth": {
                "database": "",
                "enablePostgresUser": true,
                "existingSecret": "",
                "password": "",
                "postgresPassword": "postgres",
                "replicationPassword": "",
                "replicationUsername": "repl_user",
                "secretKeys": {
                  "adminPasswordKey": "postgres-password",
                  "replicationPasswordKey": "replication-password",
                  "userPasswordKey": "password"
                },
                "usePasswordFiles": false,
                "username": "postgres"
              },
              "backup": {
                "cronjob": {
                  "annotations": {},
                  "command": [
                    "/bin/sh",
                    "-c",
                    "pg_dumpall --clean --if-exists --load-via-partition-root --quote-all-identifiers --no-password --file=${PGDUMP_DIR}/pg_dumpall-$(date '+%Y-%m-%d-%H-%M').pgdump"
                  ],
                  "concurrencyPolicy": "Allow",
                  "containerSecurityContext": {
                    "allowPrivilegeEscalation": false,
                    "capabilities": {
                      "drop": [
                        "ALL"
                      ]
                    },
                    "enabled": true,
                    "privileged": false,
                    "readOnlyRootFilesystem": true,
                    "runAsGroup": 1001,
                    "runAsNonRoot": true,
                    "runAsUser": 1001,
                    "seLinuxOptions": {},
                    "seccompProfile": {
                      "type": "RuntimeDefault"
                    }
                  },
                  "extraVolumeMounts": [],
                  "extraVolumes": [],
                  "failedJobsHistoryLimit": 1,
                  "labels": {},
                  "networkPolicy": {
                    "enabled": true
                  },
                  "nodeSelector": {},
                  "podSecurityContext": {
                    "enabled": true,
                    "fsGroup": 1001,
                    "fsGroupChangePolicy": "Always",
                    "supplementalGroups": [],
                    "sysctls": []
                  },
                  "resources": {},
                  "resourcesPreset": "nano",
                  "restartPolicy": "OnFailure",
                  "schedule": "@daily",
                  "startingDeadlineSeconds": "",
                  "storage": {
                    "accessModes": [
                      "ReadWriteOnce"
                    ],
                    "annotations": {},
                    "enabled": true,
                    "existingClaim": "",
                    "mountPath": "/backup/pgdump",
                    "resourcePolicy": "",
                    "size": "8Gi",
                    "storageClass": "",
                    "subPath": "",
                    "volumeClaimTemplates": {
                      "selector": {}
                    }
                  },
                  "successfulJobsHistoryLimit": 3,
                  "timeZone": "",
                  "tolerations": [],
                  "ttlSecondsAfterFinished": ""
                },
                "enabled": false
              },
              "clusterDomain": "cluster.local",
              "common": {
                "exampleValue": "common-chart",
                "global": {
                  "compatibility": {
                    "openshift": {
                      "adaptSecurityContext": "auto"
                    }
                  },
                  "imagePullSecrets": [],
                  "imageRegistry": "",
                  "postgresql": {
                    "auth": {
                      "database": "",
                      "existingSecret": "",
                      "password": "",
                      "postgresPassword": "",
                      "secretKeys": {
                        "adminPasswordKey": "",
                        "replicationPasswordKey": "",
                        "userPasswordKey": ""
                      },
                      "username": ""
                    },
                    "service": {
                      "ports": {
                        "postgresql": ""
                      }
                    }
                  },
                  "storageClass": ""
                }
              },
              "commonAnnotations": {},
              "commonLabels": {},
              "containerPorts": {
                "postgresql": 5432
              },
              "diagnosticMode": {
                "args": [
                  "infinity"
                ],
                "command": [
                  "sleep"
                ],
                "enabled": false
              },
              "extraDeploy": [],
              "fullnameOverride": "",
              "global": {
                "compatibility": {
                  "openshift": {
                    "adaptSecurityContext": "auto"
                  }
                },
                "imagePullSecrets": [],
                "imageRegistry": "",
                "postgresql": {
                  "auth": {
                    "database": "",
                    "existingSecret": "",
                    "password": "",
                    "postgresPassword": "",
                    "secretKeys": {
                      "adminPasswordKey": "",
                      "replicationPasswordKey": "",
                      "userPasswordKey": ""
                    },
                    "username": ""
                  },
                  "service": {
                    "ports": {
                      "postgresql": ""
                    }
                  }
                },
                "storageClass": ""
              },
              "image": {
                "debug": false,
                "digest": "",
                "pullPolicy": "IfNotPresent",
                "pullSecrets": [],
                "registry": "docker.io",
                "repository": "bitnami/postgresql",
                "tag": "15.6.0-debian-12-r7"
              },
              "install": true,
              "kubeVersion": "",
              "ldap": {
                "basedn": "",
                "binddn": "",
                "bindpw": "",
                "enabled": false,
                "port": "",
                "prefix": "",
                "scheme": "",
                "searchAttribute": "",
                "searchFilter": "",
                "server": "",
                "suffix": "",
                "tls": {
                  "enabled": false
                },
                "uri": ""
              },
              "metrics": {
                "collectors": {},
                "containerPorts": {
                  "metrics": 9187
                },
                "containerSecurityContext": {
                  "allowPrivilegeEscalation": false,
                  "capabilities": {
                    "drop": [
                      "ALL"
                    ]
                  },
                  "enabled": true,
                  "privileged": false,
                  "readOnlyRootFilesystem": true,
                  "runAsGroup": 1001,
                  "runAsNonRoot": true,
                  "runAsUser": 1001,
                  "seLinuxOptions": {},
                  "seccompProfile": {
                    "type": "RuntimeDefault"
                  }
                },
                "customLivenessProbe": {},
                "customMetrics": {},
                "customReadinessProbe": {},
                "customStartupProbe": {},
                "enabled": false,
                "extraEnvVars": [],
                "image": {
                  "digest": "",
                  "pullPolicy": "IfNotPresent",
                  "pullSecrets": [],
                  "registry": "docker.io",
                  "repository": "bitnami/postgres-exporter",
                  "tag": "0.15.0-debian-12-r31"
                },
                "livenessProbe": {
                  "enabled": true,
                  "failureThreshold": 6,
                  "initialDelaySeconds": 5,
                  "periodSeconds": 10,
                  "successThreshold": 1,
                  "timeoutSeconds": 5
                },
                "prometheusRule": {
                  "enabled": false,
                  "labels": {},
                  "namespace": "",
                  "rules": []
                },
                "readinessProbe": {
                  "enabled": true,
                  "failureThreshold": 6,
                  "initialDelaySeconds": 5,
                  "periodSeconds": 10,
                  "successThreshold": 1,
                  "timeoutSeconds": 5
                },
                "resources": {},
                "resourcesPreset": "nano",
                "service": {
                  "annotations": {
                    "prometheus.io/port": "{{ .Values.metrics.service.ports.metrics }}",
                    "prometheus.io/scrape": "true"
                  },
                  "clusterIP": "",
                  "ports": {
                    "metrics": 9187
                  },
                  "sessionAffinity": "None"
                },
                "serviceMonitor": {
                  "enabled": false,
                  "honorLabels": false,
                  "interval": "",
                  "jobLabel": "",
                  "labels": {},
                  "metricRelabelings": [],
                  "namespace": "",
                  "relabelings": [],
                  "scrapeTimeout": "",
                  "selector": {}
                },
                "startupProbe": {
                  "enabled": false,
                  "failureThreshold": 15,
                  "initialDelaySeconds": 10,
                  "periodSeconds": 10,
                  "successThreshold": 1,
                  "timeoutSeconds": 1
                }
              },
              "nameOverride": "",
              "postgresqlDataDir": "/bitnami/postgresql/data",
              "postgresqlSharedPreloadLibraries": "pgaudit",
              "primary": {
                "affinity": {},
                "annotations": {},
                "args": [],
                "automountServiceAccountToken": false,
                "command": [],
                "configuration": "port = '5432'\nwal_level = 'replica'\nmax_wal_size = '400MB'\nmax_wal_senders = '16'\nwal_keep_size = '128MB'\nhot_standby = 'on'\nfsync = 'on'\nshared_preload_libraries = 'pgaudit'\npgaudit.log_catalog = 'off'\nlog_connections = 'false'\nlog_disconnections = 'false'\nlog_hostname = 'false'\nclient_min_messages = 'error'\nlisten_addresses = '*'\nmax_connections = 300\nshared_buffers = 80MB",
                "containerSecurityContext": {
                  "allowPrivilegeEscalation": false,
                  "capabilities": {
                    "drop": [
                      "ALL"
                    ]
                  },
                  "enabled": true,
                  "privileged": false,
                  "readOnlyRootFilesystem": true,
                  "runAsGroup": 1001,
                  "runAsNonRoot": true,
                  "runAsUser": 1001,
                  "seLinuxOptions": {},
                  "seccompProfile": {
                    "type": "RuntimeDefault"
                  }
                },
                "customLivenessProbe": {},
                "customReadinessProbe": {},
                "customStartupProbe": {},
                "existingConfigmap": "",
                "existingExtendedConfigmap": "",
                "extendedConfiguration": "",
                "extraEnvVars": [],
                "extraEnvVarsCM": "",
                "extraEnvVarsSecret": "",
                "extraPodSpec": {},
                "extraVolumeMounts": [],
                "extraVolumes": [],
                "hostAliases": [],
                "hostIPC": false,
                "hostNetwork": false,
                "initContainers": [],
                "initdb": {
                  "args": "",
                  "password": "",
                  "postgresqlWalDir": "",
                  "scripts": {},
                  "scriptsConfigMap": "",
                  "scriptsSecret": "{{ include \"postgresql.v1.primary.fullname\" . }}-release",
                  "user": ""
                },
                "labels": {},
                "lifecycleHooks": {},
                "livenessProbe": {
                  "enabled": true,
                  "failureThreshold": 6,
                  "initialDelaySeconds": 30,
                  "periodSeconds": 10,
                  "successThreshold": 1,
                  "timeoutSeconds": 5
                },
                "name": "primary",
                "networkPolicy": {
                  "allowExternal": true,
                  "allowExternalEgress": true,
                  "enabled": true,
                  "extraEgress": [],
                  "extraIngress": [],
                  "ingressNSMatchLabels": {},
                  "ingressNSPodMatchLabels": {}
                },
                "nodeAffinityPreset": {
                  "key": "",
                  "type": "",
                  "values": []
                },
                "nodeSelector": {},
                "persistence": {
                  "accessModes": [
                    "ReadWriteOnce"
                  ],
                  "annotations": {},
                  "dataSource": {},
                  "enabled": true,
                  "existingClaim": "",
                  "labels": {},
                  "mountPath": "/bitnami/postgresql",
                  "selector": {},
                  "size": "8Gi",
                  "storageClass": "",
                  "subPath": "",
                  "volumeName": "data"
                },
                "persistentVolumeClaimRetentionPolicy": {
                  "enabled": false,
                  "whenDeleted": "Retain",
                  "whenScaled": "Retain"
                },
                "pgHbaConfiguration": "",
                "podAffinityPreset": "",
                "podAnnotations": {},
                "podAntiAffinityPreset": "soft",
                "podLabels": {},
                "podSecurityContext": {
                  "enabled": true,
                  "fsGroup": 1001,
                  "fsGroupChangePolicy": "Always",
                  "supplementalGroups": [],
                  "sysctls": []
                },
                "priorityClassName": "",
                "readinessProbe": {
                  "enabled": true,
                  "failureThreshold": 6,
                  "initialDelaySeconds": 5,
                  "periodSeconds": 10,
                  "successThreshold": 1,
                  "timeoutSeconds": 5
                },
                "resources": {},
                "resourcesPreset": "small",
                "schedulerName": "",
                "securityContextConstraints": {
                  "enabled": true
                },
                "service": {
                  "annotations": {},
                  "clusterIP": "",
                  "externalTrafficPolicy": "Cluster",
                  "extraPorts": [],
                  "headless": {
                    "annotations": {}
                  },
                  "loadBalancerClass": "",
                  "loadBalancerIP": "",
                  "loadBalancerSourceRanges": [],
                  "nodePorts": {
                    "postgresql": ""
                  },
                  "ports": {
                    "postgresql": 5432
                  },
                  "sessionAffinity": "None",
                  "sessionAffinityConfig": {},
                  "type": "ClusterIP"
                },
                "sidecars": [],
                "standby": {
                  "enabled": false,
                  "primaryHost": "",
                  "primaryPort": ""
                },
                "startupProbe": {
                  "enabled": false,
                  "failureThreshold": 15,
                  "initialDelaySeconds": 30,
                  "periodSeconds": 10,
                  "successThreshold": 1,
                  "timeoutSeconds": 1
                },
                "terminationGracePeriodSeconds": "",
                "tolerations": [],
                "topologySpreadConstraints": [],
                "updateStrategy": {
                  "rollingUpdate": {},
                  "type": "RollingUpdate"
                }
              },
              "psp": {
                "create": false
              },
              "rbac": {
                "create": false,
                "rules": []
              },
              "readReplicas": {
                "affinity": {},
                "annotations": {},
                "args": [],
                "automountServiceAccountToken": false,
                "command": [],
                "containerSecurityContext": {
                  "allowPrivilegeEscalation": false,
                  "capabilities": {
                    "drop": [
                      "ALL"
                    ]
                  },
                  "enabled": true,
                  "privileged": false,
                  "readOnlyRootFilesystem": true,
                  "runAsGroup": 1001,
                  "runAsNonRoot": true,
                  "runAsUser": 1001,
                  "seLinuxOptions": {},
                  "seccompProfile": {
                    "type": "RuntimeDefault"
                  }
                },
                "customLivenessProbe": {},
                "customReadinessProbe": {},
                "customStartupProbe": {},
                "extendedConfiguration": "",
                "extraEnvVars": [],
                "extraEnvVarsCM": "",
                "extraEnvVarsSecret": "",
                "extraPodSpec": {},
                "extraVolumeMounts": [],
                "extraVolumes": [],
                "hostAliases": [],
                "hostIPC": false,
                "hostNetwork": false,
                "initContainers": [],
                "labels": {},
                "lifecycleHooks": {},
                "livenessProbe": {
                  "enabled": true,
                  "failureThreshold": 6,
                  "initialDelaySeconds": 30,
                  "periodSeconds": 10,
                  "successThreshold": 1,
                  "timeoutSeconds": 5
                },
                "name": "read",
                "networkPolicy": {
                  "allowExternal": true,
                  "allowExternalEgress": true,
                  "enabled": true,
                  "extraEgress": [],
                  "extraIngress": [],
                  "ingressNSMatchLabels": {},
                  "ingressNSPodMatchLabels": {}
                },
                "nodeAffinityPreset": {
                  "key": "",
                  "type": "",
                  "values": []
                },
                "nodeSelector": {},
                "persistence": {
                  "accessModes": [
                    "ReadWriteOnce"
                  ],
                  "annotations": {},
                  "dataSource": {},
                  "enabled": true,
                  "existingClaim": "",
                  "labels": {},
                  "mountPath": "/bitnami/postgresql",
                  "selector": {},
                  "size": "8Gi",
                  "storageClass": "",
                  "subPath": ""
                },
                "persistentVolumeClaimRetentionPolicy": {
                  "enabled": false,
                  "whenDeleted": "Retain",
                  "whenScaled": "Retain"
                },
                "podAffinityPreset": "",
                "podAnnotations": {},
                "podAntiAffinityPreset": "soft",
                "podLabels": {},
                "podSecurityContext": {
                  "enabled": true,
                  "fsGroup": 1001,
                  "fsGroupChangePolicy": "Always",
                  "supplementalGroups": [],
                  "sysctls": []
                },
                "priorityClassName": "",
                "readinessProbe": {
                  "enabled": true,
                  "failureThreshold": 6,
                  "initialDelaySeconds": 5,
                  "periodSeconds": 10,
                  "successThreshold": 1,
                  "timeoutSeconds": 5
                },
                "replicaCount": 1,
                "resources": {},
                "resourcesPreset": "nano",
                "schedulerName": "",
                "service": {
                  "annotations": {},
                  "clusterIP": "",
                  "externalTrafficPolicy": "Cluster",
                  "extraPorts": [],
                  "headless": {
                    "annotations": {}
                  },
                  "loadBalancerClass": "",
                  "loadBalancerIP": "",
                  "loadBalancerSourceRanges": [],
                  "nodePorts": {
                    "postgresql": ""
                  },
                  "ports": {
                    "postgresql": 5432
                  },
                  "sessionAffinity": "None",
                  "sessionAffinityConfig": {},
                  "type": "ClusterIP"
                },
                "sidecars": [],
                "startupProbe": {
                  "enabled": false,
                  "failureThreshold": 15,
                  "initialDelaySeconds": 30,
                  "periodSeconds": 10,
                  "successThreshold": 1,
                  "timeoutSeconds": 1
                },
                "terminationGracePeriodSeconds": "",
                "tolerations": [],
                "topologySpreadConstraints": [],
                "updateStrategy": {
                  "rollingUpdate": {},
                  "type": "RollingUpdate"
                }
              },
              "replication": {
                "applicationName": "my_application",
                "numSynchronousReplicas": 0,
                "synchronousCommit": "off"
              },
              "serviceAccount": {
                "annotations": {},
                "automountServiceAccountToken": false,
                "create": true,
                "name": ""
              },
              "serviceBindings": {
                "enabled": false
              },
              "shmVolume": {
                "enabled": true,
                "sizeLimit": ""
              },
              "tls": {
                "autoGenerated": false,
                "certCAFilename": "",
                "certFilename": "",
                "certKeyFilename": "",
                "certificatesSecret": "",
                "crlFilename": "",
                "enabled": false,
                "preferServerCiphers": true
              },
              "volumePermissions": {
                "containerSecurityContext": {
                  "runAsGroup": 0,
                  "runAsNonRoot": false,
                  "runAsUser": 0,
                  "seLinuxOptions": {},
                  "seccompProfile": {
                    "type": "RuntimeDefault"
                  }
                },
                "enabled": true,
                "image": {
                  "digest": "",
                  "pullPolicy": "IfNotPresent",
                  "pullSecrets": [],
                  "registry": "docker.io",
                  "repository": "bitnami/os-shell",
                  "tag": "12-debian-12-r21"
                },
                "resources": {},
                "resourcesPreset": "nano"
              }
            },
            "priorityClassName": "",
            "rabbitmq": {
              "advancedConfiguration": "",
              "advancedConfigurationExistingSecret": "",
              "affinity": {},
              "args": [],
              "auth": {
                "enableLoopbackUser": false,
                "erlangCookie": "",
                "existingErlangSecret": "{{ include \"common.names.fullname\" . }}-release",
                "existingPasswordSecret": "",
                "existingSecretErlangKey": "",
                "existingSecretPasswordKey": "",
                "password": "guest",
                "securePassword": true,
                "tls": {
                  "autoGenerated": false,
                  "caCertificate": "",
                  "enabled": false,
                  "existingSecret": "",
                  "existingSecretFullChain": false,
                  "failIfNoPeerCert": true,
                  "overrideCaCertificate": "",
                  "serverCertificate": "",
                  "serverKey": "",
                  "sslOptionsPassword": {
                    "enabled": false,
                    "existingSecret": "",
                    "key": "",
                    "password": ""
                  },
                  "sslOptionsVerify": "verify_peer"
                },
                "username": "guest"
              },
              "automountServiceAccountToken": true,
              "clusterDomain": "cluster.local",
              "clustering": {
                "addressType": "hostname",
                "enabled": true,
                "forceBoot": true,
                "name": "",
                "partitionHandling": "autoheal",
                "rebalance": false
              },
              "command": [],
              "common": {
                "exampleValue": "common-chart",
                "global": {
                  "compatibility": {
                    "openshift": {
                      "adaptSecurityContext": "auto"
                    }
                  },
                  "imagePullSecrets": [],
                  "imageRegistry": "",
                  "postgresql": {
                    "service": {
                      "ports": {
                        "postgresql": ""
                      }
                    }
                  },
                  "storageClass": ""
                }
              },
              "commonAnnotations": {},
              "commonLabels": {},
              "communityPlugins": "",
              "configuration": "## Username and password\ndefault_user = {{ .Values.auth.username }}\n{{- if and (not .Values.auth.securePassword) .Values.auth.password }}\ndefault_pass = {{ .Values.auth.password }}\n{{- end }}\n{{- if .Values.clustering.enabled }}\n## Clustering\n##\ncluster_name = {{ default (include \"common.names.fullname\" .) .Values.clustering.name }}\ncluster_formation.peer_discovery_backend  = rabbit_peer_discovery_k8s\ncluster_formation.k8s.host = kubernetes.default\ncluster_formation.k8s.address_type = {{ .Values.clustering.addressType }}\n{{- $svcName := printf \"%s-%s\" (include \"common.names.fullname\" .) (default \"headless\" .Values.servicenameOverride) }}\ncluster_formation.k8s.service_name = {{ $svcName }}\ncluster_formation.k8s.hostname_suffix = .{{ $svcName }}.{{ include \"common.names.namespace\" . }}.svc.{{ .Values.clusterDomain }}\ncluster_formation.node_cleanup.interval = 10\ncluster_formation.node_cleanup.only_log_warning = true\ncluster_partition_handling = {{ .Values.clustering.partitionHandling }}\n{{- end }}\n{{ if and .Values.clustering.enabled .Values.loadDefinition.enabled }}\ncluster_formation.target_cluster_size_hint = {{ .Values.replicaCount }}\n{{ end }}\n{{- if .Values.loadDefinition.enabled }}\nload_definitions = {{ .Values.loadDefinition.file }}\n{{- end }}\n# queue master locator\nqueue_master_locator = min-masters\n# enable loopback user\n{{- if not (empty .Values.auth.username) }}\nloopback_users.{{ .Values.auth.username }} = {{ .Values.auth.enableLoopbackUser }}\n{{- else}}\nloopback_users.guest = {{ .Values.auth.enableLoopbackUser }}\n{{- end }}\n{{ template \"rabbitmq.extraConfiguration\" . }}\n{{- if .Values.auth.tls.enabled }}\nssl_options.verify = {{ .Values.auth.tls.sslOptionsVerify }}\nlisteners.ssl.default = {{ .Values.service.ports.amqpTls }}\nssl_options.fail_if_no_peer_cert = {{ .Values.auth.tls.failIfNoPeerCert }}\nssl_options.cacertfile = /opt/bitnami/rabbitmq/certs/ca_certificate.pem\nssl_options.certfile = /opt/bitnami/rabbitmq/certs/server_certificate.pem\nssl_options.keyfile = /opt/bitnami/rabbitmq/certs/server_key.pem\n{{- if .Values.auth.tls.sslOptionsPassword.enabled }}\nssl_options.password = {{ template \"rabbitmq.tlsSslOptionsPassword\" . }}\n{{- end }}\n{{- end }}\n{{- if .Values.ldap.enabled }}\nauth_backends.1.authn = ldap\nauth_backends.1.authz = {{ ternary \"ldap\" \"internal\" .Values.ldap.authorisationEnabled }}\nauth_backends.2 = internal\n{{- $host :=  list }}\n{{- $port :=  ternary 636 389 .Values.ldap.tls.enabled }}\n{{- if .Values.ldap.uri }}\n{{- $hostPort := get (urlParse .Values.ldap.uri) \"host\" }}\n{{- $host = list (index (splitList \":\" $hostPort) 0) -}}\n{{- if (contains \":\" $hostPort) }}\n{{- $port = index (splitList \":\" $hostPort) 1 -}}\n{{- end }}\n{{- end }}\n{{- range $index, $server := concat $host .Values.ldap.servers }}\nauth_ldap.servers.{{ add $index 1 }} = {{ $server }}\n{{- end }}\nauth_ldap.port = {{ coalesce .Values.ldap.port $port }}\n{{- if or .Values.ldap.user_dn_pattern .Values.ldap.userDnPattern }}\nauth_ldap.user_dn_pattern = {{ coalesce .Values.ldap.user_dn_pattern .Values.ldap.userDnPattern }}\n{{- end }}\n{{- if .Values.ldap.basedn }}\nauth_ldap.dn_lookup_base = {{ .Values.ldap.basedn }}\n{{- end }}\n{{- if .Values.ldap.uidField }}\nauth_ldap.dn_lookup_attribute = {{ .Values.ldap.uidField }}\n{{- end }}\n{{- if .Values.ldap.binddn }}\nauth_ldap.dn_lookup_bind.user_dn = {{ .Values.ldap.binddn }}\nauth_ldap.dn_lookup_bind.password = {{ required \"'ldap.bindpw' is required when 'ldap.binddn' is defined\" .Values.ldap.bindpw }}\n{{- end }}\n{{- if .Values.ldap.tls.enabled }}\nauth_ldap.use_ssl = {{ not .Values.ldap.tls.startTls }}\nauth_ldap.use_starttls = {{ .Values.ldap.tls.startTls }}\n{{- if .Values.ldap.tls.CAFilename }}\nauth_ldap.ssl_options.cacertfile = {{ .Values.ldap.tls.certificatesMountPath }}/{{ .Values.ldap.tls.CAFilename }}\n{{- end }}\n{{- if .Values.ldap.tls.certFilename }}\nauth_ldap.ssl_options.certfile = {{ .Values.ldap.tls.certificatesMountPath }}/{{ .Values.ldap.tls.certFilename }}\nauth_ldap.ssl_options.keyfile = {{ .Values.ldap.tls.certificatesMountPath }}/{{ required \"'ldap.tls.certKeyFilename' is required when 'ldap.tls.certFilename' is defined\" .Values.ldap.tls.certKeyFilename }}\n{{- end }}\n{{- if .Values.ldap.tls.skipVerify }}\nauth_ldap.ssl_options.verify = verify_none\nauth_ldap.ssl_options.fail_if_no_peer_cert = false\n{{- else if .Values.ldap.tls.verify }}\nauth_ldap.ssl_options.verify = {{ .Values.ldap.tls.verify }}\n{{- end }}\n{{- end }}\n{{- end }}\n## Prometheus metrics\n##\nprometheus.tcp.port = {{ .Values.containerPorts.metrics }}\n{{- if .Values.memoryHighWatermark.enabled }}\n## Memory Threshold\n##\ntotal_memory_available_override_value = {{ include \"rabbitmq.toBytes\" (dig \"limits\" \"memory\" \"\" .Values.resources) }}\n{{- if (eq .Values.memoryHighWatermark.type \"absolute\") }}\nvm_memory_high_watermark.{{ .Values.memoryHighWatermark.type }} = {{ include \"rabbitmq.toBytes\" .Values.memoryHighWatermark.value }}\n{{- else if (eq .Values.memoryHighWatermark.type \"relative\") }}\nvm_memory_high_watermark.{{ .Values.memoryHighWatermark.type }} = {{ .Values.memoryHighWatermark.value }}\n{{- end }}\n## TCP Listen Options\n##\ntcp_listen_options.backlog = {{ .Values.tcpListenOptions.backlog }}\ntcp_listen_options.nodelay = {{ .Values.tcpListenOptions.nodelay }}\ntcp_listen_options.linger.on      = {{ .Values.tcpListenOptions.linger.lingerOn }}\ntcp_listen_options.linger.timeout = {{ .Values.tcpListenOptions.linger.timeout }}\ntcp_listen_options.keepalive = {{ .Values.tcpListenOptions.keepalive }}\n{{- end }}",
              "configurationExistingSecret": "",
              "containerPorts": {
                "amqp": 5672,
                "amqpTls": 5671,
                "dist": 25672,
                "epmd": 4369,
                "manager": 15672,
                "metrics": 9419
              },
              "containerSecurityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": [
                    "ALL"
                  ]
                },
                "enabled": true,
                "readOnlyRootFilesystem": true,
                "runAsGroup": 1001,
                "runAsNonRoot": true,
                "runAsUser": 1001,
                "seLinuxOptions": null,
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "customLivenessProbe": {},
              "customReadinessProbe": {},
              "customStartupProbe": {},
              "diagnosticMode": {
                "args": [
                  "infinity"
                ],
                "command": [
                  "sleep"
                ],
                "enabled": false
              },
              "dnsConfig": {},
              "dnsPolicy": "",
              "enableServiceLinks": true,
              "extraConfiguration": "raft.wal_max_size_bytes = 1048576\n",
              "extraConfigurationExistingSecret": "",
              "extraContainerPorts": [],
              "extraDeploy": [],
              "extraEnvVars": [],
              "extraEnvVarsCM": "",
              "extraEnvVarsSecret": "",
              "extraPlugins": "rabbitmq_amqp1_0, rabbitmq_jms_topic_exchange",
              "extraSecrets": {},
              "extraSecretsPrependReleaseName": false,
              "extraVolumeMounts": [],
              "extraVolumes": [],
              "featureFlags": "",
              "fullnameOverride": "",
              "global": {
                "compatibility": {
                  "openshift": {
                    "adaptSecurityContext": "auto"
                  }
                },
                "imagePullSecrets": [],
                "imageRegistry": "",
                "postgresql": {
                  "service": {
                    "ports": {
                      "postgresql": ""
                    }
                  }
                },
                "storageClass": ""
              },
              "hostAliases": [],
              "image": {
                "debug": false,
                "digest": "",
                "pullPolicy": "IfNotPresent",
                "pullSecrets": [],
                "registry": "docker.io",
                "repository": "bitnami/rabbitmq",
                "tag": "3.12.13-debian-12-r2"
              },
              "ingress": {
                "annotations": {},
                "enabled": false,
                "existingSecret": "",
                "extraHosts": [],
                "extraPaths": [],
                "extraRules": [],
                "extraTls": [],
                "hostname": "rabbitmq.local",
                "ingressClassName": "",
                "path": "/",
                "pathType": "ImplementationSpecific",
                "secrets": [],
                "selfSigned": false,
                "tls": false
              },
              "initContainers": [],
              "initScripts": {},
              "initScriptsCM": "",
              "initScriptsSecret": "",
              "install": true,
              "kubeVersion": "",
              "ldap": {
                "authorisationEnabled": false,
                "basedn": "",
                "binddn": "",
                "bindpw": "",
                "enabled": false,
                "port": "",
                "servers": [],
                "tls": {
                  "CAFilename": "",
                  "certFilename": "",
                  "certKeyFilename": "",
                  "certificatesMountPath": "/opt/bitnami/rabbitmq/ldap/certs",
                  "certificatesSecret": "",
                  "enabled": false,
                  "skipVerify": false,
                  "startTls": false,
                  "verify": "verify_peer"
                },
                "uidField": "",
                "uri": "",
                "userDnPattern": ""
              },
              "lifecycleHooks": {},
              "livenessProbe": {
                "enabled": true,
                "failureThreshold": 6,
                "initialDelaySeconds": 120,
                "periodSeconds": 30,
                "successThreshold": 1,
                "timeoutSeconds": 20
              },
              "loadDefinition": {
                "enabled": true,
                "existingSecret": "{{ include \"common.names.fullname\" . }}-release",
                "file": "/app/release_load_definition.json"
              },
              "logs": "-",
              "maxAvailableSchedulers": "",
              "memoryHighWatermark": {
                "enabled": false,
                "type": "relative",
                "value": 0.4
              },
              "metrics": {
                "enabled": false,
                "plugins": "rabbitmq_prometheus",
                "podAnnotations": {
                  "prometheus.io/port": "{{ .Values.service.ports.metrics }}",
                  "prometheus.io/scrape": "true"
                },
                "prometheusRule": {
                  "additionalLabels": {},
                  "enabled": false,
                  "namespace": "",
                  "rules": []
                },
                "serviceMonitor": {
                  "annotations": {},
                  "enabled": false,
                  "honorLabels": false,
                  "interval": "30s",
                  "jobLabel": "",
                  "labels": {},
                  "metricRelabelings": [],
                  "namespace": "",
                  "params": {},
                  "path": "",
                  "podTargetLabels": {},
                  "relabelings": [],
                  "scrapeTimeout": "",
                  "selector": {},
                  "targetLabels": {}
                }
              },
              "nameOverride": "",
              "namespaceOverride": "",
              "networkPolicy": {
                "addExternalClientAccess": true,
                "allowExternal": true,
                "allowExternalEgress": true,
                "enabled": true,
                "extraEgress": [],
                "extraIngress": [],
                "ingressNSMatchLabels": {},
                "ingressNSPodMatchLabels": {},
                "ingressPodMatchLabels": {},
                "kubeAPIServerPorts": [
                  443,
                  6443,
                  8443
                ]
              },
              "nodeAffinityPreset": {
                "key": "",
                "type": "",
                "values": []
              },
              "nodeSelector": {},
              "onlineSchedulers": "",
              "pdb": {
                "create": false,
                "maxUnavailable": "",
                "minAvailable": 1
              },
              "persistence": {
                "accessModes": [
                  "ReadWriteOnce"
                ],
                "annotations": {},
                "enabled": true,
                "existingClaim": "",
                "labels": {},
                "mountPath": "/opt/bitnami/rabbitmq/.rabbitmq/mnesia",
                "selector": {},
                "size": "8Gi",
                "storageClass": "",
                "subPath": ""
              },
              "persistentVolumeClaimRetentionPolicy": {
                "enabled": false,
                "whenDeleted": "Retain",
                "whenScaled": "Retain"
              },
              "plugins": "rabbitmq_management rabbitmq_peer_discovery_k8s",
              "podAffinityPreset": "",
              "podAnnotations": {},
              "podAntiAffinityPreset": "soft",
              "podLabels": {},
              "podManagementPolicy": "OrderedReady",
              "podSecurityContext": {
                "enabled": true,
                "fsGroup": 1001,
                "fsGroupChangePolicy": "Always",
                "supplementalGroups": [],
                "sysctls": []
              },
              "priorityClassName": "",
              "rbac": {
                "create": true,
                "rules": []
              },
              "readinessProbe": {
                "enabled": true,
                "failureThreshold": 3,
                "initialDelaySeconds": 10,
                "periodSeconds": 30,
                "successThreshold": 1,
                "timeoutSeconds": 20
              },
              "replicaCount": 3,
              "resources": {},
              "resourcesPreset": "micro",
              "schedulerName": "",
              "securityContextConstraints": {
                "enabled": true
              },
              "service": {
                "allocateLoadBalancerNodePorts": true,
                "annotations": {},
                "annotationsHeadless": {},
                "clusterIP": "",
                "distPortEnabled": true,
                "epmdPortEnabled": true,
                "externalIPs": [],
                "externalTrafficPolicy": "Cluster",
                "extraPorts": [],
                "headless": {
                  "annotations": {}
                },
                "labels": {},
                "loadBalancerClass": "",
                "loadBalancerIP": "",
                "loadBalancerSourceRanges": [],
                "managerPortEnabled": true,
                "nodePorts": {
                  "amqp": "",
                  "amqpTls": "",
                  "dist": "",
                  "epmd": "",
                  "manager": "",
                  "metrics": ""
                },
                "portEnabled": true,
                "portNames": {
                  "amqp": "amqp",
                  "amqpTls": "amqp-tls",
                  "dist": "dist",
                  "epmd": "epmd",
                  "manager": "http-stats",
                  "metrics": "metrics"
                },
                "ports": {
                  "amqp": 5672,
                  "amqpTls": 5671,
                  "dist": 25672,
                  "epmd": 4369,
                  "manager": 15672,
                  "metrics": 9419
                },
                "sessionAffinity": "None",
                "sessionAffinityConfig": {},
                "type": "ClusterIP"
              },
              "serviceAccount": {
                "annotations": {},
                "automountServiceAccountToken": false,
                "create": true,
                "name": ""
              },
              "serviceBindings": {
                "enabled": false
              },
              "servicenameOverride": "",
              "sidecars": [],
              "startupProbe": {
                "enabled": false,
                "failureThreshold": 3,
                "initialDelaySeconds": 10,
                "periodSeconds": 30,
                "successThreshold": 1,
                "timeoutSeconds": 20
              },
              "statefulsetAnnotations": {},
              "statefulsetLabels": {},
              "tcpListenOptions": {
                "backlog": 128,
                "keepalive": false,
                "linger": {
                  "lingerOn": true,
                  "timeout": 0
                },
                "nodelay": true
              },
              "terminationGracePeriodSeconds": 120,
              "tolerations": [],
              "topologySpreadConstraints": [],
              "ulimitNofiles": "65536",
              "updateStrategy": {
                "type": "RollingUpdate"
              },
              "volumePermissions": {
                "containerSecurityContext": {
                  "runAsGroup": 0,
                  "runAsNonRoot": false,
                  "runAsUser": 0,
                  "seLinuxOptions": null,
                  "seccompProfile": {
                    "type": "RuntimeDefault"
                  }
                },
                "enabled": true,
                "image": {
                  "digest": "",
                  "pullPolicy": "IfNotPresent",
                  "pullSecrets": [],
                  "registry": "docker.io",
                  "repository": "bitnami/os-shell",
                  "tag": "12-debian-12-r21"
                },
                "resources": {},
                "resourcesPreset": "nano"
              }
            },
            "rbac": {
              "create": true
            },
            "replicaCount": 3,
            "resources": {},
            "resourcesPreset": "micro",
            "route": {
              "annotations": {
                "haproxy.router.openshift.io/cookie_name": "JSESSIONID",
                "haproxy.router.openshift.io/disable_cookies": "false",
                "haproxy.router.openshift.io/rewrite-target": "/",
                "haproxy.router.openshift.io/timeout": "120s"
              },
              "enabled": false,
              "hostname": "",
              "path": "/",
              "tls": {
                "caCertificate": "",
                "certificate": "",
                "destinationCACertificate": "",
                "enabled": false,
                "insecureEdgeTerminationPolicy": "",
                "key": "",
                "secretName": "",
                "selfSigned": false,
                "termination": "edge"
              }
            },
            "schedulerName": "",
            "securityContextConstraints": {
              "enabled": true
            },
            "service": {
              "annotations": {},
              "annotationsHeadless": {},
              "clusterIP": "",
              "externalIPs": [],
              "externalTrafficPolicy": "Cluster",
              "extraPorts": [],
              "labels": {},
              "loadBalancerIP": "",
              "loadBalancerSourceRanges": [],
              "nodePorts": {
                "releaseHttp": "",
                "releaseHttps": ""
              },
              "portEnabled": true,
              "portNames": {
                "releaseHttp": "release-http",
                "releaseHttps": "release-https"
              },
              "ports": {
                "releaseHttp": 80,
                "releaseHttps": 443
              },
              "sessionAffinity": "None",
              "sessionAffinityConfig": {},
              "type": "ClusterIP"
            },
            "serviceAccount": {
              "annotations": {},
              "automountServiceAccountToken": true,
              "create": true,
              "name": ""
            },
            "sidecars": [],
            "ssl": {
              "enabled": false,
              "keystore": {
                "valueFrom": {
                  "secretKeyRef": {
                    "key": "keystore.{{ .Values.ssl.keystoreType }}",
                    "name": "{{ include \"common.tplvalues.render\" ( dict \"value\" .Values.hooks.genSelfSigned.name \"context\" $ ) }}"
                  }
                }
              },
              "keystoreKeypassword": null,
              "keystorePassword": null,
              "keystoreType": "pkcs12"
            },
            "statefulsetAnnotations": {},
            "statefulsetLabels": {},
            "terminationGracePeriodSeconds": 200,
            "tolerations": [],
            "topologySpreadConstraints": [],
            "truststore": {
              "params": "{{- if .Values.truststore.truststore }} -Djavax.net.ssl.trustStore=$(TRUSTSTORE) -Djavax.net.ssl.trustStorePassword=$(TRUSTSTORE_PASSWORD) -Djavax.net.ssl.trustStoreType=$(TRUSTSTORE_TYPE){{- end }}",
              "password": null,
              "truststore": {},
              "type": "pkcs12"
            },
            "updateStrategy": {
              "type": "RollingUpdate"
            },
            "useIpAsHostname": false,
            "volumePermissions": {
              "containerSecurityContext": {
                "runAsGroup": 0,
                "runAsNonRoot": false,
                "runAsUser": 0,
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              },
              "enabled": false,
              "image": {
                "digest": "",
                "pullPolicy": "IfNotPresent",
                "pullSecrets": [],
                "registry": "docker.io",
                "repository": "bitnami/os-shell",
                "tag": "12-debian-12-r16"
              },
              "resources": {
                "limits": {
                  "cpu": "150m",
                  "ephemeral-storage": "2Gi",
                  "memory": "192Mi"
                },
                "requests": {
                  "cpu": "100m",
                  "ephemeral-storage": "50Mi",
                  "memory": "128Mi"
                }
              },
              "script": "#!/bin/bash\n\ndeclare -a paths=( {{ range $path := .Values.persistence.paths }} \"{{ $path }}\"{{ end }} )\nfor path in \"${paths[@]}\"; do\n  echo \"Changing ownership to {{ .Values.containerSecurityContext.runAsUser }}:{{ .Values.podSecurityContext.fsGroup }} for ${path}\"\n  chown \"{{ .Values.containerSecurityContext.runAsUser }}:{{ .Values.podSecurityContext.fsGroup }}\" \"${path}\"\n  find \"${path}\" -mindepth 1 -maxdepth 1 -not -name \".snapshot\" -not -name \"lost+found\" | \\\n    xargs -r chown -R \"{{ .Values.containerSecurityContext.runAsUser }}:{{ .Values.podSecurityContext.fsGroup }}\"\ndone\n"
            }
          }
        }
      ]
    alm-examples-metadata: |-
      {
        "dair-min": {
          "description": "Minimal configuration for the Digital.ai Release operator without SCC creation and with embedded Postgresql and RabbitMQ and route setup"
        },
        "dair-placeholders": {
          "description": "Configuration for the Digital.ai Release operator with placeholders to set. Set at least mandatory placeholders, others that are not set delete"
        },
        "digitalairelease-sample": {
          "description": "Sample configuration with all default values"
        },
      }
    capabilities: Basic Install
    categories: Integration & Delivery
    containerImage: docker.io/xebialabs/release-operator@sha256:f9d579bd82ec7380c7d9fef996c9220f13069bf6880a50b0899387472eb613db
    createdAt: "2024-10-03T11:57:08Z"
    description: Digital.ai Release empowers developer teams to seamlessly release and deploy software on a large scale across hybrid environments, all while ensuring that compliance and security requirements are effectively in place.
    features.operators.openshift.io/disconnected: "true"
    features.operators.openshift.io/fips-compliant: "false"
    features.operators.openshift.io/proxy-aware: "false"
    features.operators.openshift.io/tls-profiles: "false"
    features.operators.openshift.io/token-auth-aws: "false"
    features.operators.openshift.io/token-auth-azure: "false"
    features.operators.openshift.io/token-auth-gcp: "false"
    operators.operatorframework.io/builder: operator-sdk-v1.36.1
    operators.operatorframework.io/project_layout: helm.sdk.operatorframework.io/v1
    repository: https://github.com/digital-ai/release-helm-chart
    support: Digital.ai
  name: digitalai-release-operator.v24.1.8
  namespace: placeholder
spec:
  apiservicedefinitions: {}
  customresourcedefinitions:
    owned:
      - kind: DigitalaiRelease
        name: digitalaireleases.xlr.digital.ai
        version: v1alpha1
  description: "Digital.ai Release empowers developer teams to seamlessly release and deploy software on a large scale across hybrid environments, all while ensuring that compliance and security requirements are effectively in place.\n\n## About this Operator\n\nDigital.ai Releas operator is based on helm chart that is available from [here](https://github.com/digital-ai/release-helm-chart).\nThe operator includes subcharts which are dependencies for the Release containers to run successfully. \nNginx Ingress and Haproxy ingress are disabled and not used with installations on the Openshift (and the images are not used in the installation)\n\n### Subcharts include:\n\n- [PostgresSQL](https://github.com/bitnami/charts/tree/main/bitnami/postgresql)\n- [RabbitMQ](https://github.com/bitnami/charts/tree/main/bitnami/rabbitmq)\n- [Nginx Ingress controller](https://github.com/bitnami/charts/tree/main/bitnami/nginx-ingress-controller)\n- [Haproxy Ingress controller](https://github.com/jcmoraisjr/haproxy-ingress/)\n\n## Installation\n\nThe installation can be done using the sample configuration provided below. Please note that this is a minimal configuration and it's not recommended for production use.\nThis configuration disables SCC creation and uses embedded Postgresql and RabbitMQ.\n\n```yaml\napiVersion: xlr.digital.ai/v1alpha1\nkind: DigitalaiRelease\nmetadata:\n  name: dair-min\nspec:\n  k8sSetup:\n    platform: Openshift\n  auth:\n    adminPassword: 'admin'\n  licenseAcceptEula: true\n  keystore:\n    passphrase: 'test1234'\n    keystore: 'zs7OzgAAAAIAAAABAAAAAwAWZGVwbG95aXQtcGFzc3N3b3JkLWtleQAAAY66Cf9nrO0ABXNyADNjb20uc3VuLmNyeXB0by5wcm92aWRlci5TZWFsZWRPYmplY3RGb3JLZXlQcm90ZWN0b3LNV8pZ5zC7UwIAAHhyABlqYXZheC5jcnlwdG8uU2VhbGVkT2JqZWN0PjY9psO3VHACAARbAA1lbmNvZGVkUGFyYW1zdAACW0JbABBlbmNyeXB0ZWRDb250ZW50cQB+AAJMAAlwYXJhbXNBbGd0ABJMamF2YS9sYW5nL1N0cmluZztMAAdzZWFsQWxncQB+AAN4cHVyAAJbQqzzF/gGCFTgAgAAeHAAAAARMA8ECD0yEJAHFhBOAgMDDUB1cQB+AAUAAACQUhNP1jw1dwOxWArpm0JBAX40fr4fvvAmyGGrx7mzlCVjb4uOxi4IroUoxcbBx8cpjiS6QzCUg6chsCQ0IABB6s7Tow2VR8vRlxXyxpJXvlUwfH8hwJn/ZK8rQuDsCkzd2rC+lYR0pEO0lUP3/AQ7dHJ4TgloyZOKKbWRNJvE4K4EOafqASuNTkyrr0SPflRydAAWUEJFV2l0aE1ENUFuZFRyaXBsZURFU3QAFlBCRVdpdGhNRDVBbmRUcmlwbGVERVO3iVKkgrEJQ78wacyjhp3UZBSB/Q=='\n  replicaCount: 1\n  hooks:\n    getLicense:\n      enabled: true\n  persistence:\n    storageClass: ''\n    accessModes:\n      - ReadWriteOnce\n    size: 1Gi\n  podSecurityContext:\n    runAsUser: null\n    runAsGroup: null\n    fsGroup: null\n  containerSecurityContext:\n    runAsUser: null\n    runAsGroup: null\n  securityContextConstraints:\n    enabled: false\n  volumePermissions:\n    enabled: false\n  route:\n    enabled: false\n    annotations:\n      haproxy.router.openshift.io/cookie_name: JSESSIONID\n      haproxy.router.openshift.io/disable_cookies: 'false'\n      haproxy.router.openshift.io/rewrite-target: /\n      haproxy.router.openshift.io/timeout: 120s\n    hostname: '<mandatory-release-hostname>'\n    path: /\n    tls:\n      enabled: true\n      termination: edge\n  postgresql:\n    install: true\n    primary:\n      persistence:\n        size: 1Gi\n        storageClass: ''\n      resourcesPreset: \"small\"\n      podSecurityContext:\n        enabled: false\n        runAsUser: null\n        runAsGroup: null\n        fsGroup: null\n      containerSecurityContext:\n        enabled: false\n        runAsUser: null\n        runAsGroup: null\n      securityContextConstraints:\n        enabled: false\n    volumePermissions:\n      enabled: false\n  rabbitmq:\n    install: true\n    persistence:\n      size: 1Gi\n      storageClass: ''\n    replicaCount: 1\n    podSecurityContext:\n      enabled: false\n      runAsUser: null\n      runAsGroup: null\n      fsGroup: null\n    containerSecurityContext:\n      enabled: false\n      runAsUser: null\n      runAsGroup: null\n    securityContextConstraints:\n      enabled: false\n    volumePermissions:\n      enabled: false\n```\n\nIf SCC is required, it must be managed manually. The necessary permissions for accessing SecurityContextConstraints must be granted when SCC is enabled; otherwise, the following error will occur:\n\n```bash\nsecuritycontextconstraints.security.openshift.io \\\"dair-doc-digitalai-release-privileged\\\" is forbidden: User \\\"system:serviceaccount:openshift-operators:xlr-controller-manager\\\" cannot get resource \\\"securitycontextconstraints\\\" in API group \\\"security.openshift.io\\\" at the cluster scope\"\n```\n\n#### Configuration Details\n\nThe sample configuration uses:\n\n- Autogenerated limited license\n- Simple administrator initial password\n- Default keystore setup\n- Only one replica is set for all pods\n- All Pods are missing resource limit setup\n- Default storage class and minimal size for persistent storage\n- Release pods are using persistence access mode `ReadWriteOnce`, for Release pods the requirement is to have `ReadWriteMany`\n- Embedded PostgreSQL for DB management\n- Embedded RabbitMQ for message queue management\n\n#### Security Configuration Details\n\n- `securityContextConstraints.enabled: false` - disables creation of SCCs;\n- `podSecurityContext/containerSecurityContext` - that disables the use of specific UIDs or GIDs, so the IDs can be assigned from the defined ranges (for example from restricted SCC);\n- `volumePermissions.enabled: false` - disables automatic corrections of the mounted folders.\n\n## Customize Your Configuration\n\nConfigurations can be further personalized. Here are some areas you might want to consider:\n\n- **External DB:** For avoiding uncertified container images required by the subcharts, refer to these [instructions for setting up an external DB](https://docs.digital.ai/bundle/devops-release-version-v.24.1/page/release/operator/xl-op-release-external-db-migration.html).\n- **External Message Queue:** To set up an external message queue, follow this [guide](https://docs.digital.ai/bundle/devops-release-version-v.24.1/page/release/operator/xl-op-release-external-mq-migration.html).\n- **Custom License:** To apply a custom license, refer to this [process](https://docs.digital.ai/bundle/devops-release-version-v.24.1/page/release/operator/xl-op-release-license-update.html).\n- **Custom Configuration:** For modifying the configuration files, use this [guide](https://docs.digital.ai/bundle/devops-release-version-v.24.1/page/release/operator/xl-op-release-customize.html).\n- **Truststore Setup:** For modifying default truststore for Release, use this [guide](https://docs.digital.ai/bundle/devops-release-version-v.24.1/page/release/operator/xl-op-release-setup-truststore.html).\n- **Plugin Management:** Managing plugins can be done using the following methods:\n    - [Plugin Management using XL CLI](https://docs.digital.ai/bundle/devops-release-version-v.24.1/page/release/operator/xl-op-release-plugin-management.html)\n    - [Managing Plugins Offline for Kubernetes Environment](https://docs.digital.ai/bundle/devops-release-version-v.24.1/page/release/operator/xl-op-release-offline-plugin-management.html)"
  displayName: Digital.ai Release
  icon:
    - base64data: 
      mediatype: image/svg+xml
  install:
    spec:
      clusterPermissions:
        - rules:
            - apiGroups:
                - ""
              resources:
                - namespaces
              verbs:
                - get
            - apiGroups:
                - ""
              resources:
                - secrets
              verbs:
                - '*'
            - apiGroups:
                - ""
              resources:
                - events
              verbs:
                - create
            - apiGroups:
                - xlr.digital.ai
              resources:
                - digitalaireleases
                - digitalaireleases/status
                - digitalaireleases/finalizers
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - ""
              resources:
                - pods
                - services
                - services/finalizers
                - endpoints
                - persistentvolumeclaims
                - events
                - configmaps
                - secrets
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - apps
              resources:
                - deployments
                - daemonsets
                - replicasets
                - statefulsets
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - ""
              resources:
                - serviceaccounts
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - batch
              resources:
                - jobs
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - rbac.authorization.k8s.io
              resources:
                - rolebindings
                - roles
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - networking.k8s.io
              resources:
                - networkpolicies
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - route.openshift.io
              resources:
                - '*'
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - authentication.k8s.io
              resources:
                - tokenreviews
              verbs:
                - create
            - apiGroups:
                - authorization.k8s.io
              resources:
                - subjectaccessreviews
              verbs:
                - create
          serviceAccountName: xlr-controller-manager
      deployments:
        - label:
            app.kubernetes.io/managed-by: kustomize
            app.kubernetes.io/name: xlr
            control-plane: controller-manager
          name: xlr-controller-manager
          spec:
            replicas: 1
            selector:
              matchLabels:
                control-plane: controller-manager
            strategy: {}
            template:
              metadata:
                annotations:
                  kubectl.kubernetes.io/default-container: manager
                labels:
                  control-plane: controller-manager
              spec:
                containers:
                  - args:
                      - --secure-listen-address=0.0.0.0:8443
                      - --upstream=http://127.0.0.1:8080/
                      - --logtostderr=true
                      - --v=0
                    image: gcr.io/kubebuilder/kube-rbac-proxy@sha256:771a9a173e033a3ad8b46f5c00a7036eaa88c8d8d1fbd89217325168998113ea
                    name: kube-rbac-proxy
                    ports:
                      - containerPort: 8443
                        name: https
                        protocol: TCP
                    resources:
                      limits:
                        cpu: 500m
                        memory: 128Mi
                      requests:
                        cpu: 5m
                        memory: 64Mi
                    securityContext:
                      allowPrivilegeEscalation: false
                      capabilities:
                        drop:
                          - ALL
                  - args:
                      - --health-probe-bind-address=:8081
                      - --metrics-bind-address=127.0.0.1:8080
                      - --leader-elect
                      - --leader-election-id=xlr
                    env:
                      - name: POD_NAME
                        valueFrom:
                          fieldRef:
                            fieldPath: metadata.name
                      - name: RELATED_IMAGE_RELEASE
                        value: docker.io/xebialabs/xl-release@sha256:6a32ee274c533a7b06cea948fae131a8b0d7d5111aee11a0e30094fb784c7379
                      - name: RELATED_IMAGE_RELEASE_VOLUME_PERMISSIONS
                        value: docker.io/xebialabs/xl-release@sha256:6a32ee274c533a7b06cea948fae131a8b0d7d5111aee11a0e30094fb784c7379
                      - name: RELATED_IMAGE_RELEASE_BUSY_BOX
                        value: docker.io/xebialabs/xl-release@sha256:6a32ee274c533a7b06cea948fae131a8b0d7d5111aee11a0e30094fb784c7379
                    image: docker.io/xebialabs/release-operator@sha256:f9d579bd82ec7380c7d9fef996c9220f13069bf6880a50b0899387472eb613db
                    livenessProbe:
                      httpGet:
                        path: /healthz
                        port: 8081
                      initialDelaySeconds: 15
                      periodSeconds: 20
                    name: manager
                    readinessProbe:
                      httpGet:
                        path: /readyz
                        port: 8081
                      initialDelaySeconds: 5
                      periodSeconds: 10
                    resources:
                      limits:
                        cpu: 500m
                        memory: 512Mi
                      requests:
                        cpu: 10m
                        memory: 64Mi
                    securityContext:
                      allowPrivilegeEscalation: false
                      capabilities:
                        drop:
                          - ALL
                securityContext:
                  runAsNonRoot: true
                serviceAccountName: xlr-controller-manager
                terminationGracePeriodSeconds: 10
      permissions:
        - rules:
            - apiGroups:
                - ""
              resources:
                - configmaps
              verbs:
                - get
                - list
                - watch
                - create
                - update
                - patch
                - delete
            - apiGroups:
                - coordination.k8s.io
              resources:
                - leases
              verbs:
                - get
                - list
                - watch
                - create
                - update
                - patch
                - delete
            - apiGroups:
                - ""
              resources:
                - events
              verbs:
                - create
                - patch
          serviceAccountName: xlr-controller-manager
    strategy: deployment
  installModes:
    - supported: true
      type: OwnNamespace
    - supported: true
      type: SingleNamespace
    - supported: true
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
  keywords:
    - digitalai-release-operator
    - digitalai
    - digital.ai
    - release
    - devops
  links:
    - name: Digital.ai Release
      url: https://digital.ai/products/release/
    - name: Digital.ai Release Documentation
      url: https://docs.digital.ai/bundle/devops-release-version-v.24.1/page/release/operator/xl-op-before-you-begin.html
    - name: Digital.ai Release Helm Chart
      url: https://github.com/digital-ai/release-helm-chart
  maintainers:
    - email: support@digital.ai
      name: support
  maturity: alpha
  minKubeVersion: 1.23.0
  provider:
    name: Digital.ai
    url: https://digital.ai
  relatedImages:
    - image: docker.io/xebialabs/xl-release@sha256:6a32ee274c533a7b06cea948fae131a8b0d7d5111aee11a0e30094fb784c7379
      name: ""
    - image: gcr.io/kubebuilder/kube-rbac-proxy@sha256:771a9a173e033a3ad8b46f5c00a7036eaa88c8d8d1fbd89217325168998113ea
      name: kube-rbac-proxy
    - image: docker.io/xebialabs/release-operator@sha256:f9d579bd82ec7380c7d9fef996c9220f13069bf6880a50b0899387472eb613db
      name: manager
    - image: docker.io/xebialabs/xl-release@sha256:6a32ee274c533a7b06cea948fae131a8b0d7d5111aee11a0e30094fb784c7379
      name: release
    - image: docker.io/xebialabs/xl-release@sha256:6a32ee274c533a7b06cea948fae131a8b0d7d5111aee11a0e30094fb784c7379
      name: release_volume_permissions
    - image: docker.io/xebialabs/xl-release@sha256:6a32ee274c533a7b06cea948fae131a8b0d7d5111aee11a0e30094fb784c7379
      name: release_busy_box
    - image: docker.io/xebialabs/release-operator@sha256:f9d579bd82ec7380c7d9fef996c9220f13069bf6880a50b0899387472eb613db
      name: release-operator-f9d579bd82ec7380c7d9fef996c9220f13069bf6880a50b0899387472eb613db-annotation
  version: 24.1.8

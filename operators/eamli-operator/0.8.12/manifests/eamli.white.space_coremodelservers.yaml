apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.6.1
  creationTimestamp: null
  name: coremodelservers.eamli.white.space
spec:
  group: eamli.white.space
  names:
    kind: CoreModelServer
    listKind: CoreModelServerList
    plural: coremodelservers
    singular: coremodelserver
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: CoreModelServer is the Schema for the coremodelservers API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: CoreModelServerSpec defines the desired state of CoreModelServer
            properties:
              autoscaling:
                description: Autoscaling defines if and how the service should scale
                  to handle load
                properties:
                  enabled:
                    type: boolean
                  maxReplicas:
                    type: integer
                  minReplicas:
                    type: integer
                  targetCPUUtilizationPercentage:
                    type: integer
                  targetMemoryUtilizationPercentage:
                    type: integer
                type: object
              environment:
                description: CoreModelServerEnvironment  defines environment variables
                  set on the deployment
                properties:
                  name:
                    type: string
                type: object
              image:
                description: Image defines the image properties to be used for the
                  service
                properties:
                  pullPolicy:
                    type: string
                  repository:
                    type: string
                  tag:
                    type: string
                type: object
              imagePullSecrets:
                description: ImagePullSecrets defines k8s secrets used to pull images
                  from private repositories
                items:
                  description: ImagePullSecret defines k8s secret used to pull images
                    from private repositories
                  properties:
                    name:
                      type: string
                  type: object
                type: array
              nodeSelector:
                additionalProperties:
                  type: string
                description: NodeSelector defines a list of key-value pairs that are
                  used to match node labels for scheduling
                type: object
              podAnnotations:
                additionalProperties:
                  type: string
                description: PodAnnotations defines meta data labels that are attached
                  to pods for the chart
                type: object
              replicaCount:
                description: ReplicaCount defines the number of pods that should be
                  run for the given service
                type: integer
              resources:
                description: Resources defines the resource quotas that are available
                  to the service
                properties:
                  limits:
                    description: ResourcesTargets defines the resource quotas that
                      are available to the service
                    properties:
                      cpu:
                        type: string
                      memory:
                        type: string
                    type: object
                  requests:
                    description: ResourcesTargets defines the resource quotas that
                      are available to the service
                    properties:
                      cpu:
                        type: string
                      memory:
                        type: string
                    type: object
                type: object
              tolerations:
                description: Tolerations are applied to pods, and allow (but do not
                  require) the pods to schedule onto nodes with matching taints
                items:
                  description: Toleration are applied to pods, and allow (but do not
                    require) the pods to schedule onto nodes with matching taints
                  properties:
                    effect:
                      type: string
                    key:
                      type: string
                    operator:
                      type: string
                    tolerationSeconds:
                      type: integer
                    value:
                      type: string
                  type: object
                type: array
            type: object
          status:
            description: ChartStatus defines the observed state of Chart
            properties:
              conditions:
                description: Conditions contains a list of status updates
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource. --- This struct is intended for direct
                    use as an array at the field path .status.conditions.  For example,
                    type FooStatus struct{     // Represents the observations of a
                    foo's current state.     // Known .status.conditions.type are:
                    \"Available\", \"Progressing\", and \"Degraded\"     // +patchMergeKey=type
                    \    // +patchStrategy=merge     // +listType=map     // +listMapKey=type
                    \    Conditions []metav1.Condition `json:\"conditions,omitempty\"
                    patchStrategy:\"merge\" patchMergeKey:\"type\" protobuf:\"bytes,1,rep,name=conditions\"`
                    \n     // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition
                        transitioned from one status to another. This should be when
                        the underlying condition changed.  If that is not known, then
                        using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating
                        details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.conditions[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating
                        the reason for the condition's last transition. Producers
                        of specific condition types may define expected values and
                        meanings for this field, and whether the values are considered
                        a guaranteed API. The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        --- Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              release:
                description: Release contains the Helm chart manifest used to install
                  the service
                properties:
                  manifest:
                    type: string
                  name:
                    type: string
                type: object
            required:
            - conditions
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: []
  storedVersions: []

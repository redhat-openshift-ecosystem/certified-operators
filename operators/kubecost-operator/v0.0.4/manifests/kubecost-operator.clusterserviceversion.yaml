apiVersion: operators.coreos.com/v1alpha1
kind: ClusterServiceVersion
metadata:
  annotations:
    alm-examples: |-
      [
        {
          "apiVersion": "charts.kubecost.com/v1alpha1",
          "kind": "CostAnalyzer",
          "metadata": {
            "name": "costanalyzer-sample"
          },
          "spec": {
            "affinity": {},
            "awsstore": {
              "annotations": {},
              "createServiceAccount": false,
              "nodeSelector": {},
              "priorityClassName": "",
              "useAwsStore": false
            },
            "clusterController": {
              "actionConfigs": {
                "clusterRightsize": null,
                "clusterTurndown": [],
                "containerRightsize": null,
                "namespaceTurndown": null
              },
              "enabled": false,
              "imagePullPolicy": "IfNotPresent",
              "kubescaler": {
                "defaultResizeAll": false
              },
              "namespaceTurndown": {
                "rbac": {
                  "enabled": true
                }
              },
              "priorityClassName": "",
              "tolerations": []
            },
            "costEventsAudit": {
              "enabled": false
            },
            "diagnostics": {
              "collectHelmValues": false,
              "deployment": {
                "affinity": {},
                "containerSecurityContext": {},
                "enabled": false,
                "env": {},
                "labels": {},
                "nodeSelector": {},
                "resources": {
                  "requests": {
                    "cpu": "10m",
                    "memory": "20Mi"
                  }
                },
                "securityContext": {},
                "tolerations": []
              },
              "enabled": true,
              "keepDiagnosticHistory": false,
              "pollingInterval": "300s",
              "primary": {
                "enabled": false,
                "readonly": false,
                "retention": "7d"
              }
            },
            "extraObjects": [],
            "extraVolumeMounts": [],
            "extraVolumes": [],
            "federatedETL": {
              "agentOnly": false,
              "federatedCluster": false,
              "redirectS3Backup": false,
              "useMultiClusterDB": false
            },
            "forecasting": {
              "affinity": {},
              "enabled": true,
              "env": {
                "GUNICORN_CMD_ARGS": "--log-level info -t 1200"
              },
              "imagePullPolicy": "IfNotPresent",
              "livenessProbe": {
                "enabled": true,
                "failureThreshold": 200,
                "initialDelaySeconds": 10,
                "periodSeconds": 10
              },
              "nodeSelector": {},
              "priority": {
                "enabled": false,
                "name": ""
              },
              "readinessProbe": {
                "enabled": true,
                "failureThreshold": 200,
                "initialDelaySeconds": 10,
                "periodSeconds": 10
              },
              "resources": {
                "limits": {
                  "cpu": "1500m",
                  "memory": "1Gi"
                },
                "requests": {
                  "cpu": "200m",
                  "memory": "300Mi"
                }
              },
              "tolerations": []
            },
            "global": {
              "additionalLabels": {},
              "advancedReports": {
                "enabled": false,
                "reports": [
                  {
                    "aggregateBy": "namespace",
                    "cloudBreakdown": "service",
                    "cloudJoin": "label:kubernetes_namespace",
                    "filters": [
                      {
                        "key": "cluster",
                        "operator": ":",
                        "value": "dev"
                      }
                    ],
                    "title": "Example Advanced Report 0",
                    "window": "7d"
                  }
                ]
              },
              "amp": {
                "enabled": false,
                "prometheusServerEndpoint": "http://localhost:8005/workspaces/\u003cworkspaceId\u003e/",
                "remoteWriteService": "https://aps-workspaces.us-west-2.amazonaws.com/workspaces/\u003cworkspaceId\u003e/api/v1/remote_write",
                "sigv4": {
                  "region": "us-west-2"
                }
              },
              "assetReports": {
                "enabled": false,
                "reports": [
                  {
                    "accumulate": false,
                    "aggregateBy": "type",
                    "filters": [
                      {
                        "property": "cluster",
                        "value": "cluster-one"
                      }
                    ],
                    "title": "Example Asset Report 0",
                    "window": "today"
                  }
                ]
              },
              "cloudCostReports": {
                "enabled": false,
                "reports": [
                  {
                    "accumulate": false,
                    "aggregateBy": "service",
                    "title": "Cloud Cost Report 0",
                    "window": "today"
                  }
                ]
              },
              "containerSecurityContext": {
                "allowPrivilegeEscalation": false,
                "capabilities": {
                  "drop": [
                    "ALL"
                  ]
                },
                "privileged": false,
                "readOnlyRootFilesystem": true
              },
              "gcpstore": {
                "enabled": false
              },
              "gmp": {
                "enabled": false,
                "gmpProxy": {
                  "enabled": false,
                  "imagePullPolicy": "IfNotPresent",
                  "name": "gmp-proxy",
                  "port": 8085,
                  "projectId": "YOUR_PROJECT_ID"
                },
                "prometheusServerEndpoint": "http://localhost:8085/"
              },
              "grafana": {
                "domainName": "cost-analyzer-grafana.default.svc",
                "enabled": true,
                "proxy": true,
                "scheme": "http"
              },
              "integrations": {
                "postgres": {
                  "databaseHost": "",
                  "databaseName": "",
                  "databasePassword": "",
                  "databasePort": "",
                  "databaseSecretName": "",
                  "databaseUser": "",
                  "enabled": false,
                  "queryConfigs": {
                    "allocations": [],
                    "assets": [],
                    "cloudCosts": []
                  },
                  "runInterval": "12h"
                }
              },
              "mimirProxy": {
                "enabled": false,
                "mimirEndpoint": "$mimir_endpoint",
                "name": "mimir-proxy",
                "orgIdentifier": "$your_tenant_ID",
                "port": 8085
              },
              "notifications": {
                "alertmanager": {
                  "enabled": false,
                  "fqdn": "http://cost-analyzer-prometheus-server.default.svc"
                }
              },
              "platforms": {
                "cicd": {
                  "enabled": false,
                  "skipSanityChecks": false
                },
                "openshift": {
                  "enabled": true,
                  "route": {
                    "annotations": {},
                    "enabled": false
                  },
                  "scc": {
                    "networkCosts": false,
                    "nodeExporter": false
                  },
                  "securityContext": {
                    "runAsNonRoot": true,
                    "seccompProfile": {
                      "type": "RuntimeDefault"
                    }
                  }
                }
              },
              "podAnnotations": {},
              "prometheus": {
                "enabled": true,
                "fqdn": "http://cost-analyzer-prometheus-server.default.svc"
              },
              "savedReports": {
                "enabled": false,
                "reports": [
                  {
                    "accumulate": false,
                    "aggregateBy": "namespace",
                    "chartDisplay": "category",
                    "filters": [
                      {
                        "key": "cluster",
                        "operator": ":",
                        "value": "dev"
                      }
                    ],
                    "idle": "separate",
                    "rate": "cumulative",
                    "title": "Example Saved Report 0",
                    "window": "today"
                  },
                  {
                    "accumulate": false,
                    "aggregateBy": "controllerKind",
                    "chartDisplay": "category",
                    "filters": [
                      {
                        "key": "namespace",
                        "operator": "!:",
                        "value": "kubecost"
                      }
                    ],
                    "idle": "share",
                    "rate": "monthly",
                    "title": "Example Saved Report 1",
                    "window": "month"
                  },
                  {
                    "accumulate": true,
                    "aggregateBy": "service",
                    "chartDisplay": "category",
                    "filters": [],
                    "idle": "hide",
                    "rate": "daily",
                    "title": "Example Saved Report 2",
                    "window": "2020-11-11T00:00:00Z,2020-12-09T23:59:59Z"
                  }
                ]
              },
              "securityContext": {
                "fsGroup": 1001,
                "fsGroupChangePolicy": "OnRootMismatch",
                "runAsGroup": 1001,
                "runAsNonRoot": true,
                "runAsUser": 1001,
                "seccompProfile": {
                  "type": "RuntimeDefault"
                }
              }
            },
            "grafana": {
              "adminPassword": "strongpassword",
              "adminUser": "admin",
              "affinity": {},
              "annotations": {},
              "dashboardProviders": {},
              "dashboards": {},
              "dashboardsConfigMaps": {},
              "deploymentStrategy": "RollingUpdate",
              "env": {},
              "envFromSecret": "",
              "extraSecretMounts": [],
              "grafana.ini": {
                "analytics": {
                  "check_for_updates": true
                },
                "auth.anonymous": {
                  "enabled": true,
                  "org_name": "Main Org.",
                  "org_role": "Editor"
                },
                "grafana_net": {
                  "url": "https://grafana.net"
                },
                "log": {
                  "mode": "console"
                },
                "paths": {
                  "data": "/var/lib/grafana/data",
                  "logs": "/var/log/grafana",
                  "plugins": "/var/lib/grafana/plugins",
                  "provisioning": "/etc/grafana/provisioning"
                },
                "server": {
                  "root_url": "%(protocol)s://%(domain)s:%(http_port)s/grafana",
                  "serve_from_sub_path": false
                }
              },
              "ingress": {
                "annotations": {},
                "enabled": false,
                "hosts": [
                  "chart-example.local"
                ],
                "labels": {},
                "path": "/",
                "pathType": "Prefix",
                "tls": []
              },
              "ldap": {
                "config": "",
                "existingSecret": ""
              },
              "livenessProbe": {
                "failureThreshold": 10,
                "httpGet": {
                  "path": "/api/health",
                  "port": 3000
                },
                "initialDelaySeconds": 60,
                "timeoutSeconds": 30
              },
              "nodeSelector": {},
              "persistence": {
                "enabled": false
              },
              "plugins": [],
              "podAnnotations": {},
              "priorityClassName": "",
              "rbac": {
                "create": true
              },
              "readinessProbe": {
                "httpGet": {
                  "path": "/api/health",
                  "port": 3000
                }
              },
              "replicas": 1,
              "resources": {},
              "securityContext": {},
              "service": {
                "annotations": {},
                "labels": {},
                "port": 80,
                "type": "ClusterIP"
              },
              "serviceAccount": {
                "create": true,
                "name": ""
              },
              "sidecar": {
                "dashboards": {
                  "annotations": {},
                  "enabled": true,
                  "error_throttle_sleep": 0,
                  "folder": "/tmp/dashboards",
                  "label": "grafana_dashboard",
                  "labelValue": "1"
                },
                "datasources": {
                  "enabled": false,
                  "error_throttle_sleep": 0,
                  "label": "grafana_datasource"
                },
                "image": {
                  "pullPolicy": "IfNotPresent",
                  "repository": "kiwigrid/k8s-sidecar",
                  "tag": "1.27.2"
                },
                "resources": {}
              },
              "smtp": {
                "existingSecret": ""
              },
              "tolerations": []
            },
            "ingress": {
              "annotations": null,
              "enabled": false,
              "hosts": [
                "cost-analyzer.local"
              ],
              "labels": null,
              "pathType": "ImplementationSpecific",
              "paths": [
                "/"
              ],
              "tls": []
            },
            "initChownData": {
              "resources": {}
            },
            "initChownDataImage": "busybox",
            "kubecostAdmissionController": {
              "caBundle": "${CA_BUNDLE}",
              "enabled": false,
              "secretName": "webhook-server-tls"
            },
            "kubecostAggregator": {
              "aggregatorDbStorage": {
                "storageClass": "",
                "storageRequest": "128Gi"
              },
              "cloudCost": {
                "readinessProbe": {
                  "enabled": true,
                  "failureThreshold": 200,
                  "initialDelaySeconds": 10,
                  "periodSeconds": 10
                },
                "resources": {}
              },
              "deployMethod": "singlepod",
              "enabled": false,
              "env": {
                "DB_CONCURRENT_INGESTION_COUNT": "3",
                "DB_READ_THREADS": "1",
                "DB_WRITE_THREADS": "1",
                "LOG_LEVEL": "info"
              },
              "imagePullPolicy": "IfNotPresent",
              "jaeger": {
                "enabled": false
              },
              "numDBCopyPartitions": 25,
              "persistentConfigsStorage": {
                "storageClass": "",
                "storageRequest": "1Gi"
              },
              "readinessProbe": {
                "enabled": true,
                "failureThreshold": 200,
                "initialDelaySeconds": 10,
                "periodSeconds": 10
              },
              "replicas": 1,
              "resources": {},
              "stagingEmptyDirSizeLimit": "2Gi"
            },
            "kubecostDeployment": {
              "annotations": {},
              "labels": {},
              "replicas": 1
            },
            "kubecostFrontend": {
              "deployMethod": "singlepod",
              "deploymentStrategy": {},
              "enabled": true,
              "fullImageName": "gcr.io/kubecost1/frontend@sha256:45125a6df7daa330209ea9f26cbe48405595962d3eac799583c4e08ba853f20c",
              "haReplicas": 2,
              "imagePullPolicy": "IfNotPresent",
              "ipv6": {
                "enabled": true
              },
              "livenessProbe": {
                "enabled": true,
                "failureThreshold": 6,
                "initialDelaySeconds": 1,
                "periodSeconds": 5
              },
              "readinessProbe": {
                "enabled": true,
                "failureThreshold": 6,
                "initialDelaySeconds": 1,
                "periodSeconds": 5
              },
              "resources": {
                "requests": {
                  "cpu": "10m",
                  "memory": "55Mi"
                }
              },
              "useDefaultFqdn": false
            },
            "kubecostMetrics": {
              "exporter": {
                "additionalLabels": {},
                "affinity": {},
                "enabled": false,
                "extraArgs": [],
                "nodeSelector": {},
                "port": 9005,
                "priorityClassName": "",
                "prometheusScrape": true,
                "resources": {},
                "service": {
                  "annotations": {}
                },
                "serviceMonitor": {
                  "additionalLabels": {},
                  "enabled": false,
                  "metricRelabelings": [],
                  "relabelings": []
                },
                "tolerations": []
              }
            },
            "kubecostModel": {
              "allocation": null,
              "containerStatsEnabled": true,
              "etl": true,
              "etlDailyStoreDurationDays": 91,
              "etlFileStoreEnabled": true,
              "etlHourlyStoreDurationHours": 49,
              "etlReadOnlyMode": false,
              "extraArgs": [],
              "extraPorts": [],
              "fullImageName": "gcr.io/kubecost1/cost-model@sha256:74ff30f7b9bd7c48c345e703999b1d119fae7cac8d4098eba68d9812aae8b908",
              "imagePullPolicy": "IfNotPresent",
              "ingress": {
                "annotations": null,
                "enabled": false,
                "hosts": [
                  "cost-analyzer-model.local"
                ],
                "labels": null,
                "pathType": "ImplementationSpecific",
                "paths": [
                  "/"
                ],
                "tls": []
              },
              "livenessProbe": {
                "enabled": true,
                "failureThreshold": 200,
                "initialDelaySeconds": 10,
                "periodSeconds": 10
              },
              "maxQueryConcurrency": 5,
              "plugins": {
                "configSecret": "kubecost-plugin-secret",
                "enabled": false,
                "enabledPlugins": [],
                "folder": "/opt/opencost/plugin",
                "install": {
                  "enabled": false,
                  "securityContext": {
                    "allowPrivilegeEscalation": false,
                    "capabilities": {
                      "drop": [
                        "ALL"
                      ]
                    },
                    "readOnlyRootFilesystem": true,
                    "runAsNonRoot": true,
                    "runAsUser": 1001,
                    "seccompProfile": {
                      "type": "RuntimeDefault"
                    }
                  }
                }
              },
              "readinessProbe": {
                "enabled": true,
                "failureThreshold": 200,
                "initialDelaySeconds": 10,
                "periodSeconds": 10
              },
              "resources": {
                "requests": {
                  "cpu": "200m",
                  "memory": "55Mi"
                }
              },
              "utcOffset": "+00:00",
              "warmCache": false
            },
            "kubecostToken": null,
            "networkCosts": {
              "additionalLabels": {},
              "additionalSecurityContext": {},
              "affinity": {},
              "annotations": {},
              "config": {
                "destinations": {
                  "cross-region": [],
                  "direct-classification": [],
                  "in-region": [],
                  "in-zone": [
                    "127.0.0.0/8",
                    "169.254.0.0/16",
                    "10.0.0.0/8",
                    "172.16.0.0/12",
                    "192.168.0.0/16"
                  ],
                  "internet": []
                },
                "services": {
                  "amazon-web-services": true,
                  "azure-cloud-services": true,
                  "google-cloud-services": true
                }
              },
              "enabled": false,
              "extraArgs": [],
              "healthCheckProbes": {},
              "imagePullPolicy": "IfNotPresent",
              "logLevel": "info",
              "nodeSelector": {},
              "podMonitor": {
                "additionalLabels": {},
                "enabled": false
              },
              "port": 3001,
              "priorityClassName": "",
              "prometheusScrape": false,
              "resources": {
                "limits": {
                  "cpu": "500m"
                },
                "requests": {
                  "cpu": "50m",
                  "memory": "20Mi"
                }
              },
              "service": {
                "annotations": {},
                "labels": {}
              },
              "tolerations": [],
              "trafficLogging": true,
              "updateStrategy": {
                "type": "RollingUpdate"
              }
            },
            "networkPolicy": {
              "costAnalyzer": {
                "additionalLabels": {},
                "annotations": {},
                "enabled": false
              },
              "denyEgress": true,
              "enabled": false,
              "sameNamespace": true
            },
            "nodeSelector": {},
            "oidc": {
              "clientID": "",
              "clientSecret": "",
              "enabled": false,
              "existingCustomSecret": {
                "enabled": false,
                "name": ""
              },
              "rbac": {
                "enabled": false
              },
              "skipOnlineTokenValidation": false
            },
            "persistentVolume": {
              "annotations": {},
              "dbPVEnabled": false,
              "dbSize": "32.0Gi",
              "enabled": true,
              "labels": {},
              "size": "32Gi"
            },
            "pricingCsv": {
              "enabled": false,
              "location": {
                "URI": "s3://kc-csv-test/pricing_schema.csv",
                "csvAccessCredentials": "pricing-schema-access-secret",
                "provider": "AWS",
                "region": "us-east-1"
              }
            },
            "priority": {
              "enabled": false,
              "name": ""
            },
            "prometheus": {
              "alertRelabelConfigs": null,
              "alertmanager": {
                "affinity": {},
                "baseURL": "http://localhost:9093",
                "configFileName": "alertmanager.yml",
                "configFromSecret": "",
                "configMapOverrideName": "",
                "enabled": false,
                "extraArgs": {},
                "extraEnv": {},
                "extraSecretMounts": [],
                "ingress": {
                  "annotations": {},
                  "enabled": false,
                  "extraLabels": {},
                  "extraPaths": [],
                  "hosts": [],
                  "tls": []
                },
                "name": "alertmanager",
                "nodeSelector": {},
                "persistentVolume": {
                  "accessModes": [
                    "ReadWriteOnce"
                  ],
                  "annotations": {},
                  "enabled": true,
                  "existingClaim": "",
                  "mountPath": "/data",
                  "size": "2Gi",
                  "subPath": ""
                },
                "podAnnotations": {},
                "podDisruptionBudget": {
                  "enabled": false,
                  "maxUnavailable": 1
                },
                "podLabels": {},
                "prefixURL": "",
                "priorityClassName": "",
                "replicaCount": 1,
                "resources": {},
                "securityContext": {
                  "fsGroup": 1001,
                  "runAsGroup": 1001,
                  "runAsNonRoot": true,
                  "runAsUser": 1001
                },
                "service": {
                  "annotations": {},
                  "clusterIP": "",
                  "externalIPs": [],
                  "labels": {},
                  "loadBalancerIP": "",
                  "loadBalancerSourceRanges": [],
                  "servicePort": 80,
                  "sessionAffinity": "None",
                  "type": "ClusterIP"
                },
                "statefulSet": {
                  "enabled": false,
                  "headless": {
                    "annotations": {},
                    "labels": {},
                    "servicePort": 80
                  },
                  "podManagementPolicy": "OrderedReady"
                },
                "strategy": {
                  "rollingUpdate": null,
                  "type": "Recreate"
                },
                "tolerations": []
              },
              "alertmanagerFiles": {
                "alertmanager.yml": {
                  "global": {},
                  "receivers": [
                    {
                      "name": "default-receiver"
                    }
                  ],
                  "route": {
                    "group_interval": "5m",
                    "group_wait": "10s",
                    "receiver": "default-receiver",
                    "repeat_interval": "3h"
                  }
                }
              },
              "configmapReload": {
                "alertmanager": {
                  "enabled": false,
                  "extraArgs": {},
                  "extraConfigmapMounts": [],
                  "extraVolumeDirs": [],
                  "name": "configmap-reload",
                  "resources": {}
                },
                "prometheus": {
                  "containerSecurityContext": {},
                  "enabled": false,
                  "extraArgs": {},
                  "extraConfigmapMounts": [],
                  "extraVolumeDirs": [],
                  "name": "configmap-reload",
                  "resources": {}
                }
              },
              "extraScrapeConfigs": "- job_name: kubecost\n  honor_labels: true\n  scrape_interval: 1m\n  scrape_timeout: 60s\n  metrics_path: /metrics\n  scheme: http\n  dns_sd_configs:\n  - names:\n    - {{ template \"cost-analyzer.serviceName\" . }}\n    type: 'A'\n    port: 9003\n- job_name: kubecost-networking\n  kubernetes_sd_configs:\n    - role: pod\n  relabel_configs:\n  # Scrape only the the targets matching the following metadata\n    - source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_instance]\n      action: keep\n      regex:  kubecost\n    - source_labels: [__meta_kubernetes_pod_label_app_kubernetes_io_name]\n      action: keep\n      regex:  network-costs\n- job_name: kubecost-aggregator\n  scrape_interval: 1m\n  scrape_timeout: 60s\n  metrics_path: /metrics\n  scheme: http\n  dns_sd_configs:\n  - names:\n    - {{ template \"aggregator.serviceName\" . }}\n    type: 'A'\n    {{- if or .Values.saml.enabled .Values.oidc.enabled }}\n    port: 9008\n    {{- else }}\n    port: 9004\n    {{- end }}\n",
              "imagePullSecrets": null,
              "networkPolicy": {
                "enabled": false
              },
              "nodeExporter": {
                "deploymentAnnotations": {},
                "dnsPolicy": "ClusterFirstWithHostNet",
                "enabled": false,
                "extraArgs": {},
                "extraConfigmapMounts": [],
                "extraHostPathMounts": [],
                "hostNetwork": true,
                "hostPID": true,
                "name": "node-exporter",
                "nodeSelector": {},
                "pod": {
                  "labels": {}
                },
                "podAnnotations": {},
                "podDisruptionBudget": {
                  "enabled": false,
                  "maxUnavailable": 1
                },
                "priorityClassName": "",
                "resources": {},
                "securityContext": {},
                "service": {
                  "annotations": {
                    "prometheus.io/scrape": "true"
                  },
                  "clusterIP": "None",
                  "externalIPs": [],
                  "hostPort": 9100,
                  "labels": {},
                  "loadBalancerIP": "",
                  "loadBalancerSourceRanges": [],
                  "servicePort": 9100,
                  "type": "ClusterIP"
                },
                "tolerations": [],
                "updateStrategy": {
                  "type": "RollingUpdate"
                }
              },
              "pushgateway": {
                "enabled": false,
                "extraArgs": {},
                "ingress": {
                  "annotations": {},
                  "enabled": false,
                  "extraPaths": [],
                  "hosts": [],
                  "tls": []
                },
                "name": "pushgateway",
                "nodeSelector": {},
                "persistentVolume": {
                  "accessModes": [
                    "ReadWriteOnce"
                  ],
                  "annotations": {},
                  "enabled": true,
                  "existingClaim": "",
                  "mountPath": "/data",
                  "size": "2Gi",
                  "subPath": ""
                },
                "podAnnotations": {},
                "podDisruptionBudget": {
                  "enabled": false,
                  "maxUnavailable": 1
                },
                "priorityClassName": "",
                "replicaCount": 1,
                "resources": {},
                "securityContext": {
                  "runAsNonRoot": true,
                  "runAsUser": 1001
                },
                "service": {
                  "annotations": {
                    "prometheus.io/probe": "pushgateway"
                  },
                  "clusterIP": "",
                  "externalIPs": [],
                  "labels": {},
                  "loadBalancerIP": "",
                  "loadBalancerSourceRanges": [],
                  "servicePort": 9091,
                  "type": "ClusterIP"
                },
                "strategy": {
                  "rollingUpdate": null,
                  "type": "Recreate"
                },
                "tolerations": []
              },
              "rbac": {
                "create": true
              },
              "server": {
                "affinity": {},
                "alertmanagers": [],
                "baseURL": "",
                "configMapOverrideName": "",
                "configPath": "/etc/config/prometheus.yml",
                "containerSecurityContext": {},
                "deploymentAnnotations": {},
                "emptyDir": {
                  "sizeLimit": ""
                },
                "enabled": true,
                "env": [],
                "extraArgs": {
                  "query.max-concurrency": 1,
                  "query.max-samples": 100000000
                },
                "extraConfigmapMounts": [],
                "extraFlags": [
                  "web.enable-lifecycle"
                ],
                "extraHostPathMounts": [],
                "extraInitContainers": [],
                "extraSecretMounts": [],
                "extraVolumeMounts": [],
                "extraVolumes": [],
                "global": {
                  "evaluation_interval": "1m",
                  "external_labels": {
                    "cluster_id": "cluster-one"
                  },
                  "scrape_interval": "1m",
                  "scrape_timeout": "60s"
                },
                "image": {
                  "fullImageName": "registry.access.redhat.com/openshift3/prometheus@sha256:cc82e7c85f816a0ab6109dc0ee2bd587db3859450bf10e2d3b9241cf5daee233",
                  "pullPolicy": "IfNotPresent"
                },
                "ingress": {
                  "annotations": {},
                  "enabled": false,
                  "extraLabels": {},
                  "extraPaths": [],
                  "hosts": [],
                  "pathType": "Prefix",
                  "tls": []
                },
                "livenessProbeFailureThreshold": 3,
                "livenessProbeInitialDelay": 5,
                "livenessProbeSuccessThreshold": 1,
                "livenessProbeTimeout": 3,
                "name": "server",
                "nodeSelector": {},
                "persistentVolume": {
                  "accessModes": [
                    "ReadWriteOnce"
                  ],
                  "annotations": {},
                  "enabled": true,
                  "existingClaim": "",
                  "mountPath": "/data",
                  "size": "32Gi",
                  "subPath": ""
                },
                "podAnnotations": {},
                "podDisruptionBudget": {
                  "enabled": false,
                  "maxUnavailable": 1
                },
                "podLabels": {},
                "prefixURL": "",
                "priorityClassName": "",
                "readinessProbeFailureThreshold": 3,
                "readinessProbeInitialDelay": 5,
                "readinessProbeSuccessThreshold": 1,
                "readinessProbeTimeout": 3,
                "remoteRead": {},
                "remoteWrite": {},
                "replicaCount": 1,
                "resources": {},
                "retention": "97h",
                "securityContext": {},
                "service": {
                  "annotations": {},
                  "clusterIP": "",
                  "externalIPs": [],
                  "gRPC": {
                    "enabled": false,
                    "servicePort": 10901
                  },
                  "labels": {},
                  "loadBalancerIP": "",
                  "loadBalancerSourceRanges": [],
                  "servicePort": 80,
                  "sessionAffinity": "None",
                  "statefulsetReplica": {
                    "enabled": false,
                    "replica": 0
                  },
                  "type": "ClusterIP"
                },
                "sidecarContainers": null,
                "statefulSet": {
                  "annotations": {},
                  "enabled": false,
                  "headless": {
                    "annotations": {},
                    "labels": {},
                    "servicePort": 80
                  },
                  "labels": {},
                  "podManagementPolicy": "OrderedReady"
                },
                "strategy": {
                  "rollingUpdate": null,
                  "type": "Recreate"
                },
                "terminationGracePeriodSeconds": 300,
                "tolerations": [],
                "verticalAutoscaler": {
                  "enabled": false
                }
              },
              "serverFiles": {
                "alerting_rules.yml": {},
                "alerts": {},
                "prometheus.yml": {
                  "rule_files": [
                    "/etc/config/recording_rules.yml",
                    "/etc/config/alerting_rules.yml",
                    "/etc/config/rules",
                    "/etc/config/alerts"
                  ],
                  "scrape_configs": [
                    {
                      "job_name": "prometheus",
                      "static_configs": [
                        {
                          "targets": [
                            "localhost:9090"
                          ]
                        }
                      ]
                    },
                    {
                      "bearer_token_file": "/var/run/secrets/kubernetes.io/serviceaccount/token",
                      "job_name": "kubernetes-nodes-cadvisor",
                      "kubernetes_sd_configs": [
                        {
                          "role": "node"
                        }
                      ],
                      "metric_relabel_configs": [
                        {
                          "action": "keep",
                          "regex": "(container_cpu_usage_seconds_total|container_memory_working_set_bytes|container_network_receive_errors_total|container_network_transmit_errors_total|container_network_receive_packets_dropped_total|container_network_transmit_packets_dropped_total|container_memory_usage_bytes|container_cpu_cfs_throttled_periods_total|container_cpu_cfs_periods_total|container_fs_usage_bytes|container_fs_limit_bytes|container_cpu_cfs_periods_total|container_fs_inodes_free|container_fs_inodes_total|container_fs_usage_bytes|container_fs_limit_bytes|container_cpu_cfs_throttled_periods_total|container_cpu_cfs_periods_total|container_network_receive_bytes_total|container_network_transmit_bytes_total|container_fs_inodes_free|container_fs_inodes_total|container_fs_usage_bytes|container_fs_limit_bytes|container_spec_cpu_shares|container_spec_memory_limit_bytes|container_network_receive_bytes_total|container_network_transmit_bytes_total|container_fs_reads_bytes_total|container_network_receive_bytes_total|container_fs_writes_bytes_total|container_fs_reads_bytes_total|cadvisor_version_info|kubecost_pv_info)",
                          "source_labels": [
                            "__name__"
                          ]
                        },
                        {
                          "action": "replace",
                          "regex": "(.+)",
                          "source_labels": [
                            "container"
                          ],
                          "target_label": "container_name"
                        },
                        {
                          "action": "replace",
                          "regex": "(.+)",
                          "source_labels": [
                            "pod"
                          ],
                          "target_label": "pod_name"
                        }
                      ],
                      "relabel_configs": [
                        {
                          "action": "labelmap",
                          "regex": "__meta_kubernetes_node_label_(.+)"
                        },
                        {
                          "replacement": "kubernetes.default.svc:443",
                          "target_label": "__address__"
                        },
                        {
                          "regex": "(.+)",
                          "replacement": "/api/v1/nodes/$1/proxy/metrics/cadvisor",
                          "source_labels": [
                            "__meta_kubernetes_node_name"
                          ],
                          "target_label": "__metrics_path__"
                        }
                      ],
                      "scheme": "https",
                      "tls_config": {
                        "ca_file": "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt",
                        "insecure_skip_verify": true
                      }
                    },
                    {
                      "bearer_token_file": "/var/run/secrets/kubernetes.io/serviceaccount/token",
                      "job_name": "kubernetes-nodes",
                      "kubernetes_sd_configs": [
                        {
                          "role": "node"
                        }
                      ],
                      "metric_relabel_configs": [
                        {
                          "action": "keep",
                          "regex": "(kubelet_volume_stats_used_bytes)",
                          "source_labels": [
                            "__name__"
                          ]
                        }
                      ],
                      "relabel_configs": [
                        {
                          "action": "labelmap",
                          "regex": "__meta_kubernetes_node_label_(.+)"
                        },
                        {
                          "replacement": "kubernetes.default.svc:443",
                          "target_label": "__address__"
                        },
                        {
                          "regex": "(.+)",
                          "replacement": "/api/v1/nodes/$1/proxy/metrics",
                          "source_labels": [
                            "__meta_kubernetes_node_name"
                          ],
                          "target_label": "__metrics_path__"
                        }
                      ],
                      "scheme": "https",
                      "tls_config": {
                        "ca_file": "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt",
                        "insecure_skip_verify": true
                      }
                    },
                    {
                      "job_name": "kubernetes-service-endpoints",
                      "kubernetes_sd_configs": [
                        {
                          "role": "endpoints"
                        }
                      ],
                      "metric_relabel_configs": [
                        {
                          "action": "keep",
                          "regex": "(container_cpu_allocation|container_cpu_usage_seconds_total|container_fs_limit_bytes|container_fs_writes_bytes_total|container_gpu_allocation|container_memory_allocation_bytes|container_memory_usage_bytes|container_memory_working_set_bytes|container_network_receive_bytes_total|container_network_transmit_bytes_total|DCGM_FI_DEV_GPU_UTIL|deployment_match_labels|kube_daemonset_status_desired_number_scheduled|kube_daemonset_status_number_ready|kube_deployment_spec_replicas|kube_deployment_status_replicas|kube_deployment_status_replicas_available|kube_job_status_failed|kube_namespace_annotations|kube_namespace_labels|kube_node_info|kube_node_labels|kube_node_status_allocatable|kube_node_status_allocatable_cpu_cores|kube_node_status_allocatable_memory_bytes|kube_node_status_capacity|kube_node_status_capacity_cpu_cores|kube_node_status_capacity_memory_bytes|kube_node_status_condition|kube_persistentvolume_capacity_bytes|kube_persistentvolume_status_phase|kube_persistentvolumeclaim_info|kube_persistentvolumeclaim_resource_requests_storage_bytes|kube_pod_container_info|kube_pod_container_resource_limits|kube_pod_container_resource_limits_cpu_cores|kube_pod_container_resource_limits_memory_bytes|kube_pod_container_resource_requests|kube_pod_container_resource_requests_cpu_cores|kube_pod_container_resource_requests_memory_bytes|kube_pod_container_status_restarts_total|kube_pod_container_status_running|kube_pod_container_status_terminated_reason|kube_pod_labels|kube_pod_owner|kube_pod_status_phase|kube_replicaset_owner|kube_statefulset_replicas|kube_statefulset_status_replicas|kubecost_cluster_info|kubecost_cluster_management_cost|kubecost_cluster_memory_working_set_bytes|kubecost_load_balancer_cost|kubecost_network_internet_egress_cost|kubecost_network_region_egress_cost|kubecost_network_zone_egress_cost|kubecost_node_is_spot|kubecost_pod_network_egress_bytes_total|node_cpu_hourly_cost|node_cpu_seconds_total|node_disk_reads_completed|node_disk_reads_completed_total|node_disk_writes_completed|node_disk_writes_completed_total|node_filesystem_device_error|node_gpu_count|node_gpu_hourly_cost|node_memory_Buffers_bytes|node_memory_Cached_bytes|node_memory_MemAvailable_bytes|node_memory_MemFree_bytes|node_memory_MemTotal_bytes|node_network_transmit_bytes_total|node_ram_hourly_cost|node_total_hourly_cost|pod_pvc_allocation|pv_hourly_cost|service_selector_labels|statefulSet_match_labels|kubecost_pv_info|up)",
                          "source_labels": [
                            "__name__"
                          ]
                        }
                      ],
                      "relabel_configs": [
                        {
                          "action": "keep",
                          "regex": true,
                          "source_labels": [
                            "__meta_kubernetes_service_annotation_prometheus_io_scrape"
                          ]
                        },
                        {
                          "action": "keep",
                          "regex": "(.*node-exporter|kubecost-network-costs)",
                          "source_labels": [
                            "__meta_kubernetes_endpoints_name"
                          ]
                        },
                        {
                          "action": "replace",
                          "regex": "(https?)",
                          "source_labels": [
                            "__meta_kubernetes_service_annotation_prometheus_io_scheme"
                          ],
                          "target_label": "__scheme__"
                        },
                        {
                          "action": "replace",
                          "regex": "(.+)",
                          "source_labels": [
                            "__meta_kubernetes_service_annotation_prometheus_io_path"
                          ],
                          "target_label": "__metrics_path__"
                        },
                        {
                          "action": "replace",
                          "regex": "([^:]+)(?::\\d+)?;(\\d+)",
                          "replacement": "$1:$2",
                          "source_labels": [
                            "__address__",
                            "__meta_kubernetes_service_annotation_prometheus_io_port"
                          ],
                          "target_label": "__address__"
                        },
                        {
                          "action": "labelmap",
                          "regex": "__meta_kubernetes_service_label_(.+)"
                        },
                        {
                          "action": "replace",
                          "source_labels": [
                            "__meta_kubernetes_namespace"
                          ],
                          "target_label": "kubernetes_namespace"
                        },
                        {
                          "action": "replace",
                          "source_labels": [
                            "__meta_kubernetes_service_name"
                          ],
                          "target_label": "kubernetes_name"
                        },
                        {
                          "action": "replace",
                          "source_labels": [
                            "__meta_kubernetes_pod_node_name"
                          ],
                          "target_label": "kubernetes_node"
                        }
                      ]
                    }
                  ]
                },
                "recording_rules.yml": {},
                "rules": {
                  "groups": [
                    {
                      "name": "CPU",
                      "rules": [
                        {
                          "expr": "sum(rate(container_cpu_usage_seconds_total{container!=\"\"}[5m]))",
                          "record": "cluster:cpu_usage:rate5m"
                        },
                        {
                          "expr": "rate(container_cpu_usage_seconds_total{container!=\"\"}[5m])",
                          "record": "cluster:cpu_usage_nosum:rate5m"
                        },
                        {
                          "expr": "avg(irate(container_cpu_usage_seconds_total{container!=\"POD\", container!=\"\"}[5m])) by (container,pod,namespace)",
                          "record": "kubecost_container_cpu_usage_irate"
                        },
                        {
                          "expr": "sum(container_memory_working_set_bytes{container!=\"POD\",container!=\"\"}) by (container,pod,namespace)",
                          "record": "kubecost_container_memory_working_set_bytes"
                        },
                        {
                          "expr": "sum(container_memory_working_set_bytes{container!=\"POD\",container!=\"\"})",
                          "record": "kubecost_cluster_memory_working_set_bytes"
                        }
                      ]
                    },
                    {
                      "name": "Savings",
                      "rules": [
                        {
                          "expr": "sum(avg(kube_pod_owner{owner_kind!=\"DaemonSet\"}) by (pod) * sum(container_cpu_allocation) by (pod))",
                          "labels": {
                            "daemonset": "false"
                          },
                          "record": "kubecost_savings_cpu_allocation"
                        },
                        {
                          "expr": "sum(avg(kube_pod_owner{owner_kind=\"DaemonSet\"}) by (pod) * sum(container_cpu_allocation) by (pod)) / sum(kube_node_info)",
                          "labels": {
                            "daemonset": "true"
                          },
                          "record": "kubecost_savings_cpu_allocation"
                        },
                        {
                          "expr": "sum(avg(kube_pod_owner{owner_kind!=\"DaemonSet\"}) by (pod) * sum(container_memory_allocation_bytes) by (pod))",
                          "labels": {
                            "daemonset": "false"
                          },
                          "record": "kubecost_savings_memory_allocation_bytes"
                        },
                        {
                          "expr": "sum(avg(kube_pod_owner{owner_kind=\"DaemonSet\"}) by (pod) * sum(container_memory_allocation_bytes) by (pod)) / sum(kube_node_info)",
                          "labels": {
                            "daemonset": "true"
                          },
                          "record": "kubecost_savings_memory_allocation_bytes"
                        }
                      ]
                    }
                  ]
                }
              },
              "serviceAccounts": {
                "alertmanager": {
                  "create": true,
                  "name": null
                },
                "nodeExporter": {
                  "create": true,
                  "name": null
                },
                "pushgateway": {
                  "create": true,
                  "name": null
                },
                "server": {
                  "annotations": {},
                  "create": true,
                  "name": null
                }
              }
            },
            "prometheusRule": {
              "additionalLabels": {},
              "enabled": false
            },
            "reporting": {
              "errorReporting": true,
              "logCollection": true,
              "productAnalytics": true,
              "valuesReporting": true
            },
            "saml": {
              "enabled": false,
              "rbac": {
                "enabled": false
              }
            },
            "service": {
              "annotations": {},
              "labels": {},
              "nodePort": {},
              "port": 9090,
              "sessionAffinity": {
                "enabled": false,
                "timeoutSeconds": 10800
              },
              "targetPort": 9090,
              "type": "ClusterIP"
            },
            "serviceAccount": {
              "annotations": {},
              "create": true
            },
            "serviceMonitor": {
              "additionalLabels": {},
              "aggregatorMetrics": {
                "additionalLabels": {},
                "enabled": false,
                "interval": "1m",
                "metricRelabelings": [],
                "relabelings": [],
                "scrapeTimeout": "10s"
              },
              "enabled": false,
              "interval": "1m",
              "metricRelabelings": [],
              "networkCosts": {
                "additionalLabels": {},
                "enabled": false,
                "interval": "1m",
                "metricRelabelings": [],
                "relabelings": [],
                "scrapeTimeout": "10s"
              },
              "relabelings": [],
              "scrapeTimeout": "10s"
            },
            "sigV4Proxy": {
              "extraEnv": null,
              "host": "aps-workspaces.us-west-2.amazonaws.com",
              "imagePullPolicy": "IfNotPresent",
              "name": "aps",
              "port": 8005,
              "region": "us-west-2",
              "resources": {}
            },
            "supportNFS": false,
            "systemProxy": {
              "enabled": false,
              "httpProxyUrl": "",
              "httpsProxyUrl": "",
              "noProxy": ""
            },
            "tolerations": [],
            "topologySpreadConstraints": [],
            "upgrade": {
              "toV2": false
            }
          }
        }
      ]
    capabilities: Basic Install
    features.operators.openshift.io/disconnected: "true"
    features.operators.openshift.io/fips-compliant: "true"
    features.operators.openshift.io/proxy-aware: "false"
    features.operators.openshift.io/tls-profiles: "false"
    features.operators.openshift.io/token-auth-aws: "false"
    features.operators.openshift.io/token-auth-azure: "false"
    features.operators.openshift.io/token-auth-gcp: "false"
    createdAt: "2024-07-07T23:26:52Z"
    operators.operatorframework.io/builder: operator-sdk-v1.35.0
    operators.operatorframework.io/project_layout: helm.sdk.operatorframework.io/v1
  name: kubecost-operator.v0.0.4
  namespace: kubecost
spec:
  apiservicedefinitions: {}
  customresourcedefinitions:
    owned:
      - kind: CostAnalyzer
        name: costanalyzers.charts.kubecost.com
        version: v1alpha1
  description: An operator for running kubecost cost-model
  displayName: kubecost-operator
  icon:
    - base64data: ""
      mediatype: "image/svg+xml"
  install:
    spec:
      clusterPermissions:
        - rules:
            - apiGroups:
                - ""
              resources:
                - namespaces
              verbs:
                - get
            - apiGroups:
                - ""
              resources:
                - secrets
              verbs:
                - '*'
            - apiGroups:
                - ""
              resources:
                - events
              verbs:
                - create
            - apiGroups:
                - charts.kubecost.com
              resources:
                - costanalyzers
                - costanalyzers/status
                - costanalyzers/finalizers
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - rbac.authorization.k8s.io
              resources:
                - clusterrolebindings
                - clusterroles
              verbs:
                - '*'
            - apiGroups:
                - rbac.authorization.k8s.io
              resources:
                - rolebindings
                - roles
              verbs:
                - '*'
            - apiGroups:
                - apps
              resources:
                - deployments
              verbs:
                - '*'
            - apiGroups:
                - ""
              resources:
                - configmaps
                - persistentvolumeclaims
                - serviceaccounts
                - services
              verbs:
                - '*'
            - apiGroups:
                - authentication.k8s.io
              resources:
                - tokenreviews
              verbs:
                - create
            - apiGroups:
                - authorization.k8s.io
              resources:
                - subjectaccessreviews
              verbs:
                - create
          serviceAccountName: kubecost-operator-controller-manager
      deployments:
        - label:
            app.kubernetes.io/component: manager
            app.kubernetes.io/created-by: kubecost-operator
            app.kubernetes.io/instance: controller-manager
            app.kubernetes.io/managed-by: kustomize
            app.kubernetes.io/name: deployment
            app.kubernetes.io/part-of: kubecost-operator
            control-plane: controller-manager
          name: kubecost-operator-controller-manager
          spec:
            replicas: 1
            selector:
              matchLabels:
                control-plane: controller-manager
            strategy: {}
            template:
              metadata:
                annotations:
                  kubectl.kubernetes.io/default-container: manager
                labels:
                  control-plane: controller-manager
              spec:
                containers:
                  - args:
                      - --secure-listen-address=0.0.0.0:8443
                      - --upstream=http://127.0.0.1:8080/
                      - --logtostderr=true
                      - --v=0
                    image: gcr.io/kubebuilder/kube-rbac-proxy@sha256:d8cc6ffb98190e8dd403bfe67ddcb454e6127d32b87acc237b3e5240f70a20fb
                    name: kube-rbac-proxy
                    ports:
                      - containerPort: 8443
                        name: https
                        protocol: TCP
                    resources:
                      limits:
                        cpu: 500m
                        memory: 128Mi
                      requests:
                        cpu: 5m
                        memory: 64Mi
                    securityContext:
                      allowPrivilegeEscalation: false
                      capabilities:
                        drop:
                          - ALL
                  - args:
                      - --health-probe-bind-address=:8081
                      - --metrics-bind-address=127.0.0.1:8080
                      - --leader-elect
                      - --leader-election-id=kubecost-operator
                    image: gcr.io/kubecost1/operator/kubecost-operator-controller@sha256:9f906c04fb4aa9d68bd3bf10cb5c21ff76f453a515a33f0e824470c5abe93553
                    livenessProbe:
                      httpGet:
                        path: /healthz
                        port: 8081
                      initialDelaySeconds: 15
                      periodSeconds: 20
                    name: manager
                    readinessProbe:
                      httpGet:
                        path: /readyz
                        port: 8081
                      initialDelaySeconds: 5
                      periodSeconds: 10
                    resources:
                      limits:
                        cpu: 500m
                        memory: 128Mi
                      requests:
                        cpu: 10m
                        memory: 64Mi
                    securityContext:
                      allowPrivilegeEscalation: false
                      capabilities:
                        drop:
                          - ALL
                securityContext:
                  runAsNonRoot: true
                serviceAccountName: kubecost-operator-controller-manager
                terminationGracePeriodSeconds: 10
      permissions:
        - rules:
            - apiGroups:
                - ""
              resources:
                - configmaps
              verbs:
                - get
                - list
                - watch
                - create
                - update
                - patch
                - delete
            - apiGroups:
                - coordination.k8s.io
              resources:
                - leases
              verbs:
                - get
                - list
                - watch
                - create
                - update
                - patch
                - delete
            - apiGroups:
                - ""
              resources:
                - events
              verbs:
                - create
                - patch
          serviceAccountName: kubecost-operator-controller-manager
    strategy: deployment
  installModes:
    - supported: false
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
  keywords:
    - cost-model
    - kubecost
  links:
    - name: Kubecost Operator
      url: https://kubecost-operator.domain
  maintainers:
    - email: ajay@kubecost.com
      name: AjayTripathy
  maturity: alpha
  minKubeVersion: 1.16.0
  provider:
    name: Stackwatch
  relatedImages:
    - image: gcr.io/kubecost1/frontend@sha256:45125a6df7daa330209ea9f26cbe48405595962d3eac799583c4e08ba853f20c
      name: frontend-45125a6df7daa330209ea9f26cbe48405595962d3eac799583c4e08ba853f20c-annotation
    - image: gcr.io/kubebuilder/kube-rbac-proxy@sha256:d8cc6ffb98190e8dd403bfe67ddcb454e6127d32b87acc237b3e5240f70a20fb
      name: kube-rbac-proxy
    - image: gcr.io/kubecost1/operator/kubecost-operator-controller@sha256:9f906c04fb4aa9d68bd3bf10cb5c21ff76f453a515a33f0e824470c5abe93553
      name: manager
    - image: registry.access.redhat.com/openshift3/prometheus@sha256:cc82e7c85f816a0ab6109dc0ee2bd587db3859450bf10e2d3b9241cf5daee233
      name: prometheus-cc82e7c85f816a0ab6109dc0ee2bd587db3859450bf10e2d3b9241cf5daee233-annotation
    - image: gcr.io/kubecost1/cost-model@sha256:74ff30f7b9bd7c48c345e703999b1d119fae7cac8d4098eba68d9812aae8b908
      name: cost-model-74ff30f7b9bd7c48c345e703999b1d119fae7cac8d4098eba68d9812aae8b908-annotation
  version: 0.0.4

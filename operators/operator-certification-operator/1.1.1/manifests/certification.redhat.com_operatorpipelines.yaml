apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.11.1
  creationTimestamp: null
  name: operatorpipelines.certification.redhat.com
spec:
  group: certification.redhat.com
  names:
    kind: OperatorPipeline
    listKind: OperatorPipelineList
    plural: operatorpipelines
    singular: operatorpipeline
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: OperatorPipeline is the Schema for the operatorpipelines API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: OperatorPipelineSpec defines the desired state of OperatorPipeline
            properties:
              applyCIPipeline:
                description: ApplyCIPipeline determines whether to install the ci
                  pipeline.
                type: boolean
              applyHostedPipeline:
                description: ApplyHostedPipeline determines whether to install the
                  hosted pipeline.
                type: boolean
              applyReleasePipeline:
                description: ApplyReleasePipeline determines whether to install the
                  release pipeline.
                type: boolean
              dockerRegistrySecretName:
                description: The name of the secret containing the docker registry
                  credentials secret expected by the pipeline
                type: string
              gitHubSecretName:
                description: GitHubSecretName is the name of the secret containing
                  the GitHub Token that will be used by the pipeline.
                type: string
              githubSSHSecretName:
                description: The name of the secret containing the github ssh secret
                  expected by the pipeline
                type: string
              kubeconfigSecretName:
                description: KubeconfigSecretName is the name of the secret containing
                  the kubeconfig that will be used by the pipeline.
                type: string
              operatorPipelinesRelease:
                description: OperatorPipelinesRelease is the Operator Pipelines release
                  (version) to install.
                type: string
              pyxisSecretName:
                description: The name of the secret containing the pyxis api secret
                  expected by the pipeline
                type: string
            required:
            - applyCIPipeline
            - applyHostedPipeline
            - applyReleasePipeline
            type: object
          status:
            description: OperatorPipelineStatus defines the observed state of OperatorPipeline
            properties:
              conditions:
                description: conditions describes the state of the operator's reconciliation
                  functionality. Conditions is a list of conditions related to operator
                  reconciliation
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource. --- This struct is intended for direct
                    use as an array at the field path .status.conditions.  For example,
                    \n type FooStatus struct{ // Represents the observations of a
                    foo's current state. // Known .status.conditions.type are: \"Available\",
                    \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge
                    // +listType=map // +listMapKey=type Conditions []metav1.Condition
                    `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\"
                    protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition
                        transitioned from one status to another. This should be when
                        the underlying condition changed.  If that is not known, then
                        using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating
                        details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.conditions[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating
                        the reason for the condition's last transition. Producers
                        of specific condition types may define expected values and
                        meanings for this field, and whether the values are considered
                        a guaranteed API. The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        --- Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              observedGeneration:
                description: ObservedGeneration is the generation last observed by
                  the controller
                format: int64
                type: integer
              pipelinesRepoHash:
                description: PipelinesRepoHash is the hash of the operator-pipelines
                  repo
                type: string
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: null
  storedVersions: null

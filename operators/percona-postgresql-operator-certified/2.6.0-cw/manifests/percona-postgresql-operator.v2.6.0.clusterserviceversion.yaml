apiVersion: operators.coreos.com/v1alpha1
kind: ClusterServiceVersion
metadata:
  name: "percona-postgresql-operator-certified.v2.6.0-cw"
  annotations:
    features.operators.openshift.io/disconnected: "true"
    features.operators.openshift.io/fips-compliant: "false"
    features.operators.openshift.io/proxy-aware: "false"
    features.operators.openshift.io/tls-profiles: "false"
    features.operators.openshift.io/token-auth-aws: "false"
    features.operators.openshift.io/token-auth-azure: "false"
    features.operators.openshift.io/token-auth-gcp: "false"
    support: percona.com
    categories: Database
    capabilities: Deep Insights
    description: >-
      Percona Operator for PostgreSQL manages the lifecycle of Percona PostgreSQL
      cluster instances.
    createdAt: 2025-03-10T10:27:22.324Z
    repository: https://github.com/percona/percona-postgresql-operator
    containerImage: "registry.connect.redhat.com/percona/percona-postgresql-operator@sha256:a80acc7d9ff6167a8b7740809942f721e09c7fdce6febeb89768355b0c9a6535"
    alm-examples: |-
      [
        {
          "apiVersion": "pgv2.percona.com/v2",
          "kind": "PerconaPGCluster",
          "metadata": {
            "name": "cluster1"
          },
          "spec": {
            "crVersion": "2.6.0",
            "image": "registry.connect.redhat.com/percona/percona-postgresql-operator-containers@sha256:7ecc5320ae341778140dd90e1e628ab3552f12cd4fb07e93070b034dc9e6c776",
            "imagePullPolicy": "Always",
            "postgresVersion": 16,
            "instances": [
              {
                "name": "instance1",
                "replicas": 3,
                "affinity": {
                  "podAntiAffinity": {
                    "preferredDuringSchedulingIgnoredDuringExecution": [
                      {
                        "weight": 1,
                        "podAffinityTerm": {
                          "labelSelector": {
                            "matchLabels": {
                              "postgres-operator.crunchydata.com/data": "postgres"
                            }
                          },
                          "topologyKey": "kubernetes.io/hostname"
                        }
                      }
                    ]
                  }
                },
                "dataVolumeClaimSpec": {
                  "accessModes": [
                    "ReadWriteOnce"
                  ],
                  "resources": {
                    "requests": {
                      "storage": "1Gi"
                    }
                  }
                }
              }
            ],
            "proxy": {
              "pgBouncer": {
                "replicas": 3,
                "image": "registry.connect.redhat.com/percona/percona-postgresql-operator-containers@sha256:fbf8c89259d821df04b007f3e750d3f3ed902a9dd366bb0efe72ba3683974b99",
                "affinity": {
                  "podAntiAffinity": {
                    "preferredDuringSchedulingIgnoredDuringExecution": [
                      {
                        "weight": 1,
                        "podAffinityTerm": {
                          "labelSelector": {
                            "matchLabels": {
                              "postgres-operator.crunchydata.com/role": "pgbouncer"
                            }
                          },
                          "topologyKey": "kubernetes.io/hostname"
                        }
                      }
                    ]
                  }
                }
              }
            },
            "backups": {
              "pgbackrest": {
                "image": "registry.connect.redhat.com/percona/percona-postgresql-operator-containers@sha256:eca4f0153fd75c87bb35e54e5358da458a502bcc7671a798ddf60f6a87246ba8",
                "repoHost": {
                  "affinity": {
                    "podAntiAffinity": {
                      "preferredDuringSchedulingIgnoredDuringExecution": [
                        {
                          "weight": 1,
                          "podAffinityTerm": {
                            "labelSelector": {
                              "matchLabels": {
                                "postgres-operator.crunchydata.com/data": "pgbackrest"
                              }
                            },
                            "topologyKey": "kubernetes.io/hostname"
                          }
                        }
                      ]
                    }
                  }
                },
                "manual": {
                  "repoName": "repo1",
                  "options": [
                    "--type=full"
                  ]
                },
                "repos": [
                  {
                    "name": "repo1",
                    "schedules": {
                      "full": "0 0 * * 6"
                    },
                    "volume": {
                      "volumeClaimSpec": {
                        "accessModes": [
                          "ReadWriteOnce"
                        ],
                        "resources": {
                          "requests": {
                            "storage": "1Gi"
                          }
                        }
                      }
                    }
                  }
                ]
              }
            },
            "pmm": {
              "enabled": false,
              "image": "registry.connect.redhat.com/percona/percona-postgresql-operator-containers@sha256:f540a2b2b2a45ba5824305ce2c809298915c23c59d49c440940fc1d476f99ae5",
              "secret": "cluster1-pmm-secret",
              "serverHost": "monitoring-service"
            }
          }
        }
      ]
spec:
  relatedImages:
  - name: ppg17.2-postgres
    image: registry.connect.redhat.com/percona/percona-postgresql-operator-containers@sha256:acb876c29ddcb8ca3d157a83e2b0e8410dabbd0c4c35257fa8f66a9f0b981fda
  - name: ppg16.8-postgres
    image: registry.connect.redhat.com/percona/percona-postgresql-operator-containers@sha256:7ecc5320ae341778140dd90e1e628ab3552f12cd4fb07e93070b034dc9e6c776
  - name: ppg15.12-postgres
    image: registry.connect.redhat.com/percona/percona-postgresql-operator-containers@sha256:db6d09dcb2e6f4c3a10de521fe0b008df0675741ee062fdbcaabfd4a466200d1
  - name: ppg14.17-postgres
    image: registry.connect.redhat.com/percona/percona-postgresql-operator-containers@sha256:31dd06dd76df480da58638c1ae14cbff762b1057701ccc20af9bc86c264b4962
  - name: ppg13.20-postgres
    image: registry.connect.redhat.com/percona/percona-postgresql-operator-containers@sha256:95f25de125cd43e825dea64be943e097459cfda09550877fbf460626913a2e9d
  - name: ppg17.2-postgres-gis3.3.7
    image: registry.connect.redhat.com/percona/percona-postgresql-operator-containers@sha256:8bd0c645431cfebd1b365c05ba2e5748d81d00dbf5b76cf2f3f3a411ef1cb14e
  - name: ppg16.8-postgres-gis3.3.8
    image: registry.connect.redhat.com/percona/percona-postgresql-operator-containers@sha256:4787f0b40b25d14dc4e724dc97f76a3fe13b97a372437fe803cc2208dbcf102c
  - name: ppg15.12-postgres-gis3.3.8
    image: registry.connect.redhat.com/percona/percona-postgresql-operator-containers@sha256:fed24afbf62ee384fe5cfdd1b8646ba7e5579aa500e9fc84be5467d66ca6d46b
  - name: ppg14.17-postgres-gis3.3.8
    image: registry.connect.redhat.com/percona/percona-postgresql-operator-containers@sha256:e243d07702754adaee2cb789d03bc3a2ca142d9c7d93bfe871cb7b47323e8bdf
  - name: ppg13.20-postgres-gis3.3.8
    image: registry.connect.redhat.com/percona/percona-postgresql-operator-containers@sha256:bb1095f5cd462e7d381fefe39ee1e12c9a1d11ba5a249d0aca065b1e5243efb7
  - name: ppg17.2-pgbackrest2.54.0
    image: registry.connect.redhat.com/percona/percona-postgresql-operator-containers@sha256:a3641d58a49fe4f771f3638c9fa18c71dd2f9aba1054e5693d3756134676cb3e
  - name: ppg16.8-pgbackrest2.54.2
    image: registry.connect.redhat.com/percona/percona-postgresql-operator-containers@sha256:eca4f0153fd75c87bb35e54e5358da458a502bcc7671a798ddf60f6a87246ba8
  - name: ppg15.12-pgbackrest2.54.2
    image: registry.connect.redhat.com/percona/percona-postgresql-operator-containers@sha256:9d33160904b7862d03c1018e4bf80247ea175918b7b0b4d4907e175045ddf4d1
  - name: ppg14.17-pgbackrest2.54.2
    image: registry.connect.redhat.com/percona/percona-postgresql-operator-containers@sha256:95e904ed80ee3f28519bdb7b0375d4c41421f80fc3631285e3a5cf2ed5a6e67a
  - name: ppg13.20-pgbackrest2.54.2
    image: registry.connect.redhat.com/percona/percona-postgresql-operator-containers@sha256:0d4978fdcd22eeec3e7773b11bd6cb20f6df246c3fb8ad73b85f672940b104bb
  - name: ppg17.2-pgbouncer1.23.2
    image: registry.connect.redhat.com/percona/percona-postgresql-operator-containers@sha256:a51586295a2abc228470c0d73087a0de646cd7b58d0c6796c08719ad7635d89f
  - name: ppg16.8-pgbouncer1.24.0
    image: registry.connect.redhat.com/percona/percona-postgresql-operator-containers@sha256:fbf8c89259d821df04b007f3e750d3f3ed902a9dd366bb0efe72ba3683974b99
  - name: ppg15.12-pgbouncer1.24.0
    image: registry.connect.redhat.com/percona/percona-postgresql-operator-containers@sha256:9ef6204ebf626ee85d2a2afd405ee44ebb5e252bb1ac07ebaed44fa658bfb5f0
  - name: ppg14.17-pgbouncer1.24.0
    image: registry.connect.redhat.com/percona/percona-postgresql-operator-containers@sha256:6ffc19f626b738b096635a0b1a2e4fbb28f800723759c58bd8491e9857b2fc19
  - name: ppg13.20-pgbouncer1.24.0
    image: registry.connect.redhat.com/percona/percona-postgresql-operator-containers@sha256:a1c25e9834fbc8ad58477fc47ef868ccf3c696bd488114efc8c7f61c66961356
  - name: pmm
    image: registry.connect.redhat.com/percona/percona-postgresql-operator-containers@sha256:f540a2b2b2a45ba5824305ce2c809298915c23c59d49c440940fc1d476f99ae5
  - name: operator
    image: registry.connect.redhat.com/percona/percona-postgresql-operator@sha256:a80acc7d9ff6167a8b7740809942f721e09c7fdce6febeb89768355b0c9a6535
  displayName: Percona Operator for PostgreSQL
  provider:
    name: Percona
    url: https://www.percona.com/
  keywords:
    - postgres
    - postgresql
    - database
    - sql
    - operator
    - percona
  description: |-
    ## Percona is Cloud Native


    Percona Operator for PostgreSQL automates and simplifies deploying and managing
    open source PostgreSQL clusters on Kubernetes. Percona Operator for PostgreSQL is based on Postgres Operator developed by Crunchy Data.

    Whether you need to get a simple PostgreSQL cluster up and running, need to deploy a high availability,
    fault tolerant cluster in production, or are running your own database-as-a-service, the Operator provides the essential
    features you need to keep your clusters healthy.

    Consult the
    [documentation](https://www.percona.com/doc/kubernetes-operator-for-postgresql/index.html)
    on the Percona Operator for PostgreSQL for complete details on capabilities
    and options.

    ### Supported Features

    * **PostgreSQL Cluster Provisioning**

    Create, Scale, & Delete PostgreSQL clusters with ease, while fully customizing your Pods and PostgreSQL configuration.

    * **High Availability**

        Safe, automated failover backed by a distributed consensus based high-availability solution. Uses Pod Anti-Affinity to help resiliency; you can configure how much
        enforced this can be. Failed primaries automatically heal, allowing for faster recovery time. Support for standby PostgreSQL clusters that work both within and
        across multiple Kubernetes clusters.

    * **Disaster Recovery**

        Backups and restores leverage the open source pgBackRest utility and includes support for full, incremental, and differential backups as well as efficient delta
        restores. Set how long you want your backups retained for. Works great with very large databases!

    * **Communication Security**

        Secure communication between your applications and data servers by enabling TLS for your PostgreSQL servers, including the ability to enforce all of your connections
        to use TLS.

    * **Monitoring**

        Track the health of your PostgreSQL clusters with Percona Monitoring and Management (PMM).

    * **PostgreSQL User Management**

        Quickly add and remove users from your PostgreSQL clusters with powerful commands. Manage password expiration policies or use your preferred PostgreSQL authentication
        scheme.

    * **Updates Management**

        Safely apply PostgreSQL updates with minimal availability impact to your PostgreSQL clusters.

    * **Advanced Replication Support**

        Choose between asynchronous replication and synchronous replication for workloads that are sensitive to losing transactions.

    * **Clone**

        Create new clusters from your existing clusters or backups.

    * **Connection Pooling**

        Use [pgBouncer](https://access.crunchydata.com/documentation/postgres-operator/latest/tutorial/pgbouncer/) for connection pooling

    * **Affinity and Tolerations**

        Have your PostgreSQL clusters deployed to Kubernetes Nodes of your preference with node affinity, or designate which nodes Kubernetes can schedule PostgreSQL instances
        to with Kubernetes  tolerations.

    * **Scheduled Backups**

        Choose the type of backup (full, incremental, differential) and how frequently you want it to occur on each PostgreSQL cluster.

    * **Backup to S3**

        Store your backups in Amazon S3 or any object storage system that supports the S3 protocol. The Operator can backup, restore, and create new clusters from these backups.

    * **Multi-Namespace Support**

        You can control how the Operator leverages Kubernetes Namespaces with several different deployment models:

        * Deploy the Operator and all PostgreSQL clusters to the same namespace
        * Deploy the Operator to one Namespace, and all PostgreSQL clusters to a different Namespace
        * Deploy the Operator to one Namespace, and have your PostgreSQL clusters managed across multiple Namespaces

    * **Full Customizability**

        The Operator not only makes it easy to get PostgreSQL up and running on Kubernetes-enabled platforms, but also allows you to further customize your deployments:

        * Selecting different storage classes for your primary, replica, and backup storage
        * Select your own container resources class for each PostgreSQL cluster deployment; differentiate between resources applied for primary and replica clusters
        * Use your own container image repository, including `imagePullSecrets` and private repositories  support
        * Customize your PostgreSQL configuration
        * Bring your own trusted certificate authority (CA) for use with the Operator API server
        * Override your PostgreSQL configuration for each cluster
        * Use your own custom images, re-define the image for each container separately
  version: '2.6.0-cw'
  links:
    - name: Percona
      url: https://www.percona.com/
    - name: Percona Kubernetes Operators Landing Page
      url: 'https://www.percona.com/software/percona-kubernetes-operators'
    - name: Documentation
      url: https://docs.percona.com/percona-operator-for-postgresql/index.html
    - name: Github
      url: 'https://github.com/percona/percona-postgresql-operator'

  maintainers:
    - name: Percona
      email: info@percona.com
  maturity: stable
  customresourcedefinitions:
    owned:
      - description: PerconaPGCluster is the CRD that defines a Percona PG Cluster
        displayName: Percona PGCluster
        kind: PerconaPGCluster
        name: perconapgclusters.pgv2.percona.com
        resources:
          - kind: ConfigMap
            name: ''
            version: v1
          - kind: CronJob
            name: ''
            version: v1beta1
          - kind: Deployment
            name: ''
            version: v1
          - kind: Job
            name: ''
            version: v1
          - kind: PersistentVolumeClaim
            name: ''
            version: v1
          - kind: Secret
            name: ''
            version: v1
          - kind: Service
            name: ''
            version: v1
          - kind: StatefulSet
            name: ''
            version: v1
        specDescriptors:
          - description: The image name to use for PostgreSQL containers.
            displayName: Image
            path: image
          - description: PostgreSQL backup configuration
            displayName: Backups
            path: backups
          - description: The specification of extensions.
            displayName: Extensions
            path: extensions
          - description: 'ImagePullPolicy is used to determine when Kubernetes will
              attempt to pull (download) container images. More info: https://kubernetes.io/docs/concepts/containers/images/#image-pull-policy'
            displayName: Image Pull Policy
            path: imagePullPolicy
          - description: Specifies one or more sets of PostgreSQL pods that replicate
              data for this cluster.
            displayName: Instance Sets
            path: instances
          - description: The specification of PMM sidecars.
            displayName: PMM
            path: pmm
          - description: The major version of PostgreSQL installed in the PostgreSQL
              image
            displayName: Postgres Version
            path: postgresVersion
          - description: The specification of a proxy that connects to PostgreSQL.
            displayName: Proxy
            path: proxy
        statusDescriptors:
          - displayName: Host
            path: host
          - displayName: PGBouncer
            path: pgbouncer
          - displayName: Postgres
            path: postgres
          - displayName: State
            path: state
        version: v2
      - description: PerconaPGBackup is the CRD that defines a Percona PostgreSQL
          Backup
        displayName: Percona PGBackup
        kind: PerconaPGBackup
        name: perconapgbackups.pgv2.percona.com
        resources:
          - kind: CronJob
            name: ''
            version: v1beta1
          - kind: Job
            name: ''
            version: v1
        version: v2
      - description: PerconaPGRestore is the CRD that defines a Percona PostgreSQL
          Restore
        displayName: Percona PGRestore
        kind: PerconaPGRestore
        name: perconapgrestores.pgv2.percona.com
        resources:
          - kind: CronJob
            name: ''
            version: v1beta1
          - kind: Job
            name: ''
            version: v1
        version: v2
      - description: CrunchyBridgeCluster is the Schema for the crunchybridgeclusters
          API This Custom Resource requires enabling CrunchyBridgeClusters feature
          gate
        displayName: Crunchy Bridge Cluster
        kind: CrunchyBridgeCluster
        name: crunchybridgeclusters.postgres-operator.crunchydata.com
        resources:
          - kind: ConfigMap
            name: ''
            version: v1
          - kind: CronJob
            name: ''
            version: v1beta1
          - kind: Deployment
            name: ''
            version: v1
          - kind: Job
            name: ''
            version: v1
          - kind: PersistentVolumeClaim
            name: ''
            version: v1
          - kind: Secret
            name: ''
            version: v1
          - kind: Service
            name: ''
            version: v1
          - kind: StatefulSet
            name: ''
            version: v1
        specDescriptors:
          - description: The ID of the cluster's major Postgres version. Currently
              Bridge offers 13-17
            displayName: Postgres Version
            path: majorVersion
        statusDescriptors:
          - description: conditions represent the observations of postgres cluster's
              current state.
            displayName: Conditions
            path: conditions
            x-descriptors:
              - urn:alm:descriptor:io.kubernetes.conditions
        version: v1beta1
      - description: PerconaPGUpgrade is the Schema for the perconapgupgrades API
        displayName: Percona PGUpgrade
        kind: PerconaPGUpgrade
        name: perconapgupgrades.pgv2.percona.com
        version: v2
      - description: PGAdmin is the Schema for the pgadmins API
        displayName: PGAdmin
        kind: PGAdmin
        name: pgadmins.postgres-operator.crunchydata.com
        statusDescriptors:
          - description: 'conditions represent the observations of pgadmin''s current
              state. Known .status.conditions.type are: "PersistentVolumeResizing",
              "Progressing", "ProxyAvailable"'
            displayName: Conditions
            path: conditions
            x-descriptors:
              - urn:alm:descriptor:io.kubernetes.conditions
        version: v1beta1
      - description: PGUpgrade is the Schema for the pgupgrades API
        displayName: PGUpgrade
        kind: PGUpgrade
        name: pgupgrades.postgres-operator.crunchydata.com
        version: v1beta1
      - description: PostgresCluster is the Schema for the postgresclusters API
        displayName: Postgres Cluster
        kind: PostgresCluster
        name: postgresclusters.postgres-operator.crunchydata.com
        resources:
          - kind: ConfigMap
            name: ''
            version: v1
          - kind: CronJob
            name: ''
            version: v1beta1
          - kind: Deployment
            name: ''
            version: v1
          - kind: Job
            name: ''
            version: v1
          - kind: PersistentVolumeClaim
            name: ''
            version: v1
          - kind: Secret
            name: ''
            version: v1
          - kind: Service
            name: ''
            version: v1
          - kind: StatefulSet
            name: ''
            version: v1
        specDescriptors:
          - description: The image name to use for PostgreSQL containers. When omitted,
              the value comes from an operator environment variable. For standard
              PostgreSQL images, the format is RELATED_IMAGE_POSTGRES_{postgresVersion},
              e.g. RELATED_IMAGE_POSTGRES_13. For PostGIS enabled PostgreSQL images,
              the format is RELATED_IMAGE_POSTGRES_{postgresVersion}_GIS_{postGISVersion},
              e.g. RELATED_IMAGE_POSTGRES_13_GIS_3.1.
            displayName: Image
            path: image
          - description: The major version of PostgreSQL installed in the PostgreSQL
              image
            displayName: Postgres Version
            path: postgresVersion
          - description: Specifies one or more sets of PostgreSQL pods that replicate
              data for this cluster.
            displayName: Instance Sets
            path: instances
        statusDescriptors:
          - description: 'conditions represent the observations of postgrescluster''s
              current state. Known .status.conditions.type are: "PersistentVolumeResizing",
              "Progressing", "ProxyAvailable"'
            displayName: Conditions
            path: conditions
            x-descriptors:
              - urn:alm:descriptor:io.kubernetes.conditions
        version: v1beta1
  skips:
    - percona-postgresql-operator-certified.v2.5.0-cw
  installModes:
    - supported: true
      type: OwnNamespace
    - supported: true
      type: SingleNamespace
    - supported: true
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
  install:
    strategy: deployment
    spec:
      clusterPermissions:
        - serviceAccountName: percona-postgresql-operator
          rules:
          - apiGroups:
            - ""
            resources:
            - configmaps
            - persistentvolumeclaims
            - pods
            - secrets
            - serviceaccounts
            - services
            verbs:
            - create
            - delete
            - get
            - list
            - patch
            - watch
          - apiGroups:
            - ""
            resources:
            - endpoints
            verbs:
            - create
            - delete
            - deletecollection
            - get
            - list
            - patch
            - watch
          - apiGroups:
            - ""
            resources:
            - endpoints/restricted
            - pods/exec
            - services
            verbs:
            - create
          - apiGroups:
            - ""
            resources:
            - events
            verbs:
            - create
            - patch
          - apiGroups:
            - apps
            resources:
            - deployments
            - replicasets
            - statefulsets
            verbs:
            - create
            - delete
            - get
            - list
            - patch
            - watch
          - apiGroups:
            - batch
            resources:
            - cronjobs
            verbs:
            - create
            - delete
            - get
            - list
            - patch
            - watch
          - apiGroups:
            - batch
            resources:
            - jobs
            verbs:
            - create
            - delete
            - get
            - list
            - patch
            - update
            - watch
          - apiGroups:
            - coordination.k8s.io
            resources:
            - leases
            verbs:
            - create
            - get
            - update
            - watch
          - apiGroups:
            - pgv2.percona.com
            resources:
            - perconapgbackups
            verbs:
            - create
            - delete
            - get
            - list
            - patch
            - update
            - watch
          - apiGroups:
            - pgv2.percona.com
            resources:
            - perconapgbackups/finalizers
            - perconapgclusters/status
            - perconapgrestores/status
            - perconapgupgrades/finalizers
            - perconapgupgrades/status
            verbs:
            - patch
            - update
          - apiGroups:
            - pgv2.percona.com
            resources:
            - perconapgbackups/status
            verbs:
            - create
            - patch
            - update
          - apiGroups:
            - pgv2.percona.com
            resources:
            - perconapgclusters
            - perconapgupgrades
            verbs:
            - create
            - get
            - list
            - patch
            - update
            - watch
          - apiGroups:
            - pgv2.percona.com
            resources:
            - perconapgclusters/finalizers
            verbs:
            - update
          - apiGroups:
            - pgv2.percona.com
            resources:
            - perconapgrestores
            verbs:
            - create
            - get
            - list
            - patch
            - watch
          - apiGroups:
            - policy
            resources:
            - poddisruptionbudgets
            verbs:
            - create
            - delete
            - get
            - list
            - patch
            - watch
          - apiGroups:
            - postgres-operator.crunchydata.com
            resources:
            - crunchybridgeclusters
            verbs:
            - get
            - list
            - patch
            - update
            - watch
          - apiGroups:
            - postgres-operator.crunchydata.com
            resources:
            - crunchybridgeclusters/finalizers
            - crunchybridgeclusters/status
            verbs:
            - patch
            - update
          - apiGroups:
            - postgres-operator.crunchydata.com
            resources:
            - pgadmins
            verbs:
            - get
            - list
            - watch
          - apiGroups:
            - postgres-operator.crunchydata.com
            resources:
            - pgadmins/finalizers
            - pgupgrades/finalizers
            - postgresclusters/finalizers
            verbs:
            - update
          - apiGroups:
            - postgres-operator.crunchydata.com
            resources:
            - pgadmins/status
            - pgupgrades/status
            verbs:
            - patch
          - apiGroups:
            - postgres-operator.crunchydata.com
            resources:
            - pgupgrades
            - postgresclusters
            verbs:
            - create
            - delete
            - get
            - list
            - patch
            - update
            - watch
          - apiGroups:
            - postgres-operator.crunchydata.com
            resources:
            - postgresclusters/status
            verbs:
            - create
            - patch
            - update
          - apiGroups:
            - rbac.authorization.k8s.io
            resources:
            - rolebindings
            - roles
            verbs:
            - create
            - delete
            - get
            - list
            - patch
            - watch
          - apiGroups:
            - snapshot.storage.k8s.io
            resources:
            - volumesnapshots
            verbs:
            - create
            - delete
            - get
            - list
            - patch
            - watch
      permissions:
        - serviceAccountName: percona-postgresql-operator
          rules:
          - apiGroups:
            - ""
            resources:
            - configmaps
            - persistentvolumeclaims
            - pods
            - secrets
            - serviceaccounts
            - services
            verbs:
            - create
            - delete
            - get
            - list
            - patch
            - watch
          - apiGroups:
            - ""
            resources:
            - endpoints
            verbs:
            - create
            - delete
            - deletecollection
            - get
            - list
            - patch
            - watch
          - apiGroups:
            - ""
            resources:
            - endpoints/restricted
            - pods/exec
            - services
            verbs:
            - create
          - apiGroups:
            - ""
            resources:
            - events
            verbs:
            - create
            - patch
          - apiGroups:
            - apps
            resources:
            - deployments
            - replicasets
            - statefulsets
            verbs:
            - create
            - delete
            - get
            - list
            - patch
            - watch
          - apiGroups:
            - batch
            resources:
            - cronjobs
            verbs:
            - create
            - delete
            - get
            - list
            - patch
            - watch
          - apiGroups:
            - batch
            resources:
            - jobs
            verbs:
            - create
            - delete
            - get
            - list
            - patch
            - update
            - watch
          - apiGroups:
            - coordination.k8s.io
            resources:
            - leases
            verbs:
            - create
            - get
            - update
            - watch
          - apiGroups:
            - pgv2.percona.com
            resources:
            - perconapgbackups
            verbs:
            - create
            - delete
            - get
            - list
            - patch
            - update
            - watch
          - apiGroups:
            - pgv2.percona.com
            resources:
            - perconapgbackups/finalizers
            - perconapgclusters/status
            - perconapgrestores/status
            - perconapgupgrades/finalizers
            - perconapgupgrades/status
            verbs:
            - patch
            - update
          - apiGroups:
            - pgv2.percona.com
            resources:
            - perconapgbackups/status
            verbs:
            - create
            - patch
            - update
          - apiGroups:
            - pgv2.percona.com
            resources:
            - perconapgclusters
            - perconapgupgrades
            verbs:
            - create
            - get
            - list
            - patch
            - update
            - watch
          - apiGroups:
            - pgv2.percona.com
            resources:
            - perconapgclusters/finalizers
            verbs:
            - update
          - apiGroups:
            - pgv2.percona.com
            resources:
            - perconapgrestores
            verbs:
            - create
            - get
            - list
            - patch
            - watch
          - apiGroups:
            - policy
            resources:
            - poddisruptionbudgets
            verbs:
            - create
            - delete
            - get
            - list
            - patch
            - watch
          - apiGroups:
            - postgres-operator.crunchydata.com
            resources:
            - crunchybridgeclusters
            verbs:
            - get
            - list
            - patch
            - update
            - watch
          - apiGroups:
            - postgres-operator.crunchydata.com
            resources:
            - crunchybridgeclusters/finalizers
            - crunchybridgeclusters/status
            verbs:
            - patch
            - update
          - apiGroups:
            - postgres-operator.crunchydata.com
            resources:
            - pgadmins
            verbs:
            - get
            - list
            - watch
          - apiGroups:
            - postgres-operator.crunchydata.com
            resources:
            - pgadmins/finalizers
            - pgupgrades/finalizers
            - postgresclusters/finalizers
            verbs:
            - update
          - apiGroups:
            - postgres-operator.crunchydata.com
            resources:
            - pgadmins/status
            - pgupgrades/status
            verbs:
            - patch
          - apiGroups:
            - postgres-operator.crunchydata.com
            resources:
            - pgupgrades
            - postgresclusters
            verbs:
            - create
            - delete
            - get
            - list
            - patch
            - update
            - watch
          - apiGroups:
            - postgres-operator.crunchydata.com
            resources:
            - postgresclusters/status
            verbs:
            - create
            - patch
            - update
          - apiGroups:
            - rbac.authorization.k8s.io
            resources:
            - rolebindings
            - roles
            verbs:
            - create
            - delete
            - get
            - list
            - patch
            - watch
          - apiGroups:
            - snapshot.storage.k8s.io
            resources:
            - volumesnapshots
            verbs:
            - create
            - delete
            - get
            - list
            - patch
            - watch
      deployments:
        - name: percona-postgresql-operator
          metadata:
            labels:
              app.kubernetes.io/component: operator
              app.kubernetes.io/instance: percona-postgresql-operator
              app.kubernetes.io/name: percona-postgresql-operator
              app.kubernetes.io/part-of: percona-postgresql-operator
              pgv2.percona.com/control-plane: postgres-operator
            name: percona-postgresql-operator
          spec:
            replicas: 1
            selector:
              matchLabels:
                app.kubernetes.io/component: operator
                app.kubernetes.io/instance: percona-postgresql-operator
                app.kubernetes.io/name: percona-postgresql-operator
                app.kubernetes.io/part-of: percona-postgresql-operator
                pgv2.percona.com/control-plane: postgres-operator
            strategy:
              type: Recreate
            template:
              metadata:
                labels:
                  app.kubernetes.io/component: operator
                  app.kubernetes.io/instance: percona-postgresql-operator
                  app.kubernetes.io/name: percona-postgresql-operator
                  app.kubernetes.io/part-of: percona-postgresql-operator
                  pgv2.percona.com/control-plane: postgres-operator
              spec:
                containers:
                - env:
                  - name: WATCH_NAMESPACE
                    valueFrom:
                      fieldRef:
                        fieldPath: metadata.annotations['olm.targetNamespaces']
                  - name: PGO_NAMESPACE
                    valueFrom:
                      fieldRef:
                        fieldPath: metadata.namespace
                  - name: LOG_STRUCTURED
                    value: "false"
                  - name: LOG_LEVEL
                    value: INFO
                  - name: DISABLE_TELEMETRY
                    value: "false"
                  image: "registry.connect.redhat.com/percona/percona-postgresql-operator@sha256:a80acc7d9ff6167a8b7740809942f721e09c7fdce6febeb89768355b0c9a6535"
                  imagePullPolicy: Always
                  livenessProbe:
                    failureThreshold: 3
                    httpGet:
                      path: /metrics
                      port: metrics
                      scheme: HTTP
                  name: operator
                  ports:
                  - containerPort: 8080
                    name: metrics
                    protocol: TCP
                  securityContext:
                    allowPrivilegeEscalation: false
                    capabilities:
                      drop:
                      - ALL
                    readOnlyRootFilesystem: true
                    runAsNonRoot: true
                serviceAccountName: percona-postgresql-operator
  icon:
    - mediatype: image/svg+xml
      base64data: PHN2ZyB3aWR0aD0iMjI3IiBoZWlnaHQ9IjE5NCIgdmlld0JveD0iMCAwIDIyNyAxOTQiIGZpbGw9Im5vbmUiIHhtbG5zPSJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZyI+CjxwYXRoIGQ9Ik01OS4yODk5IDE5My40M0w0My41NDk5IDE2NS4xMkw1Ny42NDk5IDEzOS43MUw0NS4wNjk5IDExNi45NUgxNi4zMjk5TDAuNjI5ODgzIDg5LjAxTDE2LjA1OTkgNjAuNzlINDkuMDA5OUw2Mi44Mjk5IDg1LjgzSDg4LjAxOTlMMTAyLjQxIDYwLjU2SDEzNC45NkwxNTAuMzUgODguNTJMMTM2LjI3IDExNC4wM0wxNDkuMjEgMTM2Ljc2TDE3OC4yMiAxMzYuODRMMTkzLjYzIDE2NC44OEwxNzguMSAxOTMuMDhMMTQ1Ljg4IDE5My4wNEwxMzEuMTQgMTY3LjQ4SDEwNi4wOUMxMDYuMDkgMTY3LjQ4IDkzLjAwOTkgMTkwLjQ4IDkxLjMxOTkgMTkzLjQzSDU5LjI2OTlINTkuMjg5OVpNNTEuNTA5OSAxNjguMTJMNjIuNTY5OSAxODcuNTdIODQuNjg5OUw3My41Nzk5IDE2OC4wNEw1MS41MTk5IDE2OC4xMkg1MS41MDk5Wk0xODMuODYgMTY3Ljk1QzE4Mi4xOCAxNjcuOTcgMTgwLjU3IDE2Ny45OSAxNzguOTYgMTY4TDE3My4wNSAxNjguMDVDMTY5Ljk5IDE2OC4wOCAxNjYuOTIgMTY4LjEgMTYzLjg2IDE2OC4xMkgxNjMuMzlMMTYzLjE2IDE2OC41M0MxNjAuNDEgMTczLjM5IDE1Ny42NSAxNzguMjUgMTU0Ljg4IDE4My4xMUwxNTIuNDggMTg3LjMzSDE3NC42TDE3NC44MyAxODYuOTJDMTc3LjAxIDE4My4wNiAxNzkuMjIgMTc5LjE5IDE4MS40MiAxNzUuMzFMMTgxLjM0IDE3NS4zNUMxODEuNTggMTc1LjAyIDE4MS45NCAxNzQuMzggMTgyLjYzIDE3My4xOEwxODUuNjIgMTY3LjkzTDE4My44NyAxNjcuOTVIMTgzLjg2Wk03OC40OTk5IDE2NC45Nkw4OS42OTk5IDE4NC41OUwxMDAuOTcgMTY0LjgzTDg5LjkyOTkgMTQ1LjQ4TDc4LjQ5OTkgMTY0Ljk2Wk0xMzYuMzggMTY0LjkzTDE0Ny40NSAxODQuMzRMMTU4LjM3IDE2NS4xOUwxNDcuMyAxNDUuNzdMMTM2LjM4IDE2NC45M1pNNTEuNDk5OSAxNjIuMjZMNzAuMTg5OSAxNjIuMTdMNjkuNDk5OSAxNjAuOTdDNjkuNDk5OSAxNjAuOTcgNjQuMzQ5OSAxNTEuOTMgNjEuNzQ5OSAxNDcuMzdMNjAuODY5OSAxNDUuODJMNTEuNDk5OSAxNjIuMjdWMTYyLjI2Wk0xNjYuNzggMTYyLjIyTDE4NS42NCAxNjIuMDZMMTg0Ljk3IDE2MC44N0MxODIuOCAxNTYuOTkgMTc5LjIgMTUwLjY5IDE3Ni45NSAxNDYuODFMMTc2LjI0IDE0NS41OUwxNjYuNzcgMTYyLjIySDE2Ni43OFpNMTA5LjI5IDE2MS42NkgxMzEuMjdMMTQyLjMzIDE0Mi4yMUgxMjAuOThMMTA5LjMgMTYxLjY2SDEwOS4yOVpNMTYxLjcyIDE1OS4zTDE3MS4yMiAxNDIuNkgxNTIuMkwxNjEuNzEgMTU5LjNIMTYxLjcyWk02Ni4zNTk5IDE0My40MUM2Ny4wNjk5IDE0NC42NyA2Ny45Mzk5IDE0Ni4yNSA2OC44Nzk5IDE0Ny45NEM3MC43ODk5IDE1MS4zOCA3Mi45NDk5IDE1NS4yOCA3NC40Njk5IDE1Ny44OUw3NS4xNjk5IDE1OS4wOUw3NS44Njk5IDE1Ny45Qzc3LjQxOTkgMTU1LjI1IDg0LjI3OTkgMTQzLjQzIDg0LjI3OTkgMTQzLjQzTDg0Ljk4OTkgMTQyLjIxSDY1LjY3OTlMNjYuMzU5OSAxNDMuNDJWMTQzLjQxWk0xMDQuMjEgMTU4LjhMMTE0LjE1IDE0Mi4yQzExNC4xNSAxNDIuMiAxMDkuMDQgMTQyLjIgMTA3LjIxIDE0Mi4ySDk0Ljc5OTlMMTA0LjIyIDE1OC43OUwxMDQuMjEgMTU4LjhaTTY2LjY0OTkgMTM0Ljc5TDY1LjcwOTkgMTM2LjY4TDg4LjAyOTkgMTM2LjRMOTkuMTE5OSAxMTYuOTFINzUuNDc5OUM3NS40Nzk5IDExNi45MSA2OS41Mjk5IDEyOC45NyA2Ni42NDk5IDEzNC43OVpNMTIwLjk3IDEzNi4zNkgxNDIuMzJMMTQxLjYzIDEzNS4xNUMxMzguMjUgMTI5LjIxIDEzNC44NyAxMjMuMjggMTMxLjUgMTE3LjM0TDEzMS4yNyAxMTYuOTNIMTA5LjMxTDEyMC45NyAxMzYuMzZaTTEwMy41IDEyMC45NUMxMDEuMjQgMTI0Ljg2IDk3LjYyOTkgMTMxLjIzIDk1LjQ1OTkgMTM1LjE1TDk0Ljc4OTkgMTM2LjM2SDk2LjE2OTlDMTAxLjcgMTM2LjM1IDEwNy4yMiAxMzYuMzUgMTEyLjczIDEzNi4zNUgxMTQuMTZMMTA0LjE5IDExOS43N0wxMDMuNSAxMjAuOTZWMTIwLjk1Wk02MC44Mjk5IDEzMy40Mkw2OC45Njk5IDExNi45OEg1MS43NTk5TDYwLjgyOTkgMTMzLjQyWk0yMi45OTk5IDExMS4wOUw0MS43MDk5IDExMS4wNEwzMi4zNDk5IDk0LjYyTDIyLjk4OTkgMTExLjFMMjIuOTk5OSAxMTEuMDlaTTEwOS45MiAxMTEuMDVIMTMxLjI4TDE0Mi4xNCA5MS42SDEyMS4wMkwxMDkuOTIgMTExLjA1Wk03NS40NTk5IDExMS4wNUg5OS4xMjk5TDg4LjA2OTkgOTEuNkg2NS44NTk5TDc1LjQ1OTkgMTExLjA1Wk01MS44NTk5IDExMS4wMkg2OC45Mzk5TDYxLjAxOTkgOTQuOTFMNTEuODU5OSAxMTEuMDJaTTk0Ljc3OTkgOTEuNjhMMTA0LjUgMTA4Ljc3TDExNC4zIDkxLjZMOTQuNzc5OSA5MS42OFpNNi45Mzk4OCA4OC43MkwxNy45ODk5IDEwOC4xTDI5LjA1OTkgODguNjhMMTcuOTg5OSA2OS4yOEw2LjkzOTg4IDg4LjcyWk00Ni43ODk5IDEwOC4wOUw1Ni4xNDk5IDkxLjY1SDM3LjQxOTlMNDYuNzc5OSAxMDguMDlINDYuNzg5OVpNMzQuMDg5OSA4NS43OUg1Ni4xNzk5TDQ1LjExOTkgNjYuMzRIMjMuMDM5OUwzNC4wODk5IDg1Ljc5Wk0xMjAuOTkgODUuNzZIMTQyLjM0TDEzMS4yOSA2Ni4zM0gxMDkuMzRMMTIwLjk5IDg1Ljc2Wk05NC44MDk5IDg1LjczSDExNC4xOEwxMDQuMjQgNjkuMTdMOTQuODA5OSA4NS43M1oiIGZpbGw9InVybCgjcGFpbnQwX2xpbmVhcl8xMjAyXzExNDU3KSIvPgo8cGF0aCBvcGFjaXR5PSIwLjUiIGQ9Ik0xMDkuNzcgMTc1LjA5SDEyNy41OEwxMzMuNDMgMTg1LjIySDEwNC4wNEwxMDkuNzcgMTc1LjA5WiIgZmlsbD0iIzYyQUVGRiIvPgo8cGF0aCBvcGFjaXR5PSIwLjUiIGQ9Ik00OS45NDk5IDE0MC4wNkwyOS43Mjk5IDE3NS4wOUg0MS4wNjk5TDQ2Ljc1OTkgMTg1LjIySDEyLjE1OTlMNDQuMjA5OSAxMjkuNzNMNDkuOTQ5OSAxNDAuMDZaIiBmaWxsPSIjNjJBRUZGIi8+CjxwYXRoIG9wYWNpdHk9IjAuNSIgZD0iTTE5NS45NiAxNzUuMDlIMjA4LjVMMTE5LjEyIDIwLjI3TDg1LjI5OTggNzguODRMNzMuNTk5OSA3OC44M0wxMTkuMTIgMEwyMjYuMDYgMTg1LjIySDE5MC4zNEwxOTUuOTYgMTc1LjA5WiIgZmlsbD0iIzYyQUVGRiIvPgo8ZGVmcz4KPGxpbmVhckdyYWRpZW50IGlkPSJwYWludDBfbGluZWFyXzEyMDJfMTE0NTciIHgxPSIxNjMuNjIiIHkxPSI2MC40IiB4Mj0iMjAuOTE5OSIgeTI9IjIwMy4xMSIgZ3JhZGllbnRVbml0cz0idXNlclNwYWNlT25Vc2UiPgo8c3RvcCBvZmZzZXQ9IjAuMDMiIHN0b3AtY29sb3I9IiM0MzlFRkYiLz4KPHN0b3Agb2Zmc2V0PSIwLjE2IiBzdG9wLWNvbG9yPSIjM0I5NEY0Ii8+CjxzdG9wIG9mZnNldD0iMC4zOSIgc3RvcC1jb2xvcj0iIzI2N0NENyIvPgo8c3RvcCBvZmZzZXQ9IjAuNjIiIHN0b3AtY29sb3I9IiMwRTVGQjUiLz4KPC9saW5lYXJHcmFkaWVudD4KPC9kZWZzPgo8L3N2Zz4=

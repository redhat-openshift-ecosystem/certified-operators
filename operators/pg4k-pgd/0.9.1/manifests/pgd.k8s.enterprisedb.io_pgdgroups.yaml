apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.12.0
  creationTimestamp: null
  labels:
    app.kubernetes.io/name: pgd-operator
  name: pgdgroups.pgd.k8s.enterprisedb.io
spec:
  conversion:
    strategy: Webhook
    webhook:
      clientConfig:
        service:
          name: pgd-operator-webhook-service
          namespace: pgd-operator-system
          path: /convert
      conversionReviewVersions:
      - v1
  group: pgd.k8s.enterprisedb.io
  names:
    kind: PGDGroup
    listKind: PGDGroupList
    plural: pgdgroups
    singular: pgdgroup
  scope: Namespaced
  versions:
  - additionalPrinterColumns:
    - description: Data Instances
      jsonPath: .status.CNP.dataInstances
      name: Data Instances
      type: string
    - description: Witness Instances
      jsonPath: .status.CNP.witnessInstances
      name: Witness Instances
      type: string
    - description: Phase
      jsonPath: .status.phase
      name: Phase
      type: string
    - jsonPath: .metadata.creationTimestamp
      name: Age
      type: date
    name: v1beta1
    schema:
      openAPIV3Schema:
        description: PGDGroup is the Schema for the pgdgroups API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: PGDGroupSpec defines the desired state of PGDGroup
            properties:
              backup:
                description: The configuration to be used for backups in the CNP instances.
                properties:
                  configuration:
                    description: The CNP configuration to be used for backup. ServerName
                      value is reserved by the operator.
                    properties:
                      barmanObjectStore:
                        description: The configuration for the barman-cloud tool suite
                        properties:
                          azureCredentials:
                            description: The credentials to use to upload data to
                              Azure Blob Storage
                            properties:
                              connectionString:
                                description: The connection string to be used
                                properties:
                                  key:
                                    description: The key to select
                                    type: string
                                  name:
                                    description: Name of the referent.
                                    type: string
                                required:
                                - key
                                - name
                                type: object
                              inheritFromAzureAD:
                                description: Use the Azure AD based authentication
                                  without providing explicitly the keys.
                                type: boolean
                              storageAccount:
                                description: The storage account where to upload data
                                properties:
                                  key:
                                    description: The key to select
                                    type: string
                                  name:
                                    description: Name of the referent.
                                    type: string
                                required:
                                - key
                                - name
                                type: object
                              storageKey:
                                description: The storage account key to be used in
                                  conjunction with the storage account name
                                properties:
                                  key:
                                    description: The key to select
                                    type: string
                                  name:
                                    description: Name of the referent.
                                    type: string
                                required:
                                - key
                                - name
                                type: object
                              storageSasToken:
                                description: A shared-access-signature to be used
                                  in conjunction with the storage account name
                                properties:
                                  key:
                                    description: The key to select
                                    type: string
                                  name:
                                    description: Name of the referent.
                                    type: string
                                required:
                                - key
                                - name
                                type: object
                            type: object
                          data:
                            description: The configuration to be used to backup the
                              data files When not defined, base backups files will
                              be stored uncompressed and may be unencrypted in the
                              object store, according to the bucket default policy.
                            properties:
                              additionalCommandArgs:
                                description: "AdditionalCommandArgs represents additional
                                  arguments that can be appended to the 'barman-cloud-backup'
                                  command-line invocation. These arguments provide
                                  flexibility to customize the backup process further
                                  according to specific requirements or configurations.
                                  \n Example: In a scenario where specialized backup
                                  options are required, such as setting a specific
                                  timeout or defining custom behavior, users can use
                                  this field to specify additional command arguments.
                                  \n Note: It's essential to ensure that the provided
                                  arguments are valid and supported by the 'barman-cloud-backup'
                                  command, to avoid potential errors or unintended
                                  behavior during execution."
                                items:
                                  type: string
                                type: array
                              compression:
                                description: Compress a backup file (a tar file per
                                  tablespace) while streaming it to the object store.
                                  Available options are empty string (no compression,
                                  default), `gzip`, `bzip2` or `snappy`.
                                enum:
                                - gzip
                                - bzip2
                                - snappy
                                type: string
                              encryption:
                                description: Whenever to force the encryption of files
                                  (if the bucket is not already configured for that).
                                  Allowed options are empty string (use the bucket
                                  policy, default), `AES256` and `aws:kms`
                                enum:
                                - AES256
                                - aws:kms
                                type: string
                              immediateCheckpoint:
                                description: Control whether the I/O workload for
                                  the backup initial checkpoint will be limited, according
                                  to the `checkpoint_completion_target` setting on
                                  the PostgreSQL server. If set to true, an immediate
                                  checkpoint will be used, meaning PostgreSQL will
                                  complete the checkpoint as soon as possible. `false`
                                  by default.
                                type: boolean
                              jobs:
                                description: The number of parallel jobs to be used
                                  to upload the backup, defaults to 2
                                format: int32
                                minimum: 1
                                type: integer
                            type: object
                          destinationPath:
                            description: The path where to store the backup (i.e.
                              s3://bucket/path/to/folder) this path, with different
                              destination folders, will be used for WALs and for data
                            minLength: 1
                            type: string
                          endpointCA:
                            description: EndpointCA store the CA bundle of the barman
                              endpoint. Useful when using self-signed certificates
                              to avoid errors with certificate issuer and barman-cloud-wal-archive
                            properties:
                              key:
                                description: The key to select
                                type: string
                              name:
                                description: Name of the referent.
                                type: string
                            required:
                            - key
                            - name
                            type: object
                          endpointURL:
                            description: Endpoint to be used to upload data to the
                              cloud, overriding the automatic endpoint discovery
                            type: string
                          googleCredentials:
                            description: The credentials to use to upload data to
                              Google Cloud Storage
                            properties:
                              applicationCredentials:
                                description: The secret containing the Google Cloud
                                  Storage JSON file with the credentials
                                properties:
                                  key:
                                    description: The key to select
                                    type: string
                                  name:
                                    description: Name of the referent.
                                    type: string
                                required:
                                - key
                                - name
                                type: object
                              gkeEnvironment:
                                description: If set to true, will presume that it's
                                  running inside a GKE environment, default to false.
                                type: boolean
                            type: object
                          historyTags:
                            additionalProperties:
                              type: string
                            description: HistoryTags is a list of key value pairs
                              that will be passed to the Barman --history-tags option.
                            type: object
                          s3Credentials:
                            description: The credentials to use to upload data to
                              S3
                            properties:
                              accessKeyId:
                                description: The reference to the access key id
                                properties:
                                  key:
                                    description: The key to select
                                    type: string
                                  name:
                                    description: Name of the referent.
                                    type: string
                                required:
                                - key
                                - name
                                type: object
                              inheritFromIAMRole:
                                description: Use the role based authentication without
                                  providing explicitly the keys.
                                type: boolean
                              region:
                                description: The reference to the secret containing
                                  the region name
                                properties:
                                  key:
                                    description: The key to select
                                    type: string
                                  name:
                                    description: Name of the referent.
                                    type: string
                                required:
                                - key
                                - name
                                type: object
                              secretAccessKey:
                                description: The reference to the secret access key
                                properties:
                                  key:
                                    description: The key to select
                                    type: string
                                  name:
                                    description: Name of the referent.
                                    type: string
                                required:
                                - key
                                - name
                                type: object
                              sessionToken:
                                description: The references to the session key
                                properties:
                                  key:
                                    description: The key to select
                                    type: string
                                  name:
                                    description: Name of the referent.
                                    type: string
                                required:
                                - key
                                - name
                                type: object
                            type: object
                          serverName:
                            description: The server name on S3, the cluster name is
                              used if this parameter is omitted
                            type: string
                          tags:
                            additionalProperties:
                              type: string
                            description: Tags is a list of key value pairs that will
                              be passed to the Barman --tags option.
                            type: object
                          wal:
                            description: The configuration for the backup of the WAL
                              stream. When not defined, WAL files will be stored uncompressed
                              and may be unencrypted in the object store, according
                              to the bucket default policy.
                            properties:
                              compression:
                                description: Compress a WAL file before sending it
                                  to the object store. Available options are empty
                                  string (no compression, default), `gzip`, `bzip2`
                                  or `snappy`.
                                enum:
                                - gzip
                                - bzip2
                                - snappy
                                type: string
                              encryption:
                                description: Whenever to force the encryption of files
                                  (if the bucket is not already configured for that).
                                  Allowed options are empty string (use the bucket
                                  policy, default), `AES256` and `aws:kms`
                                enum:
                                - AES256
                                - aws:kms
                                type: string
                              maxParallel:
                                description: Number of WAL files to be either archived
                                  in parallel (when the PostgreSQL instance is archiving
                                  to a backup object store) or restored in parallel
                                  (when a PostgreSQL standby is fetching WAL files
                                  from a recovery object store). If not specified,
                                  WAL files will be processed one at a time. It accepts
                                  a positive integer as a value - with 1 being the
                                  minimum accepted value.
                                minimum: 1
                                type: integer
                            type: object
                        required:
                        - destinationPath
                        type: object
                      retentionPolicy:
                        description: RetentionPolicy is the retention policy to be
                          used for backups and WALs (i.e. '60d'). The retention policy
                          is expressed in the form of `XXu` where `XX` is a positive
                          integer and `u` is in `[dwm]` - days, weeks, months. It's
                          currently only applicable when using the BarmanObjectStore
                          method.
                        pattern: ^[1-9][0-9]*[dwm]$
                        type: string
                      target:
                        default: prefer-standby
                        description: The policy to decide which instance should perform
                          backups. Available options are empty string, which will
                          default to `prefer-standby` policy, `primary` to have backups
                          run always on primary instances, `prefer-standby` to have
                          backups run preferably on the most updated standby, if available.
                        enum:
                        - primary
                        - prefer-standby
                        type: string
                      volumeSnapshot:
                        description: VolumeSnapshot provides the configuration for
                          the execution of volume snapshot backups.
                        properties:
                          annotations:
                            additionalProperties:
                              type: string
                            description: Annotations key-value pairs that will be
                              added to .metadata.annotations snapshot resources.
                            type: object
                          className:
                            description: ClassName specifies the Snapshot Class to
                              be used for PG_DATA PersistentVolumeClaim. It is the
                              default class for the other types if no specific class
                              is present
                            type: string
                          labels:
                            additionalProperties:
                              type: string
                            description: Labels are key-value pairs that will be added
                              to .metadata.labels snapshot resources.
                            type: object
                          online:
                            default: true
                            description: Whether the default type of backup with volume
                              snapshots is online/hot (`true`, default) or offline/cold
                              (`false`)
                            type: boolean
                          onlineConfiguration:
                            default:
                              immediateCheckpoint: false
                              waitForArchive: true
                            description: Configuration parameters to control the online/hot
                              backup with volume snapshots
                            properties:
                              immediateCheckpoint:
                                description: Control whether the I/O workload for
                                  the backup initial checkpoint will be limited, according
                                  to the `checkpoint_completion_target` setting on
                                  the PostgreSQL server. If set to true, an immediate
                                  checkpoint will be used, meaning PostgreSQL will
                                  complete the checkpoint as soon as possible. `false`
                                  by default.
                                type: boolean
                              waitForArchive:
                                default: true
                                description: If false, the function will return immediately
                                  after the backup is completed, without waiting for
                                  WAL to be archived. This behavior is only useful
                                  with backup software that independently monitors
                                  WAL archiving. Otherwise, WAL required to make the
                                  backup consistent might be missing and make the
                                  backup useless. By default, or when this parameter
                                  is true, pg_backup_stop will wait for WAL to be
                                  archived when archiving is enabled. On a standby,
                                  this means that it will wait only when archive_mode
                                  = always. If write activity on the primary is low,
                                  it may be useful to run pg_switch_wal on the primary
                                  in order to trigger an immediate segment switch.
                                type: boolean
                            type: object
                          snapshotOwnerReference:
                            default: none
                            description: SnapshotOwnerReference indicates the type
                              of owner reference the snapshot should have
                            enum:
                            - none
                            - cluster
                            - backup
                            type: string
                          tablespaceClassName:
                            additionalProperties:
                              type: string
                            description: TablespaceClassName specifies the Snapshot
                              Class to be used for the tablespaces. defaults to the
                              PGDATA Snapshot Class, if set
                            type: object
                          walClassName:
                            description: WalClassName specifies the Snapshot Class
                              to be used for the PG_WAL PersistentVolumeClaim.
                            type: string
                        type: object
                    type: object
                  cron:
                    description: The scheduled backup for the data
                    properties:
                      backupOwnerReference:
                        default: none
                        description: 'Indicates which ownerReference should be put
                          inside the created backup resources. - none: no owner reference
                          for created backup objects (same behavior as before the
                          field was introduced) - self: sets the Scheduled backup
                          object as owner of the backup - cluster: set the cluster
                          as owner of the backup'
                        enum:
                        - none
                        - self
                        - cluster
                        type: string
                      immediate:
                        description: If the first backup has to be immediately start
                          after creation or not
                        type: boolean
                      method:
                        default: barmanObjectStore
                        description: 'The backup method to be used, possible options
                          are `barmanObjectStore` and `volumeSnapshot`. Defaults to:
                          `barmanObjectStore`.'
                        enum:
                        - barmanObjectStore
                        - volumeSnapshot
                        type: string
                      online:
                        description: Whether the default type of backup with volume
                          snapshots is online/hot (`true`, default) or offline/cold
                          (`false`) Overrides the default setting specified in the
                          cluster field '.spec.backup.volumeSnapshot.online'
                        type: boolean
                      onlineConfiguration:
                        description: Configuration parameters to control the online/hot
                          backup with volume snapshots Overrides the default settings
                          specified in the cluster '.backup.volumeSnapshot.onlineConfiguration'
                          stanza
                        properties:
                          immediateCheckpoint:
                            description: Control whether the I/O workload for the
                              backup initial checkpoint will be limited, according
                              to the `checkpoint_completion_target` setting on the
                              PostgreSQL server. If set to true, an immediate checkpoint
                              will be used, meaning PostgreSQL will complete the checkpoint
                              as soon as possible. `false` by default.
                            type: boolean
                          waitForArchive:
                            default: true
                            description: If false, the function will return immediately
                              after the backup is completed, without waiting for WAL
                              to be archived. This behavior is only useful with backup
                              software that independently monitors WAL archiving.
                              Otherwise, WAL required to make the backup consistent
                              might be missing and make the backup useless. By default,
                              or when this parameter is true, pg_backup_stop will
                              wait for WAL to be archived when archiving is enabled.
                              On a standby, this means that it will wait only when
                              archive_mode = always. If write activity on the primary
                              is low, it may be useful to run pg_switch_wal on the
                              primary in order to trigger an immediate segment switch.
                            type: boolean
                        type: object
                      schedule:
                        description: The schedule does not follow the same format
                          used in Kubernetes CronJobs as it includes an additional
                          second specifier, see https://pkg.go.dev/github.com/robfig/cron#hdr-CRON_Expression_Format
                        type: string
                      suspend:
                        description: If this backup is suspended or not
                        type: boolean
                      target:
                        description: The policy to decide which instance should perform
                          this backup. If empty, it defaults to `cluster.spec.backup.target`.
                          Available options are empty string, `primary` and `prefer-standby`.
                          `primary` to have backups run always on primary instances,
                          `prefer-standby` to have backups run preferably on the most
                          updated standby, if available.
                        enum:
                        - primary
                        - prefer-standby
                        type: string
                    required:
                    - schedule
                    type: object
                type: object
              cnp:
                description: Instances configuration that will be injected into the
                  CNP clusters that compose the PGD Group
                properties:
                  affinity:
                    description: Affinity/Anti-affinity rules for Pods
                    properties:
                      additionalPodAffinity:
                        description: AdditionalPodAffinity allows to specify pod affinity
                          terms to be passed to all the cluster's pods.
                        properties:
                          preferredDuringSchedulingIgnoredDuringExecution:
                            description: The scheduler will prefer to schedule pods
                              to nodes that satisfy the affinity expressions specified
                              by this field, but it may choose a node that violates
                              one or more of the expressions. The node that is most
                              preferred is the one with the greatest sum of weights,
                              i.e. for each node that meets all of the scheduling
                              requirements (resource request, requiredDuringScheduling
                              affinity expressions, etc.), compute a sum by iterating
                              through the elements of this field and adding "weight"
                              to the sum if the node has pods which matches the corresponding
                              podAffinityTerm; the node(s) with the highest sum are
                              the most preferred.
                            items:
                              description: The weights of all of the matched WeightedPodAffinityTerm
                                fields are added per-node to find the most preferred
                                node(s)
                              properties:
                                podAffinityTerm:
                                  description: Required. A pod affinity term, associated
                                    with the corresponding weight.
                                  properties:
                                    labelSelector:
                                      description: A label query over a set of resources,
                                        in this case pods. If it's null, this PodAffinityTerm
                                        matches with no Pods.
                                      properties:
                                        matchExpressions:
                                          description: matchExpressions is a list
                                            of label selector requirements. The requirements
                                            are ANDed.
                                          items:
                                            description: A label selector requirement
                                              is a selector that contains values,
                                              a key, and an operator that relates
                                              the key and values.
                                            properties:
                                              key:
                                                description: key is the label key
                                                  that the selector applies to.
                                                type: string
                                              operator:
                                                description: operator represents a
                                                  key's relationship to a set of values.
                                                  Valid operators are In, NotIn, Exists
                                                  and DoesNotExist.
                                                type: string
                                              values:
                                                description: values is an array of
                                                  string values. If the operator is
                                                  In or NotIn, the values array must
                                                  be non-empty. If the operator is
                                                  Exists or DoesNotExist, the values
                                                  array must be empty. This array
                                                  is replaced during a strategic merge
                                                  patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                        matchLabels:
                                          additionalProperties:
                                            type: string
                                          description: matchLabels is a map of {key,value}
                                            pairs. A single {key,value} in the matchLabels
                                            map is equivalent to an element of matchExpressions,
                                            whose key field is "key", the operator
                                            is "In", and the values array contains
                                            only "value". The requirements are ANDed.
                                          type: object
                                      type: object
                                      x-kubernetes-map-type: atomic
                                    matchLabelKeys:
                                      description: MatchLabelKeys is a set of pod
                                        label keys to select which pods will be taken
                                        into consideration. The keys are used to lookup
                                        values from the incoming pod labels, those
                                        key-value labels are merged with `LabelSelector`
                                        as `key in (value)` to select the group of
                                        existing pods which pods will be taken into
                                        consideration for the incoming pod's pod (anti)
                                        affinity. Keys that don't exist in the incoming
                                        pod labels will be ignored. The default value
                                        is empty. The same key is forbidden to exist
                                        in both MatchLabelKeys and LabelSelector.
                                        Also, MatchLabelKeys cannot be set when LabelSelector
                                        isn't set. This is an alpha field and requires
                                        enabling MatchLabelKeysInPodAffinity feature
                                        gate.
                                      items:
                                        type: string
                                      type: array
                                      x-kubernetes-list-type: atomic
                                    mismatchLabelKeys:
                                      description: MismatchLabelKeys is a set of pod
                                        label keys to select which pods will be taken
                                        into consideration. The keys are used to lookup
                                        values from the incoming pod labels, those
                                        key-value labels are merged with `LabelSelector`
                                        as `key notin (value)` to select the group
                                        of existing pods which pods will be taken
                                        into consideration for the incoming pod's
                                        pod (anti) affinity. Keys that don't exist
                                        in the incoming pod labels will be ignored.
                                        The default value is empty. The same key is
                                        forbidden to exist in both MismatchLabelKeys
                                        and LabelSelector. Also, MismatchLabelKeys
                                        cannot be set when LabelSelector isn't set.
                                        This is an alpha field and requires enabling
                                        MatchLabelKeysInPodAffinity feature gate.
                                      items:
                                        type: string
                                      type: array
                                      x-kubernetes-list-type: atomic
                                    namespaceSelector:
                                      description: A label query over the set of namespaces
                                        that the term applies to. The term is applied
                                        to the union of the namespaces selected by
                                        this field and the ones listed in the namespaces
                                        field. null selector and null or empty namespaces
                                        list means "this pod's namespace". An empty
                                        selector ({}) matches all namespaces.
                                      properties:
                                        matchExpressions:
                                          description: matchExpressions is a list
                                            of label selector requirements. The requirements
                                            are ANDed.
                                          items:
                                            description: A label selector requirement
                                              is a selector that contains values,
                                              a key, and an operator that relates
                                              the key and values.
                                            properties:
                                              key:
                                                description: key is the label key
                                                  that the selector applies to.
                                                type: string
                                              operator:
                                                description: operator represents a
                                                  key's relationship to a set of values.
                                                  Valid operators are In, NotIn, Exists
                                                  and DoesNotExist.
                                                type: string
                                              values:
                                                description: values is an array of
                                                  string values. If the operator is
                                                  In or NotIn, the values array must
                                                  be non-empty. If the operator is
                                                  Exists or DoesNotExist, the values
                                                  array must be empty. This array
                                                  is replaced during a strategic merge
                                                  patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                        matchLabels:
                                          additionalProperties:
                                            type: string
                                          description: matchLabels is a map of {key,value}
                                            pairs. A single {key,value} in the matchLabels
                                            map is equivalent to an element of matchExpressions,
                                            whose key field is "key", the operator
                                            is "In", and the values array contains
                                            only "value". The requirements are ANDed.
                                          type: object
                                      type: object
                                      x-kubernetes-map-type: atomic
                                    namespaces:
                                      description: namespaces specifies a static list
                                        of namespace names that the term applies to.
                                        The term is applied to the union of the namespaces
                                        listed in this field and the ones selected
                                        by namespaceSelector. null or empty namespaces
                                        list and null namespaceSelector means "this
                                        pod's namespace".
                                      items:
                                        type: string
                                      type: array
                                    topologyKey:
                                      description: This pod should be co-located (affinity)
                                        or not co-located (anti-affinity) with the
                                        pods matching the labelSelector in the specified
                                        namespaces, where co-located is defined as
                                        running on a node whose value of the label
                                        with key topologyKey matches that of any node
                                        on which any of the selected pods is running.
                                        Empty topologyKey is not allowed.
                                      type: string
                                  required:
                                  - topologyKey
                                  type: object
                                weight:
                                  description: weight associated with matching the
                                    corresponding podAffinityTerm, in the range 1-100.
                                  format: int32
                                  type: integer
                              required:
                              - podAffinityTerm
                              - weight
                              type: object
                            type: array
                          requiredDuringSchedulingIgnoredDuringExecution:
                            description: If the affinity requirements specified by
                              this field are not met at scheduling time, the pod will
                              not be scheduled onto the node. If the affinity requirements
                              specified by this field cease to be met at some point
                              during pod execution (e.g. due to a pod label update),
                              the system may or may not try to eventually evict the
                              pod from its node. When there are multiple elements,
                              the lists of nodes corresponding to each podAffinityTerm
                              are intersected, i.e. all terms must be satisfied.
                            items:
                              description: Defines a set of pods (namely those matching
                                the labelSelector relative to the given namespace(s))
                                that this pod should be co-located (affinity) or not
                                co-located (anti-affinity) with, where co-located
                                is defined as running on a node whose value of the
                                label with key <topologyKey> matches that of any node
                                on which a pod of the set of pods is running
                              properties:
                                labelSelector:
                                  description: A label query over a set of resources,
                                    in this case pods. If it's null, this PodAffinityTerm
                                    matches with no Pods.
                                  properties:
                                    matchExpressions:
                                      description: matchExpressions is a list of label
                                        selector requirements. The requirements are
                                        ANDed.
                                      items:
                                        description: A label selector requirement
                                          is a selector that contains values, a key,
                                          and an operator that relates the key and
                                          values.
                                        properties:
                                          key:
                                            description: key is the label key that
                                              the selector applies to.
                                            type: string
                                          operator:
                                            description: operator represents a key's
                                              relationship to a set of values. Valid
                                              operators are In, NotIn, Exists and
                                              DoesNotExist.
                                            type: string
                                          values:
                                            description: values is an array of string
                                              values. If the operator is In or NotIn,
                                              the values array must be non-empty.
                                              If the operator is Exists or DoesNotExist,
                                              the values array must be empty. This
                                              array is replaced during a strategic
                                              merge patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                    matchLabels:
                                      additionalProperties:
                                        type: string
                                      description: matchLabels is a map of {key,value}
                                        pairs. A single {key,value} in the matchLabels
                                        map is equivalent to an element of matchExpressions,
                                        whose key field is "key", the operator is
                                        "In", and the values array contains only "value".
                                        The requirements are ANDed.
                                      type: object
                                  type: object
                                  x-kubernetes-map-type: atomic
                                matchLabelKeys:
                                  description: MatchLabelKeys is a set of pod label
                                    keys to select which pods will be taken into consideration.
                                    The keys are used to lookup values from the incoming
                                    pod labels, those key-value labels are merged
                                    with `LabelSelector` as `key in (value)` to select
                                    the group of existing pods which pods will be
                                    taken into consideration for the incoming pod's
                                    pod (anti) affinity. Keys that don't exist in
                                    the incoming pod labels will be ignored. The default
                                    value is empty. The same key is forbidden to exist
                                    in both MatchLabelKeys and LabelSelector. Also,
                                    MatchLabelKeys cannot be set when LabelSelector
                                    isn't set. This is an alpha field and requires
                                    enabling MatchLabelKeysInPodAffinity feature gate.
                                  items:
                                    type: string
                                  type: array
                                  x-kubernetes-list-type: atomic
                                mismatchLabelKeys:
                                  description: MismatchLabelKeys is a set of pod label
                                    keys to select which pods will be taken into consideration.
                                    The keys are used to lookup values from the incoming
                                    pod labels, those key-value labels are merged
                                    with `LabelSelector` as `key notin (value)` to
                                    select the group of existing pods which pods will
                                    be taken into consideration for the incoming pod's
                                    pod (anti) affinity. Keys that don't exist in
                                    the incoming pod labels will be ignored. The default
                                    value is empty. The same key is forbidden to exist
                                    in both MismatchLabelKeys and LabelSelector. Also,
                                    MismatchLabelKeys cannot be set when LabelSelector
                                    isn't set. This is an alpha field and requires
                                    enabling MatchLabelKeysInPodAffinity feature gate.
                                  items:
                                    type: string
                                  type: array
                                  x-kubernetes-list-type: atomic
                                namespaceSelector:
                                  description: A label query over the set of namespaces
                                    that the term applies to. The term is applied
                                    to the union of the namespaces selected by this
                                    field and the ones listed in the namespaces field.
                                    null selector and null or empty namespaces list
                                    means "this pod's namespace". An empty selector
                                    ({}) matches all namespaces.
                                  properties:
                                    matchExpressions:
                                      description: matchExpressions is a list of label
                                        selector requirements. The requirements are
                                        ANDed.
                                      items:
                                        description: A label selector requirement
                                          is a selector that contains values, a key,
                                          and an operator that relates the key and
                                          values.
                                        properties:
                                          key:
                                            description: key is the label key that
                                              the selector applies to.
                                            type: string
                                          operator:
                                            description: operator represents a key's
                                              relationship to a set of values. Valid
                                              operators are In, NotIn, Exists and
                                              DoesNotExist.
                                            type: string
                                          values:
                                            description: values is an array of string
                                              values. If the operator is In or NotIn,
                                              the values array must be non-empty.
                                              If the operator is Exists or DoesNotExist,
                                              the values array must be empty. This
                                              array is replaced during a strategic
                                              merge patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                    matchLabels:
                                      additionalProperties:
                                        type: string
                                      description: matchLabels is a map of {key,value}
                                        pairs. A single {key,value} in the matchLabels
                                        map is equivalent to an element of matchExpressions,
                                        whose key field is "key", the operator is
                                        "In", and the values array contains only "value".
                                        The requirements are ANDed.
                                      type: object
                                  type: object
                                  x-kubernetes-map-type: atomic
                                namespaces:
                                  description: namespaces specifies a static list
                                    of namespace names that the term applies to. The
                                    term is applied to the union of the namespaces
                                    listed in this field and the ones selected by
                                    namespaceSelector. null or empty namespaces list
                                    and null namespaceSelector means "this pod's namespace".
                                  items:
                                    type: string
                                  type: array
                                topologyKey:
                                  description: This pod should be co-located (affinity)
                                    or not co-located (anti-affinity) with the pods
                                    matching the labelSelector in the specified namespaces,
                                    where co-located is defined as running on a node
                                    whose value of the label with key topologyKey
                                    matches that of any node on which any of the selected
                                    pods is running. Empty topologyKey is not allowed.
                                  type: string
                              required:
                              - topologyKey
                              type: object
                            type: array
                        type: object
                      additionalPodAntiAffinity:
                        description: AdditionalPodAntiAffinity allows to specify pod
                          anti-affinity terms to be added to the ones generated by
                          the operator if EnablePodAntiAffinity is set to true (default)
                          or to be used exclusively if set to false.
                        properties:
                          preferredDuringSchedulingIgnoredDuringExecution:
                            description: The scheduler will prefer to schedule pods
                              to nodes that satisfy the anti-affinity expressions
                              specified by this field, but it may choose a node that
                              violates one or more of the expressions. The node that
                              is most preferred is the one with the greatest sum of
                              weights, i.e. for each node that meets all of the scheduling
                              requirements (resource request, requiredDuringScheduling
                              anti-affinity expressions, etc.), compute a sum by iterating
                              through the elements of this field and adding "weight"
                              to the sum if the node has pods which matches the corresponding
                              podAffinityTerm; the node(s) with the highest sum are
                              the most preferred.
                            items:
                              description: The weights of all of the matched WeightedPodAffinityTerm
                                fields are added per-node to find the most preferred
                                node(s)
                              properties:
                                podAffinityTerm:
                                  description: Required. A pod affinity term, associated
                                    with the corresponding weight.
                                  properties:
                                    labelSelector:
                                      description: A label query over a set of resources,
                                        in this case pods. If it's null, this PodAffinityTerm
                                        matches with no Pods.
                                      properties:
                                        matchExpressions:
                                          description: matchExpressions is a list
                                            of label selector requirements. The requirements
                                            are ANDed.
                                          items:
                                            description: A label selector requirement
                                              is a selector that contains values,
                                              a key, and an operator that relates
                                              the key and values.
                                            properties:
                                              key:
                                                description: key is the label key
                                                  that the selector applies to.
                                                type: string
                                              operator:
                                                description: operator represents a
                                                  key's relationship to a set of values.
                                                  Valid operators are In, NotIn, Exists
                                                  and DoesNotExist.
                                                type: string
                                              values:
                                                description: values is an array of
                                                  string values. If the operator is
                                                  In or NotIn, the values array must
                                                  be non-empty. If the operator is
                                                  Exists or DoesNotExist, the values
                                                  array must be empty. This array
                                                  is replaced during a strategic merge
                                                  patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                        matchLabels:
                                          additionalProperties:
                                            type: string
                                          description: matchLabels is a map of {key,value}
                                            pairs. A single {key,value} in the matchLabels
                                            map is equivalent to an element of matchExpressions,
                                            whose key field is "key", the operator
                                            is "In", and the values array contains
                                            only "value". The requirements are ANDed.
                                          type: object
                                      type: object
                                      x-kubernetes-map-type: atomic
                                    matchLabelKeys:
                                      description: MatchLabelKeys is a set of pod
                                        label keys to select which pods will be taken
                                        into consideration. The keys are used to lookup
                                        values from the incoming pod labels, those
                                        key-value labels are merged with `LabelSelector`
                                        as `key in (value)` to select the group of
                                        existing pods which pods will be taken into
                                        consideration for the incoming pod's pod (anti)
                                        affinity. Keys that don't exist in the incoming
                                        pod labels will be ignored. The default value
                                        is empty. The same key is forbidden to exist
                                        in both MatchLabelKeys and LabelSelector.
                                        Also, MatchLabelKeys cannot be set when LabelSelector
                                        isn't set. This is an alpha field and requires
                                        enabling MatchLabelKeysInPodAffinity feature
                                        gate.
                                      items:
                                        type: string
                                      type: array
                                      x-kubernetes-list-type: atomic
                                    mismatchLabelKeys:
                                      description: MismatchLabelKeys is a set of pod
                                        label keys to select which pods will be taken
                                        into consideration. The keys are used to lookup
                                        values from the incoming pod labels, those
                                        key-value labels are merged with `LabelSelector`
                                        as `key notin (value)` to select the group
                                        of existing pods which pods will be taken
                                        into consideration for the incoming pod's
                                        pod (anti) affinity. Keys that don't exist
                                        in the incoming pod labels will be ignored.
                                        The default value is empty. The same key is
                                        forbidden to exist in both MismatchLabelKeys
                                        and LabelSelector. Also, MismatchLabelKeys
                                        cannot be set when LabelSelector isn't set.
                                        This is an alpha field and requires enabling
                                        MatchLabelKeysInPodAffinity feature gate.
                                      items:
                                        type: string
                                      type: array
                                      x-kubernetes-list-type: atomic
                                    namespaceSelector:
                                      description: A label query over the set of namespaces
                                        that the term applies to. The term is applied
                                        to the union of the namespaces selected by
                                        this field and the ones listed in the namespaces
                                        field. null selector and null or empty namespaces
                                        list means "this pod's namespace". An empty
                                        selector ({}) matches all namespaces.
                                      properties:
                                        matchExpressions:
                                          description: matchExpressions is a list
                                            of label selector requirements. The requirements
                                            are ANDed.
                                          items:
                                            description: A label selector requirement
                                              is a selector that contains values,
                                              a key, and an operator that relates
                                              the key and values.
                                            properties:
                                              key:
                                                description: key is the label key
                                                  that the selector applies to.
                                                type: string
                                              operator:
                                                description: operator represents a
                                                  key's relationship to a set of values.
                                                  Valid operators are In, NotIn, Exists
                                                  and DoesNotExist.
                                                type: string
                                              values:
                                                description: values is an array of
                                                  string values. If the operator is
                                                  In or NotIn, the values array must
                                                  be non-empty. If the operator is
                                                  Exists or DoesNotExist, the values
                                                  array must be empty. This array
                                                  is replaced during a strategic merge
                                                  patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                        matchLabels:
                                          additionalProperties:
                                            type: string
                                          description: matchLabels is a map of {key,value}
                                            pairs. A single {key,value} in the matchLabels
                                            map is equivalent to an element of matchExpressions,
                                            whose key field is "key", the operator
                                            is "In", and the values array contains
                                            only "value". The requirements are ANDed.
                                          type: object
                                      type: object
                                      x-kubernetes-map-type: atomic
                                    namespaces:
                                      description: namespaces specifies a static list
                                        of namespace names that the term applies to.
                                        The term is applied to the union of the namespaces
                                        listed in this field and the ones selected
                                        by namespaceSelector. null or empty namespaces
                                        list and null namespaceSelector means "this
                                        pod's namespace".
                                      items:
                                        type: string
                                      type: array
                                    topologyKey:
                                      description: This pod should be co-located (affinity)
                                        or not co-located (anti-affinity) with the
                                        pods matching the labelSelector in the specified
                                        namespaces, where co-located is defined as
                                        running on a node whose value of the label
                                        with key topologyKey matches that of any node
                                        on which any of the selected pods is running.
                                        Empty topologyKey is not allowed.
                                      type: string
                                  required:
                                  - topologyKey
                                  type: object
                                weight:
                                  description: weight associated with matching the
                                    corresponding podAffinityTerm, in the range 1-100.
                                  format: int32
                                  type: integer
                              required:
                              - podAffinityTerm
                              - weight
                              type: object
                            type: array
                          requiredDuringSchedulingIgnoredDuringExecution:
                            description: If the anti-affinity requirements specified
                              by this field are not met at scheduling time, the pod
                              will not be scheduled onto the node. If the anti-affinity
                              requirements specified by this field cease to be met
                              at some point during pod execution (e.g. due to a pod
                              label update), the system may or may not try to eventually
                              evict the pod from its node. When there are multiple
                              elements, the lists of nodes corresponding to each podAffinityTerm
                              are intersected, i.e. all terms must be satisfied.
                            items:
                              description: Defines a set of pods (namely those matching
                                the labelSelector relative to the given namespace(s))
                                that this pod should be co-located (affinity) or not
                                co-located (anti-affinity) with, where co-located
                                is defined as running on a node whose value of the
                                label with key <topologyKey> matches that of any node
                                on which a pod of the set of pods is running
                              properties:
                                labelSelector:
                                  description: A label query over a set of resources,
                                    in this case pods. If it's null, this PodAffinityTerm
                                    matches with no Pods.
                                  properties:
                                    matchExpressions:
                                      description: matchExpressions is a list of label
                                        selector requirements. The requirements are
                                        ANDed.
                                      items:
                                        description: A label selector requirement
                                          is a selector that contains values, a key,
                                          and an operator that relates the key and
                                          values.
                                        properties:
                                          key:
                                            description: key is the label key that
                                              the selector applies to.
                                            type: string
                                          operator:
                                            description: operator represents a key's
                                              relationship to a set of values. Valid
                                              operators are In, NotIn, Exists and
                                              DoesNotExist.
                                            type: string
                                          values:
                                            description: values is an array of string
                                              values. If the operator is In or NotIn,
                                              the values array must be non-empty.
                                              If the operator is Exists or DoesNotExist,
                                              the values array must be empty. This
                                              array is replaced during a strategic
                                              merge patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                    matchLabels:
                                      additionalProperties:
                                        type: string
                                      description: matchLabels is a map of {key,value}
                                        pairs. A single {key,value} in the matchLabels
                                        map is equivalent to an element of matchExpressions,
                                        whose key field is "key", the operator is
                                        "In", and the values array contains only "value".
                                        The requirements are ANDed.
                                      type: object
                                  type: object
                                  x-kubernetes-map-type: atomic
                                matchLabelKeys:
                                  description: MatchLabelKeys is a set of pod label
                                    keys to select which pods will be taken into consideration.
                                    The keys are used to lookup values from the incoming
                                    pod labels, those key-value labels are merged
                                    with `LabelSelector` as `key in (value)` to select
                                    the group of existing pods which pods will be
                                    taken into consideration for the incoming pod's
                                    pod (anti) affinity. Keys that don't exist in
                                    the incoming pod labels will be ignored. The default
                                    value is empty. The same key is forbidden to exist
                                    in both MatchLabelKeys and LabelSelector. Also,
                                    MatchLabelKeys cannot be set when LabelSelector
                                    isn't set. This is an alpha field and requires
                                    enabling MatchLabelKeysInPodAffinity feature gate.
                                  items:
                                    type: string
                                  type: array
                                  x-kubernetes-list-type: atomic
                                mismatchLabelKeys:
                                  description: MismatchLabelKeys is a set of pod label
                                    keys to select which pods will be taken into consideration.
                                    The keys are used to lookup values from the incoming
                                    pod labels, those key-value labels are merged
                                    with `LabelSelector` as `key notin (value)` to
                                    select the group of existing pods which pods will
                                    be taken into consideration for the incoming pod's
                                    pod (anti) affinity. Keys that don't exist in
                                    the incoming pod labels will be ignored. The default
                                    value is empty. The same key is forbidden to exist
                                    in both MismatchLabelKeys and LabelSelector. Also,
                                    MismatchLabelKeys cannot be set when LabelSelector
                                    isn't set. This is an alpha field and requires
                                    enabling MatchLabelKeysInPodAffinity feature gate.
                                  items:
                                    type: string
                                  type: array
                                  x-kubernetes-list-type: atomic
                                namespaceSelector:
                                  description: A label query over the set of namespaces
                                    that the term applies to. The term is applied
                                    to the union of the namespaces selected by this
                                    field and the ones listed in the namespaces field.
                                    null selector and null or empty namespaces list
                                    means "this pod's namespace". An empty selector
                                    ({}) matches all namespaces.
                                  properties:
                                    matchExpressions:
                                      description: matchExpressions is a list of label
                                        selector requirements. The requirements are
                                        ANDed.
                                      items:
                                        description: A label selector requirement
                                          is a selector that contains values, a key,
                                          and an operator that relates the key and
                                          values.
                                        properties:
                                          key:
                                            description: key is the label key that
                                              the selector applies to.
                                            type: string
                                          operator:
                                            description: operator represents a key's
                                              relationship to a set of values. Valid
                                              operators are In, NotIn, Exists and
                                              DoesNotExist.
                                            type: string
                                          values:
                                            description: values is an array of string
                                              values. If the operator is In or NotIn,
                                              the values array must be non-empty.
                                              If the operator is Exists or DoesNotExist,
                                              the values array must be empty. This
                                              array is replaced during a strategic
                                              merge patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                    matchLabels:
                                      additionalProperties:
                                        type: string
                                      description: matchLabels is a map of {key,value}
                                        pairs. A single {key,value} in the matchLabels
                                        map is equivalent to an element of matchExpressions,
                                        whose key field is "key", the operator is
                                        "In", and the values array contains only "value".
                                        The requirements are ANDed.
                                      type: object
                                  type: object
                                  x-kubernetes-map-type: atomic
                                namespaces:
                                  description: namespaces specifies a static list
                                    of namespace names that the term applies to. The
                                    term is applied to the union of the namespaces
                                    listed in this field and the ones selected by
                                    namespaceSelector. null or empty namespaces list
                                    and null namespaceSelector means "this pod's namespace".
                                  items:
                                    type: string
                                  type: array
                                topologyKey:
                                  description: This pod should be co-located (affinity)
                                    or not co-located (anti-affinity) with the pods
                                    matching the labelSelector in the specified namespaces,
                                    where co-located is defined as running on a node
                                    whose value of the label with key topologyKey
                                    matches that of any node on which any of the selected
                                    pods is running. Empty topologyKey is not allowed.
                                  type: string
                              required:
                              - topologyKey
                              type: object
                            type: array
                        type: object
                      enablePodAntiAffinity:
                        description: Activates anti-affinity for the pods. The operator
                          will define pods anti-affinity unless this field is explicitly
                          set to false
                        type: boolean
                      nodeAffinity:
                        description: 'NodeAffinity describes node affinity scheduling
                          rules for the pod. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity'
                        properties:
                          preferredDuringSchedulingIgnoredDuringExecution:
                            description: The scheduler will prefer to schedule pods
                              to nodes that satisfy the affinity expressions specified
                              by this field, but it may choose a node that violates
                              one or more of the expressions. The node that is most
                              preferred is the one with the greatest sum of weights,
                              i.e. for each node that meets all of the scheduling
                              requirements (resource request, requiredDuringScheduling
                              affinity expressions, etc.), compute a sum by iterating
                              through the elements of this field and adding "weight"
                              to the sum if the node matches the corresponding matchExpressions;
                              the node(s) with the highest sum are the most preferred.
                            items:
                              description: An empty preferred scheduling term matches
                                all objects with implicit weight 0 (i.e. it's a no-op).
                                A null preferred scheduling term matches no objects
                                (i.e. is also a no-op).
                              properties:
                                preference:
                                  description: A node selector term, associated with
                                    the corresponding weight.
                                  properties:
                                    matchExpressions:
                                      description: A list of node selector requirements
                                        by node's labels.
                                      items:
                                        description: A node selector requirement is
                                          a selector that contains values, a key,
                                          and an operator that relates the key and
                                          values.
                                        properties:
                                          key:
                                            description: The label key that the selector
                                              applies to.
                                            type: string
                                          operator:
                                            description: Represents a key's relationship
                                              to a set of values. Valid operators
                                              are In, NotIn, Exists, DoesNotExist.
                                              Gt, and Lt.
                                            type: string
                                          values:
                                            description: An array of string values.
                                              If the operator is In or NotIn, the
                                              values array must be non-empty. If the
                                              operator is Exists or DoesNotExist,
                                              the values array must be empty. If the
                                              operator is Gt or Lt, the values array
                                              must have a single element, which will
                                              be interpreted as an integer. This array
                                              is replaced during a strategic merge
                                              patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                    matchFields:
                                      description: A list of node selector requirements
                                        by node's fields.
                                      items:
                                        description: A node selector requirement is
                                          a selector that contains values, a key,
                                          and an operator that relates the key and
                                          values.
                                        properties:
                                          key:
                                            description: The label key that the selector
                                              applies to.
                                            type: string
                                          operator:
                                            description: Represents a key's relationship
                                              to a set of values. Valid operators
                                              are In, NotIn, Exists, DoesNotExist.
                                              Gt, and Lt.
                                            type: string
                                          values:
                                            description: An array of string values.
                                              If the operator is In or NotIn, the
                                              values array must be non-empty. If the
                                              operator is Exists or DoesNotExist,
                                              the values array must be empty. If the
                                              operator is Gt or Lt, the values array
                                              must have a single element, which will
                                              be interpreted as an integer. This array
                                              is replaced during a strategic merge
                                              patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                  type: object
                                  x-kubernetes-map-type: atomic
                                weight:
                                  description: Weight associated with matching the
                                    corresponding nodeSelectorTerm, in the range 1-100.
                                  format: int32
                                  type: integer
                              required:
                              - preference
                              - weight
                              type: object
                            type: array
                          requiredDuringSchedulingIgnoredDuringExecution:
                            description: If the affinity requirements specified by
                              this field are not met at scheduling time, the pod will
                              not be scheduled onto the node. If the affinity requirements
                              specified by this field cease to be met at some point
                              during pod execution (e.g. due to an update), the system
                              may or may not try to eventually evict the pod from
                              its node.
                            properties:
                              nodeSelectorTerms:
                                description: Required. A list of node selector terms.
                                  The terms are ORed.
                                items:
                                  description: A null or empty node selector term
                                    matches no objects. The requirements of them are
                                    ANDed. The TopologySelectorTerm type implements
                                    a subset of the NodeSelectorTerm.
                                  properties:
                                    matchExpressions:
                                      description: A list of node selector requirements
                                        by node's labels.
                                      items:
                                        description: A node selector requirement is
                                          a selector that contains values, a key,
                                          and an operator that relates the key and
                                          values.
                                        properties:
                                          key:
                                            description: The label key that the selector
                                              applies to.
                                            type: string
                                          operator:
                                            description: Represents a key's relationship
                                              to a set of values. Valid operators
                                              are In, NotIn, Exists, DoesNotExist.
                                              Gt, and Lt.
                                            type: string
                                          values:
                                            description: An array of string values.
                                              If the operator is In or NotIn, the
                                              values array must be non-empty. If the
                                              operator is Exists or DoesNotExist,
                                              the values array must be empty. If the
                                              operator is Gt or Lt, the values array
                                              must have a single element, which will
                                              be interpreted as an integer. This array
                                              is replaced during a strategic merge
                                              patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                    matchFields:
                                      description: A list of node selector requirements
                                        by node's fields.
                                      items:
                                        description: A node selector requirement is
                                          a selector that contains values, a key,
                                          and an operator that relates the key and
                                          values.
                                        properties:
                                          key:
                                            description: The label key that the selector
                                              applies to.
                                            type: string
                                          operator:
                                            description: Represents a key's relationship
                                              to a set of values. Valid operators
                                              are In, NotIn, Exists, DoesNotExist.
                                              Gt, and Lt.
                                            type: string
                                          values:
                                            description: An array of string values.
                                              If the operator is In or NotIn, the
                                              values array must be non-empty. If the
                                              operator is Exists or DoesNotExist,
                                              the values array must be empty. If the
                                              operator is Gt or Lt, the values array
                                              must have a single element, which will
                                              be interpreted as an integer. This array
                                              is replaced during a strategic merge
                                              patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                  type: object
                                  x-kubernetes-map-type: atomic
                                type: array
                            required:
                            - nodeSelectorTerms
                            type: object
                            x-kubernetes-map-type: atomic
                        type: object
                      nodeSelector:
                        additionalProperties:
                          type: string
                        description: 'NodeSelector is map of key-value pairs used
                          to define the nodes on which the pods can run. More info:
                          https://kubernetes.io/docs/concepts/configuration/assign-pod-node/'
                        type: object
                      podAntiAffinityType:
                        description: 'PodAntiAffinityType allows the user to decide
                          whether pod anti-affinity between cluster instance has to
                          be considered a strong requirement during scheduling or
                          not. Allowed values are: "preferred" (default if empty)
                          or "required". Setting it to "required", could lead to instances
                          remaining pending until new kubernetes nodes are added if
                          all the existing nodes don''t match the required pod anti-affinity
                          rule. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity'
                        type: string
                      tolerations:
                        description: 'Tolerations is a list of Tolerations that should
                          be set for all the pods, in order to allow them to run on
                          tainted nodes. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/'
                        items:
                          description: The pod this Toleration is attached to tolerates
                            any taint that matches the triple <key,value,effect> using
                            the matching operator <operator>.
                          properties:
                            effect:
                              description: Effect indicates the taint effect to match.
                                Empty means match all taint effects. When specified,
                                allowed values are NoSchedule, PreferNoSchedule and
                                NoExecute.
                              type: string
                            key:
                              description: Key is the taint key that the toleration
                                applies to. Empty means match all taint keys. If the
                                key is empty, operator must be Exists; this combination
                                means to match all values and all keys.
                              type: string
                            operator:
                              description: Operator represents a key's relationship
                                to the value. Valid operators are Exists and Equal.
                                Defaults to Equal. Exists is equivalent to wildcard
                                for value, so that a pod can tolerate all taints of
                                a particular category.
                              type: string
                            tolerationSeconds:
                              description: TolerationSeconds represents the period
                                of time the toleration (which must be of effect NoExecute,
                                otherwise this field is ignored) tolerates the taint.
                                By default, it is not set, which means tolerate the
                                taint forever (do not evict). Zero and negative values
                                will be treated as 0 (evict immediately) by the system.
                              format: int64
                              type: integer
                            value:
                              description: Value is the taint value the toleration
                                matches to. If the operator is Exists, the value should
                                be empty, otherwise just a regular string.
                              type: string
                          type: object
                        type: array
                      topologyKey:
                        description: TopologyKey to use for anti-affinity configuration.
                          See k8s documentation for more info on that
                        type: string
                    type: object
                  clusterMaxStartDelay:
                    default: 300
                    description: The time in seconds that is allowed for a PostgreSQL
                      instance to successfully start up (default 300)
                    format: int32
                    type: integer
                  enableSuperuserAccess:
                    default: true
                    description: When this option is enabled, the CNP operator will
                      create or use the secret defined in the SuperuserSecret to allow
                      superuser (postgres) access to the database. Disabled by default.
                    type: boolean
                  logLevel:
                    default: info
                    description: 'The instances'' log level, one of the following
                      values: error, warning, info (default), debug, trace'
                    enum:
                    - error
                    - warning
                    - info
                    - debug
                    - trace
                    type: string
                  managed:
                    description: The configuration that is used by the portions of
                      PostgreSQL that are managed by the CNP instance manager
                    properties:
                      roles:
                        description: Database roles managed by the `Cluster`
                        items:
                          description: "RoleConfiguration is the representation, in
                            Kubernetes, of a PostgreSQL role with the additional field
                            Ensure specifying whether to ensure the presence or absence
                            of the role in the database \n The defaults of the CREATE
                            ROLE command are applied Reference: https://www.postgresql.org/docs/current/sql-createrole.html"
                          properties:
                            bypassrls:
                              description: Whether a role bypasses every row-level
                                security (RLS) policy. Default is `false`.
                              type: boolean
                            comment:
                              description: Description of the role
                              type: string
                            connectionLimit:
                              default: -1
                              description: If the role can log in, this specifies
                                how many concurrent connections the role can make.
                                `-1` (the default) means no limit.
                              format: int64
                              type: integer
                            createdb:
                              description: When set to `true`, the role being defined
                                will be allowed to create new databases. Specifying
                                `false` (default) will deny a role the ability to
                                create databases.
                              type: boolean
                            createrole:
                              description: Whether the role will be permitted to create,
                                alter, drop, comment on, change the security label
                                for, and grant or revoke membership in other roles.
                                Default is `false`.
                              type: boolean
                            disablePassword:
                              description: DisablePassword indicates that a role's
                                password should be set to NULL in Postgres
                              type: boolean
                            ensure:
                              default: present
                              description: Ensure the role is `present` or `absent`
                                - defaults to "present"
                              enum:
                              - present
                              - absent
                              type: string
                            inRoles:
                              description: List of one or more existing roles to which
                                this role will be immediately added as a new member.
                                Default empty.
                              items:
                                type: string
                              type: array
                            inherit:
                              default: true
                              description: Whether a role "inherits" the privileges
                                of roles it is a member of. Defaults is `true`.
                              type: boolean
                            login:
                              description: Whether the role is allowed to log in.
                                A role having the `login` attribute can be thought
                                of as a user. Roles without this attribute are useful
                                for managing database privileges, but are not users
                                in the usual sense of the word. Default is `false`.
                              type: boolean
                            name:
                              description: Name of the role
                              type: string
                            passwordSecret:
                              description: Secret containing the password of the role
                                (if present) If null, the password will be ignored
                                unless DisablePassword is set
                              properties:
                                name:
                                  description: Name of the referent.
                                  type: string
                              required:
                              - name
                              type: object
                            replication:
                              description: Whether a role is a replication role. A
                                role must have this attribute (or be a superuser)
                                in order to be able to connect to the server in replication
                                mode (physical or logical replication) and in order
                                to be able to create or drop replication slots. A
                                role having the `replication` attribute is a very
                                highly privileged role, and should only be used on
                                roles actually used for replication. Default is `false`.
                              type: boolean
                            superuser:
                              description: Whether the role is a `superuser` who can
                                override all access restrictions within the database
                                - superuser status is dangerous and should be used
                                only when really needed. You must yourself be a superuser
                                to create a new superuser. Defaults is `false`.
                              type: boolean
                            validUntil:
                              description: Date and time after which the role's password
                                is no longer valid. When omitted, the password will
                                never expire (default).
                              format: date-time
                              type: string
                          required:
                          - name
                          type: object
                        type: array
                    type: object
                  metadata:
                    description: Metadata applied exclusively to the generated Cluster
                      resources. Useful for applying AppArmor profiles.
                    properties:
                      annotations:
                        additionalProperties:
                          type: string
                        type: object
                      labels:
                        additionalProperties:
                          type: string
                        type: object
                    type: object
                  monitoring:
                    description: The configuration of the monitoring infrastructure
                      of this cluster
                    properties:
                      customQueriesConfigMap:
                        description: The list of config maps containing the custom
                          queries
                        items:
                          description: ConfigMapKeySelector contains enough information
                            to let you locate the key of a ConfigMap
                          properties:
                            key:
                              description: The key to select
                              type: string
                            name:
                              description: Name of the referent.
                              type: string
                          required:
                          - key
                          - name
                          type: object
                        type: array
                      customQueriesSecret:
                        description: The list of secrets containing the custom queries
                        items:
                          description: SecretKeySelector contains enough information
                            to let you locate the key of a Secret
                          properties:
                            key:
                              description: The key to select
                              type: string
                            name:
                              description: Name of the referent.
                              type: string
                          required:
                          - key
                          - name
                          type: object
                        type: array
                      disableDefaultQueries:
                        default: false
                        description: 'Whether the default queries should be injected.
                          Set it to `true` if you don''t want to inject default queries
                          into the cluster. Default: false.'
                        type: boolean
                      enablePodMonitor:
                        default: false
                        description: Enable or disable the `PodMonitor`
                        type: boolean
                      podMonitorMetricRelabelings:
                        description: The list of metric relabelings for the `PodMonitor`.
                          Applied to samples before ingestion.
                        items:
                          description: "RelabelConfig allows dynamic rewriting of
                            the label set for targets, alerts, scraped samples and
                            remote write samples. \n More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config"
                          properties:
                            action:
                              default: replace
                              description: "Action to perform based on the regex matching.
                                \n `Uppercase` and `Lowercase` actions require Prometheus
                                >= v2.36.0. `DropEqual` and `KeepEqual` actions require
                                Prometheus >= v2.41.0. \n Default: \"Replace\""
                              enum:
                              - replace
                              - Replace
                              - keep
                              - Keep
                              - drop
                              - Drop
                              - hashmod
                              - HashMod
                              - labelmap
                              - LabelMap
                              - labeldrop
                              - LabelDrop
                              - labelkeep
                              - LabelKeep
                              - lowercase
                              - Lowercase
                              - uppercase
                              - Uppercase
                              - keepequal
                              - KeepEqual
                              - dropequal
                              - DropEqual
                              type: string
                            modulus:
                              description: "Modulus to take of the hash of the source
                                label values. \n Only applicable when the action is
                                `HashMod`."
                              format: int64
                              type: integer
                            regex:
                              description: Regular expression against which the extracted
                                value is matched.
                              type: string
                            replacement:
                              description: "Replacement value against which a Replace
                                action is performed if the regular expression matches.
                                \n Regex capture groups are available."
                              type: string
                            separator:
                              description: Separator is the string between concatenated
                                SourceLabels.
                              type: string
                            sourceLabels:
                              description: The source labels select values from existing
                                labels. Their content is concatenated using the configured
                                Separator and matched against the configured regular
                                expression.
                              items:
                                description: LabelName is a valid Prometheus label
                                  name which may only contain ASCII letters, numbers,
                                  as well as underscores.
                                pattern: ^[a-zA-Z_][a-zA-Z0-9_]*$
                                type: string
                              type: array
                            targetLabel:
                              description: "Label to which the resulting string is
                                written in a replacement. \n It is mandatory for `Replace`,
                                `HashMod`, `Lowercase`, `Uppercase`, `KeepEqual` and
                                `DropEqual` actions. \n Regex capture groups are available."
                              type: string
                          type: object
                        type: array
                      podMonitorRelabelings:
                        description: The list of relabelings for the `PodMonitor`.
                          Applied to samples before scraping.
                        items:
                          description: "RelabelConfig allows dynamic rewriting of
                            the label set for targets, alerts, scraped samples and
                            remote write samples. \n More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config"
                          properties:
                            action:
                              default: replace
                              description: "Action to perform based on the regex matching.
                                \n `Uppercase` and `Lowercase` actions require Prometheus
                                >= v2.36.0. `DropEqual` and `KeepEqual` actions require
                                Prometheus >= v2.41.0. \n Default: \"Replace\""
                              enum:
                              - replace
                              - Replace
                              - keep
                              - Keep
                              - drop
                              - Drop
                              - hashmod
                              - HashMod
                              - labelmap
                              - LabelMap
                              - labeldrop
                              - LabelDrop
                              - labelkeep
                              - LabelKeep
                              - lowercase
                              - Lowercase
                              - uppercase
                              - Uppercase
                              - keepequal
                              - KeepEqual
                              - dropequal
                              - DropEqual
                              type: string
                            modulus:
                              description: "Modulus to take of the hash of the source
                                label values. \n Only applicable when the action is
                                `HashMod`."
                              format: int64
                              type: integer
                            regex:
                              description: Regular expression against which the extracted
                                value is matched.
                              type: string
                            replacement:
                              description: "Replacement value against which a Replace
                                action is performed if the regular expression matches.
                                \n Regex capture groups are available."
                              type: string
                            separator:
                              description: Separator is the string between concatenated
                                SourceLabels.
                              type: string
                            sourceLabels:
                              description: The source labels select values from existing
                                labels. Their content is concatenated using the configured
                                Separator and matched against the configured regular
                                expression.
                              items:
                                description: LabelName is a valid Prometheus label
                                  name which may only contain ASCII letters, numbers,
                                  as well as underscores.
                                pattern: ^[a-zA-Z_][a-zA-Z0-9_]*$
                                type: string
                              type: array
                            targetLabel:
                              description: "Label to which the resulting string is
                                written in a replacement. \n It is mandatory for `Replace`,
                                `HashMod`, `Lowercase`, `Uppercase`, `KeepEqual` and
                                `DropEqual` actions. \n Regex capture groups are available."
                              type: string
                          type: object
                        type: array
                    type: object
                  otel:
                    description: OpenTelemetry Configuration
                    properties:
                      metricsURL:
                        description: The OpenTelemetry HTTP endpoint URL to accept
                          metrics data
                        type: string
                      tls:
                        description: TLSConfiguration provides the TLS certificate
                          configuration when MetricsURL and TraceURL are using HTTPS
                        properties:
                          caBundleSecretRef:
                            description: CABundleSecretRef is a reference to a secret
                              field containing the CA bundle to verify the openTelemetry
                              server certificate
                            properties:
                              key:
                                description: The key to select
                                type: string
                              name:
                                description: Name of the referent.
                                type: string
                            required:
                            - key
                            - name
                            type: object
                          clientCertSecret:
                            description: ClientCertSecret is the name of the secret
                              containing the client certificate used to connect to
                              openTelemetry. It must contain both the standard "tls.crt"
                              and "tls.key" files, encoded in PEM format.
                            properties:
                              name:
                                description: Name of the referent.
                                type: string
                            required:
                            - name
                            type: object
                        type: object
                      traceEnable:
                        description: Whether to push trace data to OpenTelemetry traceUrl
                        type: boolean
                      traceURL:
                        description: The OpenTelemetry HTTP endpoint URL to accept
                          trace data
                        type: string
                    required:
                    - traceEnable
                    type: object
                  postInitSQL:
                    description: List of SQL queries to be executed as a superuser
                      immediately after a node has been created - to be used with
                      extreme care (by default empty)
                    items:
                      type: string
                    type: array
                  postInitTemplateSQL:
                    description: List of SQL queries to be executed as a superuser
                      in the `template1` after a node has been created - to be used
                      with extreme care (by default empty)
                    items:
                      type: string
                    type: array
                  postgresql:
                    description: Configuration of the PostgreSQL server
                    properties:
                      enableAlterSystem:
                        description: If this parameter is true, the user will be able
                          to invoke `ALTER SYSTEM` on this EDB Postgres for Kubernetes
                          Cluster. This should only be used for debugging and troubleshooting.
                          Defaults to false.
                        type: boolean
                      epas:
                        description: EDB Postgres Advanced Server specific configurations
                        properties:
                          audit:
                            description: If true enables edb_audit logging
                            type: boolean
                          tde:
                            description: TDE configuration
                            properties:
                              enabled:
                                description: True if we want to have TDE enabled
                                type: boolean
                              passphraseCommand:
                                description: PassphraseCommand is the command executed
                                  to get the passphrase that will be passed to the
                                  OpenSSL command to encrypt and decrypt
                                properties:
                                  key:
                                    description: The key of the secret to select from.  Must
                                      be a valid secret key.
                                    type: string
                                  name:
                                    description: 'Name of the referent. More info:
                                      https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                      TODO: Add other useful fields. apiVersion, kind,
                                      uid?'
                                    type: string
                                  optional:
                                    description: Specify whether the Secret or its
                                      key must be defined
                                    type: boolean
                                required:
                                - key
                                type: object
                                x-kubernetes-map-type: atomic
                              secretKeyRef:
                                description: Reference to the secret that contains
                                  the encryption key
                                properties:
                                  key:
                                    description: The key of the secret to select from.  Must
                                      be a valid secret key.
                                    type: string
                                  name:
                                    description: 'Name of the referent. More info:
                                      https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                      TODO: Add other useful fields. apiVersion, kind,
                                      uid?'
                                    type: string
                                  optional:
                                    description: Specify whether the Secret or its
                                      key must be defined
                                    type: boolean
                                required:
                                - key
                                type: object
                                x-kubernetes-map-type: atomic
                              unwrapCommand:
                                description: UnwrapCommand is the decryption command
                                  provided by the user
                                properties:
                                  key:
                                    description: The key of the secret to select from.  Must
                                      be a valid secret key.
                                    type: string
                                  name:
                                    description: 'Name of the referent. More info:
                                      https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                      TODO: Add other useful fields. apiVersion, kind,
                                      uid?'
                                    type: string
                                  optional:
                                    description: Specify whether the Secret or its
                                      key must be defined
                                    type: boolean
                                required:
                                - key
                                type: object
                                x-kubernetes-map-type: atomic
                              wrapCommand:
                                description: WrapCommand is the encrypt command provided
                                  by the user
                                properties:
                                  key:
                                    description: The key of the secret to select from.  Must
                                      be a valid secret key.
                                    type: string
                                  name:
                                    description: 'Name of the referent. More info:
                                      https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                      TODO: Add other useful fields. apiVersion, kind,
                                      uid?'
                                    type: string
                                  optional:
                                    description: Specify whether the Secret or its
                                      key must be defined
                                    type: boolean
                                required:
                                - key
                                type: object
                                x-kubernetes-map-type: atomic
                            type: object
                        type: object
                      ldap:
                        description: Options to specify LDAP configuration
                        properties:
                          bindAsAuth:
                            description: Bind as authentication configuration
                            properties:
                              prefix:
                                description: Prefix for the bind authentication option
                                type: string
                              suffix:
                                description: Suffix for the bind authentication option
                                type: string
                            type: object
                          bindSearchAuth:
                            description: Bind+Search authentication configuration
                            properties:
                              baseDN:
                                description: Root DN to begin the user search
                                type: string
                              bindDN:
                                description: DN of the user to bind to the directory
                                type: string
                              bindPassword:
                                description: Secret with the password for the user
                                  to bind to the directory
                                properties:
                                  key:
                                    description: The key of the secret to select from.  Must
                                      be a valid secret key.
                                    type: string
                                  name:
                                    description: 'Name of the referent. More info:
                                      https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                      TODO: Add other useful fields. apiVersion, kind,
                                      uid?'
                                    type: string
                                  optional:
                                    description: Specify whether the Secret or its
                                      key must be defined
                                    type: boolean
                                required:
                                - key
                                type: object
                                x-kubernetes-map-type: atomic
                              searchAttribute:
                                description: Attribute to match against the username
                                type: string
                              searchFilter:
                                description: Search filter to use when doing the search+bind
                                  authentication
                                type: string
                            type: object
                          port:
                            description: LDAP server port
                            type: integer
                          scheme:
                            description: LDAP schema to be used, possible options
                              are `ldap` and `ldaps`
                            enum:
                            - ldap
                            - ldaps
                            type: string
                          server:
                            description: LDAP hostname or IP address
                            type: string
                          tls:
                            description: Set to 'true' to enable LDAP over TLS. 'false'
                              is default
                            type: boolean
                        type: object
                      parameters:
                        additionalProperties:
                          type: string
                        description: PostgreSQL configuration options (postgresql.conf)
                        type: object
                      pg_hba:
                        description: PostgreSQL Host Based Authentication rules (lines
                          to be appended to the pg_hba.conf file)
                        items:
                          type: string
                        type: array
                      pg_ident:
                        description: PostgreSQL User Name Maps rules (lines to be
                          appended to the pg_ident.conf file)
                        items:
                          type: string
                        type: array
                      promotionTimeout:
                        description: Specifies the maximum number of seconds to wait
                          when promoting an instance to primary. Default value is
                          40000000, greater than one year in seconds, big enough to
                          simulate an infinite timeout
                        format: int32
                        type: integer
                      shared_preload_libraries:
                        description: Lists of shared preload libraries to add to the
                          default ones
                        items:
                          type: string
                        type: array
                      syncReplicaElectionConstraint:
                        description: Requirements to be met by sync replicas. This
                          will affect how the "synchronous_standby_names" parameter
                          will be set up.
                        properties:
                          enabled:
                            description: This flag enables the constraints for sync
                              replicas
                            type: boolean
                          nodeLabelsAntiAffinity:
                            description: A list of node labels values to extract and
                              compare to evaluate if the pods reside in the same topology
                              or not
                            items:
                              type: string
                            type: array
                        required:
                        - enabled
                        type: object
                    type: object
                  resources:
                    description: Resources requirements of every generated Pod. Please
                      refer to https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                      for more information.
                    properties:
                      claims:
                        description: "Claims lists the names of resources, defined
                          in spec.resourceClaims, that are used by this container.
                          \n This is an alpha field and requires enabling the DynamicResourceAllocation
                          feature gate. \n This field is immutable. It can only be
                          set for containers."
                        items:
                          description: ResourceClaim references one entry in PodSpec.ResourceClaims.
                          properties:
                            name:
                              description: Name must match the name of one entry in
                                pod.spec.resourceClaims of the Pod where this field
                                is used. It makes that resource available inside a
                                container.
                              type: string
                          required:
                          - name
                          type: object
                        type: array
                        x-kubernetes-list-map-keys:
                        - name
                        x-kubernetes-list-type: map
                      limits:
                        additionalProperties:
                          anyOf:
                          - type: integer
                          - type: string
                          pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                          x-kubernetes-int-or-string: true
                        description: 'Limits describes the maximum amount of compute
                          resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                        type: object
                      requests:
                        additionalProperties:
                          anyOf:
                          - type: integer
                          - type: string
                          pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                          x-kubernetes-int-or-string: true
                        description: 'Requests describes the minimum amount of compute
                          resources required. If Requests is omitted for a container,
                          it defaults to Limits if that is explicitly specified, otherwise
                          to an implementation-defined value. Requests cannot exceed
                          Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                        type: object
                    type: object
                  seccompProfile:
                    description: 'The SeccompProfile applied to every Pod and Container.
                      Defaults to: `RuntimeDefault`'
                    properties:
                      localhostProfile:
                        description: localhostProfile indicates a profile defined
                          in a file on the node should be used. The profile must be
                          preconfigured on the node to work. Must be a descending
                          path, relative to the kubelet's configured seccomp profile
                          location. Must be set if type is "Localhost". Must NOT be
                          set for any other type.
                        type: string
                      type:
                        description: "type indicates which kind of seccomp profile
                          will be applied. Valid options are: \n Localhost - a profile
                          defined in a file on the node should be used. RuntimeDefault
                          - the container runtime default profile should be used.
                          Unconfined - no profile should be applied."
                        type: string
                    required:
                    - type
                    type: object
                  serviceAccountTemplate:
                    description: The service account template to be passed to CNP
                    properties:
                      metadata:
                        description: Metadata are the metadata to be used for the
                          generated service account
                        properties:
                          annotations:
                            additionalProperties:
                              type: string
                            description: 'Annotations is an unstructured key value
                              map stored with a resource that may be set by external
                              tools to store and retrieve arbitrary metadata. They
                              are not queryable and should be preserved when modifying
                              objects. More info: http://kubernetes.io/docs/user-guide/annotations'
                            type: object
                          labels:
                            additionalProperties:
                              type: string
                            description: 'Map of string keys and values that can be
                              used to organize and categorize (scope and select) objects.
                              May match selectors of replication controllers and services.
                              More info: http://kubernetes.io/docs/user-guide/labels'
                            type: object
                        type: object
                    required:
                    - metadata
                    type: object
                  smartShutdownTimeout:
                    default: 15
                    description: 'The time in seconds that controls the window of
                      time reserved for the smart shutdown of Postgres to complete.
                      Make sure you reserve enough time for the operator to request
                      a fast shutdown of Postgres (that is: `stopDelay` - `smartShutdownTimeout`).'
                    format: int32
                    type: integer
                  startDelay:
                    default: 3600
                    description: The time in seconds that is allowed for a PostgreSQL
                      instance to successfully start up (default 3600)
                    format: int32
                    type: integer
                  stopDelay:
                    default: 180
                    description: The time in seconds that is allowed for a PostgreSQL
                      instance node to gracefully shutdown (default 180)
                    format: int32
                    type: integer
                  storage:
                    description: Configuration of the storage of the instances
                    properties:
                      pvcTemplate:
                        description: Template to be used to generate the Persistent
                          Volume Claim
                        properties:
                          accessModes:
                            description: 'accessModes contains the desired access
                              modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1'
                            items:
                              type: string
                            type: array
                          dataSource:
                            description: 'dataSource field can be used to specify
                              either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
                              * An existing PVC (PersistentVolumeClaim) If the provisioner
                              or an external controller can support the specified
                              data source, it will create a new volume based on the
                              contents of the specified data source. When the AnyVolumeDataSource
                              feature gate is enabled, dataSource contents will be
                              copied to dataSourceRef, and dataSourceRef contents
                              will be copied to dataSource when dataSourceRef.namespace
                              is not specified. If the namespace is specified, then
                              dataSourceRef will not be copied to dataSource.'
                            properties:
                              apiGroup:
                                description: APIGroup is the group for the resource
                                  being referenced. If APIGroup is not specified,
                                  the specified Kind must be in the core API group.
                                  For any other third-party types, APIGroup is required.
                                type: string
                              kind:
                                description: Kind is the type of resource being referenced
                                type: string
                              name:
                                description: Name is the name of resource being referenced
                                type: string
                            required:
                            - kind
                            - name
                            type: object
                            x-kubernetes-map-type: atomic
                          dataSourceRef:
                            description: 'dataSourceRef specifies the object from
                              which to populate the volume with data, if a non-empty
                              volume is desired. This may be any object from a non-empty
                              API group (non core object) or a PersistentVolumeClaim
                              object. When this field is specified, volume binding
                              will only succeed if the type of the specified object
                              matches some installed volume populator or dynamic provisioner.
                              This field will replace the functionality of the dataSource
                              field and as such if both fields are non-empty, they
                              must have the same value. For backwards compatibility,
                              when namespace isn''t specified in dataSourceRef, both
                              fields (dataSource and dataSourceRef) will be set to
                              the same value automatically if one of them is empty
                              and the other is non-empty. When namespace is specified
                              in dataSourceRef, dataSource isn''t set to the same
                              value and must be empty. There are three important differences
                              between dataSource and dataSourceRef: * While dataSource
                              only allows two specific types of objects, dataSourceRef
                              allows any non-core object, as well as PersistentVolumeClaim
                              objects. * While dataSource ignores disallowed values
                              (dropping them), dataSourceRef preserves all values,
                              and generates an error if a disallowed value is specified.
                              * While dataSource only allows local objects, dataSourceRef
                              allows objects in any namespaces. (Beta) Using this
                              field requires the AnyVolumeDataSource feature gate
                              to be enabled. (Alpha) Using the namespace field of
                              dataSourceRef requires the CrossNamespaceVolumeDataSource
                              feature gate to be enabled.'
                            properties:
                              apiGroup:
                                description: APIGroup is the group for the resource
                                  being referenced. If APIGroup is not specified,
                                  the specified Kind must be in the core API group.
                                  For any other third-party types, APIGroup is required.
                                type: string
                              kind:
                                description: Kind is the type of resource being referenced
                                type: string
                              name:
                                description: Name is the name of resource being referenced
                                type: string
                              namespace:
                                description: Namespace is the namespace of resource
                                  being referenced Note that when a namespace is specified,
                                  a gateway.networking.k8s.io/ReferenceGrant object
                                  is required in the referent namespace to allow that
                                  namespace's owner to accept the reference. See the
                                  ReferenceGrant documentation for details. (Alpha)
                                  This field requires the CrossNamespaceVolumeDataSource
                                  feature gate to be enabled.
                                type: string
                            required:
                            - kind
                            - name
                            type: object
                          resources:
                            description: 'resources represents the minimum resources
                              the volume should have. If RecoverVolumeExpansionFailure
                              feature is enabled users are allowed to specify resource
                              requirements that are lower than previous value but
                              must still be higher than capacity recorded in the status
                              field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources'
                            properties:
                              limits:
                                additionalProperties:
                                  anyOf:
                                  - type: integer
                                  - type: string
                                  pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                  x-kubernetes-int-or-string: true
                                description: 'Limits describes the maximum amount
                                  of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                                type: object
                              requests:
                                additionalProperties:
                                  anyOf:
                                  - type: integer
                                  - type: string
                                  pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                  x-kubernetes-int-or-string: true
                                description: 'Requests describes the minimum amount
                                  of compute resources required. If Requests is omitted
                                  for a container, it defaults to Limits if that is
                                  explicitly specified, otherwise to an implementation-defined
                                  value. Requests cannot exceed Limits. More info:
                                  https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                                type: object
                            type: object
                          selector:
                            description: selector is a label query over volumes to
                              consider for binding.
                            properties:
                              matchExpressions:
                                description: matchExpressions is a list of label selector
                                  requirements. The requirements are ANDed.
                                items:
                                  description: A label selector requirement is a selector
                                    that contains values, a key, and an operator that
                                    relates the key and values.
                                  properties:
                                    key:
                                      description: key is the label key that the selector
                                        applies to.
                                      type: string
                                    operator:
                                      description: operator represents a key's relationship
                                        to a set of values. Valid operators are In,
                                        NotIn, Exists and DoesNotExist.
                                      type: string
                                    values:
                                      description: values is an array of string values.
                                        If the operator is In or NotIn, the values
                                        array must be non-empty. If the operator is
                                        Exists or DoesNotExist, the values array must
                                        be empty. This array is replaced during a
                                        strategic merge patch.
                                      items:
                                        type: string
                                      type: array
                                  required:
                                  - key
                                  - operator
                                  type: object
                                type: array
                              matchLabels:
                                additionalProperties:
                                  type: string
                                description: matchLabels is a map of {key,value} pairs.
                                  A single {key,value} in the matchLabels map is equivalent
                                  to an element of matchExpressions, whose key field
                                  is "key", the operator is "In", and the values array
                                  contains only "value". The requirements are ANDed.
                                type: object
                            type: object
                            x-kubernetes-map-type: atomic
                          storageClassName:
                            description: 'storageClassName is the name of the StorageClass
                              required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1'
                            type: string
                          volumeAttributesClassName:
                            description: 'volumeAttributesClassName may be used to
                              set the VolumeAttributesClass used by this claim. If
                              specified, the CSI driver will create or update the
                              volume with the attributes defined in the corresponding
                              VolumeAttributesClass. This has a different purpose
                              than storageClassName, it can be changed after the claim
                              is created. An empty string value means that no VolumeAttributesClass
                              will be applied to the claim but it''s not allowed to
                              reset this field to empty string once it is set. If
                              unspecified and the PersistentVolumeClaim is unbound,
                              the default VolumeAttributesClass will be set by the
                              persistentvolume controller if it exists. If the resource
                              referred to by volumeAttributesClass does not exist,
                              this PersistentVolumeClaim will be set to a Pending
                              state, as reflected by the modifyVolumeStatus field,
                              until such as a resource exists. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#volumeattributesclass
                              (Alpha) Using this field requires the VolumeAttributesClass
                              feature gate to be enabled.'
                            type: string
                          volumeMode:
                            description: volumeMode defines what type of volume is
                              required by the claim. Value of Filesystem is implied
                              when not included in claim spec.
                            type: string
                          volumeName:
                            description: volumeName is the binding reference to the
                              PersistentVolume backing this claim.
                            type: string
                        type: object
                      resizeInUseVolumes:
                        default: true
                        description: Resize existent PVCs, defaults to true
                        type: boolean
                      size:
                        description: Size of the storage. Required if not already
                          specified in the PVC template. Changes to this field are
                          automatically reapplied to the created PVCs. Size cannot
                          be decreased.
                        type: string
                      storageClass:
                        description: StorageClass to use for PVCs. Applied after evaluating
                          the PVC template, if available. If not specified, the generated
                          PVCs will use the default storage class
                        type: string
                    type: object
                  superuserSecret:
                    description: The secret containing the superuser password. A new
                      secret will be created with a randomly generated password if
                      not defined. This field is only allowed in the CNP Instances
                      configuration. A Witness Node will always use the same SuperuserSecret
                      as the other instances.
                    properties:
                      name:
                        description: Name of the referent.
                        type: string
                    required:
                    - name
                    type: object
                  walStorage:
                    description: Configuration of the WAL storage for the instances
                    properties:
                      pvcTemplate:
                        description: Template to be used to generate the Persistent
                          Volume Claim
                        properties:
                          accessModes:
                            description: 'accessModes contains the desired access
                              modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1'
                            items:
                              type: string
                            type: array
                          dataSource:
                            description: 'dataSource field can be used to specify
                              either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
                              * An existing PVC (PersistentVolumeClaim) If the provisioner
                              or an external controller can support the specified
                              data source, it will create a new volume based on the
                              contents of the specified data source. When the AnyVolumeDataSource
                              feature gate is enabled, dataSource contents will be
                              copied to dataSourceRef, and dataSourceRef contents
                              will be copied to dataSource when dataSourceRef.namespace
                              is not specified. If the namespace is specified, then
                              dataSourceRef will not be copied to dataSource.'
                            properties:
                              apiGroup:
                                description: APIGroup is the group for the resource
                                  being referenced. If APIGroup is not specified,
                                  the specified Kind must be in the core API group.
                                  For any other third-party types, APIGroup is required.
                                type: string
                              kind:
                                description: Kind is the type of resource being referenced
                                type: string
                              name:
                                description: Name is the name of resource being referenced
                                type: string
                            required:
                            - kind
                            - name
                            type: object
                            x-kubernetes-map-type: atomic
                          dataSourceRef:
                            description: 'dataSourceRef specifies the object from
                              which to populate the volume with data, if a non-empty
                              volume is desired. This may be any object from a non-empty
                              API group (non core object) or a PersistentVolumeClaim
                              object. When this field is specified, volume binding
                              will only succeed if the type of the specified object
                              matches some installed volume populator or dynamic provisioner.
                              This field will replace the functionality of the dataSource
                              field and as such if both fields are non-empty, they
                              must have the same value. For backwards compatibility,
                              when namespace isn''t specified in dataSourceRef, both
                              fields (dataSource and dataSourceRef) will be set to
                              the same value automatically if one of them is empty
                              and the other is non-empty. When namespace is specified
                              in dataSourceRef, dataSource isn''t set to the same
                              value and must be empty. There are three important differences
                              between dataSource and dataSourceRef: * While dataSource
                              only allows two specific types of objects, dataSourceRef
                              allows any non-core object, as well as PersistentVolumeClaim
                              objects. * While dataSource ignores disallowed values
                              (dropping them), dataSourceRef preserves all values,
                              and generates an error if a disallowed value is specified.
                              * While dataSource only allows local objects, dataSourceRef
                              allows objects in any namespaces. (Beta) Using this
                              field requires the AnyVolumeDataSource feature gate
                              to be enabled. (Alpha) Using the namespace field of
                              dataSourceRef requires the CrossNamespaceVolumeDataSource
                              feature gate to be enabled.'
                            properties:
                              apiGroup:
                                description: APIGroup is the group for the resource
                                  being referenced. If APIGroup is not specified,
                                  the specified Kind must be in the core API group.
                                  For any other third-party types, APIGroup is required.
                                type: string
                              kind:
                                description: Kind is the type of resource being referenced
                                type: string
                              name:
                                description: Name is the name of resource being referenced
                                type: string
                              namespace:
                                description: Namespace is the namespace of resource
                                  being referenced Note that when a namespace is specified,
                                  a gateway.networking.k8s.io/ReferenceGrant object
                                  is required in the referent namespace to allow that
                                  namespace's owner to accept the reference. See the
                                  ReferenceGrant documentation for details. (Alpha)
                                  This field requires the CrossNamespaceVolumeDataSource
                                  feature gate to be enabled.
                                type: string
                            required:
                            - kind
                            - name
                            type: object
                          resources:
                            description: 'resources represents the minimum resources
                              the volume should have. If RecoverVolumeExpansionFailure
                              feature is enabled users are allowed to specify resource
                              requirements that are lower than previous value but
                              must still be higher than capacity recorded in the status
                              field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources'
                            properties:
                              limits:
                                additionalProperties:
                                  anyOf:
                                  - type: integer
                                  - type: string
                                  pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                  x-kubernetes-int-or-string: true
                                description: 'Limits describes the maximum amount
                                  of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                                type: object
                              requests:
                                additionalProperties:
                                  anyOf:
                                  - type: integer
                                  - type: string
                                  pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                  x-kubernetes-int-or-string: true
                                description: 'Requests describes the minimum amount
                                  of compute resources required. If Requests is omitted
                                  for a container, it defaults to Limits if that is
                                  explicitly specified, otherwise to an implementation-defined
                                  value. Requests cannot exceed Limits. More info:
                                  https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                                type: object
                            type: object
                          selector:
                            description: selector is a label query over volumes to
                              consider for binding.
                            properties:
                              matchExpressions:
                                description: matchExpressions is a list of label selector
                                  requirements. The requirements are ANDed.
                                items:
                                  description: A label selector requirement is a selector
                                    that contains values, a key, and an operator that
                                    relates the key and values.
                                  properties:
                                    key:
                                      description: key is the label key that the selector
                                        applies to.
                                      type: string
                                    operator:
                                      description: operator represents a key's relationship
                                        to a set of values. Valid operators are In,
                                        NotIn, Exists and DoesNotExist.
                                      type: string
                                    values:
                                      description: values is an array of string values.
                                        If the operator is In or NotIn, the values
                                        array must be non-empty. If the operator is
                                        Exists or DoesNotExist, the values array must
                                        be empty. This array is replaced during a
                                        strategic merge patch.
                                      items:
                                        type: string
                                      type: array
                                  required:
                                  - key
                                  - operator
                                  type: object
                                type: array
                              matchLabels:
                                additionalProperties:
                                  type: string
                                description: matchLabels is a map of {key,value} pairs.
                                  A single {key,value} in the matchLabels map is equivalent
                                  to an element of matchExpressions, whose key field
                                  is "key", the operator is "In", and the values array
                                  contains only "value". The requirements are ANDed.
                                type: object
                            type: object
                            x-kubernetes-map-type: atomic
                          storageClassName:
                            description: 'storageClassName is the name of the StorageClass
                              required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1'
                            type: string
                          volumeAttributesClassName:
                            description: 'volumeAttributesClassName may be used to
                              set the VolumeAttributesClass used by this claim. If
                              specified, the CSI driver will create or update the
                              volume with the attributes defined in the corresponding
                              VolumeAttributesClass. This has a different purpose
                              than storageClassName, it can be changed after the claim
                              is created. An empty string value means that no VolumeAttributesClass
                              will be applied to the claim but it''s not allowed to
                              reset this field to empty string once it is set. If
                              unspecified and the PersistentVolumeClaim is unbound,
                              the default VolumeAttributesClass will be set by the
                              persistentvolume controller if it exists. If the resource
                              referred to by volumeAttributesClass does not exist,
                              this PersistentVolumeClaim will be set to a Pending
                              state, as reflected by the modifyVolumeStatus field,
                              until such as a resource exists. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#volumeattributesclass
                              (Alpha) Using this field requires the VolumeAttributesClass
                              feature gate to be enabled.'
                            type: string
                          volumeMode:
                            description: volumeMode defines what type of volume is
                              required by the claim. Value of Filesystem is implied
                              when not included in claim spec.
                            type: string
                          volumeName:
                            description: volumeName is the binding reference to the
                              PersistentVolume backing this claim.
                            type: string
                        type: object
                      resizeInUseVolumes:
                        default: true
                        description: Resize existent PVCs, defaults to true
                        type: boolean
                      size:
                        description: Size of the storage. Required if not already
                          specified in the PVC template. Changes to this field are
                          automatically reapplied to the created PVCs. Size cannot
                          be decreased.
                        type: string
                      storageClass:
                        description: StorageClass to use for PVCs. Applied after evaluating
                          the PVC template, if available. If not specified, the generated
                          PVCs will use the default storage class
                        type: string
                    type: object
                required:
                - storage
                type: object
              connectivity:
                description: Configures the connectivity of the PGDGroup, like services
                  and certificates that will be used.
                properties:
                  dns:
                    description: Describes how the FQDN for the resources should be
                      generated
                    properties:
                      additional:
                        description: AdditionalDNSConfigurations adds more possible
                          FQDNs for the resources
                        items:
                          description: DNSConfiguration describes how the FQDN for
                            the resources should be generated
                          properties:
                            domain:
                              description: Contains the domain name of by all services
                                in the PGDGroup. It is responsibility of the user
                                to ensure that the value specified here matches with
                                the rendered nodeServiceTemplate and groupServiceTemplate
                              type: string
                            hostSuffix:
                              description: Contains an optional suffix to add to all
                                the service names in the PGDGroup. The meaning of
                                this setting it to allow the user to easily mark all
                                the services created in a location for routing purpose
                                (i.e., add a generic rule to CoreDNS to rewrite some
                                service suffixes as local)
                              type: string
                          type: object
                        type: array
                      domain:
                        description: Contains the domain name of by all services in
                          the PGDGroup. It is responsibility of the user to ensure
                          that the value specified here matches with the rendered
                          nodeServiceTemplate and groupServiceTemplate
                        type: string
                      hostSuffix:
                        description: Contains an optional suffix to add to all the
                          service names in the PGDGroup. The meaning of this setting
                          it to allow the user to easily mark all the services created
                          in a location for routing purpose (i.e., add a generic rule
                          to CoreDNS to rewrite some service suffixes as local)
                        type: string
                    type: object
                  groupServiceTemplate:
                    description: Instructs how to generate the service for the PGDGroup
                    properties:
                      metadata:
                        description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
                        properties:
                          annotations:
                            additionalProperties:
                              type: string
                            description: 'Annotations is an unstructured key value
                              map stored with a resource that may be set by external
                              tools to store and retrieve arbitrary metadata. They
                              are not queryable and should be preserved when modifying
                              objects. More info: http://kubernetes.io/docs/user-guide/annotations'
                            type: object
                          labels:
                            additionalProperties:
                              type: string
                            description: 'Map of string keys and values that can be
                              used to organize and categorize (scope and select) objects.
                              May match selectors of replication controllers and services.
                              More info: http://kubernetes.io/docs/user-guide/labels'
                            type: object
                        type: object
                      spec:
                        description: 'Specification of the desired behavior of the
                          service. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status'
                        properties:
                          allocateLoadBalancerNodePorts:
                            description: allocateLoadBalancerNodePorts defines if
                              NodePorts will be automatically allocated for services
                              with type LoadBalancer.  Default is "true". It may be
                              set to "false" if the cluster load-balancer does not
                              rely on NodePorts.  If the caller requests specific
                              NodePorts (by specifying a value), those requests will
                              be respected, regardless of this field. This field may
                              only be set for services with type LoadBalancer and
                              will be cleared if the type is changed to any other
                              type.
                            type: boolean
                          clusterIP:
                            description: 'clusterIP is the IP address of the service
                              and is usually assigned randomly. If an address is specified
                              manually, is in-range (as per system configuration),
                              and is not in use, it will be allocated to the service;
                              otherwise creation of the service will fail. This field
                              may not be changed through updates unless the type field
                              is also being changed to ExternalName (which requires
                              this field to be blank) or the type field is being changed
                              from ExternalName (in which case this field may optionally
                              be specified, as describe above).  Valid values are
                              "None", empty string (""), or a valid IP address. Setting
                              this to "None" makes a "headless service" (no virtual
                              IP), which is useful when direct endpoint connections
                              are preferred and proxying is not required.  Only applies
                              to types ClusterIP, NodePort, and LoadBalancer. If this
                              field is specified when creating a Service of type ExternalName,
                              creation will fail. This field will be wiped when updating
                              a Service to type ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                            type: string
                          clusterIPs:
                            description: "ClusterIPs is a list of IP addresses assigned
                              to this service, and are usually assigned randomly.
                              \ If an address is specified manually, is in-range (as
                              per system configuration), and is not in use, it will
                              be allocated to the service; otherwise creation of the
                              service will fail. This field may not be changed through
                              updates unless the type field is also being changed
                              to ExternalName (which requires this field to be empty)
                              or the type field is being changed from ExternalName
                              (in which case this field may optionally be specified,
                              as describe above).  Valid values are \"None\", empty
                              string (\"\"), or a valid IP address.  Setting this
                              to \"None\" makes a \"headless service\" (no virtual
                              IP), which is useful when direct endpoint connections
                              are preferred and proxying is not required.  Only applies
                              to types ClusterIP, NodePort, and LoadBalancer. If this
                              field is specified when creating a Service of type ExternalName,
                              creation will fail. This field will be wiped when updating
                              a Service to type ExternalName.  If this field is not
                              specified, it will be initialized from the clusterIP
                              field.  If this field is specified, clients must ensure
                              that clusterIPs[0] and clusterIP have the same value.
                              \n This field may hold a maximum of two entries (dual-stack
                              IPs, in either order). These IPs must correspond to
                              the values of the ipFamilies field. Both clusterIPs
                              and ipFamilies are governed by the ipFamilyPolicy field.
                              More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies"
                            items:
                              type: string
                            type: array
                            x-kubernetes-list-type: atomic
                          externalIPs:
                            description: externalIPs is a list of IP addresses for
                              which nodes in the cluster will also accept traffic
                              for this service.  These IPs are not managed by Kubernetes.  The
                              user is responsible for ensuring that traffic arrives
                              at a node with this IP.  A common example is external
                              load-balancers that are not part of the Kubernetes system.
                            items:
                              type: string
                            type: array
                          externalName:
                            description: externalName is the external reference that
                              discovery mechanisms will return as an alias for this
                              service (e.g. a DNS CNAME record). No proxying will
                              be involved.  Must be a lowercase RFC-1123 hostname
                              (https://tools.ietf.org/html/rfc1123) and requires `type`
                              to be "ExternalName".
                            type: string
                          externalTrafficPolicy:
                            description: externalTrafficPolicy describes how nodes
                              distribute service traffic they receive on one of the
                              Service's "externally-facing" addresses (NodePorts,
                              ExternalIPs, and LoadBalancer IPs). If set to "Local",
                              the proxy will configure the service in a way that assumes
                              that external load balancers will take care of balancing
                              the service traffic between nodes, and so each node
                              will deliver traffic only to the node-local endpoints
                              of the service, without masquerading the client source
                              IP. (Traffic mistakenly sent to a node with no endpoints
                              will be dropped.) The default value, "Cluster", uses
                              the standard behavior of routing to all endpoints evenly
                              (possibly modified by topology and other features).
                              Note that traffic sent to an External IP or LoadBalancer
                              IP from within the cluster will always get "Cluster"
                              semantics, but clients sending to a NodePort from within
                              the cluster may need to take traffic policy into account
                              when picking a node.
                            type: string
                          healthCheckNodePort:
                            description: healthCheckNodePort specifies the healthcheck
                              nodePort for the service. This only applies when type
                              is set to LoadBalancer and externalTrafficPolicy is
                              set to Local. If a value is specified, is in-range,
                              and is not in use, it will be used.  If not specified,
                              a value will be automatically allocated.  External systems
                              (e.g. load-balancers) can use this port to determine
                              if a given node holds endpoints for this service or
                              not.  If this field is specified when creating a Service
                              which does not need it, creation will fail. This field
                              will be wiped when updating a Service to no longer need
                              it (e.g. changing type). This field cannot be updated
                              once set.
                            format: int32
                            type: integer
                          internalTrafficPolicy:
                            description: InternalTrafficPolicy describes how nodes
                              distribute service traffic they receive on the ClusterIP.
                              If set to "Local", the proxy will assume that pods only
                              want to talk to endpoints of the service on the same
                              node as the pod, dropping the traffic if there are no
                              local endpoints. The default value, "Cluster", uses
                              the standard behavior of routing to all endpoints evenly
                              (possibly modified by topology and other features).
                            type: string
                          ipFamilies:
                            description: "IPFamilies is a list of IP families (e.g.
                              IPv4, IPv6) assigned to this service. This field is
                              usually assigned automatically based on cluster configuration
                              and the ipFamilyPolicy field. If this field is specified
                              manually, the requested family is available in the cluster,
                              and ipFamilyPolicy allows it, it will be used; otherwise
                              creation of the service will fail. This field is conditionally
                              mutable: it allows for adding or removing a secondary
                              IP family, but it does not allow changing the primary
                              IP family of the Service. Valid values are \"IPv4\"
                              and \"IPv6\".  This field only applies to Services of
                              types ClusterIP, NodePort, and LoadBalancer, and does
                              apply to \"headless\" services. This field will be wiped
                              when updating a Service to type ExternalName. \n This
                              field may hold a maximum of two entries (dual-stack
                              families, in either order).  These families must correspond
                              to the values of the clusterIPs field, if specified.
                              Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy
                              field."
                            items:
                              description: IPFamily represents the IP Family (IPv4
                                or IPv6). This type is used to express the family
                                of an IP expressed by a type (e.g. service.spec.ipFamilies).
                              type: string
                            type: array
                            x-kubernetes-list-type: atomic
                          ipFamilyPolicy:
                            description: IPFamilyPolicy represents the dual-stack-ness
                              requested or required by this Service. If there is no
                              value provided, then this field will be set to SingleStack.
                              Services can be "SingleStack" (a single IP family),
                              "PreferDualStack" (two IP families on dual-stack configured
                              clusters or a single IP family on single-stack clusters),
                              or "RequireDualStack" (two IP families on dual-stack
                              configured clusters, otherwise fail). The ipFamilies
                              and clusterIPs fields depend on the value of this field.
                              This field will be wiped when updating a service to
                              type ExternalName.
                            type: string
                          loadBalancerClass:
                            description: loadBalancerClass is the class of the load
                              balancer implementation this Service belongs to. If
                              specified, the value of this field must be a label-style
                              identifier, with an optional prefix, e.g. "internal-vip"
                              or "example.com/internal-vip". Unprefixed names are
                              reserved for end-users. This field can only be set when
                              the Service type is 'LoadBalancer'. If not set, the
                              default load balancer implementation is used, today
                              this is typically done through the cloud provider integration,
                              but should apply for any default implementation. If
                              set, it is assumed that a load balancer implementation
                              is watching for Services with a matching class. Any
                              default load balancer implementation (e.g. cloud providers)
                              should ignore Services that set this field. This field
                              can only be set when creating or updating a Service
                              to type 'LoadBalancer'. Once set, it can not be changed.
                              This field will be wiped when a service is updated to
                              a non 'LoadBalancer' type.
                            type: string
                          loadBalancerIP:
                            description: 'Only applies to Service Type: LoadBalancer.
                              This feature depends on whether the underlying cloud-provider
                              supports specifying the loadBalancerIP when a load balancer
                              is created. This field will be ignored if the cloud-provider
                              does not support the feature. Deprecated: This field
                              was under-specified and its meaning varies across implementations.
                              Using it is non-portable and it may not support dual-stack.
                              Users are encouraged to use implementation-specific
                              annotations when available.'
                            type: string
                          loadBalancerSourceRanges:
                            description: 'If specified and supported by the platform,
                              this will restrict traffic through the cloud-provider
                              load-balancer will be restricted to the specified client
                              IPs. This field will be ignored if the cloud-provider
                              does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/'
                            items:
                              type: string
                            type: array
                          ports:
                            description: 'The list of ports that are exposed by this
                              service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                            items:
                              description: ServicePort contains information on service's
                                port.
                              properties:
                                appProtocol:
                                  description: "The application protocol for this
                                    port. This is used as a hint for implementations
                                    to offer richer behavior for protocols that they
                                    understand. This field follows standard Kubernetes
                                    label syntax. Valid values are either: \n * Un-prefixed
                                    protocol names - reserved for IANA standard service
                                    names (as per RFC-6335 and https://www.iana.org/assignments/service-names).
                                    \n * Kubernetes-defined prefixed names: * 'kubernetes.io/h2c'
                                    - HTTP/2 prior knowledge over cleartext as described
                                    in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-
                                    * 'kubernetes.io/ws'  - WebSocket over cleartext
                                    as described in https://www.rfc-editor.org/rfc/rfc6455
                                    * 'kubernetes.io/wss' - WebSocket over TLS as
                                    described in https://www.rfc-editor.org/rfc/rfc6455
                                    \n * Other protocols should use implementation-defined
                                    prefixed names such as mycompany.com/my-custom-protocol."
                                  type: string
                                name:
                                  description: The name of this port within the service.
                                    This must be a DNS_LABEL. All ports within a ServiceSpec
                                    must have unique names. When considering the endpoints
                                    for a Service, this must match the 'name' field
                                    in the EndpointPort. Optional if only one ServicePort
                                    is defined on this service.
                                  type: string
                                nodePort:
                                  description: 'The port on each node on which this
                                    service is exposed when type is NodePort or LoadBalancer.  Usually
                                    assigned by the system. If a value is specified,
                                    in-range, and not in use it will be used, otherwise
                                    the operation will fail.  If not specified, a
                                    port will be allocated if this Service requires
                                    one.  If this field is specified when creating
                                    a Service which does not need it, creation will
                                    fail. This field will be wiped when updating a
                                    Service to no longer need it (e.g. changing type
                                    from NodePort to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport'
                                  format: int32
                                  type: integer
                                port:
                                  description: The port that will be exposed by this
                                    service.
                                  format: int32
                                  type: integer
                                protocol:
                                  default: TCP
                                  description: The IP protocol for this port. Supports
                                    "TCP", "UDP", and "SCTP". Default is TCP.
                                  type: string
                                targetPort:
                                  anyOf:
                                  - type: integer
                                  - type: string
                                  description: 'Number or name of the port to access
                                    on the pods targeted by the service. Number must
                                    be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                                    If this is a string, it will be looked up as a
                                    named port in the target Pod''s container ports.
                                    If this is not specified, the value of the ''port''
                                    field is used (an identity map). This field is
                                    ignored for services with clusterIP=None, and
                                    should be omitted or set equal to the ''port''
                                    field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service'
                                  x-kubernetes-int-or-string: true
                              required:
                              - port
                              type: object
                            type: array
                            x-kubernetes-list-map-keys:
                            - port
                            - protocol
                            x-kubernetes-list-type: map
                          publishNotReadyAddresses:
                            description: publishNotReadyAddresses indicates that any
                              agent which deals with endpoints for this Service should
                              disregard any indications of ready/not-ready. The primary
                              use case for setting this field is for a StatefulSet's
                              Headless Service to propagate SRV DNS records for its
                              Pods for the purpose of peer discovery. The Kubernetes
                              controllers that generate Endpoints and EndpointSlice
                              resources for Services interpret this to mean that all
                              endpoints are considered "ready" even if the Pods themselves
                              are not. Agents which consume only Kubernetes generated
                              endpoints through the Endpoints or EndpointSlice resources
                              can safely assume this behavior.
                            type: boolean
                          selector:
                            additionalProperties:
                              type: string
                            description: 'Route service traffic to pods with label
                              keys and values matching this selector. If empty or
                              not present, the service is assumed to have an external
                              process managing its endpoints, which Kubernetes will
                              not modify. Only applies to types ClusterIP, NodePort,
                              and LoadBalancer. Ignored if type is ExternalName. More
                              info: https://kubernetes.io/docs/concepts/services-networking/service/'
                            type: object
                            x-kubernetes-map-type: atomic
                          sessionAffinity:
                            description: 'Supports "ClientIP" and "None". Used to
                              maintain session affinity. Enable client IP based session
                              affinity. Must be ClientIP or None. Defaults to None.
                              More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                            type: string
                          sessionAffinityConfig:
                            description: sessionAffinityConfig contains the configurations
                              of session affinity.
                            properties:
                              clientIP:
                                description: clientIP contains the configurations
                                  of Client IP based session affinity.
                                properties:
                                  timeoutSeconds:
                                    description: timeoutSeconds specifies the seconds
                                      of ClientIP type session sticky time. The value
                                      must be >0 && <=86400(for 1 day) if ServiceAffinity
                                      == "ClientIP". Default value is 10800(for 3
                                      hours).
                                    format: int32
                                    type: integer
                                type: object
                            type: object
                          type:
                            description: 'type determines how the Service is exposed.
                              Defaults to ClusterIP. Valid options are ExternalName,
                              ClusterIP, NodePort, and LoadBalancer. "ClusterIP" allocates
                              a cluster-internal IP address for load-balancing to
                              endpoints. Endpoints are determined by the selector
                              or if that is not specified, by manual construction
                              of an Endpoints object or EndpointSlice objects. If
                              clusterIP is "None", no virtual IP is allocated and
                              the endpoints are published as a set of endpoints rather
                              than a virtual IP. "NodePort" builds on ClusterIP and
                              allocates a port on every node which routes to the same
                              endpoints as the clusterIP. "LoadBalancer" builds on
                              NodePort and creates an external load-balancer (if supported
                              in the current cloud) which routes to the same endpoints
                              as the clusterIP. "ExternalName" aliases this service
                              to the specified externalName. Several other fields
                              do not apply to ExternalName services. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types'
                            type: string
                        type: object
                      updateStrategy:
                        default: patch
                        description: UpdateStrategy indicates how to update the services
                          generated by this template.
                        enum:
                        - patch
                        - replace
                        type: string
                    type: object
                  nodeServiceTemplate:
                    description: Instructs how to generate the service for each node
                    properties:
                      metadata:
                        description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
                        properties:
                          annotations:
                            additionalProperties:
                              type: string
                            description: 'Annotations is an unstructured key value
                              map stored with a resource that may be set by external
                              tools to store and retrieve arbitrary metadata. They
                              are not queryable and should be preserved when modifying
                              objects. More info: http://kubernetes.io/docs/user-guide/annotations'
                            type: object
                          labels:
                            additionalProperties:
                              type: string
                            description: 'Map of string keys and values that can be
                              used to organize and categorize (scope and select) objects.
                              May match selectors of replication controllers and services.
                              More info: http://kubernetes.io/docs/user-guide/labels'
                            type: object
                        type: object
                      spec:
                        description: 'Specification of the desired behavior of the
                          service. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status'
                        properties:
                          allocateLoadBalancerNodePorts:
                            description: allocateLoadBalancerNodePorts defines if
                              NodePorts will be automatically allocated for services
                              with type LoadBalancer.  Default is "true". It may be
                              set to "false" if the cluster load-balancer does not
                              rely on NodePorts.  If the caller requests specific
                              NodePorts (by specifying a value), those requests will
                              be respected, regardless of this field. This field may
                              only be set for services with type LoadBalancer and
                              will be cleared if the type is changed to any other
                              type.
                            type: boolean
                          clusterIP:
                            description: 'clusterIP is the IP address of the service
                              and is usually assigned randomly. If an address is specified
                              manually, is in-range (as per system configuration),
                              and is not in use, it will be allocated to the service;
                              otherwise creation of the service will fail. This field
                              may not be changed through updates unless the type field
                              is also being changed to ExternalName (which requires
                              this field to be blank) or the type field is being changed
                              from ExternalName (in which case this field may optionally
                              be specified, as describe above).  Valid values are
                              "None", empty string (""), or a valid IP address. Setting
                              this to "None" makes a "headless service" (no virtual
                              IP), which is useful when direct endpoint connections
                              are preferred and proxying is not required.  Only applies
                              to types ClusterIP, NodePort, and LoadBalancer. If this
                              field is specified when creating a Service of type ExternalName,
                              creation will fail. This field will be wiped when updating
                              a Service to type ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                            type: string
                          clusterIPs:
                            description: "ClusterIPs is a list of IP addresses assigned
                              to this service, and are usually assigned randomly.
                              \ If an address is specified manually, is in-range (as
                              per system configuration), and is not in use, it will
                              be allocated to the service; otherwise creation of the
                              service will fail. This field may not be changed through
                              updates unless the type field is also being changed
                              to ExternalName (which requires this field to be empty)
                              or the type field is being changed from ExternalName
                              (in which case this field may optionally be specified,
                              as describe above).  Valid values are \"None\", empty
                              string (\"\"), or a valid IP address.  Setting this
                              to \"None\" makes a \"headless service\" (no virtual
                              IP), which is useful when direct endpoint connections
                              are preferred and proxying is not required.  Only applies
                              to types ClusterIP, NodePort, and LoadBalancer. If this
                              field is specified when creating a Service of type ExternalName,
                              creation will fail. This field will be wiped when updating
                              a Service to type ExternalName.  If this field is not
                              specified, it will be initialized from the clusterIP
                              field.  If this field is specified, clients must ensure
                              that clusterIPs[0] and clusterIP have the same value.
                              \n This field may hold a maximum of two entries (dual-stack
                              IPs, in either order). These IPs must correspond to
                              the values of the ipFamilies field. Both clusterIPs
                              and ipFamilies are governed by the ipFamilyPolicy field.
                              More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies"
                            items:
                              type: string
                            type: array
                            x-kubernetes-list-type: atomic
                          externalIPs:
                            description: externalIPs is a list of IP addresses for
                              which nodes in the cluster will also accept traffic
                              for this service.  These IPs are not managed by Kubernetes.  The
                              user is responsible for ensuring that traffic arrives
                              at a node with this IP.  A common example is external
                              load-balancers that are not part of the Kubernetes system.
                            items:
                              type: string
                            type: array
                          externalName:
                            description: externalName is the external reference that
                              discovery mechanisms will return as an alias for this
                              service (e.g. a DNS CNAME record). No proxying will
                              be involved.  Must be a lowercase RFC-1123 hostname
                              (https://tools.ietf.org/html/rfc1123) and requires `type`
                              to be "ExternalName".
                            type: string
                          externalTrafficPolicy:
                            description: externalTrafficPolicy describes how nodes
                              distribute service traffic they receive on one of the
                              Service's "externally-facing" addresses (NodePorts,
                              ExternalIPs, and LoadBalancer IPs). If set to "Local",
                              the proxy will configure the service in a way that assumes
                              that external load balancers will take care of balancing
                              the service traffic between nodes, and so each node
                              will deliver traffic only to the node-local endpoints
                              of the service, without masquerading the client source
                              IP. (Traffic mistakenly sent to a node with no endpoints
                              will be dropped.) The default value, "Cluster", uses
                              the standard behavior of routing to all endpoints evenly
                              (possibly modified by topology and other features).
                              Note that traffic sent to an External IP or LoadBalancer
                              IP from within the cluster will always get "Cluster"
                              semantics, but clients sending to a NodePort from within
                              the cluster may need to take traffic policy into account
                              when picking a node.
                            type: string
                          healthCheckNodePort:
                            description: healthCheckNodePort specifies the healthcheck
                              nodePort for the service. This only applies when type
                              is set to LoadBalancer and externalTrafficPolicy is
                              set to Local. If a value is specified, is in-range,
                              and is not in use, it will be used.  If not specified,
                              a value will be automatically allocated.  External systems
                              (e.g. load-balancers) can use this port to determine
                              if a given node holds endpoints for this service or
                              not.  If this field is specified when creating a Service
                              which does not need it, creation will fail. This field
                              will be wiped when updating a Service to no longer need
                              it (e.g. changing type). This field cannot be updated
                              once set.
                            format: int32
                            type: integer
                          internalTrafficPolicy:
                            description: InternalTrafficPolicy describes how nodes
                              distribute service traffic they receive on the ClusterIP.
                              If set to "Local", the proxy will assume that pods only
                              want to talk to endpoints of the service on the same
                              node as the pod, dropping the traffic if there are no
                              local endpoints. The default value, "Cluster", uses
                              the standard behavior of routing to all endpoints evenly
                              (possibly modified by topology and other features).
                            type: string
                          ipFamilies:
                            description: "IPFamilies is a list of IP families (e.g.
                              IPv4, IPv6) assigned to this service. This field is
                              usually assigned automatically based on cluster configuration
                              and the ipFamilyPolicy field. If this field is specified
                              manually, the requested family is available in the cluster,
                              and ipFamilyPolicy allows it, it will be used; otherwise
                              creation of the service will fail. This field is conditionally
                              mutable: it allows for adding or removing a secondary
                              IP family, but it does not allow changing the primary
                              IP family of the Service. Valid values are \"IPv4\"
                              and \"IPv6\".  This field only applies to Services of
                              types ClusterIP, NodePort, and LoadBalancer, and does
                              apply to \"headless\" services. This field will be wiped
                              when updating a Service to type ExternalName. \n This
                              field may hold a maximum of two entries (dual-stack
                              families, in either order).  These families must correspond
                              to the values of the clusterIPs field, if specified.
                              Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy
                              field."
                            items:
                              description: IPFamily represents the IP Family (IPv4
                                or IPv6). This type is used to express the family
                                of an IP expressed by a type (e.g. service.spec.ipFamilies).
                              type: string
                            type: array
                            x-kubernetes-list-type: atomic
                          ipFamilyPolicy:
                            description: IPFamilyPolicy represents the dual-stack-ness
                              requested or required by this Service. If there is no
                              value provided, then this field will be set to SingleStack.
                              Services can be "SingleStack" (a single IP family),
                              "PreferDualStack" (two IP families on dual-stack configured
                              clusters or a single IP family on single-stack clusters),
                              or "RequireDualStack" (two IP families on dual-stack
                              configured clusters, otherwise fail). The ipFamilies
                              and clusterIPs fields depend on the value of this field.
                              This field will be wiped when updating a service to
                              type ExternalName.
                            type: string
                          loadBalancerClass:
                            description: loadBalancerClass is the class of the load
                              balancer implementation this Service belongs to. If
                              specified, the value of this field must be a label-style
                              identifier, with an optional prefix, e.g. "internal-vip"
                              or "example.com/internal-vip". Unprefixed names are
                              reserved for end-users. This field can only be set when
                              the Service type is 'LoadBalancer'. If not set, the
                              default load balancer implementation is used, today
                              this is typically done through the cloud provider integration,
                              but should apply for any default implementation. If
                              set, it is assumed that a load balancer implementation
                              is watching for Services with a matching class. Any
                              default load balancer implementation (e.g. cloud providers)
                              should ignore Services that set this field. This field
                              can only be set when creating or updating a Service
                              to type 'LoadBalancer'. Once set, it can not be changed.
                              This field will be wiped when a service is updated to
                              a non 'LoadBalancer' type.
                            type: string
                          loadBalancerIP:
                            description: 'Only applies to Service Type: LoadBalancer.
                              This feature depends on whether the underlying cloud-provider
                              supports specifying the loadBalancerIP when a load balancer
                              is created. This field will be ignored if the cloud-provider
                              does not support the feature. Deprecated: This field
                              was under-specified and its meaning varies across implementations.
                              Using it is non-portable and it may not support dual-stack.
                              Users are encouraged to use implementation-specific
                              annotations when available.'
                            type: string
                          loadBalancerSourceRanges:
                            description: 'If specified and supported by the platform,
                              this will restrict traffic through the cloud-provider
                              load-balancer will be restricted to the specified client
                              IPs. This field will be ignored if the cloud-provider
                              does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/'
                            items:
                              type: string
                            type: array
                          ports:
                            description: 'The list of ports that are exposed by this
                              service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                            items:
                              description: ServicePort contains information on service's
                                port.
                              properties:
                                appProtocol:
                                  description: "The application protocol for this
                                    port. This is used as a hint for implementations
                                    to offer richer behavior for protocols that they
                                    understand. This field follows standard Kubernetes
                                    label syntax. Valid values are either: \n * Un-prefixed
                                    protocol names - reserved for IANA standard service
                                    names (as per RFC-6335 and https://www.iana.org/assignments/service-names).
                                    \n * Kubernetes-defined prefixed names: * 'kubernetes.io/h2c'
                                    - HTTP/2 prior knowledge over cleartext as described
                                    in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-
                                    * 'kubernetes.io/ws'  - WebSocket over cleartext
                                    as described in https://www.rfc-editor.org/rfc/rfc6455
                                    * 'kubernetes.io/wss' - WebSocket over TLS as
                                    described in https://www.rfc-editor.org/rfc/rfc6455
                                    \n * Other protocols should use implementation-defined
                                    prefixed names such as mycompany.com/my-custom-protocol."
                                  type: string
                                name:
                                  description: The name of this port within the service.
                                    This must be a DNS_LABEL. All ports within a ServiceSpec
                                    must have unique names. When considering the endpoints
                                    for a Service, this must match the 'name' field
                                    in the EndpointPort. Optional if only one ServicePort
                                    is defined on this service.
                                  type: string
                                nodePort:
                                  description: 'The port on each node on which this
                                    service is exposed when type is NodePort or LoadBalancer.  Usually
                                    assigned by the system. If a value is specified,
                                    in-range, and not in use it will be used, otherwise
                                    the operation will fail.  If not specified, a
                                    port will be allocated if this Service requires
                                    one.  If this field is specified when creating
                                    a Service which does not need it, creation will
                                    fail. This field will be wiped when updating a
                                    Service to no longer need it (e.g. changing type
                                    from NodePort to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport'
                                  format: int32
                                  type: integer
                                port:
                                  description: The port that will be exposed by this
                                    service.
                                  format: int32
                                  type: integer
                                protocol:
                                  default: TCP
                                  description: The IP protocol for this port. Supports
                                    "TCP", "UDP", and "SCTP". Default is TCP.
                                  type: string
                                targetPort:
                                  anyOf:
                                  - type: integer
                                  - type: string
                                  description: 'Number or name of the port to access
                                    on the pods targeted by the service. Number must
                                    be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                                    If this is a string, it will be looked up as a
                                    named port in the target Pod''s container ports.
                                    If this is not specified, the value of the ''port''
                                    field is used (an identity map). This field is
                                    ignored for services with clusterIP=None, and
                                    should be omitted or set equal to the ''port''
                                    field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service'
                                  x-kubernetes-int-or-string: true
                              required:
                              - port
                              type: object
                            type: array
                            x-kubernetes-list-map-keys:
                            - port
                            - protocol
                            x-kubernetes-list-type: map
                          publishNotReadyAddresses:
                            description: publishNotReadyAddresses indicates that any
                              agent which deals with endpoints for this Service should
                              disregard any indications of ready/not-ready. The primary
                              use case for setting this field is for a StatefulSet's
                              Headless Service to propagate SRV DNS records for its
                              Pods for the purpose of peer discovery. The Kubernetes
                              controllers that generate Endpoints and EndpointSlice
                              resources for Services interpret this to mean that all
                              endpoints are considered "ready" even if the Pods themselves
                              are not. Agents which consume only Kubernetes generated
                              endpoints through the Endpoints or EndpointSlice resources
                              can safely assume this behavior.
                            type: boolean
                          selector:
                            additionalProperties:
                              type: string
                            description: 'Route service traffic to pods with label
                              keys and values matching this selector. If empty or
                              not present, the service is assumed to have an external
                              process managing its endpoints, which Kubernetes will
                              not modify. Only applies to types ClusterIP, NodePort,
                              and LoadBalancer. Ignored if type is ExternalName. More
                              info: https://kubernetes.io/docs/concepts/services-networking/service/'
                            type: object
                            x-kubernetes-map-type: atomic
                          sessionAffinity:
                            description: 'Supports "ClientIP" and "None". Used to
                              maintain session affinity. Enable client IP based session
                              affinity. Must be ClientIP or None. Defaults to None.
                              More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                            type: string
                          sessionAffinityConfig:
                            description: sessionAffinityConfig contains the configurations
                              of session affinity.
                            properties:
                              clientIP:
                                description: clientIP contains the configurations
                                  of Client IP based session affinity.
                                properties:
                                  timeoutSeconds:
                                    description: timeoutSeconds specifies the seconds
                                      of ClientIP type session sticky time. The value
                                      must be >0 && <=86400(for 1 day) if ServiceAffinity
                                      == "ClientIP". Default value is 10800(for 3
                                      hours).
                                    format: int32
                                    type: integer
                                type: object
                            type: object
                          type:
                            description: 'type determines how the Service is exposed.
                              Defaults to ClusterIP. Valid options are ExternalName,
                              ClusterIP, NodePort, and LoadBalancer. "ClusterIP" allocates
                              a cluster-internal IP address for load-balancing to
                              endpoints. Endpoints are determined by the selector
                              or if that is not specified, by manual construction
                              of an Endpoints object or EndpointSlice objects. If
                              clusterIP is "None", no virtual IP is allocated and
                              the endpoints are published as a set of endpoints rather
                              than a virtual IP. "NodePort" builds on ClusterIP and
                              allocates a port on every node which routes to the same
                              endpoints as the clusterIP. "LoadBalancer" builds on
                              NodePort and creates an external load-balancer (if supported
                              in the current cloud) which routes to the same endpoints
                              as the clusterIP. "ExternalName" aliases this service
                              to the specified externalName. Several other fields
                              do not apply to ExternalName services. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types'
                            type: string
                        type: object
                      updateStrategy:
                        default: patch
                        description: UpdateStrategy indicates how to update the services
                          generated by this template.
                        enum:
                        - patch
                        - replace
                        type: string
                    type: object
                  proxyServiceTemplate:
                    description: Instructs how to generate the service pointing to
                      the PGD Proxy
                    properties:
                      metadata:
                        description: 'Standard object''s metadata. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#metadata'
                        properties:
                          annotations:
                            additionalProperties:
                              type: string
                            description: 'Annotations is an unstructured key value
                              map stored with a resource that may be set by external
                              tools to store and retrieve arbitrary metadata. They
                              are not queryable and should be preserved when modifying
                              objects. More info: http://kubernetes.io/docs/user-guide/annotations'
                            type: object
                          labels:
                            additionalProperties:
                              type: string
                            description: 'Map of string keys and values that can be
                              used to organize and categorize (scope and select) objects.
                              May match selectors of replication controllers and services.
                              More info: http://kubernetes.io/docs/user-guide/labels'
                            type: object
                        type: object
                      spec:
                        description: 'Specification of the desired behavior of the
                          service. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#spec-and-status'
                        properties:
                          allocateLoadBalancerNodePorts:
                            description: allocateLoadBalancerNodePorts defines if
                              NodePorts will be automatically allocated for services
                              with type LoadBalancer.  Default is "true". It may be
                              set to "false" if the cluster load-balancer does not
                              rely on NodePorts.  If the caller requests specific
                              NodePorts (by specifying a value), those requests will
                              be respected, regardless of this field. This field may
                              only be set for services with type LoadBalancer and
                              will be cleared if the type is changed to any other
                              type.
                            type: boolean
                          clusterIP:
                            description: 'clusterIP is the IP address of the service
                              and is usually assigned randomly. If an address is specified
                              manually, is in-range (as per system configuration),
                              and is not in use, it will be allocated to the service;
                              otherwise creation of the service will fail. This field
                              may not be changed through updates unless the type field
                              is also being changed to ExternalName (which requires
                              this field to be blank) or the type field is being changed
                              from ExternalName (in which case this field may optionally
                              be specified, as describe above).  Valid values are
                              "None", empty string (""), or a valid IP address. Setting
                              this to "None" makes a "headless service" (no virtual
                              IP), which is useful when direct endpoint connections
                              are preferred and proxying is not required.  Only applies
                              to types ClusterIP, NodePort, and LoadBalancer. If this
                              field is specified when creating a Service of type ExternalName,
                              creation will fail. This field will be wiped when updating
                              a Service to type ExternalName. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                            type: string
                          clusterIPs:
                            description: "ClusterIPs is a list of IP addresses assigned
                              to this service, and are usually assigned randomly.
                              \ If an address is specified manually, is in-range (as
                              per system configuration), and is not in use, it will
                              be allocated to the service; otherwise creation of the
                              service will fail. This field may not be changed through
                              updates unless the type field is also being changed
                              to ExternalName (which requires this field to be empty)
                              or the type field is being changed from ExternalName
                              (in which case this field may optionally be specified,
                              as describe above).  Valid values are \"None\", empty
                              string (\"\"), or a valid IP address.  Setting this
                              to \"None\" makes a \"headless service\" (no virtual
                              IP), which is useful when direct endpoint connections
                              are preferred and proxying is not required.  Only applies
                              to types ClusterIP, NodePort, and LoadBalancer. If this
                              field is specified when creating a Service of type ExternalName,
                              creation will fail. This field will be wiped when updating
                              a Service to type ExternalName.  If this field is not
                              specified, it will be initialized from the clusterIP
                              field.  If this field is specified, clients must ensure
                              that clusterIPs[0] and clusterIP have the same value.
                              \n This field may hold a maximum of two entries (dual-stack
                              IPs, in either order). These IPs must correspond to
                              the values of the ipFamilies field. Both clusterIPs
                              and ipFamilies are governed by the ipFamilyPolicy field.
                              More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies"
                            items:
                              type: string
                            type: array
                            x-kubernetes-list-type: atomic
                          externalIPs:
                            description: externalIPs is a list of IP addresses for
                              which nodes in the cluster will also accept traffic
                              for this service.  These IPs are not managed by Kubernetes.  The
                              user is responsible for ensuring that traffic arrives
                              at a node with this IP.  A common example is external
                              load-balancers that are not part of the Kubernetes system.
                            items:
                              type: string
                            type: array
                          externalName:
                            description: externalName is the external reference that
                              discovery mechanisms will return as an alias for this
                              service (e.g. a DNS CNAME record). No proxying will
                              be involved.  Must be a lowercase RFC-1123 hostname
                              (https://tools.ietf.org/html/rfc1123) and requires `type`
                              to be "ExternalName".
                            type: string
                          externalTrafficPolicy:
                            description: externalTrafficPolicy describes how nodes
                              distribute service traffic they receive on one of the
                              Service's "externally-facing" addresses (NodePorts,
                              ExternalIPs, and LoadBalancer IPs). If set to "Local",
                              the proxy will configure the service in a way that assumes
                              that external load balancers will take care of balancing
                              the service traffic between nodes, and so each node
                              will deliver traffic only to the node-local endpoints
                              of the service, without masquerading the client source
                              IP. (Traffic mistakenly sent to a node with no endpoints
                              will be dropped.) The default value, "Cluster", uses
                              the standard behavior of routing to all endpoints evenly
                              (possibly modified by topology and other features).
                              Note that traffic sent to an External IP or LoadBalancer
                              IP from within the cluster will always get "Cluster"
                              semantics, but clients sending to a NodePort from within
                              the cluster may need to take traffic policy into account
                              when picking a node.
                            type: string
                          healthCheckNodePort:
                            description: healthCheckNodePort specifies the healthcheck
                              nodePort for the service. This only applies when type
                              is set to LoadBalancer and externalTrafficPolicy is
                              set to Local. If a value is specified, is in-range,
                              and is not in use, it will be used.  If not specified,
                              a value will be automatically allocated.  External systems
                              (e.g. load-balancers) can use this port to determine
                              if a given node holds endpoints for this service or
                              not.  If this field is specified when creating a Service
                              which does not need it, creation will fail. This field
                              will be wiped when updating a Service to no longer need
                              it (e.g. changing type). This field cannot be updated
                              once set.
                            format: int32
                            type: integer
                          internalTrafficPolicy:
                            description: InternalTrafficPolicy describes how nodes
                              distribute service traffic they receive on the ClusterIP.
                              If set to "Local", the proxy will assume that pods only
                              want to talk to endpoints of the service on the same
                              node as the pod, dropping the traffic if there are no
                              local endpoints. The default value, "Cluster", uses
                              the standard behavior of routing to all endpoints evenly
                              (possibly modified by topology and other features).
                            type: string
                          ipFamilies:
                            description: "IPFamilies is a list of IP families (e.g.
                              IPv4, IPv6) assigned to this service. This field is
                              usually assigned automatically based on cluster configuration
                              and the ipFamilyPolicy field. If this field is specified
                              manually, the requested family is available in the cluster,
                              and ipFamilyPolicy allows it, it will be used; otherwise
                              creation of the service will fail. This field is conditionally
                              mutable: it allows for adding or removing a secondary
                              IP family, but it does not allow changing the primary
                              IP family of the Service. Valid values are \"IPv4\"
                              and \"IPv6\".  This field only applies to Services of
                              types ClusterIP, NodePort, and LoadBalancer, and does
                              apply to \"headless\" services. This field will be wiped
                              when updating a Service to type ExternalName. \n This
                              field may hold a maximum of two entries (dual-stack
                              families, in either order).  These families must correspond
                              to the values of the clusterIPs field, if specified.
                              Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy
                              field."
                            items:
                              description: IPFamily represents the IP Family (IPv4
                                or IPv6). This type is used to express the family
                                of an IP expressed by a type (e.g. service.spec.ipFamilies).
                              type: string
                            type: array
                            x-kubernetes-list-type: atomic
                          ipFamilyPolicy:
                            description: IPFamilyPolicy represents the dual-stack-ness
                              requested or required by this Service. If there is no
                              value provided, then this field will be set to SingleStack.
                              Services can be "SingleStack" (a single IP family),
                              "PreferDualStack" (two IP families on dual-stack configured
                              clusters or a single IP family on single-stack clusters),
                              or "RequireDualStack" (two IP families on dual-stack
                              configured clusters, otherwise fail). The ipFamilies
                              and clusterIPs fields depend on the value of this field.
                              This field will be wiped when updating a service to
                              type ExternalName.
                            type: string
                          loadBalancerClass:
                            description: loadBalancerClass is the class of the load
                              balancer implementation this Service belongs to. If
                              specified, the value of this field must be a label-style
                              identifier, with an optional prefix, e.g. "internal-vip"
                              or "example.com/internal-vip". Unprefixed names are
                              reserved for end-users. This field can only be set when
                              the Service type is 'LoadBalancer'. If not set, the
                              default load balancer implementation is used, today
                              this is typically done through the cloud provider integration,
                              but should apply for any default implementation. If
                              set, it is assumed that a load balancer implementation
                              is watching for Services with a matching class. Any
                              default load balancer implementation (e.g. cloud providers)
                              should ignore Services that set this field. This field
                              can only be set when creating or updating a Service
                              to type 'LoadBalancer'. Once set, it can not be changed.
                              This field will be wiped when a service is updated to
                              a non 'LoadBalancer' type.
                            type: string
                          loadBalancerIP:
                            description: 'Only applies to Service Type: LoadBalancer.
                              This feature depends on whether the underlying cloud-provider
                              supports specifying the loadBalancerIP when a load balancer
                              is created. This field will be ignored if the cloud-provider
                              does not support the feature. Deprecated: This field
                              was under-specified and its meaning varies across implementations.
                              Using it is non-portable and it may not support dual-stack.
                              Users are encouraged to use implementation-specific
                              annotations when available.'
                            type: string
                          loadBalancerSourceRanges:
                            description: 'If specified and supported by the platform,
                              this will restrict traffic through the cloud-provider
                              load-balancer will be restricted to the specified client
                              IPs. This field will be ignored if the cloud-provider
                              does not support the feature." More info: https://kubernetes.io/docs/tasks/access-application-cluster/create-external-load-balancer/'
                            items:
                              type: string
                            type: array
                          ports:
                            description: 'The list of ports that are exposed by this
                              service. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                            items:
                              description: ServicePort contains information on service's
                                port.
                              properties:
                                appProtocol:
                                  description: "The application protocol for this
                                    port. This is used as a hint for implementations
                                    to offer richer behavior for protocols that they
                                    understand. This field follows standard Kubernetes
                                    label syntax. Valid values are either: \n * Un-prefixed
                                    protocol names - reserved for IANA standard service
                                    names (as per RFC-6335 and https://www.iana.org/assignments/service-names).
                                    \n * Kubernetes-defined prefixed names: * 'kubernetes.io/h2c'
                                    - HTTP/2 prior knowledge over cleartext as described
                                    in https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-
                                    * 'kubernetes.io/ws'  - WebSocket over cleartext
                                    as described in https://www.rfc-editor.org/rfc/rfc6455
                                    * 'kubernetes.io/wss' - WebSocket over TLS as
                                    described in https://www.rfc-editor.org/rfc/rfc6455
                                    \n * Other protocols should use implementation-defined
                                    prefixed names such as mycompany.com/my-custom-protocol."
                                  type: string
                                name:
                                  description: The name of this port within the service.
                                    This must be a DNS_LABEL. All ports within a ServiceSpec
                                    must have unique names. When considering the endpoints
                                    for a Service, this must match the 'name' field
                                    in the EndpointPort. Optional if only one ServicePort
                                    is defined on this service.
                                  type: string
                                nodePort:
                                  description: 'The port on each node on which this
                                    service is exposed when type is NodePort or LoadBalancer.  Usually
                                    assigned by the system. If a value is specified,
                                    in-range, and not in use it will be used, otherwise
                                    the operation will fail.  If not specified, a
                                    port will be allocated if this Service requires
                                    one.  If this field is specified when creating
                                    a Service which does not need it, creation will
                                    fail. This field will be wiped when updating a
                                    Service to no longer need it (e.g. changing type
                                    from NodePort to ClusterIP). More info: https://kubernetes.io/docs/concepts/services-networking/service/#type-nodeport'
                                  format: int32
                                  type: integer
                                port:
                                  description: The port that will be exposed by this
                                    service.
                                  format: int32
                                  type: integer
                                protocol:
                                  default: TCP
                                  description: The IP protocol for this port. Supports
                                    "TCP", "UDP", and "SCTP". Default is TCP.
                                  type: string
                                targetPort:
                                  anyOf:
                                  - type: integer
                                  - type: string
                                  description: 'Number or name of the port to access
                                    on the pods targeted by the service. Number must
                                    be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
                                    If this is a string, it will be looked up as a
                                    named port in the target Pod''s container ports.
                                    If this is not specified, the value of the ''port''
                                    field is used (an identity map). This field is
                                    ignored for services with clusterIP=None, and
                                    should be omitted or set equal to the ''port''
                                    field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#defining-a-service'
                                  x-kubernetes-int-or-string: true
                              required:
                              - port
                              type: object
                            type: array
                            x-kubernetes-list-map-keys:
                            - port
                            - protocol
                            x-kubernetes-list-type: map
                          publishNotReadyAddresses:
                            description: publishNotReadyAddresses indicates that any
                              agent which deals with endpoints for this Service should
                              disregard any indications of ready/not-ready. The primary
                              use case for setting this field is for a StatefulSet's
                              Headless Service to propagate SRV DNS records for its
                              Pods for the purpose of peer discovery. The Kubernetes
                              controllers that generate Endpoints and EndpointSlice
                              resources for Services interpret this to mean that all
                              endpoints are considered "ready" even if the Pods themselves
                              are not. Agents which consume only Kubernetes generated
                              endpoints through the Endpoints or EndpointSlice resources
                              can safely assume this behavior.
                            type: boolean
                          selector:
                            additionalProperties:
                              type: string
                            description: 'Route service traffic to pods with label
                              keys and values matching this selector. If empty or
                              not present, the service is assumed to have an external
                              process managing its endpoints, which Kubernetes will
                              not modify. Only applies to types ClusterIP, NodePort,
                              and LoadBalancer. Ignored if type is ExternalName. More
                              info: https://kubernetes.io/docs/concepts/services-networking/service/'
                            type: object
                            x-kubernetes-map-type: atomic
                          sessionAffinity:
                            description: 'Supports "ClientIP" and "None". Used to
                              maintain session affinity. Enable client IP based session
                              affinity. Must be ClientIP or None. Defaults to None.
                              More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies'
                            type: string
                          sessionAffinityConfig:
                            description: sessionAffinityConfig contains the configurations
                              of session affinity.
                            properties:
                              clientIP:
                                description: clientIP contains the configurations
                                  of Client IP based session affinity.
                                properties:
                                  timeoutSeconds:
                                    description: timeoutSeconds specifies the seconds
                                      of ClientIP type session sticky time. The value
                                      must be >0 && <=86400(for 1 day) if ServiceAffinity
                                      == "ClientIP". Default value is 10800(for 3
                                      hours).
                                    format: int32
                                    type: integer
                                type: object
                            type: object
                          type:
                            description: 'type determines how the Service is exposed.
                              Defaults to ClusterIP. Valid options are ExternalName,
                              ClusterIP, NodePort, and LoadBalancer. "ClusterIP" allocates
                              a cluster-internal IP address for load-balancing to
                              endpoints. Endpoints are determined by the selector
                              or if that is not specified, by manual construction
                              of an Endpoints object or EndpointSlice objects. If
                              clusterIP is "None", no virtual IP is allocated and
                              the endpoints are published as a set of endpoints rather
                              than a virtual IP. "NodePort" builds on ClusterIP and
                              allocates a port on every node which routes to the same
                              endpoints as the clusterIP. "LoadBalancer" builds on
                              NodePort and creates an external load-balancer (if supported
                              in the current cloud) which routes to the same endpoints
                              as the clusterIP. "ExternalName" aliases this service
                              to the specified externalName. Several other fields
                              do not apply to ExternalName services. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types'
                            type: string
                        type: object
                      updateStrategy:
                        default: patch
                        description: UpdateStrategy indicates how to update the services
                          generated by this template.
                        enum:
                        - patch
                        - replace
                        type: string
                    type: object
                  tls:
                    description: The configuration of the TLS infrastructure
                    properties:
                      clientCert:
                        description: The configuration for the client certificates
                        properties:
                          caCertSecret:
                            description: CACertSecret is the secret of the CA to be
                              injected into the CloudNativePG configuration
                            type: string
                          certManager:
                            description: The cert-manager template used to generate
                              the certificates
                            properties:
                              metadata:
                                description: The label and annotations metadata
                                properties:
                                  annotations:
                                    additionalProperties:
                                      type: string
                                    description: 'Annotations is an unstructured key
                                      value map stored with a resource that may be
                                      set by external tools to store and retrieve
                                      arbitrary metadata. They are not queryable and
                                      should be preserved when modifying objects.
                                      More info: http://kubernetes.io/docs/user-guide/annotations'
                                    type: object
                                  labels:
                                    additionalProperties:
                                      type: string
                                    description: 'Map of string keys and values that
                                      can be used to organize and categorize (scope
                                      and select) objects. May match selectors of
                                      replication controllers and services. More info:
                                      http://kubernetes.io/docs/user-guide/labels'
                                    type: object
                                type: object
                              spec:
                                description: The Certificate object specification
                                properties:
                                  commonName:
                                    description: 'CommonName is a common name to be
                                      used on the Certificate. The CommonName should
                                      have a length of 64 characters or fewer to avoid
                                      generating invalid CSRs. This value is ignored
                                      by TLS clients when any subject alt name is
                                      set. This is x509 behaviour: https://tools.ietf.org/html/rfc6125#section-6.4.4'
                                    type: string
                                  dnsNames:
                                    description: DNSNames is a list of DNS subjectAltNames
                                      to be set on the Certificate.
                                    items:
                                      type: string
                                    type: array
                                  duration:
                                    description: The requested 'duration' (i.e. lifetime)
                                      of the Certificate. This option may be ignored/overridden
                                      by some issuer types. If unset this defaults
                                      to 90 days. Certificate will be renewed either
                                      2/3 through its duration or `renewBefore` period
                                      before its expiry, whichever is later. Minimum
                                      accepted duration is 1 hour. Value must be in
                                      units accepted by Go time.ParseDuration https://golang.org/pkg/time/#ParseDuration
                                    type: string
                                  emailAddresses:
                                    description: EmailAddresses is a list of email
                                      subjectAltNames to be set on the Certificate.
                                    items:
                                      type: string
                                    type: array
                                  encodeUsagesInRequest:
                                    description: EncodeUsagesInRequest controls whether
                                      key usages should be present in the CertificateRequest
                                    type: boolean
                                  ipAddresses:
                                    description: IPAddresses is a list of IP address
                                      subjectAltNames to be set on the Certificate.
                                    items:
                                      type: string
                                    type: array
                                  isCA:
                                    description: IsCA will mark this Certificate as
                                      valid for certificate signing. This will automatically
                                      add the `cert sign` usage to the list of `usages`.
                                    type: boolean
                                  issuerRef:
                                    description: IssuerRef is a reference to the issuer
                                      for this certificate. If the `kind` field is
                                      not set, or set to `Issuer`, an Issuer resource
                                      with the given name in the same namespace as
                                      the Certificate will be used. If the `kind`
                                      field is set to `ClusterIssuer`, a ClusterIssuer
                                      with the provided name will be used. The `name`
                                      field in this stanza is required at all times.
                                    properties:
                                      group:
                                        description: Group of the resource being referred
                                          to.
                                        type: string
                                      kind:
                                        description: Kind of the resource being referred
                                          to.
                                        type: string
                                      name:
                                        description: Name of the resource being referred
                                          to.
                                        type: string
                                    required:
                                    - name
                                    type: object
                                  keystores:
                                    description: Keystores configures additional keystore
                                      output formats stored in the `secretName` Secret
                                      resource.
                                    properties:
                                      jks:
                                        description: JKS configures options for storing
                                          a JKS keystore in the `spec.secretName`
                                          Secret resource.
                                        properties:
                                          create:
                                            description: Create enables JKS keystore
                                              creation for the Certificate. If true,
                                              a file named `keystore.jks` will be
                                              created in the target Secret resource,
                                              encrypted using the password stored
                                              in `passwordSecretRef`. The keystore
                                              file will only be updated upon re-issuance.
                                              A file named `truststore.jks` will also
                                              be created in the target Secret resource,
                                              encrypted using the password stored
                                              in `passwordSecretRef` containing the
                                              issuing Certificate Authority
                                            type: boolean
                                          passwordSecretRef:
                                            description: PasswordSecretRef is a reference
                                              to a key in a Secret resource containing
                                              the password used to encrypt the JKS
                                              keystore.
                                            properties:
                                              key:
                                                description: The key of the entry
                                                  in the Secret resource's `data`
                                                  field to be used. Some instances
                                                  of this field may be defaulted,
                                                  in others it may be required.
                                                type: string
                                              name:
                                                description: 'Name of the resource
                                                  being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                                type: string
                                            required:
                                            - name
                                            type: object
                                        required:
                                        - create
                                        - passwordSecretRef
                                        type: object
                                      pkcs12:
                                        description: PKCS12 configures options for
                                          storing a PKCS12 keystore in the `spec.secretName`
                                          Secret resource.
                                        properties:
                                          create:
                                            description: Create enables PKCS12 keystore
                                              creation for the Certificate. If true,
                                              a file named `keystore.p12` will be
                                              created in the target Secret resource,
                                              encrypted using the password stored
                                              in `passwordSecretRef`. The keystore
                                              file will only be updated upon re-issuance.
                                              A file named `truststore.p12` will also
                                              be created in the target Secret resource,
                                              encrypted using the password stored
                                              in `passwordSecretRef` containing the
                                              issuing Certificate Authority
                                            type: boolean
                                          passwordSecretRef:
                                            description: PasswordSecretRef is a reference
                                              to a key in a Secret resource containing
                                              the password used to encrypt the PKCS12
                                              keystore.
                                            properties:
                                              key:
                                                description: The key of the entry
                                                  in the Secret resource's `data`
                                                  field to be used. Some instances
                                                  of this field may be defaulted,
                                                  in others it may be required.
                                                type: string
                                              name:
                                                description: 'Name of the resource
                                                  being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                                type: string
                                            required:
                                            - name
                                            type: object
                                        required:
                                        - create
                                        - passwordSecretRef
                                        type: object
                                    type: object
                                  privateKey:
                                    description: Options to control private keys used
                                      for the Certificate.
                                    properties:
                                      algorithm:
                                        description: Algorithm is the private key
                                          algorithm of the corresponding private key
                                          for this certificate. If provided, allowed
                                          values are either `RSA`,`Ed25519` or `ECDSA`
                                          If `algorithm` is specified and `size` is
                                          not provided, key size of 256 will be used
                                          for `ECDSA` key algorithm and key size of
                                          2048 will be used for `RSA` key algorithm.
                                          key size is ignored when using the `Ed25519`
                                          key algorithm.
                                        enum:
                                        - RSA
                                        - ECDSA
                                        - Ed25519
                                        type: string
                                      encoding:
                                        description: The private key cryptography
                                          standards (PKCS) encoding for this certificate's
                                          private key to be encoded in. If provided,
                                          allowed values are `PKCS1` and `PKCS8` standing
                                          for PKCS#1 and PKCS#8, respectively. Defaults
                                          to `PKCS1` if not specified.
                                        enum:
                                        - PKCS1
                                        - PKCS8
                                        type: string
                                      rotationPolicy:
                                        description: RotationPolicy controls how private
                                          keys should be regenerated when a re-issuance
                                          is being processed. If set to Never, a private
                                          key will only be generated if one does not
                                          already exist in the target `spec.secretName`.
                                          If one does exists but it does not have
                                          the correct algorithm or size, a warning
                                          will be raised to await user intervention.
                                          If set to Always, a private key matching
                                          the specified requirements will be generated
                                          whenever a re-issuance occurs. Default is
                                          'Never' for backward compatibility.
                                        type: string
                                      size:
                                        description: Size is the key bit size of the
                                          corresponding private key for this certificate.
                                          If `algorithm` is set to `RSA`, valid values
                                          are `2048`, `4096` or `8192`, and will default
                                          to `2048` if not specified. If `algorithm`
                                          is set to `ECDSA`, valid values are `256`,
                                          `384` or `521`, and will default to `256`
                                          if not specified. If `algorithm` is set
                                          to `Ed25519`, Size is ignored. No other
                                          values are allowed.
                                        type: integer
                                    type: object
                                  renewBefore:
                                    description: How long before the currently issued
                                      certificate's expiry cert-manager should renew
                                      the certificate. The default is 2/3 of the issued
                                      certificate's duration. Minimum accepted value
                                      is 5 minutes. Value must be in units accepted
                                      by Go time.ParseDuration https://golang.org/pkg/time/#ParseDuration
                                    type: string
                                  revisionHistoryLimit:
                                    description: revisionHistoryLimit is the maximum
                                      number of CertificateRequest revisions that
                                      are maintained in the Certificate's history.
                                      Each revision represents a single `CertificateRequest`
                                      created by this Certificate, either when it
                                      was created, renewed, or Spec was changed. Revisions
                                      will be removed by oldest first if the number
                                      of revisions exceeds this number. If set, revisionHistoryLimit
                                      must be a value of `1` or greater. If unset
                                      (`nil`), revisions will not be garbage collected.
                                      Default value is `nil`.
                                    format: int32
                                    type: integer
                                  secretName:
                                    description: 'SecretName is the name of the secret
                                      resource that will be automatically created
                                      and managed by this Certificate resource. It
                                      will be populated with a private key and certificate,
                                      signed by the denoted issuer. IMPORTANT: this
                                      field was required in the original cert-manager
                                      API declaration'
                                    type: string
                                  subject:
                                    description: Full X509 name specification (https://golang.org/pkg/crypto/x509/pkix/#Name).
                                    properties:
                                      countries:
                                        description: Countries to be used on the Certificate.
                                        items:
                                          type: string
                                        type: array
                                      localities:
                                        description: Cities to be used on the Certificate.
                                        items:
                                          type: string
                                        type: array
                                      organizationalUnits:
                                        description: Organizational Units to be used
                                          on the Certificate.
                                        items:
                                          type: string
                                        type: array
                                      organizations:
                                        description: Organizations to be used on the
                                          Certificate.
                                        items:
                                          type: string
                                        type: array
                                      postalCodes:
                                        description: Postal codes to be used on the
                                          Certificate.
                                        items:
                                          type: string
                                        type: array
                                      provinces:
                                        description: State/Provinces to be used on
                                          the Certificate.
                                        items:
                                          type: string
                                        type: array
                                      serialNumber:
                                        description: Serial number to be used on the
                                          Certificate.
                                        type: string
                                      streetAddresses:
                                        description: Street addresses to be used on
                                          the Certificate.
                                        items:
                                          type: string
                                        type: array
                                    type: object
                                  uris:
                                    description: URIs is a list of URI subjectAltNames
                                      to be set on the Certificate.
                                    items:
                                      type: string
                                    type: array
                                  usages:
                                    description: Usages is the set of x509 usages
                                      that are requested for the certificate. Defaults
                                      to `digital signature` and `key encipherment`
                                      if not specified.
                                    items:
                                      description: "KeyUsage specifies valid usage
                                        contexts for keys. See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3
                                        \n https://tools.ietf.org/html/rfc5280#section-4.2.1.12
                                        \n Valid KeyUsage values are as follows: \"signing\",
                                        \"digital signature\", \"content commitment\",
                                        \"key encipherment\", \"key agreement\", \"data
                                        encipherment\", \"cert sign\", \"crl sign\",
                                        \"encipher only\", \"decipher only\", \"any\",
                                        \"server auth\", \"client auth\", \"code signing\",
                                        \"email protection\", \"s/mime\", \"ipsec
                                        end system\", \"ipsec tunnel\", \"ipsec user\",
                                        \"timestamping\", \"ocsp signing\", \"microsoft
                                        sgc\", \"netscape sgc\""
                                      enum:
                                      - signing
                                      - digital signature
                                      - content commitment
                                      - key encipherment
                                      - key agreement
                                      - data encipherment
                                      - cert sign
                                      - crl sign
                                      - encipher only
                                      - decipher only
                                      - any
                                      - server auth
                                      - client auth
                                      - code signing
                                      - email protection
                                      - s/mime
                                      - ipsec end system
                                      - ipsec tunnel
                                      - ipsec user
                                      - timestamping
                                      - ocsp signing
                                      - microsoft sgc
                                      - netscape sgc
                                      type: string
                                    type: array
                                required:
                                - issuerRef
                                type: object
                            required:
                            - spec
                            type: object
                          preProvisioned:
                            description: PreProvisioned contains how to fetch the
                              pre-generated client certificates
                            properties:
                              streamingReplica:
                                description: StreamingReplica the pre-generated certificate
                                  for 'streaming_replica' user
                                properties:
                                  secretRef:
                                    description: SecretRef a name pointing to a secret
                                      that contains a tls.crt and tls.key
                                    type: string
                                type: object
                            type: object
                        required:
                        - caCertSecret
                        type: object
                      mode:
                        default: verify-ca
                        description: TLSMode describes which mode should be used for
                          the node to node communications
                        enum:
                        - verify-ca
                        - verify-full
                        - require
                        type: string
                      serverCert:
                        description: The configuration for the server certificates
                        properties:
                          caCertSecret:
                            description: CACertSecret is the secret of the CA to be
                              injected into the CloudNativePG configuration
                            type: string
                          certManager:
                            description: The cert-manager template used to generate
                              the certificates
                            properties:
                              metadata:
                                description: The label and annotations metadata
                                properties:
                                  annotations:
                                    additionalProperties:
                                      type: string
                                    description: 'Annotations is an unstructured key
                                      value map stored with a resource that may be
                                      set by external tools to store and retrieve
                                      arbitrary metadata. They are not queryable and
                                      should be preserved when modifying objects.
                                      More info: http://kubernetes.io/docs/user-guide/annotations'
                                    type: object
                                  labels:
                                    additionalProperties:
                                      type: string
                                    description: 'Map of string keys and values that
                                      can be used to organize and categorize (scope
                                      and select) objects. May match selectors of
                                      replication controllers and services. More info:
                                      http://kubernetes.io/docs/user-guide/labels'
                                    type: object
                                type: object
                              spec:
                                description: The Certificate object specification
                                properties:
                                  commonName:
                                    description: 'CommonName is a common name to be
                                      used on the Certificate. The CommonName should
                                      have a length of 64 characters or fewer to avoid
                                      generating invalid CSRs. This value is ignored
                                      by TLS clients when any subject alt name is
                                      set. This is x509 behaviour: https://tools.ietf.org/html/rfc6125#section-6.4.4'
                                    type: string
                                  dnsNames:
                                    description: DNSNames is a list of DNS subjectAltNames
                                      to be set on the Certificate.
                                    items:
                                      type: string
                                    type: array
                                  duration:
                                    description: The requested 'duration' (i.e. lifetime)
                                      of the Certificate. This option may be ignored/overridden
                                      by some issuer types. If unset this defaults
                                      to 90 days. Certificate will be renewed either
                                      2/3 through its duration or `renewBefore` period
                                      before its expiry, whichever is later. Minimum
                                      accepted duration is 1 hour. Value must be in
                                      units accepted by Go time.ParseDuration https://golang.org/pkg/time/#ParseDuration
                                    type: string
                                  emailAddresses:
                                    description: EmailAddresses is a list of email
                                      subjectAltNames to be set on the Certificate.
                                    items:
                                      type: string
                                    type: array
                                  encodeUsagesInRequest:
                                    description: EncodeUsagesInRequest controls whether
                                      key usages should be present in the CertificateRequest
                                    type: boolean
                                  ipAddresses:
                                    description: IPAddresses is a list of IP address
                                      subjectAltNames to be set on the Certificate.
                                    items:
                                      type: string
                                    type: array
                                  isCA:
                                    description: IsCA will mark this Certificate as
                                      valid for certificate signing. This will automatically
                                      add the `cert sign` usage to the list of `usages`.
                                    type: boolean
                                  issuerRef:
                                    description: IssuerRef is a reference to the issuer
                                      for this certificate. If the `kind` field is
                                      not set, or set to `Issuer`, an Issuer resource
                                      with the given name in the same namespace as
                                      the Certificate will be used. If the `kind`
                                      field is set to `ClusterIssuer`, a ClusterIssuer
                                      with the provided name will be used. The `name`
                                      field in this stanza is required at all times.
                                    properties:
                                      group:
                                        description: Group of the resource being referred
                                          to.
                                        type: string
                                      kind:
                                        description: Kind of the resource being referred
                                          to.
                                        type: string
                                      name:
                                        description: Name of the resource being referred
                                          to.
                                        type: string
                                    required:
                                    - name
                                    type: object
                                  keystores:
                                    description: Keystores configures additional keystore
                                      output formats stored in the `secretName` Secret
                                      resource.
                                    properties:
                                      jks:
                                        description: JKS configures options for storing
                                          a JKS keystore in the `spec.secretName`
                                          Secret resource.
                                        properties:
                                          create:
                                            description: Create enables JKS keystore
                                              creation for the Certificate. If true,
                                              a file named `keystore.jks` will be
                                              created in the target Secret resource,
                                              encrypted using the password stored
                                              in `passwordSecretRef`. The keystore
                                              file will only be updated upon re-issuance.
                                              A file named `truststore.jks` will also
                                              be created in the target Secret resource,
                                              encrypted using the password stored
                                              in `passwordSecretRef` containing the
                                              issuing Certificate Authority
                                            type: boolean
                                          passwordSecretRef:
                                            description: PasswordSecretRef is a reference
                                              to a key in a Secret resource containing
                                              the password used to encrypt the JKS
                                              keystore.
                                            properties:
                                              key:
                                                description: The key of the entry
                                                  in the Secret resource's `data`
                                                  field to be used. Some instances
                                                  of this field may be defaulted,
                                                  in others it may be required.
                                                type: string
                                              name:
                                                description: 'Name of the resource
                                                  being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                                type: string
                                            required:
                                            - name
                                            type: object
                                        required:
                                        - create
                                        - passwordSecretRef
                                        type: object
                                      pkcs12:
                                        description: PKCS12 configures options for
                                          storing a PKCS12 keystore in the `spec.secretName`
                                          Secret resource.
                                        properties:
                                          create:
                                            description: Create enables PKCS12 keystore
                                              creation for the Certificate. If true,
                                              a file named `keystore.p12` will be
                                              created in the target Secret resource,
                                              encrypted using the password stored
                                              in `passwordSecretRef`. The keystore
                                              file will only be updated upon re-issuance.
                                              A file named `truststore.p12` will also
                                              be created in the target Secret resource,
                                              encrypted using the password stored
                                              in `passwordSecretRef` containing the
                                              issuing Certificate Authority
                                            type: boolean
                                          passwordSecretRef:
                                            description: PasswordSecretRef is a reference
                                              to a key in a Secret resource containing
                                              the password used to encrypt the PKCS12
                                              keystore.
                                            properties:
                                              key:
                                                description: The key of the entry
                                                  in the Secret resource's `data`
                                                  field to be used. Some instances
                                                  of this field may be defaulted,
                                                  in others it may be required.
                                                type: string
                                              name:
                                                description: 'Name of the resource
                                                  being referred to. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names'
                                                type: string
                                            required:
                                            - name
                                            type: object
                                        required:
                                        - create
                                        - passwordSecretRef
                                        type: object
                                    type: object
                                  privateKey:
                                    description: Options to control private keys used
                                      for the Certificate.
                                    properties:
                                      algorithm:
                                        description: Algorithm is the private key
                                          algorithm of the corresponding private key
                                          for this certificate. If provided, allowed
                                          values are either `RSA`,`Ed25519` or `ECDSA`
                                          If `algorithm` is specified and `size` is
                                          not provided, key size of 256 will be used
                                          for `ECDSA` key algorithm and key size of
                                          2048 will be used for `RSA` key algorithm.
                                          key size is ignored when using the `Ed25519`
                                          key algorithm.
                                        enum:
                                        - RSA
                                        - ECDSA
                                        - Ed25519
                                        type: string
                                      encoding:
                                        description: The private key cryptography
                                          standards (PKCS) encoding for this certificate's
                                          private key to be encoded in. If provided,
                                          allowed values are `PKCS1` and `PKCS8` standing
                                          for PKCS#1 and PKCS#8, respectively. Defaults
                                          to `PKCS1` if not specified.
                                        enum:
                                        - PKCS1
                                        - PKCS8
                                        type: string
                                      rotationPolicy:
                                        description: RotationPolicy controls how private
                                          keys should be regenerated when a re-issuance
                                          is being processed. If set to Never, a private
                                          key will only be generated if one does not
                                          already exist in the target `spec.secretName`.
                                          If one does exists but it does not have
                                          the correct algorithm or size, a warning
                                          will be raised to await user intervention.
                                          If set to Always, a private key matching
                                          the specified requirements will be generated
                                          whenever a re-issuance occurs. Default is
                                          'Never' for backward compatibility.
                                        type: string
                                      size:
                                        description: Size is the key bit size of the
                                          corresponding private key for this certificate.
                                          If `algorithm` is set to `RSA`, valid values
                                          are `2048`, `4096` or `8192`, and will default
                                          to `2048` if not specified. If `algorithm`
                                          is set to `ECDSA`, valid values are `256`,
                                          `384` or `521`, and will default to `256`
                                          if not specified. If `algorithm` is set
                                          to `Ed25519`, Size is ignored. No other
                                          values are allowed.
                                        type: integer
                                    type: object
                                  renewBefore:
                                    description: How long before the currently issued
                                      certificate's expiry cert-manager should renew
                                      the certificate. The default is 2/3 of the issued
                                      certificate's duration. Minimum accepted value
                                      is 5 minutes. Value must be in units accepted
                                      by Go time.ParseDuration https://golang.org/pkg/time/#ParseDuration
                                    type: string
                                  revisionHistoryLimit:
                                    description: revisionHistoryLimit is the maximum
                                      number of CertificateRequest revisions that
                                      are maintained in the Certificate's history.
                                      Each revision represents a single `CertificateRequest`
                                      created by this Certificate, either when it
                                      was created, renewed, or Spec was changed. Revisions
                                      will be removed by oldest first if the number
                                      of revisions exceeds this number. If set, revisionHistoryLimit
                                      must be a value of `1` or greater. If unset
                                      (`nil`), revisions will not be garbage collected.
                                      Default value is `nil`.
                                    format: int32
                                    type: integer
                                  secretName:
                                    description: 'SecretName is the name of the secret
                                      resource that will be automatically created
                                      and managed by this Certificate resource. It
                                      will be populated with a private key and certificate,
                                      signed by the denoted issuer. IMPORTANT: this
                                      field was required in the original cert-manager
                                      API declaration'
                                    type: string
                                  subject:
                                    description: Full X509 name specification (https://golang.org/pkg/crypto/x509/pkix/#Name).
                                    properties:
                                      countries:
                                        description: Countries to be used on the Certificate.
                                        items:
                                          type: string
                                        type: array
                                      localities:
                                        description: Cities to be used on the Certificate.
                                        items:
                                          type: string
                                        type: array
                                      organizationalUnits:
                                        description: Organizational Units to be used
                                          on the Certificate.
                                        items:
                                          type: string
                                        type: array
                                      organizations:
                                        description: Organizations to be used on the
                                          Certificate.
                                        items:
                                          type: string
                                        type: array
                                      postalCodes:
                                        description: Postal codes to be used on the
                                          Certificate.
                                        items:
                                          type: string
                                        type: array
                                      provinces:
                                        description: State/Provinces to be used on
                                          the Certificate.
                                        items:
                                          type: string
                                        type: array
                                      serialNumber:
                                        description: Serial number to be used on the
                                          Certificate.
                                        type: string
                                      streetAddresses:
                                        description: Street addresses to be used on
                                          the Certificate.
                                        items:
                                          type: string
                                        type: array
                                    type: object
                                  uris:
                                    description: URIs is a list of URI subjectAltNames
                                      to be set on the Certificate.
                                    items:
                                      type: string
                                    type: array
                                  usages:
                                    description: Usages is the set of x509 usages
                                      that are requested for the certificate. Defaults
                                      to `digital signature` and `key encipherment`
                                      if not specified.
                                    items:
                                      description: "KeyUsage specifies valid usage
                                        contexts for keys. See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3
                                        \n https://tools.ietf.org/html/rfc5280#section-4.2.1.12
                                        \n Valid KeyUsage values are as follows: \"signing\",
                                        \"digital signature\", \"content commitment\",
                                        \"key encipherment\", \"key agreement\", \"data
                                        encipherment\", \"cert sign\", \"crl sign\",
                                        \"encipher only\", \"decipher only\", \"any\",
                                        \"server auth\", \"client auth\", \"code signing\",
                                        \"email protection\", \"s/mime\", \"ipsec
                                        end system\", \"ipsec tunnel\", \"ipsec user\",
                                        \"timestamping\", \"ocsp signing\", \"microsoft
                                        sgc\", \"netscape sgc\""
                                      enum:
                                      - signing
                                      - digital signature
                                      - content commitment
                                      - key encipherment
                                      - key agreement
                                      - data encipherment
                                      - cert sign
                                      - crl sign
                                      - encipher only
                                      - decipher only
                                      - any
                                      - server auth
                                      - client auth
                                      - code signing
                                      - email protection
                                      - s/mime
                                      - ipsec end system
                                      - ipsec tunnel
                                      - ipsec user
                                      - timestamping
                                      - ocsp signing
                                      - microsoft sgc
                                      - netscape sgc
                                      type: string
                                    type: array
                                required:
                                - issuerRef
                                type: object
                            required:
                            - spec
                            type: object
                        required:
                        - caCertSecret
                        - certManager
                        type: object
                    required:
                    - clientCert
                    - mode
                    - serverCert
                    type: object
                required:
                - tls
                type: object
              failingFinalizerTimeLimitSeconds:
                default: 300
                description: The amount of seconds that the operator will wait in
                  case of a failing finalizer. A finalizer is considered failing when
                  the operator cannot reach any nodes of the PGDGroup
                format: int32
                type: integer
              imageName:
                description: Name of the container image, supporting both tags (`<image>:<tag>`)
                  and digests for deterministic and repeatable deployments (`<image>:<tag>@sha256:<digestValue>`)
                type: string
              imagePullPolicy:
                default: IfNotPresent
                description: 'Image pull policy. One of `Always`, `Never` or `IfNotPresent`.
                  If not defined, it defaults to `IfNotPresent`. Cannot be updated.
                  More info: https://kubernetes.io/docs/concepts/containers/images#updating-images'
                type: string
              imagePullSecrets:
                description: The list of pull secrets to be used to pull operator
                  and or the operand images
                items:
                  description: LocalObjectReference contains enough information to
                    let you locate the referenced object inside the same namespace.
                  properties:
                    name:
                      description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                        TODO: Add other useful fields. apiVersion, kind, uid?'
                      type: string
                  type: object
                  x-kubernetes-map-type: atomic
                type: array
              inheritedMetadata:
                description: Metadata that will be inherited by all objects related
                  to the pgdGroup
                properties:
                  annotations:
                    additionalProperties:
                      type: string
                    type: object
                  labels:
                    additionalProperties:
                      type: string
                    type: object
                type: object
              instances:
                description: Number of instances required in the cluster
                format: int32
                minimum: 0
                type: integer
              pgd:
                description: Pgd contains instructions to bootstrap this cluster
                properties:
                  databaseName:
                    description: 'Name of the database used by the application. Default:
                      `app`.'
                    type: string
                  discovery:
                    description: 'The parameters we will use to connect to a node
                      belonging to the parent PGD group. Even if provided, the following
                      parameters will be overridden with default values: `application_name`,
                      `sslmode`, `dbname` and `user`. The following parameters should
                      not be provided nor used, as they are not even overridden with
                      defaults:`sslkey`, `sslcert`, `sslrootcert`'
                    items:
                      additionalProperties:
                        type: string
                      description: ConnectionString represent the parameters to connect
                        to a PostgreSQL cluster
                      type: object
                    type: array
                  discoveryJob:
                    default:
                      delay: 10
                      retries: 30
                      timeout: 300
                    description: DiscoveryJob the configuration of the PGD Discovery
                      job
                    properties:
                      delay:
                        default: 10
                        description: Delay amount of time to sleep between retries,
                          measured in seconds
                        type: integer
                      retries:
                        default: 30
                        description: Retries how many times the operation should be
                          retried
                        type: integer
                      timeout:
                        default: 300
                        description: Timeout amount of time given to the operation
                          to succeed, measured in seconds
                        type: integer
                    type: object
                  globalRouting:
                    default: false
                    description: GlobalRouting is true when global routing is enabled,
                      and in this case the proxies will be created in the parent group
                    type: boolean
                  mutations:
                    description: List of SQL mutations to apply to the node group
                    items:
                      description: SQLMutation is a series of SQL statements to apply
                        atomically
                      properties:
                        exec:
                          description: List of SQL queries to be executed to apply
                            this mutation
                          items:
                            type: string
                          minItems: 1
                          type: array
                        isApplied:
                          description: List of boolean-returning SQL queries. If any
                            of them returns false the mutation will be applied
                          items:
                            type: string
                          minItems: 1
                          type: array
                        type:
                          default: always
                          description: 'Type determines when the SQLMutation occurs.
                            ''always'': reconcile the mutation at each reconciliation
                            cycle ''beforeSubgroupRaft'': are executed only before
                            the subgroupRaft is enabled If not specified, the Type
                            defaults to ''always''.'
                          enum:
                          - always
                          - beforeSubgroupRaft
                          type: string
                      required:
                      - exec
                      - isApplied
                      type: object
                    type: array
                  nodeGroupSettings:
                    description: Configuration for the PGD Group
                    properties:
                      routeReaderMaxLag:
                        default: -1
                        description: RouteReaderMaxLag Maximum lag in bytes for node
                          to be considered viable read-only node Defaults to -1
                        format: int64
                        type: integer
                      routeWriterMaxLag:
                        default: -1
                        description: RouteWriterMaxLag Maximum lag in bytes of the
                          new write candidate to be selected as write leader, if no
                          candidate passes this, there will be no writer selected
                          automatically Defaults to -1
                        format: int64
                        type: integer
                      routeWriterWaitFlush:
                        default: false
                        description: RouteWriterWaitFlush Whether to wait for replication
                          queue flush before switching to new leader when using `bdr.routing_leadership_transfer()`
                          Defaults to false
                        type: boolean
                    type: object
                  ownerCredentialsSecret:
                    description: Name of the secret containing the initial credentials
                      for the owner of the user database. If empty a new secret will
                      be created from scratch
                    properties:
                      name:
                        description: Name of the referent.
                        type: string
                    required:
                    - name
                    type: object
                  ownerName:
                    description: Name of the owner of the database in the instance
                      to be used by applications. Defaults to the value of the `database`
                      key.
                    type: string
                  parentGroup:
                    description: ParentGroup configures the topology of the PGD group
                    properties:
                      create:
                        default: false
                        description: Create is true when the operator should create
                          the parent group if it doesn't exist
                        type: boolean
                      name:
                        description: Name of the parent group
                        minLength: 1
                        type: string
                    required:
                    - name
                    type: object
                  proxySettings:
                    default:
                      fallbackGroupTimeout: 60
                      maxClientConn: 32767
                      maxServerConn: 32767
                      serverConnKeepalive: 10
                      serverConnTimeout: 2
                    description: Configuration for the proxy
                    properties:
                      consensusGracePeriod:
                        default: 6
                        description: ConsensusGracePeriod the duration in seconds
                          for which proxy continues to route even upon loss of a Raft
                          leader. If set to 0s, proxy stops routing immediately. Defaults
                          to 6
                        format: int64
                        type: integer
                      fallbackGroupTimeout:
                        default: 60
                        description: FallbackGroupTimeout the interval after which
                          the routing falls back to one of the fallback_groups. Defaults
                          to 60
                        format: int64
                        type: integer
                      fallbackGroups:
                        description: FallbackGroups is the list of groups the proxy
                          should forward connection to when all the data nodes of
                          this PGD group are not available
                        items:
                          type: string
                        type: array
                      maxClientConn:
                        default: 32767
                        description: MaxClientConn maximum number of connections the
                          proxy will accept. Defaults to 32767
                        type: integer
                      maxServerConn:
                        default: 32767
                        description: MaxServerConn maximum number of connections the
                          proxy will make to the Postgres node. Defaults to 32767
                        type: integer
                      serverConnKeepalive:
                        default: 10
                        description: ServerConnKeepalive keepalive interval for server
                          connections in seconds. Defaults to 10
                        format: int64
                        type: integer
                      serverConnTimeout:
                        default: 2
                        description: ServerConnTimeout connection timeout for server
                          connections in seconds. Defaults to 2
                        format: int64
                        type: integer
                    type: object
                required:
                - parentGroup
                type: object
              pgdProxy:
                description: PGDProxy contains instructions to configure PGD Proxy
                properties:
                  imageName:
                    description: Name of the PGDProxy container image
                    type: string
                  logEncoder:
                    default: json
                    description: The format of the log output
                    enum:
                    - text
                    - json
                    type: string
                  logLevel:
                    default: info
                    description: 'The PGD Proxy log level, one of the following values:
                      error, warning, info (default), debug, trace'
                    enum:
                    - error
                    - warning
                    - info
                    - debug
                    - trace
                    type: string
                  proxyAffinity:
                    description: ProxyAffinity/Anti-affinity rules for pods
                    properties:
                      nodeAffinity:
                        description: Describes node affinity scheduling rules for
                          the pod.
                        properties:
                          preferredDuringSchedulingIgnoredDuringExecution:
                            description: The scheduler will prefer to schedule pods
                              to nodes that satisfy the affinity expressions specified
                              by this field, but it may choose a node that violates
                              one or more of the expressions. The node that is most
                              preferred is the one with the greatest sum of weights,
                              i.e. for each node that meets all of the scheduling
                              requirements (resource request, requiredDuringScheduling
                              affinity expressions, etc.), compute a sum by iterating
                              through the elements of this field and adding "weight"
                              to the sum if the node matches the corresponding matchExpressions;
                              the node(s) with the highest sum are the most preferred.
                            items:
                              description: An empty preferred scheduling term matches
                                all objects with implicit weight 0 (i.e. it's a no-op).
                                A null preferred scheduling term matches no objects
                                (i.e. is also a no-op).
                              properties:
                                preference:
                                  description: A node selector term, associated with
                                    the corresponding weight.
                                  properties:
                                    matchExpressions:
                                      description: A list of node selector requirements
                                        by node's labels.
                                      items:
                                        description: A node selector requirement is
                                          a selector that contains values, a key,
                                          and an operator that relates the key and
                                          values.
                                        properties:
                                          key:
                                            description: The label key that the selector
                                              applies to.
                                            type: string
                                          operator:
                                            description: Represents a key's relationship
                                              to a set of values. Valid operators
                                              are In, NotIn, Exists, DoesNotExist.
                                              Gt, and Lt.
                                            type: string
                                          values:
                                            description: An array of string values.
                                              If the operator is In or NotIn, the
                                              values array must be non-empty. If the
                                              operator is Exists or DoesNotExist,
                                              the values array must be empty. If the
                                              operator is Gt or Lt, the values array
                                              must have a single element, which will
                                              be interpreted as an integer. This array
                                              is replaced during a strategic merge
                                              patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                    matchFields:
                                      description: A list of node selector requirements
                                        by node's fields.
                                      items:
                                        description: A node selector requirement is
                                          a selector that contains values, a key,
                                          and an operator that relates the key and
                                          values.
                                        properties:
                                          key:
                                            description: The label key that the selector
                                              applies to.
                                            type: string
                                          operator:
                                            description: Represents a key's relationship
                                              to a set of values. Valid operators
                                              are In, NotIn, Exists, DoesNotExist.
                                              Gt, and Lt.
                                            type: string
                                          values:
                                            description: An array of string values.
                                              If the operator is In or NotIn, the
                                              values array must be non-empty. If the
                                              operator is Exists or DoesNotExist,
                                              the values array must be empty. If the
                                              operator is Gt or Lt, the values array
                                              must have a single element, which will
                                              be interpreted as an integer. This array
                                              is replaced during a strategic merge
                                              patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                  type: object
                                  x-kubernetes-map-type: atomic
                                weight:
                                  description: Weight associated with matching the
                                    corresponding nodeSelectorTerm, in the range 1-100.
                                  format: int32
                                  type: integer
                              required:
                              - preference
                              - weight
                              type: object
                            type: array
                          requiredDuringSchedulingIgnoredDuringExecution:
                            description: If the affinity requirements specified by
                              this field are not met at scheduling time, the pod will
                              not be scheduled onto the node. If the affinity requirements
                              specified by this field cease to be met at some point
                              during pod execution (e.g. due to an update), the system
                              may or may not try to eventually evict the pod from
                              its node.
                            properties:
                              nodeSelectorTerms:
                                description: Required. A list of node selector terms.
                                  The terms are ORed.
                                items:
                                  description: A null or empty node selector term
                                    matches no objects. The requirements of them are
                                    ANDed. The TopologySelectorTerm type implements
                                    a subset of the NodeSelectorTerm.
                                  properties:
                                    matchExpressions:
                                      description: A list of node selector requirements
                                        by node's labels.
                                      items:
                                        description: A node selector requirement is
                                          a selector that contains values, a key,
                                          and an operator that relates the key and
                                          values.
                                        properties:
                                          key:
                                            description: The label key that the selector
                                              applies to.
                                            type: string
                                          operator:
                                            description: Represents a key's relationship
                                              to a set of values. Valid operators
                                              are In, NotIn, Exists, DoesNotExist.
                                              Gt, and Lt.
                                            type: string
                                          values:
                                            description: An array of string values.
                                              If the operator is In or NotIn, the
                                              values array must be non-empty. If the
                                              operator is Exists or DoesNotExist,
                                              the values array must be empty. If the
                                              operator is Gt or Lt, the values array
                                              must have a single element, which will
                                              be interpreted as an integer. This array
                                              is replaced during a strategic merge
                                              patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                    matchFields:
                                      description: A list of node selector requirements
                                        by node's fields.
                                      items:
                                        description: A node selector requirement is
                                          a selector that contains values, a key,
                                          and an operator that relates the key and
                                          values.
                                        properties:
                                          key:
                                            description: The label key that the selector
                                              applies to.
                                            type: string
                                          operator:
                                            description: Represents a key's relationship
                                              to a set of values. Valid operators
                                              are In, NotIn, Exists, DoesNotExist.
                                              Gt, and Lt.
                                            type: string
                                          values:
                                            description: An array of string values.
                                              If the operator is In or NotIn, the
                                              values array must be non-empty. If the
                                              operator is Exists or DoesNotExist,
                                              the values array must be empty. If the
                                              operator is Gt or Lt, the values array
                                              must have a single element, which will
                                              be interpreted as an integer. This array
                                              is replaced during a strategic merge
                                              patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                  type: object
                                  x-kubernetes-map-type: atomic
                                type: array
                            required:
                            - nodeSelectorTerms
                            type: object
                            x-kubernetes-map-type: atomic
                        type: object
                      podAffinity:
                        description: Describes pod affinity scheduling rules (e.g.
                          co-locate this pod in the same node, zone, etc. as some
                          other pod(s)).
                        properties:
                          preferredDuringSchedulingIgnoredDuringExecution:
                            description: The scheduler will prefer to schedule pods
                              to nodes that satisfy the affinity expressions specified
                              by this field, but it may choose a node that violates
                              one or more of the expressions. The node that is most
                              preferred is the one with the greatest sum of weights,
                              i.e. for each node that meets all of the scheduling
                              requirements (resource request, requiredDuringScheduling
                              affinity expressions, etc.), compute a sum by iterating
                              through the elements of this field and adding "weight"
                              to the sum if the node has pods which matches the corresponding
                              podAffinityTerm; the node(s) with the highest sum are
                              the most preferred.
                            items:
                              description: The weights of all of the matched WeightedPodAffinityTerm
                                fields are added per-node to find the most preferred
                                node(s)
                              properties:
                                podAffinityTerm:
                                  description: Required. A pod affinity term, associated
                                    with the corresponding weight.
                                  properties:
                                    labelSelector:
                                      description: A label query over a set of resources,
                                        in this case pods. If it's null, this PodAffinityTerm
                                        matches with no Pods.
                                      properties:
                                        matchExpressions:
                                          description: matchExpressions is a list
                                            of label selector requirements. The requirements
                                            are ANDed.
                                          items:
                                            description: A label selector requirement
                                              is a selector that contains values,
                                              a key, and an operator that relates
                                              the key and values.
                                            properties:
                                              key:
                                                description: key is the label key
                                                  that the selector applies to.
                                                type: string
                                              operator:
                                                description: operator represents a
                                                  key's relationship to a set of values.
                                                  Valid operators are In, NotIn, Exists
                                                  and DoesNotExist.
                                                type: string
                                              values:
                                                description: values is an array of
                                                  string values. If the operator is
                                                  In or NotIn, the values array must
                                                  be non-empty. If the operator is
                                                  Exists or DoesNotExist, the values
                                                  array must be empty. This array
                                                  is replaced during a strategic merge
                                                  patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                        matchLabels:
                                          additionalProperties:
                                            type: string
                                          description: matchLabels is a map of {key,value}
                                            pairs. A single {key,value} in the matchLabels
                                            map is equivalent to an element of matchExpressions,
                                            whose key field is "key", the operator
                                            is "In", and the values array contains
                                            only "value". The requirements are ANDed.
                                          type: object
                                      type: object
                                      x-kubernetes-map-type: atomic
                                    matchLabelKeys:
                                      description: MatchLabelKeys is a set of pod
                                        label keys to select which pods will be taken
                                        into consideration. The keys are used to lookup
                                        values from the incoming pod labels, those
                                        key-value labels are merged with `LabelSelector`
                                        as `key in (value)` to select the group of
                                        existing pods which pods will be taken into
                                        consideration for the incoming pod's pod (anti)
                                        affinity. Keys that don't exist in the incoming
                                        pod labels will be ignored. The default value
                                        is empty. The same key is forbidden to exist
                                        in both MatchLabelKeys and LabelSelector.
                                        Also, MatchLabelKeys cannot be set when LabelSelector
                                        isn't set. This is an alpha field and requires
                                        enabling MatchLabelKeysInPodAffinity feature
                                        gate.
                                      items:
                                        type: string
                                      type: array
                                      x-kubernetes-list-type: atomic
                                    mismatchLabelKeys:
                                      description: MismatchLabelKeys is a set of pod
                                        label keys to select which pods will be taken
                                        into consideration. The keys are used to lookup
                                        values from the incoming pod labels, those
                                        key-value labels are merged with `LabelSelector`
                                        as `key notin (value)` to select the group
                                        of existing pods which pods will be taken
                                        into consideration for the incoming pod's
                                        pod (anti) affinity. Keys that don't exist
                                        in the incoming pod labels will be ignored.
                                        The default value is empty. The same key is
                                        forbidden to exist in both MismatchLabelKeys
                                        and LabelSelector. Also, MismatchLabelKeys
                                        cannot be set when LabelSelector isn't set.
                                        This is an alpha field and requires enabling
                                        MatchLabelKeysInPodAffinity feature gate.
                                      items:
                                        type: string
                                      type: array
                                      x-kubernetes-list-type: atomic
                                    namespaceSelector:
                                      description: A label query over the set of namespaces
                                        that the term applies to. The term is applied
                                        to the union of the namespaces selected by
                                        this field and the ones listed in the namespaces
                                        field. null selector and null or empty namespaces
                                        list means "this pod's namespace". An empty
                                        selector ({}) matches all namespaces.
                                      properties:
                                        matchExpressions:
                                          description: matchExpressions is a list
                                            of label selector requirements. The requirements
                                            are ANDed.
                                          items:
                                            description: A label selector requirement
                                              is a selector that contains values,
                                              a key, and an operator that relates
                                              the key and values.
                                            properties:
                                              key:
                                                description: key is the label key
                                                  that the selector applies to.
                                                type: string
                                              operator:
                                                description: operator represents a
                                                  key's relationship to a set of values.
                                                  Valid operators are In, NotIn, Exists
                                                  and DoesNotExist.
                                                type: string
                                              values:
                                                description: values is an array of
                                                  string values. If the operator is
                                                  In or NotIn, the values array must
                                                  be non-empty. If the operator is
                                                  Exists or DoesNotExist, the values
                                                  array must be empty. This array
                                                  is replaced during a strategic merge
                                                  patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                        matchLabels:
                                          additionalProperties:
                                            type: string
                                          description: matchLabels is a map of {key,value}
                                            pairs. A single {key,value} in the matchLabels
                                            map is equivalent to an element of matchExpressions,
                                            whose key field is "key", the operator
                                            is "In", and the values array contains
                                            only "value". The requirements are ANDed.
                                          type: object
                                      type: object
                                      x-kubernetes-map-type: atomic
                                    namespaces:
                                      description: namespaces specifies a static list
                                        of namespace names that the term applies to.
                                        The term is applied to the union of the namespaces
                                        listed in this field and the ones selected
                                        by namespaceSelector. null or empty namespaces
                                        list and null namespaceSelector means "this
                                        pod's namespace".
                                      items:
                                        type: string
                                      type: array
                                    topologyKey:
                                      description: This pod should be co-located (affinity)
                                        or not co-located (anti-affinity) with the
                                        pods matching the labelSelector in the specified
                                        namespaces, where co-located is defined as
                                        running on a node whose value of the label
                                        with key topologyKey matches that of any node
                                        on which any of the selected pods is running.
                                        Empty topologyKey is not allowed.
                                      type: string
                                  required:
                                  - topologyKey
                                  type: object
                                weight:
                                  description: weight associated with matching the
                                    corresponding podAffinityTerm, in the range 1-100.
                                  format: int32
                                  type: integer
                              required:
                              - podAffinityTerm
                              - weight
                              type: object
                            type: array
                          requiredDuringSchedulingIgnoredDuringExecution:
                            description: If the affinity requirements specified by
                              this field are not met at scheduling time, the pod will
                              not be scheduled onto the node. If the affinity requirements
                              specified by this field cease to be met at some point
                              during pod execution (e.g. due to a pod label update),
                              the system may or may not try to eventually evict the
                              pod from its node. When there are multiple elements,
                              the lists of nodes corresponding to each podAffinityTerm
                              are intersected, i.e. all terms must be satisfied.
                            items:
                              description: Defines a set of pods (namely those matching
                                the labelSelector relative to the given namespace(s))
                                that this pod should be co-located (affinity) or not
                                co-located (anti-affinity) with, where co-located
                                is defined as running on a node whose value of the
                                label with key <topologyKey> matches that of any node
                                on which a pod of the set of pods is running
                              properties:
                                labelSelector:
                                  description: A label query over a set of resources,
                                    in this case pods. If it's null, this PodAffinityTerm
                                    matches with no Pods.
                                  properties:
                                    matchExpressions:
                                      description: matchExpressions is a list of label
                                        selector requirements. The requirements are
                                        ANDed.
                                      items:
                                        description: A label selector requirement
                                          is a selector that contains values, a key,
                                          and an operator that relates the key and
                                          values.
                                        properties:
                                          key:
                                            description: key is the label key that
                                              the selector applies to.
                                            type: string
                                          operator:
                                            description: operator represents a key's
                                              relationship to a set of values. Valid
                                              operators are In, NotIn, Exists and
                                              DoesNotExist.
                                            type: string
                                          values:
                                            description: values is an array of string
                                              values. If the operator is In or NotIn,
                                              the values array must be non-empty.
                                              If the operator is Exists or DoesNotExist,
                                              the values array must be empty. This
                                              array is replaced during a strategic
                                              merge patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                    matchLabels:
                                      additionalProperties:
                                        type: string
                                      description: matchLabels is a map of {key,value}
                                        pairs. A single {key,value} in the matchLabels
                                        map is equivalent to an element of matchExpressions,
                                        whose key field is "key", the operator is
                                        "In", and the values array contains only "value".
                                        The requirements are ANDed.
                                      type: object
                                  type: object
                                  x-kubernetes-map-type: atomic
                                matchLabelKeys:
                                  description: MatchLabelKeys is a set of pod label
                                    keys to select which pods will be taken into consideration.
                                    The keys are used to lookup values from the incoming
                                    pod labels, those key-value labels are merged
                                    with `LabelSelector` as `key in (value)` to select
                                    the group of existing pods which pods will be
                                    taken into consideration for the incoming pod's
                                    pod (anti) affinity. Keys that don't exist in
                                    the incoming pod labels will be ignored. The default
                                    value is empty. The same key is forbidden to exist
                                    in both MatchLabelKeys and LabelSelector. Also,
                                    MatchLabelKeys cannot be set when LabelSelector
                                    isn't set. This is an alpha field and requires
                                    enabling MatchLabelKeysInPodAffinity feature gate.
                                  items:
                                    type: string
                                  type: array
                                  x-kubernetes-list-type: atomic
                                mismatchLabelKeys:
                                  description: MismatchLabelKeys is a set of pod label
                                    keys to select which pods will be taken into consideration.
                                    The keys are used to lookup values from the incoming
                                    pod labels, those key-value labels are merged
                                    with `LabelSelector` as `key notin (value)` to
                                    select the group of existing pods which pods will
                                    be taken into consideration for the incoming pod's
                                    pod (anti) affinity. Keys that don't exist in
                                    the incoming pod labels will be ignored. The default
                                    value is empty. The same key is forbidden to exist
                                    in both MismatchLabelKeys and LabelSelector. Also,
                                    MismatchLabelKeys cannot be set when LabelSelector
                                    isn't set. This is an alpha field and requires
                                    enabling MatchLabelKeysInPodAffinity feature gate.
                                  items:
                                    type: string
                                  type: array
                                  x-kubernetes-list-type: atomic
                                namespaceSelector:
                                  description: A label query over the set of namespaces
                                    that the term applies to. The term is applied
                                    to the union of the namespaces selected by this
                                    field and the ones listed in the namespaces field.
                                    null selector and null or empty namespaces list
                                    means "this pod's namespace". An empty selector
                                    ({}) matches all namespaces.
                                  properties:
                                    matchExpressions:
                                      description: matchExpressions is a list of label
                                        selector requirements. The requirements are
                                        ANDed.
                                      items:
                                        description: A label selector requirement
                                          is a selector that contains values, a key,
                                          and an operator that relates the key and
                                          values.
                                        properties:
                                          key:
                                            description: key is the label key that
                                              the selector applies to.
                                            type: string
                                          operator:
                                            description: operator represents a key's
                                              relationship to a set of values. Valid
                                              operators are In, NotIn, Exists and
                                              DoesNotExist.
                                            type: string
                                          values:
                                            description: values is an array of string
                                              values. If the operator is In or NotIn,
                                              the values array must be non-empty.
                                              If the operator is Exists or DoesNotExist,
                                              the values array must be empty. This
                                              array is replaced during a strategic
                                              merge patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                    matchLabels:
                                      additionalProperties:
                                        type: string
                                      description: matchLabels is a map of {key,value}
                                        pairs. A single {key,value} in the matchLabels
                                        map is equivalent to an element of matchExpressions,
                                        whose key field is "key", the operator is
                                        "In", and the values array contains only "value".
                                        The requirements are ANDed.
                                      type: object
                                  type: object
                                  x-kubernetes-map-type: atomic
                                namespaces:
                                  description: namespaces specifies a static list
                                    of namespace names that the term applies to. The
                                    term is applied to the union of the namespaces
                                    listed in this field and the ones selected by
                                    namespaceSelector. null or empty namespaces list
                                    and null namespaceSelector means "this pod's namespace".
                                  items:
                                    type: string
                                  type: array
                                topologyKey:
                                  description: This pod should be co-located (affinity)
                                    or not co-located (anti-affinity) with the pods
                                    matching the labelSelector in the specified namespaces,
                                    where co-located is defined as running on a node
                                    whose value of the label with key topologyKey
                                    matches that of any node on which any of the selected
                                    pods is running. Empty topologyKey is not allowed.
                                  type: string
                              required:
                              - topologyKey
                              type: object
                            type: array
                        type: object
                      podAntiAffinity:
                        description: Describes pod anti-affinity scheduling rules
                          (e.g. avoid putting this pod in the same node, zone, etc.
                          as some other pod(s)).
                        properties:
                          preferredDuringSchedulingIgnoredDuringExecution:
                            description: The scheduler will prefer to schedule pods
                              to nodes that satisfy the anti-affinity expressions
                              specified by this field, but it may choose a node that
                              violates one or more of the expressions. The node that
                              is most preferred is the one with the greatest sum of
                              weights, i.e. for each node that meets all of the scheduling
                              requirements (resource request, requiredDuringScheduling
                              anti-affinity expressions, etc.), compute a sum by iterating
                              through the elements of this field and adding "weight"
                              to the sum if the node has pods which matches the corresponding
                              podAffinityTerm; the node(s) with the highest sum are
                              the most preferred.
                            items:
                              description: The weights of all of the matched WeightedPodAffinityTerm
                                fields are added per-node to find the most preferred
                                node(s)
                              properties:
                                podAffinityTerm:
                                  description: Required. A pod affinity term, associated
                                    with the corresponding weight.
                                  properties:
                                    labelSelector:
                                      description: A label query over a set of resources,
                                        in this case pods. If it's null, this PodAffinityTerm
                                        matches with no Pods.
                                      properties:
                                        matchExpressions:
                                          description: matchExpressions is a list
                                            of label selector requirements. The requirements
                                            are ANDed.
                                          items:
                                            description: A label selector requirement
                                              is a selector that contains values,
                                              a key, and an operator that relates
                                              the key and values.
                                            properties:
                                              key:
                                                description: key is the label key
                                                  that the selector applies to.
                                                type: string
                                              operator:
                                                description: operator represents a
                                                  key's relationship to a set of values.
                                                  Valid operators are In, NotIn, Exists
                                                  and DoesNotExist.
                                                type: string
                                              values:
                                                description: values is an array of
                                                  string values. If the operator is
                                                  In or NotIn, the values array must
                                                  be non-empty. If the operator is
                                                  Exists or DoesNotExist, the values
                                                  array must be empty. This array
                                                  is replaced during a strategic merge
                                                  patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                        matchLabels:
                                          additionalProperties:
                                            type: string
                                          description: matchLabels is a map of {key,value}
                                            pairs. A single {key,value} in the matchLabels
                                            map is equivalent to an element of matchExpressions,
                                            whose key field is "key", the operator
                                            is "In", and the values array contains
                                            only "value". The requirements are ANDed.
                                          type: object
                                      type: object
                                      x-kubernetes-map-type: atomic
                                    matchLabelKeys:
                                      description: MatchLabelKeys is a set of pod
                                        label keys to select which pods will be taken
                                        into consideration. The keys are used to lookup
                                        values from the incoming pod labels, those
                                        key-value labels are merged with `LabelSelector`
                                        as `key in (value)` to select the group of
                                        existing pods which pods will be taken into
                                        consideration for the incoming pod's pod (anti)
                                        affinity. Keys that don't exist in the incoming
                                        pod labels will be ignored. The default value
                                        is empty. The same key is forbidden to exist
                                        in both MatchLabelKeys and LabelSelector.
                                        Also, MatchLabelKeys cannot be set when LabelSelector
                                        isn't set. This is an alpha field and requires
                                        enabling MatchLabelKeysInPodAffinity feature
                                        gate.
                                      items:
                                        type: string
                                      type: array
                                      x-kubernetes-list-type: atomic
                                    mismatchLabelKeys:
                                      description: MismatchLabelKeys is a set of pod
                                        label keys to select which pods will be taken
                                        into consideration. The keys are used to lookup
                                        values from the incoming pod labels, those
                                        key-value labels are merged with `LabelSelector`
                                        as `key notin (value)` to select the group
                                        of existing pods which pods will be taken
                                        into consideration for the incoming pod's
                                        pod (anti) affinity. Keys that don't exist
                                        in the incoming pod labels will be ignored.
                                        The default value is empty. The same key is
                                        forbidden to exist in both MismatchLabelKeys
                                        and LabelSelector. Also, MismatchLabelKeys
                                        cannot be set when LabelSelector isn't set.
                                        This is an alpha field and requires enabling
                                        MatchLabelKeysInPodAffinity feature gate.
                                      items:
                                        type: string
                                      type: array
                                      x-kubernetes-list-type: atomic
                                    namespaceSelector:
                                      description: A label query over the set of namespaces
                                        that the term applies to. The term is applied
                                        to the union of the namespaces selected by
                                        this field and the ones listed in the namespaces
                                        field. null selector and null or empty namespaces
                                        list means "this pod's namespace". An empty
                                        selector ({}) matches all namespaces.
                                      properties:
                                        matchExpressions:
                                          description: matchExpressions is a list
                                            of label selector requirements. The requirements
                                            are ANDed.
                                          items:
                                            description: A label selector requirement
                                              is a selector that contains values,
                                              a key, and an operator that relates
                                              the key and values.
                                            properties:
                                              key:
                                                description: key is the label key
                                                  that the selector applies to.
                                                type: string
                                              operator:
                                                description: operator represents a
                                                  key's relationship to a set of values.
                                                  Valid operators are In, NotIn, Exists
                                                  and DoesNotExist.
                                                type: string
                                              values:
                                                description: values is an array of
                                                  string values. If the operator is
                                                  In or NotIn, the values array must
                                                  be non-empty. If the operator is
                                                  Exists or DoesNotExist, the values
                                                  array must be empty. This array
                                                  is replaced during a strategic merge
                                                  patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                        matchLabels:
                                          additionalProperties:
                                            type: string
                                          description: matchLabels is a map of {key,value}
                                            pairs. A single {key,value} in the matchLabels
                                            map is equivalent to an element of matchExpressions,
                                            whose key field is "key", the operator
                                            is "In", and the values array contains
                                            only "value". The requirements are ANDed.
                                          type: object
                                      type: object
                                      x-kubernetes-map-type: atomic
                                    namespaces:
                                      description: namespaces specifies a static list
                                        of namespace names that the term applies to.
                                        The term is applied to the union of the namespaces
                                        listed in this field and the ones selected
                                        by namespaceSelector. null or empty namespaces
                                        list and null namespaceSelector means "this
                                        pod's namespace".
                                      items:
                                        type: string
                                      type: array
                                    topologyKey:
                                      description: This pod should be co-located (affinity)
                                        or not co-located (anti-affinity) with the
                                        pods matching the labelSelector in the specified
                                        namespaces, where co-located is defined as
                                        running on a node whose value of the label
                                        with key topologyKey matches that of any node
                                        on which any of the selected pods is running.
                                        Empty topologyKey is not allowed.
                                      type: string
                                  required:
                                  - topologyKey
                                  type: object
                                weight:
                                  description: weight associated with matching the
                                    corresponding podAffinityTerm, in the range 1-100.
                                  format: int32
                                  type: integer
                              required:
                              - podAffinityTerm
                              - weight
                              type: object
                            type: array
                          requiredDuringSchedulingIgnoredDuringExecution:
                            description: If the anti-affinity requirements specified
                              by this field are not met at scheduling time, the pod
                              will not be scheduled onto the node. If the anti-affinity
                              requirements specified by this field cease to be met
                              at some point during pod execution (e.g. due to a pod
                              label update), the system may or may not try to eventually
                              evict the pod from its node. When there are multiple
                              elements, the lists of nodes corresponding to each podAffinityTerm
                              are intersected, i.e. all terms must be satisfied.
                            items:
                              description: Defines a set of pods (namely those matching
                                the labelSelector relative to the given namespace(s))
                                that this pod should be co-located (affinity) or not
                                co-located (anti-affinity) with, where co-located
                                is defined as running on a node whose value of the
                                label with key <topologyKey> matches that of any node
                                on which a pod of the set of pods is running
                              properties:
                                labelSelector:
                                  description: A label query over a set of resources,
                                    in this case pods. If it's null, this PodAffinityTerm
                                    matches with no Pods.
                                  properties:
                                    matchExpressions:
                                      description: matchExpressions is a list of label
                                        selector requirements. The requirements are
                                        ANDed.
                                      items:
                                        description: A label selector requirement
                                          is a selector that contains values, a key,
                                          and an operator that relates the key and
                                          values.
                                        properties:
                                          key:
                                            description: key is the label key that
                                              the selector applies to.
                                            type: string
                                          operator:
                                            description: operator represents a key's
                                              relationship to a set of values. Valid
                                              operators are In, NotIn, Exists and
                                              DoesNotExist.
                                            type: string
                                          values:
                                            description: values is an array of string
                                              values. If the operator is In or NotIn,
                                              the values array must be non-empty.
                                              If the operator is Exists or DoesNotExist,
                                              the values array must be empty. This
                                              array is replaced during a strategic
                                              merge patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                    matchLabels:
                                      additionalProperties:
                                        type: string
                                      description: matchLabels is a map of {key,value}
                                        pairs. A single {key,value} in the matchLabels
                                        map is equivalent to an element of matchExpressions,
                                        whose key field is "key", the operator is
                                        "In", and the values array contains only "value".
                                        The requirements are ANDed.
                                      type: object
                                  type: object
                                  x-kubernetes-map-type: atomic
                                matchLabelKeys:
                                  description: MatchLabelKeys is a set of pod label
                                    keys to select which pods will be taken into consideration.
                                    The keys are used to lookup values from the incoming
                                    pod labels, those key-value labels are merged
                                    with `LabelSelector` as `key in (value)` to select
                                    the group of existing pods which pods will be
                                    taken into consideration for the incoming pod's
                                    pod (anti) affinity. Keys that don't exist in
                                    the incoming pod labels will be ignored. The default
                                    value is empty. The same key is forbidden to exist
                                    in both MatchLabelKeys and LabelSelector. Also,
                                    MatchLabelKeys cannot be set when LabelSelector
                                    isn't set. This is an alpha field and requires
                                    enabling MatchLabelKeysInPodAffinity feature gate.
                                  items:
                                    type: string
                                  type: array
                                  x-kubernetes-list-type: atomic
                                mismatchLabelKeys:
                                  description: MismatchLabelKeys is a set of pod label
                                    keys to select which pods will be taken into consideration.
                                    The keys are used to lookup values from the incoming
                                    pod labels, those key-value labels are merged
                                    with `LabelSelector` as `key notin (value)` to
                                    select the group of existing pods which pods will
                                    be taken into consideration for the incoming pod's
                                    pod (anti) affinity. Keys that don't exist in
                                    the incoming pod labels will be ignored. The default
                                    value is empty. The same key is forbidden to exist
                                    in both MismatchLabelKeys and LabelSelector. Also,
                                    MismatchLabelKeys cannot be set when LabelSelector
                                    isn't set. This is an alpha field and requires
                                    enabling MatchLabelKeysInPodAffinity feature gate.
                                  items:
                                    type: string
                                  type: array
                                  x-kubernetes-list-type: atomic
                                namespaceSelector:
                                  description: A label query over the set of namespaces
                                    that the term applies to. The term is applied
                                    to the union of the namespaces selected by this
                                    field and the ones listed in the namespaces field.
                                    null selector and null or empty namespaces list
                                    means "this pod's namespace". An empty selector
                                    ({}) matches all namespaces.
                                  properties:
                                    matchExpressions:
                                      description: matchExpressions is a list of label
                                        selector requirements. The requirements are
                                        ANDed.
                                      items:
                                        description: A label selector requirement
                                          is a selector that contains values, a key,
                                          and an operator that relates the key and
                                          values.
                                        properties:
                                          key:
                                            description: key is the label key that
                                              the selector applies to.
                                            type: string
                                          operator:
                                            description: operator represents a key's
                                              relationship to a set of values. Valid
                                              operators are In, NotIn, Exists and
                                              DoesNotExist.
                                            type: string
                                          values:
                                            description: values is an array of string
                                              values. If the operator is In or NotIn,
                                              the values array must be non-empty.
                                              If the operator is Exists or DoesNotExist,
                                              the values array must be empty. This
                                              array is replaced during a strategic
                                              merge patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                    matchLabels:
                                      additionalProperties:
                                        type: string
                                      description: matchLabels is a map of {key,value}
                                        pairs. A single {key,value} in the matchLabels
                                        map is equivalent to an element of matchExpressions,
                                        whose key field is "key", the operator is
                                        "In", and the values array contains only "value".
                                        The requirements are ANDed.
                                      type: object
                                  type: object
                                  x-kubernetes-map-type: atomic
                                namespaces:
                                  description: namespaces specifies a static list
                                    of namespace names that the term applies to. The
                                    term is applied to the union of the namespaces
                                    listed in this field and the ones selected by
                                    namespaceSelector. null or empty namespaces list
                                    and null namespaceSelector means "this pod's namespace".
                                  items:
                                    type: string
                                  type: array
                                topologyKey:
                                  description: This pod should be co-located (affinity)
                                    or not co-located (anti-affinity) with the pods
                                    matching the labelSelector in the specified namespaces,
                                    where co-located is defined as running on a node
                                    whose value of the label with key topologyKey
                                    matches that of any node on which any of the selected
                                    pods is running. Empty topologyKey is not allowed.
                                  type: string
                              required:
                              - topologyKey
                              type: object
                            type: array
                        type: object
                    type: object
                  proxyNodeSelector:
                    additionalProperties:
                      type: string
                    description: ProxyNodeSelector rules for pods
                    type: object
                  proxyResources:
                    description: Defines the resources assigned to the proxy. If not
                      defined uses defaults requests and limits values.
                    properties:
                      claims:
                        description: "Claims lists the names of resources, defined
                          in spec.resourceClaims, that are used by this container.
                          \n This is an alpha field and requires enabling the DynamicResourceAllocation
                          feature gate. \n This field is immutable. It can only be
                          set for containers."
                        items:
                          description: ResourceClaim references one entry in PodSpec.ResourceClaims.
                          properties:
                            name:
                              description: Name must match the name of one entry in
                                pod.spec.resourceClaims of the Pod where this field
                                is used. It makes that resource available inside a
                                container.
                              type: string
                          required:
                          - name
                          type: object
                        type: array
                        x-kubernetes-list-map-keys:
                        - name
                        x-kubernetes-list-type: map
                      limits:
                        additionalProperties:
                          anyOf:
                          - type: integer
                          - type: string
                          pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                          x-kubernetes-int-or-string: true
                        description: 'Limits describes the maximum amount of compute
                          resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                        type: object
                      requests:
                        additionalProperties:
                          anyOf:
                          - type: integer
                          - type: string
                          pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                          x-kubernetes-int-or-string: true
                        description: 'Requests describes the minimum amount of compute
                          resources required. If Requests is omitted for a container,
                          it defaults to Limits if that is explicitly specified, otherwise
                          to an implementation-defined value. Requests cannot exceed
                          Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                        type: object
                    type: object
                  proxyTolerations:
                    description: ProxyTolerations rules for pods
                    items:
                      description: The pod this Toleration is attached to tolerates
                        any taint that matches the triple <key,value,effect> using
                        the matching operator <operator>.
                      properties:
                        effect:
                          description: Effect indicates the taint effect to match.
                            Empty means match all taint effects. When specified, allowed
                            values are NoSchedule, PreferNoSchedule and NoExecute.
                          type: string
                        key:
                          description: Key is the taint key that the toleration applies
                            to. Empty means match all taint keys. If the key is empty,
                            operator must be Exists; this combination means to match
                            all values and all keys.
                          type: string
                        operator:
                          description: Operator represents a key's relationship to
                            the value. Valid operators are Exists and Equal. Defaults
                            to Equal. Exists is equivalent to wildcard for value,
                            so that a pod can tolerate all taints of a particular
                            category.
                          type: string
                        tolerationSeconds:
                          description: TolerationSeconds represents the period of
                            time the toleration (which must be of effect NoExecute,
                            otherwise this field is ignored) tolerates the taint.
                            By default, it is not set, which means tolerate the taint
                            forever (do not evict). Zero and negative values will
                            be treated as 0 (evict immediately) by the system.
                          format: int64
                          type: integer
                        value:
                          description: Value is the taint value the toleration matches
                            to. If the operator is Exists, the value should be empty,
                            otherwise just a regular string.
                          type: string
                      type: object
                    type: array
                type: object
              proxyInstances:
                description: Number of proxy instances required in the cluster
                format: int32
                minimum: 0
                type: integer
              restore:
                description: The configuration to restore this PGD group from an Object
                  Store service
                properties:
                  barmanObjectStore:
                    description: The configuration for the barman-cloud tool suite
                    properties:
                      azureCredentials:
                        description: The credentials to use to upload data to Azure
                          Blob Storage
                        properties:
                          connectionString:
                            description: The connection string to be used
                            properties:
                              key:
                                description: The key to select
                                type: string
                              name:
                                description: Name of the referent.
                                type: string
                            required:
                            - key
                            - name
                            type: object
                          inheritFromAzureAD:
                            description: Use the Azure AD based authentication without
                              providing explicitly the keys.
                            type: boolean
                          storageAccount:
                            description: The storage account where to upload data
                            properties:
                              key:
                                description: The key to select
                                type: string
                              name:
                                description: Name of the referent.
                                type: string
                            required:
                            - key
                            - name
                            type: object
                          storageKey:
                            description: The storage account key to be used in conjunction
                              with the storage account name
                            properties:
                              key:
                                description: The key to select
                                type: string
                              name:
                                description: Name of the referent.
                                type: string
                            required:
                            - key
                            - name
                            type: object
                          storageSasToken:
                            description: A shared-access-signature to be used in conjunction
                              with the storage account name
                            properties:
                              key:
                                description: The key to select
                                type: string
                              name:
                                description: Name of the referent.
                                type: string
                            required:
                            - key
                            - name
                            type: object
                        type: object
                      data:
                        description: The configuration to be used to backup the data
                          files When not defined, base backups files will be stored
                          uncompressed and may be unencrypted in the object store,
                          according to the bucket default policy.
                        properties:
                          additionalCommandArgs:
                            description: "AdditionalCommandArgs represents additional
                              arguments that can be appended to the 'barman-cloud-backup'
                              command-line invocation. These arguments provide flexibility
                              to customize the backup process further according to
                              specific requirements or configurations. \n Example:
                              In a scenario where specialized backup options are required,
                              such as setting a specific timeout or defining custom
                              behavior, users can use this field to specify additional
                              command arguments. \n Note: It's essential to ensure
                              that the provided arguments are valid and supported
                              by the 'barman-cloud-backup' command, to avoid potential
                              errors or unintended behavior during execution."
                            items:
                              type: string
                            type: array
                          compression:
                            description: Compress a backup file (a tar file per tablespace)
                              while streaming it to the object store. Available options
                              are empty string (no compression, default), `gzip`,
                              `bzip2` or `snappy`.
                            enum:
                            - gzip
                            - bzip2
                            - snappy
                            type: string
                          encryption:
                            description: Whenever to force the encryption of files
                              (if the bucket is not already configured for that).
                              Allowed options are empty string (use the bucket policy,
                              default), `AES256` and `aws:kms`
                            enum:
                            - AES256
                            - aws:kms
                            type: string
                          immediateCheckpoint:
                            description: Control whether the I/O workload for the
                              backup initial checkpoint will be limited, according
                              to the `checkpoint_completion_target` setting on the
                              PostgreSQL server. If set to true, an immediate checkpoint
                              will be used, meaning PostgreSQL will complete the checkpoint
                              as soon as possible. `false` by default.
                            type: boolean
                          jobs:
                            description: The number of parallel jobs to be used to
                              upload the backup, defaults to 2
                            format: int32
                            minimum: 1
                            type: integer
                        type: object
                      destinationPath:
                        description: The path where to store the backup (i.e. s3://bucket/path/to/folder)
                          this path, with different destination folders, will be used
                          for WALs and for data
                        minLength: 1
                        type: string
                      endpointCA:
                        description: EndpointCA store the CA bundle of the barman
                          endpoint. Useful when using self-signed certificates to
                          avoid errors with certificate issuer and barman-cloud-wal-archive
                        properties:
                          key:
                            description: The key to select
                            type: string
                          name:
                            description: Name of the referent.
                            type: string
                        required:
                        - key
                        - name
                        type: object
                      endpointURL:
                        description: Endpoint to be used to upload data to the cloud,
                          overriding the automatic endpoint discovery
                        type: string
                      googleCredentials:
                        description: The credentials to use to upload data to Google
                          Cloud Storage
                        properties:
                          applicationCredentials:
                            description: The secret containing the Google Cloud Storage
                              JSON file with the credentials
                            properties:
                              key:
                                description: The key to select
                                type: string
                              name:
                                description: Name of the referent.
                                type: string
                            required:
                            - key
                            - name
                            type: object
                          gkeEnvironment:
                            description: If set to true, will presume that it's running
                              inside a GKE environment, default to false.
                            type: boolean
                        type: object
                      historyTags:
                        additionalProperties:
                          type: string
                        description: HistoryTags is a list of key value pairs that
                          will be passed to the Barman --history-tags option.
                        type: object
                      s3Credentials:
                        description: The credentials to use to upload data to S3
                        properties:
                          accessKeyId:
                            description: The reference to the access key id
                            properties:
                              key:
                                description: The key to select
                                type: string
                              name:
                                description: Name of the referent.
                                type: string
                            required:
                            - key
                            - name
                            type: object
                          inheritFromIAMRole:
                            description: Use the role based authentication without
                              providing explicitly the keys.
                            type: boolean
                          region:
                            description: The reference to the secret containing the
                              region name
                            properties:
                              key:
                                description: The key to select
                                type: string
                              name:
                                description: Name of the referent.
                                type: string
                            required:
                            - key
                            - name
                            type: object
                          secretAccessKey:
                            description: The reference to the secret access key
                            properties:
                              key:
                                description: The key to select
                                type: string
                              name:
                                description: Name of the referent.
                                type: string
                            required:
                            - key
                            - name
                            type: object
                          sessionToken:
                            description: The references to the session key
                            properties:
                              key:
                                description: The key to select
                                type: string
                              name:
                                description: Name of the referent.
                                type: string
                            required:
                            - key
                            - name
                            type: object
                        type: object
                      serverName:
                        description: The server name on S3, the cluster name is used
                          if this parameter is omitted
                        type: string
                      tags:
                        additionalProperties:
                          type: string
                        description: Tags is a list of key value pairs that will be
                          passed to the Barman --tags option.
                        type: object
                      wal:
                        description: The configuration for the backup of the WAL stream.
                          When not defined, WAL files will be stored uncompressed
                          and may be unencrypted in the object store, according to
                          the bucket default policy.
                        properties:
                          compression:
                            description: Compress a WAL file before sending it to
                              the object store. Available options are empty string
                              (no compression, default), `gzip`, `bzip2` or `snappy`.
                            enum:
                            - gzip
                            - bzip2
                            - snappy
                            type: string
                          encryption:
                            description: Whenever to force the encryption of files
                              (if the bucket is not already configured for that).
                              Allowed options are empty string (use the bucket policy,
                              default), `AES256` and `aws:kms`
                            enum:
                            - AES256
                            - aws:kms
                            type: string
                          maxParallel:
                            description: Number of WAL files to be either archived
                              in parallel (when the PostgreSQL instance is archiving
                              to a backup object store) or restored in parallel (when
                              a PostgreSQL standby is fetching WAL files from a recovery
                              object store). If not specified, WAL files will be processed
                              one at a time. It accepts a positive integer as a value
                              - with 1 being the minimum accepted value.
                            minimum: 1
                            type: integer
                        type: object
                    required:
                    - destinationPath
                    type: object
                  recoveryTarget:
                    description: 'By default, the recovery process applies all the
                      available WAL files in the archive (full recovery). However,
                      you can also end the recovery as soon as a consistent state
                      is reached or recover to a point-in-time (PITR) by specifying
                      a `RecoveryTarget` object, as expected by PostgreSQL (i.e.,
                      timestamp, transaction Id, LSN, ...). More info: https://www.postgresql.org/docs/current/runtime-config-wal.html#RUNTIME-CONFIG-WAL-RECOVERY-TARGET'
                    properties:
                      backupID:
                        description: The ID of the backup from which to start the
                          recovery process. If empty (default) the operator will automatically
                          detect the backup based on targetTime or targetLSN if specified.
                          Otherwise use the latest available backup in chronological
                          order.
                        type: string
                      exclusive:
                        description: Set the target to be exclusive. If omitted, defaults
                          to false, so that in Postgres, `recovery_target_inclusive`
                          will be true
                        type: boolean
                      targetImmediate:
                        description: End recovery as soon as a consistent state is
                          reached
                        type: boolean
                      targetLSN:
                        description: The target LSN (Log Sequence Number)
                        type: string
                      targetName:
                        description: The target name (to be previously created with
                          `pg_create_restore_point`)
                        type: string
                      targetTLI:
                        description: The target timeline ("latest" or a positive integer)
                        type: string
                      targetTime:
                        description: The target time as a timestamp in the RFC3339
                          standard
                        type: string
                      targetXID:
                        description: The target transaction ID
                        type: string
                    type: object
                  serverNames:
                    description: The list of server names to be used as a recovery
                      origin. One of these servers will be elected as the seeding
                      one when evaluating the recovery target, this option is only
                      used when restore from barmanObjectStore.
                    items:
                      type: string
                    type: array
                  volumeSnapshots:
                    description: The configuration for volumeSnapshot restore
                    properties:
                      selector:
                        description: Label selector used to select the volumeSnapshot
                          to restore
                        properties:
                          matchExpressions:
                            description: matchExpressions is a list of label selector
                              requirements. The requirements are ANDed.
                            items:
                              description: A label selector requirement is a selector
                                that contains values, a key, and an operator that
                                relates the key and values.
                              properties:
                                key:
                                  description: key is the label key that the selector
                                    applies to.
                                  type: string
                                operator:
                                  description: operator represents a key's relationship
                                    to a set of values. Valid operators are In, NotIn,
                                    Exists and DoesNotExist.
                                  type: string
                                values:
                                  description: values is an array of string values.
                                    If the operator is In or NotIn, the values array
                                    must be non-empty. If the operator is Exists or
                                    DoesNotExist, the values array must be empty.
                                    This array is replaced during a strategic merge
                                    patch.
                                  items:
                                    type: string
                                  type: array
                              required:
                              - key
                              - operator
                              type: object
                            type: array
                          matchLabels:
                            additionalProperties:
                              type: string
                            description: matchLabels is a map of {key,value} pairs.
                              A single {key,value} in the matchLabels map is equivalent
                              to an element of matchExpressions, whose key field is
                              "key", the operator is "In", and the values array contains
                              only "value". The requirements are ANDed.
                            type: object
                        type: object
                        x-kubernetes-map-type: atomic
                    required:
                    - selector
                    type: object
                type: object
              witness:
                description: WitnessInstances configuration that will be injected
                  into the WitnessInstances CNP clusters If not defined, it will default
                  to the Instances configuration
                properties:
                  affinity:
                    description: Affinity/Anti-affinity rules for Pods
                    properties:
                      additionalPodAffinity:
                        description: AdditionalPodAffinity allows to specify pod affinity
                          terms to be passed to all the cluster's pods.
                        properties:
                          preferredDuringSchedulingIgnoredDuringExecution:
                            description: The scheduler will prefer to schedule pods
                              to nodes that satisfy the affinity expressions specified
                              by this field, but it may choose a node that violates
                              one or more of the expressions. The node that is most
                              preferred is the one with the greatest sum of weights,
                              i.e. for each node that meets all of the scheduling
                              requirements (resource request, requiredDuringScheduling
                              affinity expressions, etc.), compute a sum by iterating
                              through the elements of this field and adding "weight"
                              to the sum if the node has pods which matches the corresponding
                              podAffinityTerm; the node(s) with the highest sum are
                              the most preferred.
                            items:
                              description: The weights of all of the matched WeightedPodAffinityTerm
                                fields are added per-node to find the most preferred
                                node(s)
                              properties:
                                podAffinityTerm:
                                  description: Required. A pod affinity term, associated
                                    with the corresponding weight.
                                  properties:
                                    labelSelector:
                                      description: A label query over a set of resources,
                                        in this case pods. If it's null, this PodAffinityTerm
                                        matches with no Pods.
                                      properties:
                                        matchExpressions:
                                          description: matchExpressions is a list
                                            of label selector requirements. The requirements
                                            are ANDed.
                                          items:
                                            description: A label selector requirement
                                              is a selector that contains values,
                                              a key, and an operator that relates
                                              the key and values.
                                            properties:
                                              key:
                                                description: key is the label key
                                                  that the selector applies to.
                                                type: string
                                              operator:
                                                description: operator represents a
                                                  key's relationship to a set of values.
                                                  Valid operators are In, NotIn, Exists
                                                  and DoesNotExist.
                                                type: string
                                              values:
                                                description: values is an array of
                                                  string values. If the operator is
                                                  In or NotIn, the values array must
                                                  be non-empty. If the operator is
                                                  Exists or DoesNotExist, the values
                                                  array must be empty. This array
                                                  is replaced during a strategic merge
                                                  patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                        matchLabels:
                                          additionalProperties:
                                            type: string
                                          description: matchLabels is a map of {key,value}
                                            pairs. A single {key,value} in the matchLabels
                                            map is equivalent to an element of matchExpressions,
                                            whose key field is "key", the operator
                                            is "In", and the values array contains
                                            only "value". The requirements are ANDed.
                                          type: object
                                      type: object
                                      x-kubernetes-map-type: atomic
                                    matchLabelKeys:
                                      description: MatchLabelKeys is a set of pod
                                        label keys to select which pods will be taken
                                        into consideration. The keys are used to lookup
                                        values from the incoming pod labels, those
                                        key-value labels are merged with `LabelSelector`
                                        as `key in (value)` to select the group of
                                        existing pods which pods will be taken into
                                        consideration for the incoming pod's pod (anti)
                                        affinity. Keys that don't exist in the incoming
                                        pod labels will be ignored. The default value
                                        is empty. The same key is forbidden to exist
                                        in both MatchLabelKeys and LabelSelector.
                                        Also, MatchLabelKeys cannot be set when LabelSelector
                                        isn't set. This is an alpha field and requires
                                        enabling MatchLabelKeysInPodAffinity feature
                                        gate.
                                      items:
                                        type: string
                                      type: array
                                      x-kubernetes-list-type: atomic
                                    mismatchLabelKeys:
                                      description: MismatchLabelKeys is a set of pod
                                        label keys to select which pods will be taken
                                        into consideration. The keys are used to lookup
                                        values from the incoming pod labels, those
                                        key-value labels are merged with `LabelSelector`
                                        as `key notin (value)` to select the group
                                        of existing pods which pods will be taken
                                        into consideration for the incoming pod's
                                        pod (anti) affinity. Keys that don't exist
                                        in the incoming pod labels will be ignored.
                                        The default value is empty. The same key is
                                        forbidden to exist in both MismatchLabelKeys
                                        and LabelSelector. Also, MismatchLabelKeys
                                        cannot be set when LabelSelector isn't set.
                                        This is an alpha field and requires enabling
                                        MatchLabelKeysInPodAffinity feature gate.
                                      items:
                                        type: string
                                      type: array
                                      x-kubernetes-list-type: atomic
                                    namespaceSelector:
                                      description: A label query over the set of namespaces
                                        that the term applies to. The term is applied
                                        to the union of the namespaces selected by
                                        this field and the ones listed in the namespaces
                                        field. null selector and null or empty namespaces
                                        list means "this pod's namespace". An empty
                                        selector ({}) matches all namespaces.
                                      properties:
                                        matchExpressions:
                                          description: matchExpressions is a list
                                            of label selector requirements. The requirements
                                            are ANDed.
                                          items:
                                            description: A label selector requirement
                                              is a selector that contains values,
                                              a key, and an operator that relates
                                              the key and values.
                                            properties:
                                              key:
                                                description: key is the label key
                                                  that the selector applies to.
                                                type: string
                                              operator:
                                                description: operator represents a
                                                  key's relationship to a set of values.
                                                  Valid operators are In, NotIn, Exists
                                                  and DoesNotExist.
                                                type: string
                                              values:
                                                description: values is an array of
                                                  string values. If the operator is
                                                  In or NotIn, the values array must
                                                  be non-empty. If the operator is
                                                  Exists or DoesNotExist, the values
                                                  array must be empty. This array
                                                  is replaced during a strategic merge
                                                  patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                        matchLabels:
                                          additionalProperties:
                                            type: string
                                          description: matchLabels is a map of {key,value}
                                            pairs. A single {key,value} in the matchLabels
                                            map is equivalent to an element of matchExpressions,
                                            whose key field is "key", the operator
                                            is "In", and the values array contains
                                            only "value". The requirements are ANDed.
                                          type: object
                                      type: object
                                      x-kubernetes-map-type: atomic
                                    namespaces:
                                      description: namespaces specifies a static list
                                        of namespace names that the term applies to.
                                        The term is applied to the union of the namespaces
                                        listed in this field and the ones selected
                                        by namespaceSelector. null or empty namespaces
                                        list and null namespaceSelector means "this
                                        pod's namespace".
                                      items:
                                        type: string
                                      type: array
                                    topologyKey:
                                      description: This pod should be co-located (affinity)
                                        or not co-located (anti-affinity) with the
                                        pods matching the labelSelector in the specified
                                        namespaces, where co-located is defined as
                                        running on a node whose value of the label
                                        with key topologyKey matches that of any node
                                        on which any of the selected pods is running.
                                        Empty topologyKey is not allowed.
                                      type: string
                                  required:
                                  - topologyKey
                                  type: object
                                weight:
                                  description: weight associated with matching the
                                    corresponding podAffinityTerm, in the range 1-100.
                                  format: int32
                                  type: integer
                              required:
                              - podAffinityTerm
                              - weight
                              type: object
                            type: array
                          requiredDuringSchedulingIgnoredDuringExecution:
                            description: If the affinity requirements specified by
                              this field are not met at scheduling time, the pod will
                              not be scheduled onto the node. If the affinity requirements
                              specified by this field cease to be met at some point
                              during pod execution (e.g. due to a pod label update),
                              the system may or may not try to eventually evict the
                              pod from its node. When there are multiple elements,
                              the lists of nodes corresponding to each podAffinityTerm
                              are intersected, i.e. all terms must be satisfied.
                            items:
                              description: Defines a set of pods (namely those matching
                                the labelSelector relative to the given namespace(s))
                                that this pod should be co-located (affinity) or not
                                co-located (anti-affinity) with, where co-located
                                is defined as running on a node whose value of the
                                label with key <topologyKey> matches that of any node
                                on which a pod of the set of pods is running
                              properties:
                                labelSelector:
                                  description: A label query over a set of resources,
                                    in this case pods. If it's null, this PodAffinityTerm
                                    matches with no Pods.
                                  properties:
                                    matchExpressions:
                                      description: matchExpressions is a list of label
                                        selector requirements. The requirements are
                                        ANDed.
                                      items:
                                        description: A label selector requirement
                                          is a selector that contains values, a key,
                                          and an operator that relates the key and
                                          values.
                                        properties:
                                          key:
                                            description: key is the label key that
                                              the selector applies to.
                                            type: string
                                          operator:
                                            description: operator represents a key's
                                              relationship to a set of values. Valid
                                              operators are In, NotIn, Exists and
                                              DoesNotExist.
                                            type: string
                                          values:
                                            description: values is an array of string
                                              values. If the operator is In or NotIn,
                                              the values array must be non-empty.
                                              If the operator is Exists or DoesNotExist,
                                              the values array must be empty. This
                                              array is replaced during a strategic
                                              merge patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                    matchLabels:
                                      additionalProperties:
                                        type: string
                                      description: matchLabels is a map of {key,value}
                                        pairs. A single {key,value} in the matchLabels
                                        map is equivalent to an element of matchExpressions,
                                        whose key field is "key", the operator is
                                        "In", and the values array contains only "value".
                                        The requirements are ANDed.
                                      type: object
                                  type: object
                                  x-kubernetes-map-type: atomic
                                matchLabelKeys:
                                  description: MatchLabelKeys is a set of pod label
                                    keys to select which pods will be taken into consideration.
                                    The keys are used to lookup values from the incoming
                                    pod labels, those key-value labels are merged
                                    with `LabelSelector` as `key in (value)` to select
                                    the group of existing pods which pods will be
                                    taken into consideration for the incoming pod's
                                    pod (anti) affinity. Keys that don't exist in
                                    the incoming pod labels will be ignored. The default
                                    value is empty. The same key is forbidden to exist
                                    in both MatchLabelKeys and LabelSelector. Also,
                                    MatchLabelKeys cannot be set when LabelSelector
                                    isn't set. This is an alpha field and requires
                                    enabling MatchLabelKeysInPodAffinity feature gate.
                                  items:
                                    type: string
                                  type: array
                                  x-kubernetes-list-type: atomic
                                mismatchLabelKeys:
                                  description: MismatchLabelKeys is a set of pod label
                                    keys to select which pods will be taken into consideration.
                                    The keys are used to lookup values from the incoming
                                    pod labels, those key-value labels are merged
                                    with `LabelSelector` as `key notin (value)` to
                                    select the group of existing pods which pods will
                                    be taken into consideration for the incoming pod's
                                    pod (anti) affinity. Keys that don't exist in
                                    the incoming pod labels will be ignored. The default
                                    value is empty. The same key is forbidden to exist
                                    in both MismatchLabelKeys and LabelSelector. Also,
                                    MismatchLabelKeys cannot be set when LabelSelector
                                    isn't set. This is an alpha field and requires
                                    enabling MatchLabelKeysInPodAffinity feature gate.
                                  items:
                                    type: string
                                  type: array
                                  x-kubernetes-list-type: atomic
                                namespaceSelector:
                                  description: A label query over the set of namespaces
                                    that the term applies to. The term is applied
                                    to the union of the namespaces selected by this
                                    field and the ones listed in the namespaces field.
                                    null selector and null or empty namespaces list
                                    means "this pod's namespace". An empty selector
                                    ({}) matches all namespaces.
                                  properties:
                                    matchExpressions:
                                      description: matchExpressions is a list of label
                                        selector requirements. The requirements are
                                        ANDed.
                                      items:
                                        description: A label selector requirement
                                          is a selector that contains values, a key,
                                          and an operator that relates the key and
                                          values.
                                        properties:
                                          key:
                                            description: key is the label key that
                                              the selector applies to.
                                            type: string
                                          operator:
                                            description: operator represents a key's
                                              relationship to a set of values. Valid
                                              operators are In, NotIn, Exists and
                                              DoesNotExist.
                                            type: string
                                          values:
                                            description: values is an array of string
                                              values. If the operator is In or NotIn,
                                              the values array must be non-empty.
                                              If the operator is Exists or DoesNotExist,
                                              the values array must be empty. This
                                              array is replaced during a strategic
                                              merge patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                    matchLabels:
                                      additionalProperties:
                                        type: string
                                      description: matchLabels is a map of {key,value}
                                        pairs. A single {key,value} in the matchLabels
                                        map is equivalent to an element of matchExpressions,
                                        whose key field is "key", the operator is
                                        "In", and the values array contains only "value".
                                        The requirements are ANDed.
                                      type: object
                                  type: object
                                  x-kubernetes-map-type: atomic
                                namespaces:
                                  description: namespaces specifies a static list
                                    of namespace names that the term applies to. The
                                    term is applied to the union of the namespaces
                                    listed in this field and the ones selected by
                                    namespaceSelector. null or empty namespaces list
                                    and null namespaceSelector means "this pod's namespace".
                                  items:
                                    type: string
                                  type: array
                                topologyKey:
                                  description: This pod should be co-located (affinity)
                                    or not co-located (anti-affinity) with the pods
                                    matching the labelSelector in the specified namespaces,
                                    where co-located is defined as running on a node
                                    whose value of the label with key topologyKey
                                    matches that of any node on which any of the selected
                                    pods is running. Empty topologyKey is not allowed.
                                  type: string
                              required:
                              - topologyKey
                              type: object
                            type: array
                        type: object
                      additionalPodAntiAffinity:
                        description: AdditionalPodAntiAffinity allows to specify pod
                          anti-affinity terms to be added to the ones generated by
                          the operator if EnablePodAntiAffinity is set to true (default)
                          or to be used exclusively if set to false.
                        properties:
                          preferredDuringSchedulingIgnoredDuringExecution:
                            description: The scheduler will prefer to schedule pods
                              to nodes that satisfy the anti-affinity expressions
                              specified by this field, but it may choose a node that
                              violates one or more of the expressions. The node that
                              is most preferred is the one with the greatest sum of
                              weights, i.e. for each node that meets all of the scheduling
                              requirements (resource request, requiredDuringScheduling
                              anti-affinity expressions, etc.), compute a sum by iterating
                              through the elements of this field and adding "weight"
                              to the sum if the node has pods which matches the corresponding
                              podAffinityTerm; the node(s) with the highest sum are
                              the most preferred.
                            items:
                              description: The weights of all of the matched WeightedPodAffinityTerm
                                fields are added per-node to find the most preferred
                                node(s)
                              properties:
                                podAffinityTerm:
                                  description: Required. A pod affinity term, associated
                                    with the corresponding weight.
                                  properties:
                                    labelSelector:
                                      description: A label query over a set of resources,
                                        in this case pods. If it's null, this PodAffinityTerm
                                        matches with no Pods.
                                      properties:
                                        matchExpressions:
                                          description: matchExpressions is a list
                                            of label selector requirements. The requirements
                                            are ANDed.
                                          items:
                                            description: A label selector requirement
                                              is a selector that contains values,
                                              a key, and an operator that relates
                                              the key and values.
                                            properties:
                                              key:
                                                description: key is the label key
                                                  that the selector applies to.
                                                type: string
                                              operator:
                                                description: operator represents a
                                                  key's relationship to a set of values.
                                                  Valid operators are In, NotIn, Exists
                                                  and DoesNotExist.
                                                type: string
                                              values:
                                                description: values is an array of
                                                  string values. If the operator is
                                                  In or NotIn, the values array must
                                                  be non-empty. If the operator is
                                                  Exists or DoesNotExist, the values
                                                  array must be empty. This array
                                                  is replaced during a strategic merge
                                                  patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                        matchLabels:
                                          additionalProperties:
                                            type: string
                                          description: matchLabels is a map of {key,value}
                                            pairs. A single {key,value} in the matchLabels
                                            map is equivalent to an element of matchExpressions,
                                            whose key field is "key", the operator
                                            is "In", and the values array contains
                                            only "value". The requirements are ANDed.
                                          type: object
                                      type: object
                                      x-kubernetes-map-type: atomic
                                    matchLabelKeys:
                                      description: MatchLabelKeys is a set of pod
                                        label keys to select which pods will be taken
                                        into consideration. The keys are used to lookup
                                        values from the incoming pod labels, those
                                        key-value labels are merged with `LabelSelector`
                                        as `key in (value)` to select the group of
                                        existing pods which pods will be taken into
                                        consideration for the incoming pod's pod (anti)
                                        affinity. Keys that don't exist in the incoming
                                        pod labels will be ignored. The default value
                                        is empty. The same key is forbidden to exist
                                        in both MatchLabelKeys and LabelSelector.
                                        Also, MatchLabelKeys cannot be set when LabelSelector
                                        isn't set. This is an alpha field and requires
                                        enabling MatchLabelKeysInPodAffinity feature
                                        gate.
                                      items:
                                        type: string
                                      type: array
                                      x-kubernetes-list-type: atomic
                                    mismatchLabelKeys:
                                      description: MismatchLabelKeys is a set of pod
                                        label keys to select which pods will be taken
                                        into consideration. The keys are used to lookup
                                        values from the incoming pod labels, those
                                        key-value labels are merged with `LabelSelector`
                                        as `key notin (value)` to select the group
                                        of existing pods which pods will be taken
                                        into consideration for the incoming pod's
                                        pod (anti) affinity. Keys that don't exist
                                        in the incoming pod labels will be ignored.
                                        The default value is empty. The same key is
                                        forbidden to exist in both MismatchLabelKeys
                                        and LabelSelector. Also, MismatchLabelKeys
                                        cannot be set when LabelSelector isn't set.
                                        This is an alpha field and requires enabling
                                        MatchLabelKeysInPodAffinity feature gate.
                                      items:
                                        type: string
                                      type: array
                                      x-kubernetes-list-type: atomic
                                    namespaceSelector:
                                      description: A label query over the set of namespaces
                                        that the term applies to. The term is applied
                                        to the union of the namespaces selected by
                                        this field and the ones listed in the namespaces
                                        field. null selector and null or empty namespaces
                                        list means "this pod's namespace". An empty
                                        selector ({}) matches all namespaces.
                                      properties:
                                        matchExpressions:
                                          description: matchExpressions is a list
                                            of label selector requirements. The requirements
                                            are ANDed.
                                          items:
                                            description: A label selector requirement
                                              is a selector that contains values,
                                              a key, and an operator that relates
                                              the key and values.
                                            properties:
                                              key:
                                                description: key is the label key
                                                  that the selector applies to.
                                                type: string
                                              operator:
                                                description: operator represents a
                                                  key's relationship to a set of values.
                                                  Valid operators are In, NotIn, Exists
                                                  and DoesNotExist.
                                                type: string
                                              values:
                                                description: values is an array of
                                                  string values. If the operator is
                                                  In or NotIn, the values array must
                                                  be non-empty. If the operator is
                                                  Exists or DoesNotExist, the values
                                                  array must be empty. This array
                                                  is replaced during a strategic merge
                                                  patch.
                                                items:
                                                  type: string
                                                type: array
                                            required:
                                            - key
                                            - operator
                                            type: object
                                          type: array
                                        matchLabels:
                                          additionalProperties:
                                            type: string
                                          description: matchLabels is a map of {key,value}
                                            pairs. A single {key,value} in the matchLabels
                                            map is equivalent to an element of matchExpressions,
                                            whose key field is "key", the operator
                                            is "In", and the values array contains
                                            only "value". The requirements are ANDed.
                                          type: object
                                      type: object
                                      x-kubernetes-map-type: atomic
                                    namespaces:
                                      description: namespaces specifies a static list
                                        of namespace names that the term applies to.
                                        The term is applied to the union of the namespaces
                                        listed in this field and the ones selected
                                        by namespaceSelector. null or empty namespaces
                                        list and null namespaceSelector means "this
                                        pod's namespace".
                                      items:
                                        type: string
                                      type: array
                                    topologyKey:
                                      description: This pod should be co-located (affinity)
                                        or not co-located (anti-affinity) with the
                                        pods matching the labelSelector in the specified
                                        namespaces, where co-located is defined as
                                        running on a node whose value of the label
                                        with key topologyKey matches that of any node
                                        on which any of the selected pods is running.
                                        Empty topologyKey is not allowed.
                                      type: string
                                  required:
                                  - topologyKey
                                  type: object
                                weight:
                                  description: weight associated with matching the
                                    corresponding podAffinityTerm, in the range 1-100.
                                  format: int32
                                  type: integer
                              required:
                              - podAffinityTerm
                              - weight
                              type: object
                            type: array
                          requiredDuringSchedulingIgnoredDuringExecution:
                            description: If the anti-affinity requirements specified
                              by this field are not met at scheduling time, the pod
                              will not be scheduled onto the node. If the anti-affinity
                              requirements specified by this field cease to be met
                              at some point during pod execution (e.g. due to a pod
                              label update), the system may or may not try to eventually
                              evict the pod from its node. When there are multiple
                              elements, the lists of nodes corresponding to each podAffinityTerm
                              are intersected, i.e. all terms must be satisfied.
                            items:
                              description: Defines a set of pods (namely those matching
                                the labelSelector relative to the given namespace(s))
                                that this pod should be co-located (affinity) or not
                                co-located (anti-affinity) with, where co-located
                                is defined as running on a node whose value of the
                                label with key <topologyKey> matches that of any node
                                on which a pod of the set of pods is running
                              properties:
                                labelSelector:
                                  description: A label query over a set of resources,
                                    in this case pods. If it's null, this PodAffinityTerm
                                    matches with no Pods.
                                  properties:
                                    matchExpressions:
                                      description: matchExpressions is a list of label
                                        selector requirements. The requirements are
                                        ANDed.
                                      items:
                                        description: A label selector requirement
                                          is a selector that contains values, a key,
                                          and an operator that relates the key and
                                          values.
                                        properties:
                                          key:
                                            description: key is the label key that
                                              the selector applies to.
                                            type: string
                                          operator:
                                            description: operator represents a key's
                                              relationship to a set of values. Valid
                                              operators are In, NotIn, Exists and
                                              DoesNotExist.
                                            type: string
                                          values:
                                            description: values is an array of string
                                              values. If the operator is In or NotIn,
                                              the values array must be non-empty.
                                              If the operator is Exists or DoesNotExist,
                                              the values array must be empty. This
                                              array is replaced during a strategic
                                              merge patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                    matchLabels:
                                      additionalProperties:
                                        type: string
                                      description: matchLabels is a map of {key,value}
                                        pairs. A single {key,value} in the matchLabels
                                        map is equivalent to an element of matchExpressions,
                                        whose key field is "key", the operator is
                                        "In", and the values array contains only "value".
                                        The requirements are ANDed.
                                      type: object
                                  type: object
                                  x-kubernetes-map-type: atomic
                                matchLabelKeys:
                                  description: MatchLabelKeys is a set of pod label
                                    keys to select which pods will be taken into consideration.
                                    The keys are used to lookup values from the incoming
                                    pod labels, those key-value labels are merged
                                    with `LabelSelector` as `key in (value)` to select
                                    the group of existing pods which pods will be
                                    taken into consideration for the incoming pod's
                                    pod (anti) affinity. Keys that don't exist in
                                    the incoming pod labels will be ignored. The default
                                    value is empty. The same key is forbidden to exist
                                    in both MatchLabelKeys and LabelSelector. Also,
                                    MatchLabelKeys cannot be set when LabelSelector
                                    isn't set. This is an alpha field and requires
                                    enabling MatchLabelKeysInPodAffinity feature gate.
                                  items:
                                    type: string
                                  type: array
                                  x-kubernetes-list-type: atomic
                                mismatchLabelKeys:
                                  description: MismatchLabelKeys is a set of pod label
                                    keys to select which pods will be taken into consideration.
                                    The keys are used to lookup values from the incoming
                                    pod labels, those key-value labels are merged
                                    with `LabelSelector` as `key notin (value)` to
                                    select the group of existing pods which pods will
                                    be taken into consideration for the incoming pod's
                                    pod (anti) affinity. Keys that don't exist in
                                    the incoming pod labels will be ignored. The default
                                    value is empty. The same key is forbidden to exist
                                    in both MismatchLabelKeys and LabelSelector. Also,
                                    MismatchLabelKeys cannot be set when LabelSelector
                                    isn't set. This is an alpha field and requires
                                    enabling MatchLabelKeysInPodAffinity feature gate.
                                  items:
                                    type: string
                                  type: array
                                  x-kubernetes-list-type: atomic
                                namespaceSelector:
                                  description: A label query over the set of namespaces
                                    that the term applies to. The term is applied
                                    to the union of the namespaces selected by this
                                    field and the ones listed in the namespaces field.
                                    null selector and null or empty namespaces list
                                    means "this pod's namespace". An empty selector
                                    ({}) matches all namespaces.
                                  properties:
                                    matchExpressions:
                                      description: matchExpressions is a list of label
                                        selector requirements. The requirements are
                                        ANDed.
                                      items:
                                        description: A label selector requirement
                                          is a selector that contains values, a key,
                                          and an operator that relates the key and
                                          values.
                                        properties:
                                          key:
                                            description: key is the label key that
                                              the selector applies to.
                                            type: string
                                          operator:
                                            description: operator represents a key's
                                              relationship to a set of values. Valid
                                              operators are In, NotIn, Exists and
                                              DoesNotExist.
                                            type: string
                                          values:
                                            description: values is an array of string
                                              values. If the operator is In or NotIn,
                                              the values array must be non-empty.
                                              If the operator is Exists or DoesNotExist,
                                              the values array must be empty. This
                                              array is replaced during a strategic
                                              merge patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                    matchLabels:
                                      additionalProperties:
                                        type: string
                                      description: matchLabels is a map of {key,value}
                                        pairs. A single {key,value} in the matchLabels
                                        map is equivalent to an element of matchExpressions,
                                        whose key field is "key", the operator is
                                        "In", and the values array contains only "value".
                                        The requirements are ANDed.
                                      type: object
                                  type: object
                                  x-kubernetes-map-type: atomic
                                namespaces:
                                  description: namespaces specifies a static list
                                    of namespace names that the term applies to. The
                                    term is applied to the union of the namespaces
                                    listed in this field and the ones selected by
                                    namespaceSelector. null or empty namespaces list
                                    and null namespaceSelector means "this pod's namespace".
                                  items:
                                    type: string
                                  type: array
                                topologyKey:
                                  description: This pod should be co-located (affinity)
                                    or not co-located (anti-affinity) with the pods
                                    matching the labelSelector in the specified namespaces,
                                    where co-located is defined as running on a node
                                    whose value of the label with key topologyKey
                                    matches that of any node on which any of the selected
                                    pods is running. Empty topologyKey is not allowed.
                                  type: string
                              required:
                              - topologyKey
                              type: object
                            type: array
                        type: object
                      enablePodAntiAffinity:
                        description: Activates anti-affinity for the pods. The operator
                          will define pods anti-affinity unless this field is explicitly
                          set to false
                        type: boolean
                      nodeAffinity:
                        description: 'NodeAffinity describes node affinity scheduling
                          rules for the pod. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#node-affinity'
                        properties:
                          preferredDuringSchedulingIgnoredDuringExecution:
                            description: The scheduler will prefer to schedule pods
                              to nodes that satisfy the affinity expressions specified
                              by this field, but it may choose a node that violates
                              one or more of the expressions. The node that is most
                              preferred is the one with the greatest sum of weights,
                              i.e. for each node that meets all of the scheduling
                              requirements (resource request, requiredDuringScheduling
                              affinity expressions, etc.), compute a sum by iterating
                              through the elements of this field and adding "weight"
                              to the sum if the node matches the corresponding matchExpressions;
                              the node(s) with the highest sum are the most preferred.
                            items:
                              description: An empty preferred scheduling term matches
                                all objects with implicit weight 0 (i.e. it's a no-op).
                                A null preferred scheduling term matches no objects
                                (i.e. is also a no-op).
                              properties:
                                preference:
                                  description: A node selector term, associated with
                                    the corresponding weight.
                                  properties:
                                    matchExpressions:
                                      description: A list of node selector requirements
                                        by node's labels.
                                      items:
                                        description: A node selector requirement is
                                          a selector that contains values, a key,
                                          and an operator that relates the key and
                                          values.
                                        properties:
                                          key:
                                            description: The label key that the selector
                                              applies to.
                                            type: string
                                          operator:
                                            description: Represents a key's relationship
                                              to a set of values. Valid operators
                                              are In, NotIn, Exists, DoesNotExist.
                                              Gt, and Lt.
                                            type: string
                                          values:
                                            description: An array of string values.
                                              If the operator is In or NotIn, the
                                              values array must be non-empty. If the
                                              operator is Exists or DoesNotExist,
                                              the values array must be empty. If the
                                              operator is Gt or Lt, the values array
                                              must have a single element, which will
                                              be interpreted as an integer. This array
                                              is replaced during a strategic merge
                                              patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                    matchFields:
                                      description: A list of node selector requirements
                                        by node's fields.
                                      items:
                                        description: A node selector requirement is
                                          a selector that contains values, a key,
                                          and an operator that relates the key and
                                          values.
                                        properties:
                                          key:
                                            description: The label key that the selector
                                              applies to.
                                            type: string
                                          operator:
                                            description: Represents a key's relationship
                                              to a set of values. Valid operators
                                              are In, NotIn, Exists, DoesNotExist.
                                              Gt, and Lt.
                                            type: string
                                          values:
                                            description: An array of string values.
                                              If the operator is In or NotIn, the
                                              values array must be non-empty. If the
                                              operator is Exists or DoesNotExist,
                                              the values array must be empty. If the
                                              operator is Gt or Lt, the values array
                                              must have a single element, which will
                                              be interpreted as an integer. This array
                                              is replaced during a strategic merge
                                              patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                  type: object
                                  x-kubernetes-map-type: atomic
                                weight:
                                  description: Weight associated with matching the
                                    corresponding nodeSelectorTerm, in the range 1-100.
                                  format: int32
                                  type: integer
                              required:
                              - preference
                              - weight
                              type: object
                            type: array
                          requiredDuringSchedulingIgnoredDuringExecution:
                            description: If the affinity requirements specified by
                              this field are not met at scheduling time, the pod will
                              not be scheduled onto the node. If the affinity requirements
                              specified by this field cease to be met at some point
                              during pod execution (e.g. due to an update), the system
                              may or may not try to eventually evict the pod from
                              its node.
                            properties:
                              nodeSelectorTerms:
                                description: Required. A list of node selector terms.
                                  The terms are ORed.
                                items:
                                  description: A null or empty node selector term
                                    matches no objects. The requirements of them are
                                    ANDed. The TopologySelectorTerm type implements
                                    a subset of the NodeSelectorTerm.
                                  properties:
                                    matchExpressions:
                                      description: A list of node selector requirements
                                        by node's labels.
                                      items:
                                        description: A node selector requirement is
                                          a selector that contains values, a key,
                                          and an operator that relates the key and
                                          values.
                                        properties:
                                          key:
                                            description: The label key that the selector
                                              applies to.
                                            type: string
                                          operator:
                                            description: Represents a key's relationship
                                              to a set of values. Valid operators
                                              are In, NotIn, Exists, DoesNotExist.
                                              Gt, and Lt.
                                            type: string
                                          values:
                                            description: An array of string values.
                                              If the operator is In or NotIn, the
                                              values array must be non-empty. If the
                                              operator is Exists or DoesNotExist,
                                              the values array must be empty. If the
                                              operator is Gt or Lt, the values array
                                              must have a single element, which will
                                              be interpreted as an integer. This array
                                              is replaced during a strategic merge
                                              patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                    matchFields:
                                      description: A list of node selector requirements
                                        by node's fields.
                                      items:
                                        description: A node selector requirement is
                                          a selector that contains values, a key,
                                          and an operator that relates the key and
                                          values.
                                        properties:
                                          key:
                                            description: The label key that the selector
                                              applies to.
                                            type: string
                                          operator:
                                            description: Represents a key's relationship
                                              to a set of values. Valid operators
                                              are In, NotIn, Exists, DoesNotExist.
                                              Gt, and Lt.
                                            type: string
                                          values:
                                            description: An array of string values.
                                              If the operator is In or NotIn, the
                                              values array must be non-empty. If the
                                              operator is Exists or DoesNotExist,
                                              the values array must be empty. If the
                                              operator is Gt or Lt, the values array
                                              must have a single element, which will
                                              be interpreted as an integer. This array
                                              is replaced during a strategic merge
                                              patch.
                                            items:
                                              type: string
                                            type: array
                                        required:
                                        - key
                                        - operator
                                        type: object
                                      type: array
                                  type: object
                                  x-kubernetes-map-type: atomic
                                type: array
                            required:
                            - nodeSelectorTerms
                            type: object
                            x-kubernetes-map-type: atomic
                        type: object
                      nodeSelector:
                        additionalProperties:
                          type: string
                        description: 'NodeSelector is map of key-value pairs used
                          to define the nodes on which the pods can run. More info:
                          https://kubernetes.io/docs/concepts/configuration/assign-pod-node/'
                        type: object
                      podAntiAffinityType:
                        description: 'PodAntiAffinityType allows the user to decide
                          whether pod anti-affinity between cluster instance has to
                          be considered a strong requirement during scheduling or
                          not. Allowed values are: "preferred" (default if empty)
                          or "required". Setting it to "required", could lead to instances
                          remaining pending until new kubernetes nodes are added if
                          all the existing nodes don''t match the required pod anti-affinity
                          rule. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/assign-pod-node/#inter-pod-affinity-and-anti-affinity'
                        type: string
                      tolerations:
                        description: 'Tolerations is a list of Tolerations that should
                          be set for all the pods, in order to allow them to run on
                          tainted nodes. More info: https://kubernetes.io/docs/concepts/scheduling-eviction/taint-and-toleration/'
                        items:
                          description: The pod this Toleration is attached to tolerates
                            any taint that matches the triple <key,value,effect> using
                            the matching operator <operator>.
                          properties:
                            effect:
                              description: Effect indicates the taint effect to match.
                                Empty means match all taint effects. When specified,
                                allowed values are NoSchedule, PreferNoSchedule and
                                NoExecute.
                              type: string
                            key:
                              description: Key is the taint key that the toleration
                                applies to. Empty means match all taint keys. If the
                                key is empty, operator must be Exists; this combination
                                means to match all values and all keys.
                              type: string
                            operator:
                              description: Operator represents a key's relationship
                                to the value. Valid operators are Exists and Equal.
                                Defaults to Equal. Exists is equivalent to wildcard
                                for value, so that a pod can tolerate all taints of
                                a particular category.
                              type: string
                            tolerationSeconds:
                              description: TolerationSeconds represents the period
                                of time the toleration (which must be of effect NoExecute,
                                otherwise this field is ignored) tolerates the taint.
                                By default, it is not set, which means tolerate the
                                taint forever (do not evict). Zero and negative values
                                will be treated as 0 (evict immediately) by the system.
                              format: int64
                              type: integer
                            value:
                              description: Value is the taint value the toleration
                                matches to. If the operator is Exists, the value should
                                be empty, otherwise just a regular string.
                              type: string
                          type: object
                        type: array
                      topologyKey:
                        description: TopologyKey to use for anti-affinity configuration.
                          See k8s documentation for more info on that
                        type: string
                    type: object
                  clusterMaxStartDelay:
                    default: 300
                    description: The time in seconds that is allowed for a PostgreSQL
                      instance to successfully start up (default 300)
                    format: int32
                    type: integer
                  logLevel:
                    default: info
                    description: 'The instances'' log level, one of the following
                      values: error, warning, info (default), debug, trace'
                    enum:
                    - error
                    - warning
                    - info
                    - debug
                    - trace
                    type: string
                  managed:
                    description: The configuration that is used by the portions of
                      PostgreSQL that are managed by the CNP instance manager
                    properties:
                      roles:
                        description: Database roles managed by the `Cluster`
                        items:
                          description: "RoleConfiguration is the representation, in
                            Kubernetes, of a PostgreSQL role with the additional field
                            Ensure specifying whether to ensure the presence or absence
                            of the role in the database \n The defaults of the CREATE
                            ROLE command are applied Reference: https://www.postgresql.org/docs/current/sql-createrole.html"
                          properties:
                            bypassrls:
                              description: Whether a role bypasses every row-level
                                security (RLS) policy. Default is `false`.
                              type: boolean
                            comment:
                              description: Description of the role
                              type: string
                            connectionLimit:
                              default: -1
                              description: If the role can log in, this specifies
                                how many concurrent connections the role can make.
                                `-1` (the default) means no limit.
                              format: int64
                              type: integer
                            createdb:
                              description: When set to `true`, the role being defined
                                will be allowed to create new databases. Specifying
                                `false` (default) will deny a role the ability to
                                create databases.
                              type: boolean
                            createrole:
                              description: Whether the role will be permitted to create,
                                alter, drop, comment on, change the security label
                                for, and grant or revoke membership in other roles.
                                Default is `false`.
                              type: boolean
                            disablePassword:
                              description: DisablePassword indicates that a role's
                                password should be set to NULL in Postgres
                              type: boolean
                            ensure:
                              default: present
                              description: Ensure the role is `present` or `absent`
                                - defaults to "present"
                              enum:
                              - present
                              - absent
                              type: string
                            inRoles:
                              description: List of one or more existing roles to which
                                this role will be immediately added as a new member.
                                Default empty.
                              items:
                                type: string
                              type: array
                            inherit:
                              default: true
                              description: Whether a role "inherits" the privileges
                                of roles it is a member of. Defaults is `true`.
                              type: boolean
                            login:
                              description: Whether the role is allowed to log in.
                                A role having the `login` attribute can be thought
                                of as a user. Roles without this attribute are useful
                                for managing database privileges, but are not users
                                in the usual sense of the word. Default is `false`.
                              type: boolean
                            name:
                              description: Name of the role
                              type: string
                            passwordSecret:
                              description: Secret containing the password of the role
                                (if present) If null, the password will be ignored
                                unless DisablePassword is set
                              properties:
                                name:
                                  description: Name of the referent.
                                  type: string
                              required:
                              - name
                              type: object
                            replication:
                              description: Whether a role is a replication role. A
                                role must have this attribute (or be a superuser)
                                in order to be able to connect to the server in replication
                                mode (physical or logical replication) and in order
                                to be able to create or drop replication slots. A
                                role having the `replication` attribute is a very
                                highly privileged role, and should only be used on
                                roles actually used for replication. Default is `false`.
                              type: boolean
                            superuser:
                              description: Whether the role is a `superuser` who can
                                override all access restrictions within the database
                                - superuser status is dangerous and should be used
                                only when really needed. You must yourself be a superuser
                                to create a new superuser. Defaults is `false`.
                              type: boolean
                            validUntil:
                              description: Date and time after which the role's password
                                is no longer valid. When omitted, the password will
                                never expire (default).
                              format: date-time
                              type: string
                          required:
                          - name
                          type: object
                        type: array
                    type: object
                  metadata:
                    description: Metadata applied exclusively to the generated Cluster
                      resources. Useful for applying AppArmor profiles.
                    properties:
                      annotations:
                        additionalProperties:
                          type: string
                        type: object
                      labels:
                        additionalProperties:
                          type: string
                        type: object
                    type: object
                  monitoring:
                    description: The configuration of the monitoring infrastructure
                      of this cluster
                    properties:
                      customQueriesConfigMap:
                        description: The list of config maps containing the custom
                          queries
                        items:
                          description: ConfigMapKeySelector contains enough information
                            to let you locate the key of a ConfigMap
                          properties:
                            key:
                              description: The key to select
                              type: string
                            name:
                              description: Name of the referent.
                              type: string
                          required:
                          - key
                          - name
                          type: object
                        type: array
                      customQueriesSecret:
                        description: The list of secrets containing the custom queries
                        items:
                          description: SecretKeySelector contains enough information
                            to let you locate the key of a Secret
                          properties:
                            key:
                              description: The key to select
                              type: string
                            name:
                              description: Name of the referent.
                              type: string
                          required:
                          - key
                          - name
                          type: object
                        type: array
                      disableDefaultQueries:
                        default: false
                        description: 'Whether the default queries should be injected.
                          Set it to `true` if you don''t want to inject default queries
                          into the cluster. Default: false.'
                        type: boolean
                      enablePodMonitor:
                        default: false
                        description: Enable or disable the `PodMonitor`
                        type: boolean
                      podMonitorMetricRelabelings:
                        description: The list of metric relabelings for the `PodMonitor`.
                          Applied to samples before ingestion.
                        items:
                          description: "RelabelConfig allows dynamic rewriting of
                            the label set for targets, alerts, scraped samples and
                            remote write samples. \n More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config"
                          properties:
                            action:
                              default: replace
                              description: "Action to perform based on the regex matching.
                                \n `Uppercase` and `Lowercase` actions require Prometheus
                                >= v2.36.0. `DropEqual` and `KeepEqual` actions require
                                Prometheus >= v2.41.0. \n Default: \"Replace\""
                              enum:
                              - replace
                              - Replace
                              - keep
                              - Keep
                              - drop
                              - Drop
                              - hashmod
                              - HashMod
                              - labelmap
                              - LabelMap
                              - labeldrop
                              - LabelDrop
                              - labelkeep
                              - LabelKeep
                              - lowercase
                              - Lowercase
                              - uppercase
                              - Uppercase
                              - keepequal
                              - KeepEqual
                              - dropequal
                              - DropEqual
                              type: string
                            modulus:
                              description: "Modulus to take of the hash of the source
                                label values. \n Only applicable when the action is
                                `HashMod`."
                              format: int64
                              type: integer
                            regex:
                              description: Regular expression against which the extracted
                                value is matched.
                              type: string
                            replacement:
                              description: "Replacement value against which a Replace
                                action is performed if the regular expression matches.
                                \n Regex capture groups are available."
                              type: string
                            separator:
                              description: Separator is the string between concatenated
                                SourceLabels.
                              type: string
                            sourceLabels:
                              description: The source labels select values from existing
                                labels. Their content is concatenated using the configured
                                Separator and matched against the configured regular
                                expression.
                              items:
                                description: LabelName is a valid Prometheus label
                                  name which may only contain ASCII letters, numbers,
                                  as well as underscores.
                                pattern: ^[a-zA-Z_][a-zA-Z0-9_]*$
                                type: string
                              type: array
                            targetLabel:
                              description: "Label to which the resulting string is
                                written in a replacement. \n It is mandatory for `Replace`,
                                `HashMod`, `Lowercase`, `Uppercase`, `KeepEqual` and
                                `DropEqual` actions. \n Regex capture groups are available."
                              type: string
                          type: object
                        type: array
                      podMonitorRelabelings:
                        description: The list of relabelings for the `PodMonitor`.
                          Applied to samples before scraping.
                        items:
                          description: "RelabelConfig allows dynamic rewriting of
                            the label set for targets, alerts, scraped samples and
                            remote write samples. \n More info: https://prometheus.io/docs/prometheus/latest/configuration/configuration/#relabel_config"
                          properties:
                            action:
                              default: replace
                              description: "Action to perform based on the regex matching.
                                \n `Uppercase` and `Lowercase` actions require Prometheus
                                >= v2.36.0. `DropEqual` and `KeepEqual` actions require
                                Prometheus >= v2.41.0. \n Default: \"Replace\""
                              enum:
                              - replace
                              - Replace
                              - keep
                              - Keep
                              - drop
                              - Drop
                              - hashmod
                              - HashMod
                              - labelmap
                              - LabelMap
                              - labeldrop
                              - LabelDrop
                              - labelkeep
                              - LabelKeep
                              - lowercase
                              - Lowercase
                              - uppercase
                              - Uppercase
                              - keepequal
                              - KeepEqual
                              - dropequal
                              - DropEqual
                              type: string
                            modulus:
                              description: "Modulus to take of the hash of the source
                                label values. \n Only applicable when the action is
                                `HashMod`."
                              format: int64
                              type: integer
                            regex:
                              description: Regular expression against which the extracted
                                value is matched.
                              type: string
                            replacement:
                              description: "Replacement value against which a Replace
                                action is performed if the regular expression matches.
                                \n Regex capture groups are available."
                              type: string
                            separator:
                              description: Separator is the string between concatenated
                                SourceLabels.
                              type: string
                            sourceLabels:
                              description: The source labels select values from existing
                                labels. Their content is concatenated using the configured
                                Separator and matched against the configured regular
                                expression.
                              items:
                                description: LabelName is a valid Prometheus label
                                  name which may only contain ASCII letters, numbers,
                                  as well as underscores.
                                pattern: ^[a-zA-Z_][a-zA-Z0-9_]*$
                                type: string
                              type: array
                            targetLabel:
                              description: "Label to which the resulting string is
                                written in a replacement. \n It is mandatory for `Replace`,
                                `HashMod`, `Lowercase`, `Uppercase`, `KeepEqual` and
                                `DropEqual` actions. \n Regex capture groups are available."
                              type: string
                          type: object
                        type: array
                    type: object
                  otel:
                    description: OpenTelemetry Configuration
                    properties:
                      metricsURL:
                        description: The OpenTelemetry HTTP endpoint URL to accept
                          metrics data
                        type: string
                      tls:
                        description: TLSConfiguration provides the TLS certificate
                          configuration when MetricsURL and TraceURL are using HTTPS
                        properties:
                          caBundleSecretRef:
                            description: CABundleSecretRef is a reference to a secret
                              field containing the CA bundle to verify the openTelemetry
                              server certificate
                            properties:
                              key:
                                description: The key to select
                                type: string
                              name:
                                description: Name of the referent.
                                type: string
                            required:
                            - key
                            - name
                            type: object
                          clientCertSecret:
                            description: ClientCertSecret is the name of the secret
                              containing the client certificate used to connect to
                              openTelemetry. It must contain both the standard "tls.crt"
                              and "tls.key" files, encoded in PEM format.
                            properties:
                              name:
                                description: Name of the referent.
                                type: string
                            required:
                            - name
                            type: object
                        type: object
                      traceEnable:
                        description: Whether to push trace data to OpenTelemetry traceUrl
                        type: boolean
                      traceURL:
                        description: The OpenTelemetry HTTP endpoint URL to accept
                          trace data
                        type: string
                    required:
                    - traceEnable
                    type: object
                  postInitSQL:
                    description: List of SQL queries to be executed as a superuser
                      immediately after a node has been created - to be used with
                      extreme care (by default empty)
                    items:
                      type: string
                    type: array
                  postInitTemplateSQL:
                    description: List of SQL queries to be executed as a superuser
                      in the `template1` after a node has been created - to be used
                      with extreme care (by default empty)
                    items:
                      type: string
                    type: array
                  postgresql:
                    description: Configuration of the PostgreSQL server
                    properties:
                      enableAlterSystem:
                        description: If this parameter is true, the user will be able
                          to invoke `ALTER SYSTEM` on this EDB Postgres for Kubernetes
                          Cluster. This should only be used for debugging and troubleshooting.
                          Defaults to false.
                        type: boolean
                      epas:
                        description: EDB Postgres Advanced Server specific configurations
                        properties:
                          audit:
                            description: If true enables edb_audit logging
                            type: boolean
                          tde:
                            description: TDE configuration
                            properties:
                              enabled:
                                description: True if we want to have TDE enabled
                                type: boolean
                              passphraseCommand:
                                description: PassphraseCommand is the command executed
                                  to get the passphrase that will be passed to the
                                  OpenSSL command to encrypt and decrypt
                                properties:
                                  key:
                                    description: The key of the secret to select from.  Must
                                      be a valid secret key.
                                    type: string
                                  name:
                                    description: 'Name of the referent. More info:
                                      https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                      TODO: Add other useful fields. apiVersion, kind,
                                      uid?'
                                    type: string
                                  optional:
                                    description: Specify whether the Secret or its
                                      key must be defined
                                    type: boolean
                                required:
                                - key
                                type: object
                                x-kubernetes-map-type: atomic
                              secretKeyRef:
                                description: Reference to the secret that contains
                                  the encryption key
                                properties:
                                  key:
                                    description: The key of the secret to select from.  Must
                                      be a valid secret key.
                                    type: string
                                  name:
                                    description: 'Name of the referent. More info:
                                      https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                      TODO: Add other useful fields. apiVersion, kind,
                                      uid?'
                                    type: string
                                  optional:
                                    description: Specify whether the Secret or its
                                      key must be defined
                                    type: boolean
                                required:
                                - key
                                type: object
                                x-kubernetes-map-type: atomic
                              unwrapCommand:
                                description: UnwrapCommand is the decryption command
                                  provided by the user
                                properties:
                                  key:
                                    description: The key of the secret to select from.  Must
                                      be a valid secret key.
                                    type: string
                                  name:
                                    description: 'Name of the referent. More info:
                                      https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                      TODO: Add other useful fields. apiVersion, kind,
                                      uid?'
                                    type: string
                                  optional:
                                    description: Specify whether the Secret or its
                                      key must be defined
                                    type: boolean
                                required:
                                - key
                                type: object
                                x-kubernetes-map-type: atomic
                              wrapCommand:
                                description: WrapCommand is the encrypt command provided
                                  by the user
                                properties:
                                  key:
                                    description: The key of the secret to select from.  Must
                                      be a valid secret key.
                                    type: string
                                  name:
                                    description: 'Name of the referent. More info:
                                      https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                      TODO: Add other useful fields. apiVersion, kind,
                                      uid?'
                                    type: string
                                  optional:
                                    description: Specify whether the Secret or its
                                      key must be defined
                                    type: boolean
                                required:
                                - key
                                type: object
                                x-kubernetes-map-type: atomic
                            type: object
                        type: object
                      ldap:
                        description: Options to specify LDAP configuration
                        properties:
                          bindAsAuth:
                            description: Bind as authentication configuration
                            properties:
                              prefix:
                                description: Prefix for the bind authentication option
                                type: string
                              suffix:
                                description: Suffix for the bind authentication option
                                type: string
                            type: object
                          bindSearchAuth:
                            description: Bind+Search authentication configuration
                            properties:
                              baseDN:
                                description: Root DN to begin the user search
                                type: string
                              bindDN:
                                description: DN of the user to bind to the directory
                                type: string
                              bindPassword:
                                description: Secret with the password for the user
                                  to bind to the directory
                                properties:
                                  key:
                                    description: The key of the secret to select from.  Must
                                      be a valid secret key.
                                    type: string
                                  name:
                                    description: 'Name of the referent. More info:
                                      https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                                      TODO: Add other useful fields. apiVersion, kind,
                                      uid?'
                                    type: string
                                  optional:
                                    description: Specify whether the Secret or its
                                      key must be defined
                                    type: boolean
                                required:
                                - key
                                type: object
                                x-kubernetes-map-type: atomic
                              searchAttribute:
                                description: Attribute to match against the username
                                type: string
                              searchFilter:
                                description: Search filter to use when doing the search+bind
                                  authentication
                                type: string
                            type: object
                          port:
                            description: LDAP server port
                            type: integer
                          scheme:
                            description: LDAP schema to be used, possible options
                              are `ldap` and `ldaps`
                            enum:
                            - ldap
                            - ldaps
                            type: string
                          server:
                            description: LDAP hostname or IP address
                            type: string
                          tls:
                            description: Set to 'true' to enable LDAP over TLS. 'false'
                              is default
                            type: boolean
                        type: object
                      parameters:
                        additionalProperties:
                          type: string
                        description: PostgreSQL configuration options (postgresql.conf)
                        type: object
                      pg_hba:
                        description: PostgreSQL Host Based Authentication rules (lines
                          to be appended to the pg_hba.conf file)
                        items:
                          type: string
                        type: array
                      pg_ident:
                        description: PostgreSQL User Name Maps rules (lines to be
                          appended to the pg_ident.conf file)
                        items:
                          type: string
                        type: array
                      promotionTimeout:
                        description: Specifies the maximum number of seconds to wait
                          when promoting an instance to primary. Default value is
                          40000000, greater than one year in seconds, big enough to
                          simulate an infinite timeout
                        format: int32
                        type: integer
                      shared_preload_libraries:
                        description: Lists of shared preload libraries to add to the
                          default ones
                        items:
                          type: string
                        type: array
                      syncReplicaElectionConstraint:
                        description: Requirements to be met by sync replicas. This
                          will affect how the "synchronous_standby_names" parameter
                          will be set up.
                        properties:
                          enabled:
                            description: This flag enables the constraints for sync
                              replicas
                            type: boolean
                          nodeLabelsAntiAffinity:
                            description: A list of node labels values to extract and
                              compare to evaluate if the pods reside in the same topology
                              or not
                            items:
                              type: string
                            type: array
                        required:
                        - enabled
                        type: object
                    type: object
                  resources:
                    description: Resources requirements of every generated Pod. Please
                      refer to https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/
                      for more information.
                    properties:
                      claims:
                        description: "Claims lists the names of resources, defined
                          in spec.resourceClaims, that are used by this container.
                          \n This is an alpha field and requires enabling the DynamicResourceAllocation
                          feature gate. \n This field is immutable. It can only be
                          set for containers."
                        items:
                          description: ResourceClaim references one entry in PodSpec.ResourceClaims.
                          properties:
                            name:
                              description: Name must match the name of one entry in
                                pod.spec.resourceClaims of the Pod where this field
                                is used. It makes that resource available inside a
                                container.
                              type: string
                          required:
                          - name
                          type: object
                        type: array
                        x-kubernetes-list-map-keys:
                        - name
                        x-kubernetes-list-type: map
                      limits:
                        additionalProperties:
                          anyOf:
                          - type: integer
                          - type: string
                          pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                          x-kubernetes-int-or-string: true
                        description: 'Limits describes the maximum amount of compute
                          resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                        type: object
                      requests:
                        additionalProperties:
                          anyOf:
                          - type: integer
                          - type: string
                          pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                          x-kubernetes-int-or-string: true
                        description: 'Requests describes the minimum amount of compute
                          resources required. If Requests is omitted for a container,
                          it defaults to Limits if that is explicitly specified, otherwise
                          to an implementation-defined value. Requests cannot exceed
                          Limits. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                        type: object
                    type: object
                  seccompProfile:
                    description: 'The SeccompProfile applied to every Pod and Container.
                      Defaults to: `RuntimeDefault`'
                    properties:
                      localhostProfile:
                        description: localhostProfile indicates a profile defined
                          in a file on the node should be used. The profile must be
                          preconfigured on the node to work. Must be a descending
                          path, relative to the kubelet's configured seccomp profile
                          location. Must be set if type is "Localhost". Must NOT be
                          set for any other type.
                        type: string
                      type:
                        description: "type indicates which kind of seccomp profile
                          will be applied. Valid options are: \n Localhost - a profile
                          defined in a file on the node should be used. RuntimeDefault
                          - the container runtime default profile should be used.
                          Unconfined - no profile should be applied."
                        type: string
                    required:
                    - type
                    type: object
                  serviceAccountTemplate:
                    description: The service account template to be passed to CNP
                    properties:
                      metadata:
                        description: Metadata are the metadata to be used for the
                          generated service account
                        properties:
                          annotations:
                            additionalProperties:
                              type: string
                            description: 'Annotations is an unstructured key value
                              map stored with a resource that may be set by external
                              tools to store and retrieve arbitrary metadata. They
                              are not queryable and should be preserved when modifying
                              objects. More info: http://kubernetes.io/docs/user-guide/annotations'
                            type: object
                          labels:
                            additionalProperties:
                              type: string
                            description: 'Map of string keys and values that can be
                              used to organize and categorize (scope and select) objects.
                              May match selectors of replication controllers and services.
                              More info: http://kubernetes.io/docs/user-guide/labels'
                            type: object
                        type: object
                    required:
                    - metadata
                    type: object
                  smartShutdownTimeout:
                    default: 15
                    description: 'The time in seconds that controls the window of
                      time reserved for the smart shutdown of Postgres to complete.
                      Make sure you reserve enough time for the operator to request
                      a fast shutdown of Postgres (that is: `stopDelay` - `smartShutdownTimeout`).'
                    format: int32
                    type: integer
                  startDelay:
                    default: 3600
                    description: The time in seconds that is allowed for a PostgreSQL
                      instance to successfully start up (default 3600)
                    format: int32
                    type: integer
                  stopDelay:
                    default: 180
                    description: The time in seconds that is allowed for a PostgreSQL
                      instance node to gracefully shutdown (default 180)
                    format: int32
                    type: integer
                  storage:
                    description: Configuration of the storage of the instances
                    properties:
                      pvcTemplate:
                        description: Template to be used to generate the Persistent
                          Volume Claim
                        properties:
                          accessModes:
                            description: 'accessModes contains the desired access
                              modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1'
                            items:
                              type: string
                            type: array
                          dataSource:
                            description: 'dataSource field can be used to specify
                              either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
                              * An existing PVC (PersistentVolumeClaim) If the provisioner
                              or an external controller can support the specified
                              data source, it will create a new volume based on the
                              contents of the specified data source. When the AnyVolumeDataSource
                              feature gate is enabled, dataSource contents will be
                              copied to dataSourceRef, and dataSourceRef contents
                              will be copied to dataSource when dataSourceRef.namespace
                              is not specified. If the namespace is specified, then
                              dataSourceRef will not be copied to dataSource.'
                            properties:
                              apiGroup:
                                description: APIGroup is the group for the resource
                                  being referenced. If APIGroup is not specified,
                                  the specified Kind must be in the core API group.
                                  For any other third-party types, APIGroup is required.
                                type: string
                              kind:
                                description: Kind is the type of resource being referenced
                                type: string
                              name:
                                description: Name is the name of resource being referenced
                                type: string
                            required:
                            - kind
                            - name
                            type: object
                            x-kubernetes-map-type: atomic
                          dataSourceRef:
                            description: 'dataSourceRef specifies the object from
                              which to populate the volume with data, if a non-empty
                              volume is desired. This may be any object from a non-empty
                              API group (non core object) or a PersistentVolumeClaim
                              object. When this field is specified, volume binding
                              will only succeed if the type of the specified object
                              matches some installed volume populator or dynamic provisioner.
                              This field will replace the functionality of the dataSource
                              field and as such if both fields are non-empty, they
                              must have the same value. For backwards compatibility,
                              when namespace isn''t specified in dataSourceRef, both
                              fields (dataSource and dataSourceRef) will be set to
                              the same value automatically if one of them is empty
                              and the other is non-empty. When namespace is specified
                              in dataSourceRef, dataSource isn''t set to the same
                              value and must be empty. There are three important differences
                              between dataSource and dataSourceRef: * While dataSource
                              only allows two specific types of objects, dataSourceRef
                              allows any non-core object, as well as PersistentVolumeClaim
                              objects. * While dataSource ignores disallowed values
                              (dropping them), dataSourceRef preserves all values,
                              and generates an error if a disallowed value is specified.
                              * While dataSource only allows local objects, dataSourceRef
                              allows objects in any namespaces. (Beta) Using this
                              field requires the AnyVolumeDataSource feature gate
                              to be enabled. (Alpha) Using the namespace field of
                              dataSourceRef requires the CrossNamespaceVolumeDataSource
                              feature gate to be enabled.'
                            properties:
                              apiGroup:
                                description: APIGroup is the group for the resource
                                  being referenced. If APIGroup is not specified,
                                  the specified Kind must be in the core API group.
                                  For any other third-party types, APIGroup is required.
                                type: string
                              kind:
                                description: Kind is the type of resource being referenced
                                type: string
                              name:
                                description: Name is the name of resource being referenced
                                type: string
                              namespace:
                                description: Namespace is the namespace of resource
                                  being referenced Note that when a namespace is specified,
                                  a gateway.networking.k8s.io/ReferenceGrant object
                                  is required in the referent namespace to allow that
                                  namespace's owner to accept the reference. See the
                                  ReferenceGrant documentation for details. (Alpha)
                                  This field requires the CrossNamespaceVolumeDataSource
                                  feature gate to be enabled.
                                type: string
                            required:
                            - kind
                            - name
                            type: object
                          resources:
                            description: 'resources represents the minimum resources
                              the volume should have. If RecoverVolumeExpansionFailure
                              feature is enabled users are allowed to specify resource
                              requirements that are lower than previous value but
                              must still be higher than capacity recorded in the status
                              field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources'
                            properties:
                              limits:
                                additionalProperties:
                                  anyOf:
                                  - type: integer
                                  - type: string
                                  pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                  x-kubernetes-int-or-string: true
                                description: 'Limits describes the maximum amount
                                  of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                                type: object
                              requests:
                                additionalProperties:
                                  anyOf:
                                  - type: integer
                                  - type: string
                                  pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                  x-kubernetes-int-or-string: true
                                description: 'Requests describes the minimum amount
                                  of compute resources required. If Requests is omitted
                                  for a container, it defaults to Limits if that is
                                  explicitly specified, otherwise to an implementation-defined
                                  value. Requests cannot exceed Limits. More info:
                                  https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                                type: object
                            type: object
                          selector:
                            description: selector is a label query over volumes to
                              consider for binding.
                            properties:
                              matchExpressions:
                                description: matchExpressions is a list of label selector
                                  requirements. The requirements are ANDed.
                                items:
                                  description: A label selector requirement is a selector
                                    that contains values, a key, and an operator that
                                    relates the key and values.
                                  properties:
                                    key:
                                      description: key is the label key that the selector
                                        applies to.
                                      type: string
                                    operator:
                                      description: operator represents a key's relationship
                                        to a set of values. Valid operators are In,
                                        NotIn, Exists and DoesNotExist.
                                      type: string
                                    values:
                                      description: values is an array of string values.
                                        If the operator is In or NotIn, the values
                                        array must be non-empty. If the operator is
                                        Exists or DoesNotExist, the values array must
                                        be empty. This array is replaced during a
                                        strategic merge patch.
                                      items:
                                        type: string
                                      type: array
                                  required:
                                  - key
                                  - operator
                                  type: object
                                type: array
                              matchLabels:
                                additionalProperties:
                                  type: string
                                description: matchLabels is a map of {key,value} pairs.
                                  A single {key,value} in the matchLabels map is equivalent
                                  to an element of matchExpressions, whose key field
                                  is "key", the operator is "In", and the values array
                                  contains only "value". The requirements are ANDed.
                                type: object
                            type: object
                            x-kubernetes-map-type: atomic
                          storageClassName:
                            description: 'storageClassName is the name of the StorageClass
                              required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1'
                            type: string
                          volumeAttributesClassName:
                            description: 'volumeAttributesClassName may be used to
                              set the VolumeAttributesClass used by this claim. If
                              specified, the CSI driver will create or update the
                              volume with the attributes defined in the corresponding
                              VolumeAttributesClass. This has a different purpose
                              than storageClassName, it can be changed after the claim
                              is created. An empty string value means that no VolumeAttributesClass
                              will be applied to the claim but it''s not allowed to
                              reset this field to empty string once it is set. If
                              unspecified and the PersistentVolumeClaim is unbound,
                              the default VolumeAttributesClass will be set by the
                              persistentvolume controller if it exists. If the resource
                              referred to by volumeAttributesClass does not exist,
                              this PersistentVolumeClaim will be set to a Pending
                              state, as reflected by the modifyVolumeStatus field,
                              until such as a resource exists. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#volumeattributesclass
                              (Alpha) Using this field requires the VolumeAttributesClass
                              feature gate to be enabled.'
                            type: string
                          volumeMode:
                            description: volumeMode defines what type of volume is
                              required by the claim. Value of Filesystem is implied
                              when not included in claim spec.
                            type: string
                          volumeName:
                            description: volumeName is the binding reference to the
                              PersistentVolume backing this claim.
                            type: string
                        type: object
                      resizeInUseVolumes:
                        default: true
                        description: Resize existent PVCs, defaults to true
                        type: boolean
                      size:
                        description: Size of the storage. Required if not already
                          specified in the PVC template. Changes to this field are
                          automatically reapplied to the created PVCs. Size cannot
                          be decreased.
                        type: string
                      storageClass:
                        description: StorageClass to use for PVCs. Applied after evaluating
                          the PVC template, if available. If not specified, the generated
                          PVCs will use the default storage class
                        type: string
                    type: object
                  walStorage:
                    description: Configuration of the WAL storage for the instances
                    properties:
                      pvcTemplate:
                        description: Template to be used to generate the Persistent
                          Volume Claim
                        properties:
                          accessModes:
                            description: 'accessModes contains the desired access
                              modes the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#access-modes-1'
                            items:
                              type: string
                            type: array
                          dataSource:
                            description: 'dataSource field can be used to specify
                              either: * An existing VolumeSnapshot object (snapshot.storage.k8s.io/VolumeSnapshot)
                              * An existing PVC (PersistentVolumeClaim) If the provisioner
                              or an external controller can support the specified
                              data source, it will create a new volume based on the
                              contents of the specified data source. When the AnyVolumeDataSource
                              feature gate is enabled, dataSource contents will be
                              copied to dataSourceRef, and dataSourceRef contents
                              will be copied to dataSource when dataSourceRef.namespace
                              is not specified. If the namespace is specified, then
                              dataSourceRef will not be copied to dataSource.'
                            properties:
                              apiGroup:
                                description: APIGroup is the group for the resource
                                  being referenced. If APIGroup is not specified,
                                  the specified Kind must be in the core API group.
                                  For any other third-party types, APIGroup is required.
                                type: string
                              kind:
                                description: Kind is the type of resource being referenced
                                type: string
                              name:
                                description: Name is the name of resource being referenced
                                type: string
                            required:
                            - kind
                            - name
                            type: object
                            x-kubernetes-map-type: atomic
                          dataSourceRef:
                            description: 'dataSourceRef specifies the object from
                              which to populate the volume with data, if a non-empty
                              volume is desired. This may be any object from a non-empty
                              API group (non core object) or a PersistentVolumeClaim
                              object. When this field is specified, volume binding
                              will only succeed if the type of the specified object
                              matches some installed volume populator or dynamic provisioner.
                              This field will replace the functionality of the dataSource
                              field and as such if both fields are non-empty, they
                              must have the same value. For backwards compatibility,
                              when namespace isn''t specified in dataSourceRef, both
                              fields (dataSource and dataSourceRef) will be set to
                              the same value automatically if one of them is empty
                              and the other is non-empty. When namespace is specified
                              in dataSourceRef, dataSource isn''t set to the same
                              value and must be empty. There are three important differences
                              between dataSource and dataSourceRef: * While dataSource
                              only allows two specific types of objects, dataSourceRef
                              allows any non-core object, as well as PersistentVolumeClaim
                              objects. * While dataSource ignores disallowed values
                              (dropping them), dataSourceRef preserves all values,
                              and generates an error if a disallowed value is specified.
                              * While dataSource only allows local objects, dataSourceRef
                              allows objects in any namespaces. (Beta) Using this
                              field requires the AnyVolumeDataSource feature gate
                              to be enabled. (Alpha) Using the namespace field of
                              dataSourceRef requires the CrossNamespaceVolumeDataSource
                              feature gate to be enabled.'
                            properties:
                              apiGroup:
                                description: APIGroup is the group for the resource
                                  being referenced. If APIGroup is not specified,
                                  the specified Kind must be in the core API group.
                                  For any other third-party types, APIGroup is required.
                                type: string
                              kind:
                                description: Kind is the type of resource being referenced
                                type: string
                              name:
                                description: Name is the name of resource being referenced
                                type: string
                              namespace:
                                description: Namespace is the namespace of resource
                                  being referenced Note that when a namespace is specified,
                                  a gateway.networking.k8s.io/ReferenceGrant object
                                  is required in the referent namespace to allow that
                                  namespace's owner to accept the reference. See the
                                  ReferenceGrant documentation for details. (Alpha)
                                  This field requires the CrossNamespaceVolumeDataSource
                                  feature gate to be enabled.
                                type: string
                            required:
                            - kind
                            - name
                            type: object
                          resources:
                            description: 'resources represents the minimum resources
                              the volume should have. If RecoverVolumeExpansionFailure
                              feature is enabled users are allowed to specify resource
                              requirements that are lower than previous value but
                              must still be higher than capacity recorded in the status
                              field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources'
                            properties:
                              limits:
                                additionalProperties:
                                  anyOf:
                                  - type: integer
                                  - type: string
                                  pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                  x-kubernetes-int-or-string: true
                                description: 'Limits describes the maximum amount
                                  of compute resources allowed. More info: https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                                type: object
                              requests:
                                additionalProperties:
                                  anyOf:
                                  - type: integer
                                  - type: string
                                  pattern: ^(\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))(([KMGTPE]i)|[numkMGTPE]|([eE](\+|-)?(([0-9]+(\.[0-9]*)?)|(\.[0-9]+))))?$
                                  x-kubernetes-int-or-string: true
                                description: 'Requests describes the minimum amount
                                  of compute resources required. If Requests is omitted
                                  for a container, it defaults to Limits if that is
                                  explicitly specified, otherwise to an implementation-defined
                                  value. Requests cannot exceed Limits. More info:
                                  https://kubernetes.io/docs/concepts/configuration/manage-resources-containers/'
                                type: object
                            type: object
                          selector:
                            description: selector is a label query over volumes to
                              consider for binding.
                            properties:
                              matchExpressions:
                                description: matchExpressions is a list of label selector
                                  requirements. The requirements are ANDed.
                                items:
                                  description: A label selector requirement is a selector
                                    that contains values, a key, and an operator that
                                    relates the key and values.
                                  properties:
                                    key:
                                      description: key is the label key that the selector
                                        applies to.
                                      type: string
                                    operator:
                                      description: operator represents a key's relationship
                                        to a set of values. Valid operators are In,
                                        NotIn, Exists and DoesNotExist.
                                      type: string
                                    values:
                                      description: values is an array of string values.
                                        If the operator is In or NotIn, the values
                                        array must be non-empty. If the operator is
                                        Exists or DoesNotExist, the values array must
                                        be empty. This array is replaced during a
                                        strategic merge patch.
                                      items:
                                        type: string
                                      type: array
                                  required:
                                  - key
                                  - operator
                                  type: object
                                type: array
                              matchLabels:
                                additionalProperties:
                                  type: string
                                description: matchLabels is a map of {key,value} pairs.
                                  A single {key,value} in the matchLabels map is equivalent
                                  to an element of matchExpressions, whose key field
                                  is "key", the operator is "In", and the values array
                                  contains only "value". The requirements are ANDed.
                                type: object
                            type: object
                            x-kubernetes-map-type: atomic
                          storageClassName:
                            description: 'storageClassName is the name of the StorageClass
                              required by the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#class-1'
                            type: string
                          volumeAttributesClassName:
                            description: 'volumeAttributesClassName may be used to
                              set the VolumeAttributesClass used by this claim. If
                              specified, the CSI driver will create or update the
                              volume with the attributes defined in the corresponding
                              VolumeAttributesClass. This has a different purpose
                              than storageClassName, it can be changed after the claim
                              is created. An empty string value means that no VolumeAttributesClass
                              will be applied to the claim but it''s not allowed to
                              reset this field to empty string once it is set. If
                              unspecified and the PersistentVolumeClaim is unbound,
                              the default VolumeAttributesClass will be set by the
                              persistentvolume controller if it exists. If the resource
                              referred to by volumeAttributesClass does not exist,
                              this PersistentVolumeClaim will be set to a Pending
                              state, as reflected by the modifyVolumeStatus field,
                              until such as a resource exists. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#volumeattributesclass
                              (Alpha) Using this field requires the VolumeAttributesClass
                              feature gate to be enabled.'
                            type: string
                          volumeMode:
                            description: volumeMode defines what type of volume is
                              required by the claim. Value of Filesystem is implied
                              when not included in claim spec.
                            type: string
                          volumeName:
                            description: volumeName is the binding reference to the
                              PersistentVolume backing this claim.
                            type: string
                        type: object
                      resizeInUseVolumes:
                        default: true
                        description: Resize existent PVCs, defaults to true
                        type: boolean
                      size:
                        description: Size of the storage. Required if not already
                          specified in the PVC template. Changes to this field are
                          automatically reapplied to the created PVCs. Size cannot
                          be decreased.
                        type: string
                      storageClass:
                        description: StorageClass to use for PVCs. Applied after evaluating
                          the PVC template, if available. If not specified, the generated
                          PVCs will use the default storage class
                        type: string
                    type: object
                required:
                - storage
                type: object
              witnessInstances:
                description: Number of witness instances required in the cluster
                format: int32
                minimum: 0
                type: integer
            required:
            - cnp
            - connectivity
            - instances
            - pgd
            type: object
          status:
            description: PGDGroupStatus defines the observed state of PGDGroup
            properties:
              CNP:
                description: Last known status of CNP
                properties:
                  applicationUserSecretIsPresent:
                    type: boolean
                  dataInstances:
                    default: 0
                    format: int32
                    type: integer
                  firstRecoverabilityPoints:
                    additionalProperties:
                      type: string
                    description: The recoverability points, keyed per CNP clusterName,
                      as a date in RFC3339 format
                    type: object
                  firstRecoverabilityPointsByMethod:
                    additionalProperties:
                      additionalProperties:
                        format: date-time
                        type: string
                      description: RecoverabilityPointsByMethod contains the first
                        recoverability points for a given backup method
                      type: object
                    description: 'The recoverability points by method, keyed per CNP
                      clusterName nolint: lll'
                    type: object
                  podDisruptionBudgetIsPresent:
                    type: boolean
                  superUserSecretIsPresent:
                    type: boolean
                  witnessInstances:
                    default: 0
                    format: int32
                    type: integer
                type: object
              PGD:
                description: Last known status of PGD
                properties:
                  nodeGroup:
                    description: NodeGroup is the status of the node group associated
                      with the PGDGroup
                    properties:
                      enableProxyRouting:
                        description: EnableProxyRouting is true is the node group
                          allows running PGD Proxies
                        type: boolean
                      enableRaft:
                        description: EnableRaft is true if the node group has a subgroup
                          raft instance
                        type: boolean
                      name:
                        description: Name is the name of the node group
                        type: string
                      routeReaderMaxLag:
                        description: RouteReaderMaxLag Maximum lag in bytes for node
                          to be considered viable read-only node
                        format: int64
                        type: integer
                      routeWriterMaxLag:
                        description: RouteWriterMaxLag Maximum lag in bytes of the
                          new write candidate to be selected as write leader, if no
                          candidate passes this, there will be no writer selected
                          automatically
                        format: int64
                        type: integer
                      routeWriterWaitFlush:
                        description: RouteWriterWaitFlush Whether to wait for replication
                          queue flush before switching to new leader when using `bdr.routing_leadership_transfer()`
                        type: boolean
                    required:
                    - name
                    type: object
                  raftConsensusLastChangedMessage:
                    description: RaftConsensusLastChangedMessage indicates the latest
                      reported message from bdr.monitor_group_raft
                    type: string
                  raftConsensusLastChangedStatus:
                    description: RaftConsensusLastChangedStatus indicates the latest
                      reported status from bdr.monitor_group_raft
                    type: string
                  raftConsensusLastChangedTimestamp:
                    description: RaftConsensusLastChangedTimestamp indicates when
                      the status and message were first reported
                    type: string
                  registeredProxies:
                    description: RegisteredProxies is the status of the registered
                      proxies
                    items:
                      description: PGDProxyEntry shows information about the proxies
                        available in the PGD configuration
                      properties:
                        consensusGracePeriod:
                          description: ConsensusGracePeriod the duration in seconds
                            for which proxy continues to route even upon loss of a
                            Raft leader.
                          format: int64
                          type: integer
                        fallbackGroupNames:
                          description: FallbackGroupNames are the names of the fallback
                            groups configured for this proxy
                          items:
                            type: string
                          type: array
                        fallbackGroupTimeout:
                          description: FallbackGroupTimeout the interval after which
                            the routing falls back to one of the fallback_groups
                          format: int64
                          type: integer
                        maxClientConn:
                          description: MaxClientConn maximum number of connections
                            the proxy will accept
                          type: integer
                        maxServerConn:
                          description: MaxServerConn maximum number of connections
                            the proxy will make to the Postgres node
                          type: integer
                        name:
                          description: Name is the name of the proxy
                          type: string
                        parentGroupName:
                          description: ParentGroupName is the parent PGD group of
                            this proxy
                          type: string
                        serverConnKeepalive:
                          description: ServerConnKeepalive keepalive interval for
                            server connections in seconds
                          format: int64
                          type: integer
                        serverConnTimeout:
                          description: ServerConnTimeout connection timeout for server
                            connections in seconds
                          format: int64
                          type: integer
                      required:
                      - name
                      type: object
                    type: array
                type: object
              PGDProxy:
                description: Last known status of PGDProxy
                properties:
                  proxyHash:
                    description: ProxyHash contains the hash we use to detect if we
                      need to reconcile the proxies
                    type: string
                  proxyInstances:
                    format: int32
                    type: integer
                  writeLead:
                    description: WriteLead is a reserved field for the operator, is
                      not intended for external usage. Will be removed in future versions
                    type: string
                type: object
              backup:
                description: The node that is taking backups of this PGDGroup
                properties:
                  clusterName:
                    type: string
                  scheduledBackupHash:
                    type: string
                  scheduledBackupName:
                    type: string
                type: object
              conditions:
                description: Conditions for PGDGroup object
                items:
                  description: "Condition contains details for one aspect of the current
                    state of this API Resource. --- This struct is intended for direct
                    use as an array at the field path .status.conditions.  For example,
                    \n type FooStatus struct{ // Represents the observations of a
                    foo's current state. // Known .status.conditions.type are: \"Available\",
                    \"Progressing\", and \"Degraded\" // +patchMergeKey=type // +patchStrategy=merge
                    // +listType=map // +listMapKey=type Conditions []metav1.Condition
                    `json:\"conditions,omitempty\" patchStrategy:\"merge\" patchMergeKey:\"type\"
                    protobuf:\"bytes,1,rep,name=conditions\"` \n // other fields }"
                  properties:
                    lastTransitionTime:
                      description: lastTransitionTime is the last time the condition
                        transitioned from one status to another. This should be when
                        the underlying condition changed.  If that is not known, then
                        using the time when the API field changed is acceptable.
                      format: date-time
                      type: string
                    message:
                      description: message is a human readable message indicating
                        details about the transition. This may be an empty string.
                      maxLength: 32768
                      type: string
                    observedGeneration:
                      description: observedGeneration represents the .metadata.generation
                        that the condition was set based upon. For instance, if .metadata.generation
                        is currently 12, but the .status.conditions[x].observedGeneration
                        is 9, the condition is out of date with respect to the current
                        state of the instance.
                      format: int64
                      minimum: 0
                      type: integer
                    reason:
                      description: reason contains a programmatic identifier indicating
                        the reason for the condition's last transition. Producers
                        of specific condition types may define expected values and
                        meanings for this field, and whether the values are considered
                        a guaranteed API. The value should be a CamelCase string.
                        This field may not be empty.
                      maxLength: 1024
                      minLength: 1
                      pattern: ^[A-Za-z]([A-Za-z0-9_,:]*[A-Za-z0-9_])?$
                      type: string
                    status:
                      description: status of the condition, one of True, False, Unknown.
                      enum:
                      - "True"
                      - "False"
                      - Unknown
                      type: string
                    type:
                      description: type of condition in CamelCase or in foo.example.com/CamelCase.
                        --- Many .condition.type values are consistent across resources
                        like Available, but because arbitrary conditions can be useful
                        (see .node.status.conditions), the ability to deconflict is
                        important. The regex it matches is (dns1123SubdomainFmt/)?(qualifiedNameFmt)
                      maxLength: 316
                      pattern: ^([a-z0-9]([-a-z0-9]*[a-z0-9])?(\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*/)?(([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9])$
                      type: string
                  required:
                  - lastTransitionTime
                  - message
                  - reason
                  - status
                  - type
                  type: object
                type: array
              connectivity:
                description: Last known status of Connectivity
                properties:
                  configurationHash:
                    description: ConfigurationHash is the hash code of the connectivity
                      configuration, used to check if we had a change in the configuration
                      or not
                    type: string
                  nodeTLSCertificates:
                    description: NodeTLSCertificates are the names of the certificates
                      that have been created for the PGD nodes
                    items:
                      description: NodeCertificateStatus encapsulate the status of
                        the server certificate of a CNP node
                      properties:
                        hash:
                          description: Hash is the hash of the configuration for which
                            it has been generated
                          type: string
                        isReady:
                          description: Ready is true when the certificate is ready
                          type: boolean
                        name:
                          description: Name is the name of the certificate
                          type: string
                        nodeName:
                          description: NodeName is the name of the CNP cluster using
                            this certificate
                          type: string
                        preProvisioned:
                          description: PreProvisioned is true if the certificate is
                            preProvisioned
                          type: boolean
                      required:
                      - nodeName
                      type: object
                    type: array
                  nodesNeedingServiceReconciliation:
                    description: NodesNeedingServiceReconciliation are the names of
                      the nodes which have not a server certificate
                    items:
                      type: string
                    type: array
                  nodesWithoutCertificates:
                    description: NodesWithoutCertificates are the names of the nodes
                      which have not a server certificate
                    items:
                      type: string
                    type: array
                  replicationTLSCertificate:
                    description: ReplicationTLSCertificate is the name of the replication
                      TLS certificate, if we have it
                    properties:
                      hash:
                        description: Hash is the hash of the configuration for which
                          it has been generated
                        type: string
                      isReady:
                        description: Ready is true when the certificate is ready
                        type: boolean
                      name:
                        description: Name is the name of the certificate
                        type: string
                      preProvisioned:
                        description: PreProvisioned is true if the certificate is
                          preProvisioned
                        type: boolean
                    type: object
                  unusedCertificates:
                    description: UnusedCertificates are the names of the certificates
                      that we don't use anymore for the PGD nodes
                    items:
                      type: string
                    type: array
                type: object
              latestGeneratedNode:
                description: ID of the latest generated node (used to avoid node name
                  clashing)
                format: int32
                type: integer
              nodes:
                description: The list of summaries for the nodes in the group
                items:
                  description: NodeSummary shows relevant info from bdr.node_summary
                  properties:
                    node_group_name:
                      description: NodeGroupName is the name of the joined group
                      type: string
                    node_kind_name:
                      description: 'The kind of node: witness or data'
                      type: string
                    node_name:
                      description: Name of the node
                      type: string
                    peer_state_name:
                      description: Consistent state of the node in human-readable
                        form
                      type: string
                    peer_target_state_name:
                      description: State which the node is trying to reach (during
                        join or promotion)
                      type: string
                  type: object
                type: array
              pause:
                description: Last known status of Pause
                properties:
                  active:
                    description: 'Active indicates the PGDGroup is either: - in process
                      of pausing - already paused - in process of resuming'
                    type: boolean
                  instances:
                    description: Instances is the number of paused PGD instances
                    format: int32
                    type: integer
                  lastCompletedTime:
                    description: LastCompletedTime is last time the PGDGroup completed
                      pausing
                    format: date-time
                    type: string
                  lastResumeCompletedTime:
                    description: LastCompletedTime is last time the PGDGroup completed
                      resuming
                    format: date-time
                    type: string
                  lastResumeStartedTime:
                    description: LastResumeStartedTime is the last time the PGDGroup
                      started resuming
                    format: date-time
                    type: string
                  lastStartedTime:
                    description: LastStartedTime is the last time the PGDGroup started
                      pausing
                    format: date-time
                    type: string
                type: object
              phase:
                description: The initialization phase of this cluster
                type: string
              phaseDetails:
                description: The details of the current phase
                type: string
              phaseTroubleshootHints:
                description: PhaseTroubleshootHints general troubleshooting indications
                  for the given phase
                type: string
              phaseType:
                description: PhaseType describes the phase category.
                enum:
                - action
                - wait
                - fail
                type: string
              restore:
                description: The status of the restore process
                properties:
                  VolumeSnapshots:
                    description: selected volumeSnapshots to restore
                    items:
                      description: VolumeSnapshotRestoreStatus the volumeSnapshot
                        to restore
                      properties:
                        pvcRole:
                          description: PVCRole is the pvcRole snapshot to restore
                          type: string
                        snapshotName:
                          description: SnapshotName is the snapshot name to restore
                          type: string
                      type: object
                    type: array
                  serverName:
                    description: The name of the server to be restored
                    type: string
                required:
                - serverName
                type: object
            type: object
        type: object
    served: true
    storage: true
    subresources:
      scale:
        specReplicasPath: .spec.instances
        statusReplicasPath: .status.CNP.dataInstances
      status: {}
status:
  acceptedNames:
    kind: ""
    plural: ""
  conditions: null
  storedVersions: null

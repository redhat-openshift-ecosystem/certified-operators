---
apiVersion: v1
kind: ConfigMap
metadata:
  name: listener-operator-deployer-manifests
data:
  csidriver.yaml: |
    apiVersion: storage.k8s.io/v1
    kind: CSIDriver
    metadata:
      name: listeners.stackable.tech
      ownerReferences:
        # We have to use a clusterScope object as an owner of another clusterScope object
        - apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRole
          name: "${LISTENER_OPERATOR_CLUSTERROLE_NAME}"
          uid: "${LISTENER_OPERATOR_CLUSTERROLE_UID}"
    spec:
      attachRequired: false
      podInfoOnMount: true
      fsGroupPolicy: File
      volumeLifecycleModes:
        - Ephemeral
        - Persistent
  storageclass.yaml: |
    apiVersion: storage.k8s.io/v1
    kind: StorageClass
    metadata:
      name: listeners.stackable.tech
      ownerReferences:
        - apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRole
          name: "${LISTENER_OPERATOR_CLUSTERROLE_NAME}"
          uid: "${LISTENER_OPERATOR_CLUSTERROLE_UID}"
    provisioner: listeners.stackable.tech
    volumeBindingMode: WaitForFirstConsumer
  node-daemonset.yaml: |
    apiVersion: apps/v1
    kind: DaemonSet
    metadata:
      name: listener-operator-node-daemonset
      labels:
        app.kubernetes.io/instance: listener-operator
        app.kubernetes.io/name: listener-operator
        app.kubernetes.io/version: 23.4.1
      # We have to use a namespaced object as an owner of another namespaced object
      ownerReferences:
        - apiVersion: apps/v1
          kind: Deployment
          name: listener-operator-deployer
          uid: "${LISTENER_OPERATOR_DEPLOYER_DEPLOYMENT_UID}"
    spec:
      selector:
        matchLabels:
          app.kubernetes.io/instance: listener-operator
          app.kubernetes.io/name: listener-operator
          app.kubernetes.io/role: node
      template:
        metadata:
          labels:
            app.kubernetes.io/instance: listener-operator
            app.kubernetes.io/name: listener-operator
            app.kubernetes.io/role: node
        spec:
          containers:
            - name: listener-operator
              securityContext:
                privileged: true
                runAsUser: 0
              args:
              - run
              - node
              env:
              - name: CSI_ENDPOINT
                value: /csi/csi.sock
              - name: NODE_NAME
                valueFrom:
                  fieldRef:
                    apiVersion: v1
                    fieldPath: spec.nodeName
              image: docker.stackable.tech/stackable/listener-operator:23.4.1
              imagePullPolicy: IfNotPresent
              volumeMounts:
              - mountPath: /csi
                name: csi
              - mountPath: /var/lib/kubelet/pods
                mountPropagation: Bidirectional
                name: mountpoint
            - name: node-driver-registrar
              args:
                - --csi-address=/csi/csi.sock
                - --kubelet-registration-path=/var/lib/kubelet/plugins/listeners.stackable.tech/csi.sock
              image: docker.stackable.tech/k8s/sig-storage/csi-node-driver-registrar:v2.5.0
              imagePullPolicy: IfNotPresent
              volumeMounts:
                - mountPath: /registration
                  name: registration-sock
                - mountPath: /csi
                  name: csi
          initContainers:
            # https://github.com/stackabletech/listener-operator/issues/76
            # In https://github.com/stackabletech/listener-operator/pull/45 we introduced a breaking change by shortening the CSI registration path
            # This resulted in the following error "node_register.go:43] file exists in socketPath /registration/listeners.stackable.tech-reg.sock but it's not a socket.: &{name:listeners.stackable.tech-reg.sock size:4096 mode:2147484141 modTime:{wall:984732078ext:63815759330 loc:0xf864a0} sys:{Dev:64769 Ino:43688551 Nlink:2 Mode:16877 Uid:0 Gid:0 X__pad0:0 Rdev:0 Size:4096 Blksize:4096 Blocks:8 Atim:{Sec:1680162505 Nsec:36073186} Mtim:{Sec:1680162530 Nsec:984732078} Ctim:{Sec:1680162530 Nsec:984732078} X__unused:[0 0 0]}}"
            # This init container removes the "old" directory, so that a unix socket with the same path can be created instead
            # TODO: Should be removed in a release after 23.4
            - name: migrate-longer-csi-registration-path
              image: docker.stackable.tech/stackable/listener-operator:23.4.1
              imagePullPolicy: IfNotPresent
              command:
                - /bin/bash
                - -euo
                - pipefail
                - -x
                - -c
                - |
                  ls -la /registration
                  echo "Removing old (long) CSI registration path"
                  if [ -d "/registration/listeners.stackable.tech-reg.sock" ]; then rmdir /registration/listeners.stackable.tech-reg.sock; fi
                  ls -la /registration
              volumeMounts:
                - name: registration-sock
                  mountPath: /registration
              securityContext:
                runAsUser: 0
          serviceAccountName: listener-operator-serviceaccount
          volumes:
          - hostPath:
              path: /var/lib/kubelet/plugins_registry
              type: ""
            name: registration-sock
          - hostPath:
              path: /var/lib/kubelet/plugins/listeners.stackable.tech/
              type: ""
            name: csi
          - hostPath:
              path: /var/lib/kubelet/pods/
              type: ""
            name: mountpoint
  listener-nodeport.yaml: |
    apiVersion: listeners.stackable.tech/v1alpha1
    kind: ListenerClass
    metadata:
      name: nodeport
      ownerReferences:
        - apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRole
          name: "${LISTENER_OPERATOR_CLUSTERROLE_NAME}"
          uid: "${LISTENER_OPERATOR_CLUSTERROLE_UID}"
    spec:
      serviceType: NodePort
  listener-lb-external.yaml: |
    apiVersion: listeners.stackable.tech/v1alpha1
    kind: ListenerClass
    metadata:
      name: lb-external
      ownerReferences:
        - apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRole
          name: "${LISTENER_OPERATOR_CLUSTERROLE_NAME}"
          uid: "${LISTENER_OPERATOR_CLUSTERROLE_UID}"
    spec:
      serviceType: LoadBalancer
  listener-deployment.yaml: |
    apiVersion: apps/v1
    kind: Deployment
    metadata:
      name: listener-operator-controller-deployment
      labels:
        app.kubernetes.io/instance: listener-operator
        app.kubernetes.io/name: listener-operator
        app.kubernetes.io/version: 23.4.1
      # We have to use a namespaced object as an owner of another namespaced object
      ownerReferences:
        - apiVersion: apps/v1
          kind: Deployment
          name: listener-operator-deployer
          uid: "${LISTENER_OPERATOR_DEPLOYER_DEPLOYMENT_UID}"
    spec:
      replicas: 1
      strategy:
        type: Recreate
      selector:
        matchLabels:
          app.kubernetes.io/role: controller
          app.kubernetes.io/instance: listener-operator
          app.kubernetes.io/name: listener-operator
      template:
        metadata:
          labels:
            app.kubernetes.io/role: controller
            app.kubernetes.io/instance: listener-operator
            app.kubernetes.io/name: listener-operator
        spec:
          serviceAccountName: listener-operator-serviceaccount
          securityContext: {}
          containers:
            - name: listener-operator
              securityContext:
                privileged: true
                runAsUser: 0
              image: docker.stackable.tech/stackable/listener-operator@sha256:b0dac422363b35b7046a680246d7f90b6bceb338a5e47865e100b5c5bb82b54b
              imagePullPolicy: IfNotPresent
              resources: {}
              args:
                - run
                - controller
              env:
                - name: CSI_ENDPOINT
                  value: /csi/csi.sock
              volumeMounts:
                - name: csi
                  mountPath: /csi
            - name: external-provisioner
              image: docker.stackable.tech/k8s/sig-storage/csi-provisioner:3.1.0
              imagePullPolicy: IfNotPresent
              args:
                - --csi-address=/csi/csi.sock
                - --feature-gates=Topology=true
                - --extra-create-metadata
              volumeMounts:
                - name: csi
                  mountPath: /csi
          volumes:
            - name: csi
              emptyDir: {}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: secret-operator-deployer-manifests
data:
  stackable-secret-operator-scc.yaml: |
    apiVersion: security.openshift.io/v1
    kind: SecurityContextConstraints
    metadata:
      name: stackable-secret-operator-scc
      annotations:
        kubernetes.io/description: SCC for Stackable secret operator
    allowHostDirVolumePlugin: true
    allowHostIPC: false
    allowHostNetwork: false
    allowHostPID: false
    allowHostPorts: false
    allowPrivilegeEscalation: true
    allowPrivilegedContainer: true # Needed because otherwise we get spec.template.spec.containers[0].volumeMounts.mountPropagation: Forbidden: Bidirectional mount propagation is available only to privileged containers
    allowedCapabilities: null
    defaultAddCapabilities: null
    fsGroup:
      type: RunAsAny
    groups: []
    priority: null
    readOnlyRootFilesystem: false
    requiredDropCapabilities:
    - MKNOD
    runAsUser:
      type: RunAsAny
    seLinuxContext:
      type: MustRunAs
    supplementalGroups:
      type: RunAsAny
    users: []
    volumes:
    - downwardAPI
    - projected
    - hostPath
    - emptyDir
  stackable-products-scc.yaml: |
    apiVersion: security.openshift.io/v1
    kind: SecurityContextConstraints
    metadata:
      name: stackable-products-scc
      annotations:
        kubernetes.io/description: Copied over from SecurityContextConstraints hostmount-anyuid, with the only difference that ephemeral volumes can be mounted
    allowHostDirVolumePlugin: true
    allowHostIPC: false
    allowHostNetwork: false
    allowHostPID: false
    allowHostPorts: false
    allowPrivilegeEscalation: true
    allowPrivilegedContainer: false
    allowedCapabilities: null
    defaultAddCapabilities: null
    fsGroup:
      type: RunAsAny
    groups: []
    priority: null
    readOnlyRootFilesystem: false
    requiredDropCapabilities:
    - MKNOD
    runAsUser:
      type: RunAsAny
    seLinuxContext:
      type: MustRunAs
    supplementalGroups:
      type: RunAsAny
    users: []
    volumes:
    - configMap
    - downwardAPI
    - emptyDir
    - hostPath
    - nfs
    - persistentVolumeClaim
    - projected
    - secret
    - ephemeral
  csidriver.yaml: |
    apiVersion: storage.k8s.io/v1
    kind: CSIDriver
    metadata:
      name: secrets.stackable.tech
      ownerReferences:
        # We have to use a clusterScope object as an owner of another clusterScope object
        # Strangely OpenShift will not delete the `secret-operator-clusterrole` ClusterRole that we *officially* rolled out using the standard mechanism
        - apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRole
          name: "${SECRET_OPERATOR_CLUSTERROLE_NAME}"
          uid: "${SECRET_OPERATOR_CLUSTERROLE_UID}"
    spec:
      attachRequired: false
      podInfoOnMount: true
      fsGroupPolicy: File
      volumeLifecycleModes:
        - Ephemeral
        - Persistent
  storageclass.yaml: |
    apiVersion: storage.k8s.io/v1
    kind: StorageClass
    metadata:
      name: secrets.stackable.tech
      ownerReferences:
        - apiVersion: rbac.authorization.k8s.io/v1
          kind: ClusterRole
          name: "${SECRET_OPERATOR_CLUSTERROLE_NAME}"
          uid: "${SECRET_OPERATOR_CLUSTERROLE_UID}"
    provisioner: secrets.stackable.tech
  daemonset.yaml: |
    apiVersion: apps/v1
    kind: DaemonSet
    metadata:
      name: secret-operator-daemonset
      labels:
        app.kubernetes.io/instance: secret-operator
        app.kubernetes.io/name: secret-operator
        app.kubernetes.io/version: 23.4.0
      # We have to use a namespaced object as an owner of another namespaced object
      ownerReferences:
        - apiVersion: apps/v1
          kind: Deployment
          name: secret-operator-deployer
          uid: "${SECRET_OPERATOR_DEPLOYER_DEPLOYMENT_UID}"
    spec:
      selector:
        matchLabels:
          app.kubernetes.io/instance: secret-operator
          app.kubernetes.io/name: secret-operator
      template:
        metadata:
          creationTimestamp: null
          labels:
            app.kubernetes.io/instance: secret-operator
            app.kubernetes.io/name: secret-operator
        spec:
          containers:
          - name: secret-operator
            env:
            - name: CSI_ENDPOINT
              value: /csi/csi.sock
            - name: NODE_NAME
              valueFrom:
                fieldRef:
                  apiVersion: v1
                  fieldPath: spec.nodeName
            - name: PRIVILEGED
              value: "true"
            image: docker.stackable.tech/stackable/secret-operator:23.4.0
            imagePullPolicy: IfNotPresent
            securityContext:
              privileged: true
              runAsUser: 0
            volumeMounts:
            - mountPath: /csi
              name: csi
            - mountPath: /var/lib/kubelet/pods
              mountPropagation: Bidirectional
              name: mountpoint
            - mountPath: /tmp
              name: tmp
          - name: external-provisioner
            args:
            - --csi-address=/csi/csi.sock
            - --feature-gates=Topology=true
            - --extra-create-metadata
            image: docker.stackable.tech/k8s/sig-storage/csi-provisioner:v3.1.0
            imagePullPolicy: IfNotPresent
            volumeMounts:
            - mountPath: /csi
              name: csi
          - name: node-driver-registrar
            args:
            - --csi-address=/csi/csi.sock
            - --kubelet-registration-path=/var/lib/kubelet/plugins/secrets.stackable.tech/csi.sock
            image: docker.stackable.tech/k8s/sig-storage/csi-node-driver-registrar:v2.5.0
            imagePullPolicy: IfNotPresent
            volumeMounts:
            - mountPath: /registration
              name: registration-sock
            - mountPath: /csi
              name: csi
          initContainers:
          - command:
            - /bin/bash
            - -euo
            - pipefail
            - -x
            - -c
            - |
              ls -la /registration
              echo "Removing old (long) CSI registration path"
              if [ -d "/registration/secrets.stackable.tech-reg.sock" ]; then rmdir /registration/secrets.stackable.tech-reg.sock; fi
              ls -la /registration
            image: docker.stackable.tech/stackable/secret-operator:23.4.0
            imagePullPolicy: IfNotPresent
            name: migrate-longer-csi-registration-path
            resources: {}
            securityContext:
              runAsUser: 0
            volumeMounts:
            - mountPath: /registration
              name: registration-sock
          serviceAccount: secret-operator-serviceaccount
          serviceAccountName: secret-operator-serviceaccount
          volumes:
          - hostPath:
              path: /var/lib/kubelet/plugins_registry
              type: ""
            name: registration-sock
          - hostPath:
              path: /var/lib/kubelet/plugins/secrets.stackable.tech/
              type: ""
            name: csi
          - hostPath:
              path: /var/lib/kubelet/pods/
              type: ""
            name: mountpoint
          - emptyDir: {}
            name: tmp
  secretclass-tls.yaml: |
    apiVersion: secrets.stackable.tech/v1alpha1
    kind: SecretClass
    metadata:
      name: tls
    spec:
      backend:
        autoTls:
          ca:
            secret:
              name: secret-provisioner-tls-ca
              namespace: stackable-operators # For the helm chart we use "default" here, but for OpenShift this is unwanted and we know we the namespace "stackable-operators" does exist as we deploy our operators here
            autoGenerate: true

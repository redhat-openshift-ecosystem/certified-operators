---
apiVersion: operators.coreos.com/v1alpha1
kind: ClusterServiceVersion
metadata:
  name: secret-operator.v23.4.0
spec:
  annotations:
    support: stackable.tech
    olm.properties: '[]'
    categories: Storage
    capabilities: Full Lifecycle
    description: Stackable Secret Operator
    repository: https://github.com/stackabletech/secret-operator
    containerImage: docker.stackable.tech/stackable/secret-operator@sha256:2bc2647b30f075c0af2d56ef8c7bf54b07f6854b3a42995839fea2bd41da4f13

  displayName: Stackable Secret Operator
  description: |-
    This is a Kubernetes operator to provide secret functionality to other Stackable opertors. The Stackable Secret Operator
    is part of the Stackable Data Platform, a curated selection of the best open source data apps like Kafka, Druid, Trino or Spark, all
    working together seamlessly. Based on Kubernetes, it runs everywhere â€“ on prem or in the cloud.

    You can install the operator using [stackablectl or helm](https://docs.stackable.tech/home/stable/secret-operator/installation.html).
  keywords:
    - secret
  maintainers:
    - email: info@stackable.tech
      name: Stackable GmbH
  maturity: stable
  provider:
    name: Stackable GmbH
    url: https://stackable.tech
  version: 23.4.0
  minKubeVersion: 1.23.0

  installModes:
    - supported: true
      type: OwnNamespace
    - supported: true
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: false
      type: AllNamespaces

  customresourcedefinitions:
    owned:
      - name: secretclasses.secrets.stackable.tech
        version: v1alpha1
        kind: SecretClass
        displayName: SecretClass
        description: Represents an SecretClass

  relatedImages:
    - name: secret-operator
      image: docker.stackable.tech/stackable/secret-operator@sha256:2bc2647b30f075c0af2d56ef8c7bf54b07f6854b3a42995839fea2bd41da4f13
    - name: tools
      image: docker.stackable.tech/stackable/tools@sha256:5c7d28a504e9b689822c189eaf608e5b4d92ad7cc95c4e0eb284bc1f8a18c347
  install:
    # strategy indicates what type of deployment artifacts are used
    strategy: deployment
    # spec for the deployment strategy is a list of deployment specs and required permissions - similar to a pod template used in a deployment
    spec:
      permissions:
        - serviceAccountName: secret-operator-deployer
          rules:
            - apiGroups:
                - ""
              resources:
                - pods
              verbs:
                - '*'
      # permissions required at the cluster scope
      clusterPermissions:
        - serviceAccountName: secret-operator-deployer
          rules:
            - apiGroups:
                - apps
              resources:
                - deployments
              verbs:
                - get
                - list
            - apiGroups:
                - apps
              resources:
                - daemonsets
              verbs:
                - get
                - list
                - watch
                - create
                - delete
                - patch
            - apiGroups:
                - storage.k8s.io
              resources:
                - csidrivers
                - storageclasses
              verbs:
                - get
                - list
                - watch
                - create
                - delete
                - patch
            - apiGroups:
                - secrets.stackable.tech
              resources:
                - secretclasses
              verbs:
                - get
                - list
                - watch
                - create
                - delete
                - patch
            - apiGroups:
                - security.openshift.io
              resources:
                - securitycontextconstraints
              verbs:
                - get
                - list
                - watch
                - create
                - delete
                - patch

      deployments:
        - name: secret-operator-deployer
          spec:
            replicas: 1
            strategy:
              type: Recreate
            selector:
              matchLabels:
                app.kubernetes.io/name: secret-operator-deployer
                app.kubernetes.io/instance: secret-operator-deployer
            template:
              metadata:
                labels:
                  app.kubernetes.io/name: secret-operator-deployer
                  app.kubernetes.io/instance: secret-operator-deployer
              spec:
                serviceAccountName: secret-operator-deployer
                securityContext: {}
                containers:
                  - name: secret-operator-deployer
                    securityContext: {}
                    image: docker.stackable.tech/stackable/tools@sha256:5c7d28a504e9b689822c189eaf608e5b4d92ad7cc95c4e0eb284bc1f8a18c347
                    imagePullPolicy: IfNotPresent
                    resources: {}
                    command: ["bash", "-c", "echo 'Deploying secret-operator manifests' && export SECRET_OPERATOR_DEPLOYER_DEPLOYMENT_UID=$(kubectl get deployment secret-operator-deployer -o go-template='{{.metadata.uid}}') && export SECRET_OPERATOR_CLUSTERROLE_NAME=$(kubectl get clusterrole -l olm.owner=secret-operator.v23.4.0,olm.owner.kind=ClusterServiceVersion -o name | head -n 1 | grep -oP '/\\K.*') && export SECRET_OPERATOR_CLUSTERROLE_UID=$(kubectl get clusterrole $SECRET_OPERATOR_CLUSTERROLE_NAME -o go-template='{{.metadata.uid}}') && for file in /manifests/*.yaml; do echo Deploying $file && cat $file | envsubst | ./kubectl apply -f -; done && echo 'Successfully deployed secret-operator manifests' && sleep infinity"]
                    volumeMounts:
                      - name: manifests
                        mountPath: /manifests
                volumes:
                  - name: manifests
                    configMap:
                      name: secret-operator-deployer-manifests

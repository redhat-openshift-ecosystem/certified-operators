apiVersion: operators.coreos.com/v1alpha1
kind: ClusterServiceVersion
metadata:
  annotations:
    alm-examples: '[]'
    capabilities: Seamless Upgrades
    createdAt: "2023-11-07T09:01:24Z"
    description: Stakater Multi-Tenancy Operator helps to solve the complexity issues of doing true multi-tenancy in Openshift by providing simplified abstractions on top of the native primitives to provide organizations and platform providers the tooling, self-service capabilities and robust automation needed to do secure and efficient Multi-Tenancy in a single OpenShift cluster. OpenShift is designed to support a single tenant platform, hence making it difficult for cluster admins to host multi-tenancy in a single OpenShift cluster. If multi-tenancy is achieved by sharing a cluster, it can have many advantages, e.g. efficient resource utilization, less configuration effort and easier sharing of cluster-internal resources among different tenants.
    operatorframework.io/suggested-namespace: multi-tenant-operator
    operators.operatorframework.io/builder: operator-sdk-v1.26.0
    operators.operatorframework.io/project_layout: go.kubebuilder.io/v3
    olm.skipRange: <0.10.0-alpha-2
  name: tenant-operator.v0.10.0-alpha-2
  namespace: placeholder
spec:
  apiservicedefinitions: {}
  customresourcedefinitions:
    owned:
      - description: IntegrationConfig is the Schema for the integrationConfigs API
        displayName: Integration Config
        kind: IntegrationConfig
        name: integrationconfigs.tenantoperator.stakater.com
        version: v1alpha1
      - description: Quota is the Schema for the quotas API
        displayName: Quota
        kind: Quota
        name: quotas.tenantoperator.stakater.com
        version: v1beta1
      - description: ResourceSupervisor is the Schema for the resourcesupervisors API
        displayName: Resource Supervisor
        kind: ResourceSupervisor
        name: resourcesupervisors.tenantoperator.stakater.com
        version: v1beta1
      - description: TemplateGroupInstance is the Schema for the templategroupinstances API
        displayName: Template Group Instance
        kind: TemplateGroupInstance
        name: templategroupinstances.tenantoperator.stakater.com
        version: v1alpha1
      - description: TemplateInstance is the Schema for the templatesinstance API
        displayName: Template Instance
        kind: TemplateInstance
        name: templateinstances.tenantoperator.stakater.com
        version: v1alpha1
      - description: Template is the Schema for the templates API
        displayName: Template
        kind: Template
        name: templates.tenantoperator.stakater.com
        version: v1alpha1
      - description: Tenant is the Schema for the tenants API
        displayName: Tenant
        kind: Tenant
        name: tenants.tenantoperator.stakater.com
        version: v1beta1
      - description: Tenant is the Schema for the tenants API
        displayName: Tenant
        kind: Tenant
        name: tenants.tenantoperator.stakater.com
        version: v1beta2
  description: |-
    OpenShift is designed to support a single tenant platform, hence making it difficult for cluster admins to host multi-tenancy in a single OpenShift cluster. If multi-tenancy is achieved by sharing a cluster, it can have many advantages, e.g. efficient resource utilization, less configuration effort and easier sharing of cluster-internal resources among different tenants. Multi Tenant Operator helps to solve the complexity issues of doing true multi-tenancy by providing simplified abstractions on top of the native primitives to provide organizations and platform providers the tooling, self-service capabilities and robust automation needed to do secure and efficient Multi-Tenancy in a single OpenShift cluster.

    ## Access Control

    Multi Tenant Operator provides several ClusterRoles that are automatically bound to the Tenants Namespaces used for managing access to the Namespaces and the resources they contain. You can also modify the default roles or create new roles to have full control and customize access control for your users and teams.

    ## Self-Service

    With Multi Tenant Operator, you can empower your users to safely provision namespaces for themselves and their teams (typically mapped to SSO groups). Team-owned namespaces and the resources inside of them count towards the team's quotas rather than the user's individual limits and are automatically shared with all team members according to the access rules you configure in tenant-operator.

    ## HashiCorp Vault Multitenancy

    Multi Tenant Operator is not only providing strong Multi-Tenancy for the OpenShift internals but also extends the tenant's permission model to HashiCorp Vault where it can create vault paths and greatly ease the overhead of managing RBAC in Vault.

    ## ArgoCD Multitenancy

    Multi Tenant Operator is not only providing strong Multi-Tenancy for the OpenShift internals but also extends the tenant's permission model to ArgoCD where it can provision AppProjects and Allowed Repositories for your tenants greatly easing the overhead of managing RBAC in ArgoCD.

    ## Cost/Resource Optimization

    Multi Tenant Operator provides a mechanism for defining Resource Quotas at the tenant scope, meaning all namespaces belonging to a particular tenant share the defined quota, which is why you are able to safely enable dev teams to self-serve their namespaces whilst being confident that they can only use the resources allocated based on budget and business needs.

    ## Sandboxed Dev Namespaces

    Multi Tenant Operator can be configured to automatically provision a namespace for every member of the specific tenant, that will also be pre-loaded with any selected templates and consume the same pool of resources from the tenant's quota creating safe sandboxed dev namespaces that teams can use as a scratch namespace for rapid prototyping and development.
  displayName: Multi Tenant Operator
  icon:
    - base64data: 
      mediatype: image/png
  install:
    spec:
      clusterPermissions:
        - rules:
            - apiGroups:
                - ""
              resources:
                - persistentvolumeclaims
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - admissionregistration.k8s.io
              resources:
                - validatingwebhookconfigurations
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - apiextensions.k8s.io
              resources:
                - customresourcedefinitions
              verbs:
                - get
                - list
                - watch
            - apiGroups:
                - apps
              resources:
                - deployments
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - apps
              resources:
                - statefulsets
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - argoproj.io
              resources:
                - appprojects
                - appprojects/finalizers
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - batch
              resources:
                - cronjobs
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - coordination.k8s.io
              resources:
                - leases
              verbs:
                - create
                - get
                - update
            - apiGroups:
                - ""
              resources:
                - configmaps
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - ""
              resources:
                - limitranges
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - ""
              resources:
                - namespaces
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - ""
              resources:
                - namespaces/finalizers
              verbs:
                - update
            - apiGroups:
                - ""
              resources:
                - pods
              verbs:
                - delete
                - deletecollection
                - get
                - list
                - watch
            - apiGroups:
                - ""
              resources:
                - resourcequotas
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - ""
              resources:
                - resourcequotas/status
              verbs:
                - get
            - apiGroups:
                - ""
              resources:
                - secrets
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - ""
              resources:
                - serviceaccounts
              verbs:
                - get
                - list
                - watch
            - apiGroups:
                - ""
              resources:
                - services
              verbs:
                - create
                - delete
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - kubernetes-client.io
              resources:
                - externalsecrets
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - operators.coreos.com
              resources:
                - catalogsources
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - operators.coreos.com
              resources:
                - clusterserviceversions
              verbs:
                - delete
                - get
                - list
                - watch
            - apiGroups:
                - operators.coreos.com
              resources:
                - installplans
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - operators.coreos.com
              resources:
                - operatorgroups
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - operators.coreos.com
              resources:
                - subscriptions
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - quota.openshift.io
              resources:
                - clusterresourcequotas
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - rbac.authorization.k8s.io
              resources:
                - clusterrolebindings
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - rbac.authorization.k8s.io
              resources:
                - rolebindings
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - route.openshift.io
              resources:
                - routes
              verbs:
                - create
                - get
                - list
                - patch
                - watch
            - apiGroups:
                - tenantoperator.stakater.com
              resources:
                - integrationconfigs
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - tenantoperator.stakater.com
              resources:
                - integrationconfigs/finalizers
              verbs:
                - update
            - apiGroups:
                - tenantoperator.stakater.com
              resources:
                - integrationconfigs/status
              verbs:
                - get
                - patch
                - update
            - apiGroups:
                - tenantoperator.stakater.com
              resources:
                - quotas
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - tenantoperator.stakater.com
              resources:
                - quotas/status
              verbs:
                - get
                - patch
                - update
            - apiGroups:
                - tenantoperator.stakater.com
              resources:
                - resourcesupervisors
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - tenantoperator.stakater.com
              resources:
                - resourcesupervisors/finalizers
              verbs:
                - update
            - apiGroups:
                - tenantoperator.stakater.com
              resources:
                - resourcesupervisors/status
              verbs:
                - get
                - patch
                - update
            - apiGroups:
                - tenantoperator.stakater.com
              resources:
                - templategroupinstances
                - templateinstances
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - tenantoperator.stakater.com
              resources:
                - templategroupinstances/finalizers
              verbs:
                - update
            - apiGroups:
                - tenantoperator.stakater.com
              resources:
                - templategroupinstances/status
              verbs:
                - get
                - patch
                - update
            - apiGroups:
                - tenantoperator.stakater.com
              resources:
                - templateinstances
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - tenantoperator.stakater.com
              resources:
                - templateinstances/finalizers
              verbs:
                - update
            - apiGroups:
                - tenantoperator.stakater.com
              resources:
                - templateinstances/status
              verbs:
                - get
                - patch
                - update
            - apiGroups:
                - tenantoperator.stakater.com
              resources:
                - templates
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - tenantoperator.stakater.com
              resources:
                - templates/status
              verbs:
                - get
                - patch
                - update
            - apiGroups:
                - tenantoperator.stakater.com
              resources:
                - tenants
                - tenants/finalizers
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - tenantoperator.stakater.com
              resources:
                - tenants/status
              verbs:
                - get
                - patch
                - update
            - apiGroups:
                - user.openshift.io
              resources:
                - groups
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - user.openshift.io
              resources:
                - users
              verbs:
                - create
                - delete
                - get
                - list
                - patch
                - update
                - watch
            - apiGroups:
                - authentication.k8s.io
              resources:
                - tokenreviews
              verbs:
                - create
            - apiGroups:
                - authorization.k8s.io
              resources:
                - subjectaccessreviews
              verbs:
                - create
          serviceAccountName: tenant-operator-controller-manager
        - rules:
            - apiGroups:
                - tenantoperator.stakater.com
              resources:
                - tenants
              verbs:
                - get
                - list
                - watch
            - apiGroups:
                - tenantoperator.stakater.com
              resources:
                - integrationconfigs
              verbs:
                - get
                - list
                - watch
            - apiGroups:
                - tenantoperator.stakater.com
              resources:
                - templates
              verbs:
                - get
                - list
                - watch
            - apiGroups:
                - tenantoperator.stakater.com
              resources:
                - templateinstances
              verbs:
                - get
                - list
                - watch
            - apiGroups:
                - tenantoperator.stakater.com
              resources:
                - templategroupinstances
              verbs:
                - get
                - list
                - watch
            - apiGroups:
                - tenantoperator.stakater.com
              resources:
                - quotas
              verbs:
                - get
                - list
                - watch
            - apiGroups:
                - tenantoperator.stakater.com
              resources:
                - resourcesupervisors
              verbs:
                - get
                - list
                - watch
            - apiGroups:
                - ""
              resources:
                - namespaces
              verbs:
                - get
                - list
                - watch
            - apiGroups:
                - user.openshift.io
              resources:
                - groups
              verbs:
                - get
                - list
                - watch
            - apiGroups:
                - route.openshift.io
              resources:
                - routes
              verbs:
                - get
                - list
          serviceAccountName: tenant-operator-gateway
      deployments:
        - label:
            control-plane: controller-manager-bootstrap
          name: tenant-operator-bootstrap-controller
          spec:
            replicas: 1
            selector:
              matchLabels:
                control-plane: controller-manager-bootstrap
            strategy: {}
            template:
              metadata:
                annotations:
                  kubectl.kubernetes.io/default-container: manager
                labels:
                  control-plane: controller-manager-bootstrap
              spec:
                containers:
                  - args:
                      - --health-probe-bind-address=:8081
                      - --metrics-bind-address=127.0.0.1:8080
                      - --leader-elect
                    command:
                      - /manager
                    env:
                      - name: BOOTSTRAP_CONTROLLER
                        value: "true"
                      - name: LEADER_ELECTION_ID
                        value: c69a40c1.stakater.com
                      - name: PLATFORM_TYPE
                        value: OpenShift
                    image: registry.connect.redhat.com/stakater/tenant-operator@sha256:03672d23256b394329c90ede1ae700a6a1576872a32bff7455722e694bff19fc
                    livenessProbe:
                      httpGet:
                        path: /healthz
                        port: 8081
                      initialDelaySeconds: 15
                      periodSeconds: 20
                      timeoutSeconds: 15
                    name: manager
                    readinessProbe:
                      httpGet:
                        path: /readyz
                        port: 8081
                      initialDelaySeconds: 5
                      periodSeconds: 10
                      timeoutSeconds: 15
                    resources:
                      limits:
                        cpu: "2"
                        memory: 2Gi
                      requests:
                        cpu: 100m
                        memory: 20Mi
                    securityContext:
                      allowPrivilegeEscalation: false
                  - args:
                      - --secure-listen-address=0.0.0.0:8443
                      - --upstream=http://127.0.0.1:8080/
                      - --logtostderr=true
                      - --v=0
                    image: registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:a35b96eacb4e46114b39354f66429f8f05df09c55c98c9416b4ffa2768310ef7
                    name: kube-rbac-proxy
                    ports:
                      - containerPort: 8443
                        name: https
                        protocol: TCP
                    resources:
                      limits:
                        cpu: 500m
                        memory: 128Mi
                      requests:
                        cpu: 5m
                        memory: 64Mi
                securityContext:
                  runAsNonRoot: true
                serviceAccountName: tenant-operator-controller-manager
                terminationGracePeriodSeconds: 10
        - label:
            control-plane: controller-manager-console
          name: tenant-operator-console
          spec:
            selector:
              matchLabels:
                control-plane: controller-manager-console
            strategy:
              type: RollingUpdate
            template:
              metadata:
                labels:
                  control-plane: controller-manager-console
              spec:
                containers:
                  - env:
                      - name: PORT
                        value: "8080"
                    image: registry.connect.redhat.com/stakater/mto-console@sha256:1645b0fde038b8bf2fc577b170b5ac9ad7704982fc058fd472da23a19237fdc9
                    imagePullPolicy: IfNotPresent
                    name: console
                    resources:
                      limits:
                        cpu: 500m
                        memory: 256Mi
                      requests:
                        cpu: 100m
                        memory: 128Mi
                    securityContext:
                      readOnlyRootFilesystem: true
                      runAsNonRoot: true
                    volumeMounts:
                      - mountPath: /var/cache/nginx
                        name: cache
                      - mountPath: /opt/app-root/src/environment.js
                        name: tenant-operator-frontend
                        subPath: environment.js
                      - mountPath: /etc/nginx/nginx.conf
                        name: conf
                        subPath: nginx.conf
                      - mountPath: /var/lib/nginx/tmp
                        name: lib-tmp
                      - mountPath: /var/log/nginx
                        name: log
                      - mountPath: /tmp/nginx
                        name: tmp
                volumes:
                  - emptyDir: {}
                    name: cache
                  - configMap:
                      name: tenant-operator-frontend
                    name: tenant-operator-frontend
                  - configMap:
                      name: tenant-operator-nginx-conf
                    name: conf
                  - emptyDir: {}
                    name: lib-tmp
                  - emptyDir: {}
                    name: log
                  - emptyDir: {}
                    name: tmp
        - label:
            control-plane: controller-manager-gateway
          name: tenant-operator-gateway
          spec:
            selector:
              matchLabels:
                control-plane: controller-manager-gateway
            strategy:
              type: RollingUpdate
            template:
              metadata:
                labels:
                  control-plane: controller-manager-gateway
              spec:
                containers:
                  - env:
                      - name: PORT
                        value: "4200"
                    envFrom:
                      - secretRef:
                          name: mto-postgresql
                      - configMapRef:
                          name: tenant-operator-authentication
                    image: registry.connect.redhat.com/stakater/mto-gateway@sha256:ff4bf55c0b5fe0e4333bdff110337e6123c0f3b507df2dea1ff5d04578ca7907
                    imagePullPolicy: IfNotPresent
                    name: gateway
                    resources:
                      limits:
                        cpu: 500m
                        memory: 256Mi
                      requests:
                        cpu: 100m
                        memory: 128Mi
                    securityContext:
                      readOnlyRootFilesystem: true
                      runAsNonRoot: true
                serviceAccountName: tenant-operator-gateway
        - label:
            control-plane: controller-manager
          name: tenant-operator-namespace-controller
          spec:
            replicas: 1
            selector:
              matchLabels:
                control-plane: controller-manager
            strategy: {}
            template:
              metadata:
                annotations:
                  kubectl.kubernetes.io/default-container: manager
                labels:
                  control-plane: controller-manager
              spec:
                containers:
                  - args:
                      - --health-probe-bind-address=:8081
                      - --metrics-bind-address=127.0.0.1:8080
                      - --leader-elect
                    command:
                      - /manager
                    env:
                      - name: NAMESPACE_CONTROLLER
                        value: "true"
                      - name: LEADER_ELECTION_ID
                        value: c50b40d1.stakater.com
                      - name: PLATFORM_TYPE
                        value: OpenShift
                    envFrom:
                      - secretRef:
                          name: mto-postgresql
                    image: registry.connect.redhat.com/stakater/tenant-operator@sha256:03672d23256b394329c90ede1ae700a6a1576872a32bff7455722e694bff19fc
                    livenessProbe:
                      httpGet:
                        path: /healthz
                        port: 8081
                      initialDelaySeconds: 15
                      periodSeconds: 20
                      timeoutSeconds: 15
                    name: manager
                    readinessProbe:
                      httpGet:
                        path: /readyz
                        port: 8081
                      initialDelaySeconds: 5
                      periodSeconds: 10
                      timeoutSeconds: 15
                    resources:
                      limits:
                        cpu: "2"
                        memory: 2Gi
                      requests:
                        cpu: 100m
                        memory: 20Mi
                    securityContext:
                      allowPrivilegeEscalation: false
                  - args:
                      - --secure-listen-address=0.0.0.0:8443
                      - --upstream=http://127.0.0.1:8080/
                      - --logtostderr=true
                      - --v=0
                    image: registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:a35b96eacb4e46114b39354f66429f8f05df09c55c98c9416b4ffa2768310ef7
                    name: kube-rbac-proxy
                    ports:
                      - containerPort: 8443
                        name: https
                        protocol: TCP
                    resources:
                      limits:
                        cpu: 500m
                        memory: 128Mi
                      requests:
                        cpu: 5m
                        memory: 64Mi
                securityContext:
                  runAsNonRoot: true
                serviceAccountName: tenant-operator-controller-manager
                terminationGracePeriodSeconds: 10
        - label:
            control-plane: controller-manager-resourcesupervisor
          name: tenant-operator-resourcesupervisor-controller
          spec:
            replicas: 1
            selector:
              matchLabels:
                control-plane: controller-manager-resourcesupervisor
            strategy: {}
            template:
              metadata:
                annotations:
                  kubectl.kubernetes.io/default-container: manager
                labels:
                  control-plane: controller-manager-resourcesupervisor
              spec:
                containers:
                  - args:
                      - --health-probe-bind-address=:8081
                      - --metrics-bind-address=127.0.0.1:8080
                      - --leader-elect
                    command:
                      - /manager
                    env:
                      - name: RESOURCESUPERVISOR_CONTROLLER
                        value: "true"
                      - name: LEADER_ELECTION_ID
                        value: c43e30g1.stakater.com
                      - name: PLATFORM_TYPE
                        value: OpenShift
                    envFrom:
                      - secretRef:
                          name: mto-postgresql
                    image: registry.connect.redhat.com/stakater/tenant-operator@sha256:03672d23256b394329c90ede1ae700a6a1576872a32bff7455722e694bff19fc
                    livenessProbe:
                      httpGet:
                        path: /healthz
                        port: 8081
                      initialDelaySeconds: 15
                      periodSeconds: 20
                      timeoutSeconds: 15
                    name: manager
                    readinessProbe:
                      httpGet:
                        path: /readyz
                        port: 8081
                      initialDelaySeconds: 5
                      periodSeconds: 10
                      timeoutSeconds: 15
                    resources:
                      limits:
                        cpu: "2"
                        memory: 2Gi
                      requests:
                        cpu: 100m
                        memory: 20Mi
                    securityContext:
                      allowPrivilegeEscalation: false
                  - args:
                      - --secure-listen-address=0.0.0.0:8443
                      - --upstream=http://127.0.0.1:8080/
                      - --logtostderr=true
                      - --v=0
                    image: registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:a35b96eacb4e46114b39354f66429f8f05df09c55c98c9416b4ffa2768310ef7
                    name: kube-rbac-proxy
                    ports:
                      - containerPort: 8443
                        name: https
                        protocol: TCP
                    resources:
                      limits:
                        cpu: 500m
                        memory: 128Mi
                      requests:
                        cpu: 5m
                        memory: 64Mi
                securityContext:
                  runAsNonRoot: true
                serviceAccountName: tenant-operator-controller-manager
                terminationGracePeriodSeconds: 10
        - label:
            control-plane: controller-manager-quota-template
          name: tenant-operator-template-quota-intconfig-controller
          spec:
            replicas: 1
            selector:
              matchLabels:
                control-plane: controller-manager-quota-template
            strategy: {}
            template:
              metadata:
                annotations:
                  kubectl.kubernetes.io/default-container: manager
                labels:
                  control-plane: controller-manager-quota-template
              spec:
                containers:
                  - args:
                      - --health-probe-bind-address=:8081
                      - --metrics-bind-address=127.0.0.1:8080
                      - --leader-elect
                    command:
                      - /manager
                    env:
                      - name: TEMPLATE_QUOTA_INTEGRATIONCONFIG_CONTROLLER
                        value: "true"
                      - name: LEADER_ELECTION_ID
                        value: c59a40c1.stakater.com
                      - name: PLATFORM_TYPE
                        value: OpenShift
                    envFrom:
                      - secretRef:
                          name: mto-postgresql
                    image: registry.connect.redhat.com/stakater/tenant-operator@sha256:03672d23256b394329c90ede1ae700a6a1576872a32bff7455722e694bff19fc
                    livenessProbe:
                      httpGet:
                        path: /healthz
                        port: 8081
                      initialDelaySeconds: 15
                      periodSeconds: 20
                      timeoutSeconds: 15
                    name: manager
                    readinessProbe:
                      httpGet:
                        path: /readyz
                        port: 8081
                      initialDelaySeconds: 5
                      periodSeconds: 10
                      timeoutSeconds: 15
                    resources:
                      limits:
                        cpu: "2"
                        memory: 2Gi
                      requests:
                        cpu: 100m
                        memory: 20Mi
                    securityContext:
                      allowPrivilegeEscalation: false
                  - args:
                      - --secure-listen-address=0.0.0.0:8443
                      - --upstream=http://127.0.0.1:8080/
                      - --logtostderr=true
                      - --v=0
                    image: registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:a35b96eacb4e46114b39354f66429f8f05df09c55c98c9416b4ffa2768310ef7
                    name: kube-rbac-proxy
                    ports:
                      - containerPort: 8443
                        name: https
                        protocol: TCP
                    resources:
                      limits:
                        cpu: 500m
                        memory: 128Mi
                      requests:
                        cpu: 5m
                        memory: 64Mi
                securityContext:
                  runAsNonRoot: true
                serviceAccountName: tenant-operator-controller-manager
                terminationGracePeriodSeconds: 10
        - label:
            control-plane: controller-manager-template-group-instance
          name: tenant-operator-templategroupinstance-controller
          spec:
            replicas: 1
            selector:
              matchLabels:
                control-plane: controller-manager-template-group-instance
            strategy: {}
            template:
              metadata:
                annotations:
                  kubectl.kubernetes.io/default-container: manager
                labels:
                  control-plane: controller-manager-template-group-instance
              spec:
                containers:
                  - args:
                      - --health-probe-bind-address=:8081
                      - --metrics-bind-address=127.0.0.1:8080
                      - --leader-elect
                    command:
                      - /manager
                    env:
                      - name: TEMPLATEGROUPINSTANCE_CONTROLLER
                        value: "true"
                      - name: LEADER_ELECTION_ID
                        value: c51c40e1.stakater.com
                      - name: PLATFORM_TYPE
                        value: OpenShift
                    envFrom:
                      - secretRef:
                          name: mto-postgresql
                    image: registry.connect.redhat.com/stakater/tenant-operator@sha256:03672d23256b394329c90ede1ae700a6a1576872a32bff7455722e694bff19fc
                    livenessProbe:
                      httpGet:
                        path: /healthz
                        port: 8081
                      initialDelaySeconds: 15
                      periodSeconds: 20
                      timeoutSeconds: 15
                    name: manager
                    readinessProbe:
                      httpGet:
                        path: /readyz
                        port: 8081
                      initialDelaySeconds: 5
                      periodSeconds: 10
                      timeoutSeconds: 15
                    resources:
                      limits:
                        cpu: "2"
                        memory: 2Gi
                      requests:
                        cpu: 100m
                        memory: 20Mi
                    securityContext:
                      allowPrivilegeEscalation: false
                  - args:
                      - --secure-listen-address=0.0.0.0:8443
                      - --upstream=http://127.0.0.1:8080/
                      - --logtostderr=true
                      - --v=0
                    image: registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:a35b96eacb4e46114b39354f66429f8f05df09c55c98c9416b4ffa2768310ef7
                    name: kube-rbac-proxy
                    ports:
                      - containerPort: 8443
                        name: https
                        protocol: TCP
                    resources:
                      limits:
                        cpu: 500m
                        memory: 128Mi
                      requests:
                        cpu: 5m
                        memory: 64Mi
                securityContext:
                  runAsNonRoot: true
                serviceAccountName: tenant-operator-controller-manager
                terminationGracePeriodSeconds: 10
        - label:
            control-plane: controller-manager-template-instance
          name: tenant-operator-templateinstance-controller
          spec:
            replicas: 1
            selector:
              matchLabels:
                control-plane: controller-manager-template-instance
            strategy: {}
            template:
              metadata:
                annotations:
                  kubectl.kubernetes.io/default-container: manager
                labels:
                  control-plane: controller-manager-template-instance
              spec:
                containers:
                  - args:
                      - --health-probe-bind-address=:8081
                      - --metrics-bind-address=127.0.0.1:8080
                      - --leader-elect
                    command:
                      - /manager
                    env:
                      - name: TEMPLATEINSTANCE_CONTROLLER
                        value: "true"
                      - name: LEADER_ELECTION_ID
                        value: c52d40f1.stakater.com
                      - name: PLATFORM_TYPE
                        value: OpenShift
                    envFrom:
                      - secretRef:
                          name: mto-postgresql
                    image: registry.connect.redhat.com/stakater/tenant-operator@sha256:03672d23256b394329c90ede1ae700a6a1576872a32bff7455722e694bff19fc
                    livenessProbe:
                      httpGet:
                        path: /healthz
                        port: 8081
                      initialDelaySeconds: 15
                      periodSeconds: 20
                      timeoutSeconds: 15
                    name: manager
                    readinessProbe:
                      httpGet:
                        path: /readyz
                        port: 8081
                      initialDelaySeconds: 5
                      periodSeconds: 10
                      timeoutSeconds: 15
                    resources:
                      limits:
                        cpu: "2"
                        memory: 2Gi
                      requests:
                        cpu: 100m
                        memory: 20Mi
                    securityContext:
                      allowPrivilegeEscalation: false
                  - args:
                      - --secure-listen-address=0.0.0.0:8443
                      - --upstream=http://127.0.0.1:8080/
                      - --logtostderr=true
                      - --v=0
                    image: registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:a35b96eacb4e46114b39354f66429f8f05df09c55c98c9416b4ffa2768310ef7
                    name: kube-rbac-proxy
                    ports:
                      - containerPort: 8443
                        name: https
                        protocol: TCP
                    resources:
                      limits:
                        cpu: 500m
                        memory: 128Mi
                      requests:
                        cpu: 5m
                        memory: 64Mi
                securityContext:
                  runAsNonRoot: true
                serviceAccountName: tenant-operator-controller-manager
                terminationGracePeriodSeconds: 10
        - label:
            control-plane: controller-manager-tenant
          name: tenant-operator-tenant-controller
          spec:
            replicas: 1
            selector:
              matchLabels:
                control-plane: controller-manager-tenant
            strategy: {}
            template:
              metadata:
                annotations:
                  kubectl.kubernetes.io/default-container: manager
                labels:
                  control-plane: controller-manager-tenant
              spec:
                containers:
                  - args:
                      - --health-probe-bind-address=:8081
                      - --metrics-bind-address=127.0.0.1:8080
                      - --leader-elect
                    command:
                      - /manager
                    env:
                      - name: TENANT_CONTROLLER
                        value: "true"
                      - name: LEADER_ELECTION_ID
                        value: c53e40g1.stakater.com
                      - name: PLATFORM_TYPE
                        value: OpenShift
                    envFrom:
                      - secretRef:
                          name: mto-postgresql
                    image: registry.connect.redhat.com/stakater/tenant-operator@sha256:03672d23256b394329c90ede1ae700a6a1576872a32bff7455722e694bff19fc
                    livenessProbe:
                      httpGet:
                        path: /healthz
                        port: 8081
                      initialDelaySeconds: 15
                      periodSeconds: 20
                      timeoutSeconds: 15
                    name: manager
                    readinessProbe:
                      httpGet:
                        path: /readyz
                        port: 8081
                      initialDelaySeconds: 5
                      periodSeconds: 10
                      timeoutSeconds: 15
                    resources:
                      limits:
                        cpu: "2"
                        memory: 2Gi
                      requests:
                        cpu: 100m
                        memory: 20Mi
                    securityContext:
                      allowPrivilegeEscalation: false
                  - args:
                      - --secure-listen-address=0.0.0.0:8443
                      - --upstream=http://127.0.0.1:8080/
                      - --logtostderr=true
                      - --v=0
                    image: registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:a35b96eacb4e46114b39354f66429f8f05df09c55c98c9416b4ffa2768310ef7
                    name: kube-rbac-proxy
                    ports:
                      - containerPort: 8443
                        name: https
                        protocol: TCP
                    resources:
                      limits:
                        cpu: 500m
                        memory: 128Mi
                      requests:
                        cpu: 5m
                        memory: 64Mi
                securityContext:
                  runAsNonRoot: true
                serviceAccountName: tenant-operator-controller-manager
                terminationGracePeriodSeconds: 10
        - label:
            control-plane: controller-manager-webhook
          name: tenant-operator-webhook
          spec:
            replicas: 1
            selector:
              matchLabels:
                control-plane: controller-manager-webhook
            strategy: {}
            template:
              metadata:
                annotations:
                  kubectl.kubernetes.io/default-container: manager
                labels:
                  control-plane: controller-manager-webhook
              spec:
                containers:
                  - args:
                      - --health-probe-bind-address=:8081
                      - --metrics-bind-address=127.0.0.1:8080
                      - --leader-elect
                    command:
                      - /manager
                    env:
                      - name: ENABLE_ADMISSION_WEBHOOKS
                        value: "true"
                      - name: SERVICE_ACCOUNT_NAME
                        value: tenant-operator-controller-manager
                      - name: LEADER_ELECTION_ID
                        value: c54f40h1.stakater.com
                      - name: ENABLE_WEBHOOKS
                        value: "true"
                      - name: PLATFORM_TYPE
                        value: OpenShift
                    image: registry.connect.redhat.com/stakater/tenant-operator@sha256:03672d23256b394329c90ede1ae700a6a1576872a32bff7455722e694bff19fc
                    livenessProbe:
                      httpGet:
                        path: /healthz
                        port: 8081
                      initialDelaySeconds: 15
                      periodSeconds: 20
                      timeoutSeconds: 15
                    name: manager
                    ports:
                      - containerPort: 9443
                        name: webhook-server
                        protocol: TCP
                    readinessProbe:
                      httpGet:
                        path: /readyz
                        port: 8081
                      initialDelaySeconds: 5
                      periodSeconds: 10
                      timeoutSeconds: 15
                    resources:
                      limits:
                        cpu: "2"
                        memory: 2Gi
                      requests:
                        cpu: 100m
                        memory: 20Mi
                    securityContext:
                      allowPrivilegeEscalation: false
                    volumeMounts:
                      - mountPath: /tmp/k8s-webhook-server/serving-certs
                        name: cert
                        readOnly: true
                  - args:
                      - --secure-listen-address=0.0.0.0:8443
                      - --upstream=http://127.0.0.1:8080/
                      - --logtostderr=true
                      - --v=0
                    image: registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:a35b96eacb4e46114b39354f66429f8f05df09c55c98c9416b4ffa2768310ef7
                    name: kube-rbac-proxy
                    ports:
                      - containerPort: 8443
                        name: https
                        protocol: TCP
                    resources:
                      limits:
                        cpu: 500m
                        memory: 128Mi
                      requests:
                        cpu: 5m
                        memory: 64Mi
                securityContext:
                  runAsNonRoot: true
                serviceAccountName: tenant-operator-controller-manager
                terminationGracePeriodSeconds: 10
                volumes:
                  - name: cert
                    secret:
                      defaultMode: 420
                      secretName: webhook-server-cert
      permissions:
        - rules:
            - apiGroups:
                - ""
              resources:
                - configmaps
              verbs:
                - get
                - list
                - watch
                - create
                - update
                - patch
                - delete
            - apiGroups:
                - coordination.k8s.io
              resources:
                - leases
              verbs:
                - get
                - list
                - watch
                - create
                - update
                - patch
                - delete
            - apiGroups:
                - ""
              resources:
                - events
              verbs:
                - create
                - patch
          serviceAccountName: tenant-operator-controller-manager
    strategy: deployment
  installModes:
    - supported: false
      type: OwnNamespace
    - supported: false
      type: SingleNamespace
    - supported: false
      type: MultiNamespace
    - supported: true
      type: AllNamespaces
  keywords:
    - tenant
    - stakater
    - SRO
  links:
    - name: Stakater
      url: https://stakater.com
    - name: Multi Tenant Operator
      url: https://docs.stakater.com/mto/latest/index.html
    - name: Support
      url: https://docs.stakater.com/content/sre/support/support.html
  maturity: alpha
  provider:
    name: Stakater
    url: https://stakater.com
  relatedImages:
    - image: registry.connect.redhat.com/stakater/tenant-operator@sha256:03672d23256b394329c90ede1ae700a6a1576872a32bff7455722e694bff19fc
      name: manager
    - image: registry.redhat.io/openshift4/ose-kube-rbac-proxy@sha256:a35b96eacb4e46114b39354f66429f8f05df09c55c98c9416b4ffa2768310ef7
      name: kube-rbac-proxy
    - image: registry.connect.redhat.com/stakater/mto-console@sha256:1645b0fde038b8bf2fc577b170b5ac9ad7704982fc058fd472da23a19237fdc9
      name: console
    - image: registry.connect.redhat.com/stakater/mto-gateway@sha256:ff4bf55c0b5fe0e4333bdff110337e6123c0f3b507df2dea1ff5d04578ca7907
      name: gateway
  version: 0.10.0-alpha-2
  webhookdefinitions:
    - admissionReviewVersions:
        - v1beta1
        - v1beta2
      containerPort: 443
      conversionCRDs:
        - tenants.tenantoperator.stakater.com
      deploymentName: tenant-operator-webhook
      generateName: ctenants.kb.io
      sideEffects: None
      targetPort: 9443
      type: ConversionWebhook
      webhookPath: /convert
    - admissionReviewVersions:
        - v1
      containerPort: 443
      deploymentName: tenant-operator-webhook
      failurePolicy: Fail
      generateName: vintegrationconfig.kb.io
      rules:
        - apiGroups:
            - tenantoperator.stakater.com
          apiVersions:
            - v1alpha1
          operations:
            - CREATE
            - UPDATE
          resources:
            - integrationconfigs
      sideEffects: None
      targetPort: 9443
      type: ValidatingAdmissionWebhook
      webhookPath: /validate-tenantoperator-stakater-com-v1alpha1-integrationconfig
    - admissionReviewVersions:
        - v1
      containerPort: 443
      deploymentName: tenant-operator-webhook
      failurePolicy: Ignore
      generateName: vnamespace.kb.io
      rules:
        - apiGroups:
            - ""
          apiVersions:
            - v1
          operations:
            - CREATE
            - UPDATE
            - DELETE
          resources:
            - namespaces
      sideEffects: None
      targetPort: 9443
      type: ValidatingAdmissionWebhook
      webhookPath: /validate-v1-namespace
    - admissionReviewVersions:
        - v1
      containerPort: 443
      deploymentName: tenant-operator-webhook
      failurePolicy: Fail
      generateName: vquota.kb.io
      rules:
        - apiGroups:
            - tenantoperator.stakater.com
          apiVersions:
            - v1beta1
          operations:
            - DELETE
          resources:
            - quotas
      sideEffects: None
      targetPort: 9443
      type: ValidatingAdmissionWebhook
      webhookPath: /validate-tenantoperator-stakater-com-v1beta1-quota
    - admissionReviewVersions:
        - v1
      containerPort: 443
      deploymentName: tenant-operator-webhook
      failurePolicy: Fail
      generateName: vresourcesupervisor.kb.io
      rules:
        - apiGroups:
            - tenantoperator.stakater.com
          apiVersions:
            - v1beta1
          operations:
            - CREATE
            - UPDATE
          resources:
            - resourcesupervisors
      sideEffects: None
      targetPort: 9443
      type: ValidatingAdmissionWebhook
      webhookPath: /validate-tenantoperator-stakater-com-v1beta1-resourcesupervisor
    - admissionReviewVersions:
        - v1
      containerPort: 443
      deploymentName: tenant-operator-webhook
      failurePolicy: Ignore
      generateName: vrolebinding.kb.io
      rules:
        - apiGroups:
            - rbac.authorization.k8s.io
          apiVersions:
            - v1
          operations:
            - CREATE
            - UPDATE
            - DELETE
          resources:
            - rolebindings
      sideEffects: None
      targetPort: 9443
      type: ValidatingAdmissionWebhook
      webhookPath: /validate-v1-rolebinding
    - admissionReviewVersions:
        - v1
      containerPort: 443
      deploymentName: tenant-operator-webhook
      failurePolicy: Fail
      generateName: vtemplate.kb.io
      rules:
        - apiGroups:
            - tenantoperator.stakater.com
          apiVersions:
            - v1alpha1
          operations:
            - DELETE
          resources:
            - templates
      sideEffects: None
      targetPort: 9443
      type: ValidatingAdmissionWebhook
      webhookPath: /validate-tenantoperator-stakater-com-v1alpha1-template
    - admissionReviewVersions:
        - v1
      containerPort: 443
      deploymentName: tenant-operator-webhook
      failurePolicy: Fail
      generateName: vtemplategroupinstance.kb.io
      rules:
        - apiGroups:
            - tenantoperator.stakater.com
          apiVersions:
            - v1alpha1
          operations:
            - CREATE
            - UPDATE
          resources:
            - templategroupinstances
      sideEffects: None
      targetPort: 9443
      type: ValidatingAdmissionWebhook
      webhookPath: /validate-tenantoperator-stakater-com-v1alpha1-templategroupinstance
    - admissionReviewVersions:
        - v1
      containerPort: 443
      deploymentName: tenant-operator-webhook
      failurePolicy: Fail
      generateName: vtemplateinstance.kb.io
      rules:
        - apiGroups:
            - tenantoperator.stakater.com
          apiVersions:
            - v1alpha1
          operations:
            - CREATE
            - UPDATE
          resources:
            - templateinstances
      sideEffects: None
      targetPort: 9443
      type: ValidatingAdmissionWebhook
      webhookPath: /validate-tenantoperator-stakater-com-v1alpha1-templateinstance
    - admissionReviewVersions:
        - v1
      containerPort: 443
      deploymentName: tenant-operator-webhook
      failurePolicy: Fail
      generateName: vtenant.kb.io
      rules:
        - apiGroups:
            - tenantoperator.stakater.com
          apiVersions:
            - v1beta2
          operations:
            - CREATE
            - UPDATE
          resources:
            - tenants
      sideEffects: None
      targetPort: 9443
      type: ValidatingAdmissionWebhook
      webhookPath: /validate-tenantoperator-stakater-com-v1beta2-tenant

apiVersion: v1
data:
  webotx-healthcheck.sh: |
    #!/bin/bash

    if [ -e /opt/WebOTX/bin/otxadmin ]; then
      /opt/WebOTX/bin/otxadmin is-status >/dev/null
      exit $?
    else
      code=`curl -k -LI $OTX_HEALTHCHECK_PROTOCOL://localhost:$OTX_HEALTHCHECK_PORT/health -o /dev/null -w '%{http_code}\n' -s`
      if [ $code -eq 200 ]; then
        exit 0
      else
        exit 1
      fi
    fi
  webotx-init.sh: |
    #!/bin/bash

    # generation of diagnostic-report
    REPORT_GENERATE=3

    INSTALL_ROOT=/opt/WebOTX
    DOMAIN_NAME=`ls -1 ${INSTALL_ROOT}/domains | head -n 1`
    INSTANCE_ROOT=${INSTALL_ROOT}/domains/${DOMAIN_NAME}
    DOMAIN_XML=${INSTANCE_ROOT}/config/domain.xml

    mkdir -p ${INSTALL_ROOT}/backups/${DOMAIN_NAME}/logs
    mkdir -p ${INSTALL_ROOT}/backups/${DOMAIN_NAME}/diagnostic-reports

    exec 1> >(tee -a ${INSTALL_ROOT}/backups/${DOMAIN_NAME}/logs/operator.log)
    exec 2>&1

    function log() {
      echo -e "$(date '+%Y-%m-%d %H:%M:%S') $1"
    }

    trap 'exit 143' 15

    log "INFO Start init script."

    ## Create link of share directory (logs, diagnostic-reports)
    log "INFO Create link of persistence files."

    if [ -e ${INSTANCE_ROOT}/logs ]; then
      rm -rf ${INSTANCE_ROOT}/logs
    fi
    if [ -e ${INSTANCE_ROOT}/diagnostic-reports ]; then
      rm -rf ${INSTANCE_ROOT}/diagnostic-reports
    fi

    ln -s ${INSTALL_ROOT}/backups/${DOMAIN_NAME}/logs ${INSTANCE_ROOT}/logs
    ln -s ${INSTALL_ROOT}/backups/${DOMAIN_NAME}/diagnostic-reports ${INSTANCE_ROOT}/diagnostic-reports
    if [ ! -e ${INSTALL_ROOT}/backups/${DOMAIN_NAME}/config ]; then
      ln -s ${INSTALL_ROOT}/domains/${DOMAIN_NAME}/config ${INSTALL_ROOT}/backups/${DOMAIN_NAME}/config
    fi

    ## Recovery persistence files
    ##  Domain setting files
    ##      ${INSTANCE_ROOT}/config/TS
    ##  JMX setting files
    ##      ${INSTANCE_ROOT}/jmq
    ##  TP monitor setting files
    ##      ${INSTALL_ROOT}/Trnsv/multitpm/starter
    ##      ${INSTALL_ROOT}/Trnsv/conf
    ##  Session files
    ##      ${INSTANCE_ROOT}/generated/jsp
    ##      ${INSTANCE_ROOT}/session-store
    if [ -e ${INSTALL_ROOT}/backups/persistence-files/webotx-running ]; then
      rm -rf ${INSTALL_ROOT}/backups/persistence-files/webotx-running
    fi
    if echo ${OTX_PERSISTENCE_ENABLED:-true} | grep -iqF true; then
      if [ -e ${INSTALL_ROOT}/backups/persistence-files/save-complete ]; then
        log "INFO Copy persistence files from backup."
        if [ -e ${INSTALL_ROOT}/backups/persistence-files/${DOMAIN_NAME}/config/TS ]; then
          rm -rf ${INSTANCE_ROOT}/config/TS
          cp -prf ${INSTALL_ROOT}/backups/persistence-files/${DOMAIN_NAME}/config/TS ${INSTANCE_ROOT}/config
        fi
        if [ -e ${INSTALL_ROOT}/backups/persistence-files/${DOMAIN_NAME}/jmq ]; then
          rm -rf ${INSTANCE_ROOT}/jmq
          cp -prf ${INSTALL_ROOT}/backups/persistence-files/${DOMAIN_NAME}/jmq ${INSTANCE_ROOT}
        fi
        if [ -e ${INSTALL_ROOT}/backups/persistence-files/Trnsv/multitpm/starter ]; then
          rm -rf ${INSTALL_ROOT}/Trnsv/multitpm/multitpm
          cp -prf ${INSTALL_ROOT}/backups/persistence-files/Trnsv/multitpm/starter ${INSTALL_ROOT}/Trnsv/multitpm
        fi
        if [ -e ${INSTALL_ROOT}/backups/persistence-files/Trnsv/conf ]; then
          rm -rf ${INSTALL_ROOT}/Trnsv/conf
          cp -prf ${INSTALL_ROOT}/backups/persistence-files/Trnsv/conf ${INSTALL_ROOT}/Trnsv
        fi
        if [ -e ${INSTALL_ROOT}/backups/persistence-files/${DOMAIN_NAME}/generated/jsp ]; then
          rm -rf ${INSTANCE_ROOT}/generated/jsp
          cp -prf ${INSTALL_ROOT}/backups/persistence-files/${DOMAIN_NAME}/generated/jsp ${INSTANCE_ROOT}/generated
        fi
        if [ -e ${INSTALL_ROOT}/backups/persistence-files/${DOMAIN_NAME}/session-store ]; then
          rm -rf ${INSTANCE_ROOT}/session-store
          cp -prf ${INSTALL_ROOT}/backups/persistence-files/${DOMAIN_NAME}/session-store ${INSTANCE_ROOT}
        fi
      fi
      if [ -e ${INSTALL_ROOT}/backups/persistence-files ]; then
        rm -rf ${INSTALL_ROOT}/backups/persistence-files
      fi
    fi

    ## Delete old diagnostic-report files
    if [ `ls -1 ${INSTALL_ROOT}/backups/${DOMAIN_NAME}/diagnostic-reports | wc -l` -gt 0 ]; then
      DEL_GENERATE=`expr ${REPORT_GENERATE} + 1`
      if [ -e /opt/WebOTX/bin/otxadmin ]; then
        REPORTS1=`ls -t -1 ${INSTALL_ROOT}/backups/${DOMAIN_NAME}/diagnostic-reports/*.txt | tail -n+${DEL_GENERATE}`
        REPORTS2=`ls -t -1 ${INSTALL_ROOT}/backups/${DOMAIN_NAME}/diagnostic-reports/*.zip | tail -n+${DEL_GENERATE}`
        REPORTS=`echo $REPORTS1 $REPORTS2`
      else
        REPORTS1=`ls -t -1 ${INSTALL_ROOT}/backups/${DOMAIN_NAME}/diagnostic-reports/*.tar.gz | tail -n+${DEL_GENERATE}`
        REPORTS=`echo $REPORTS1`
      fi
    fi
    if [ -n "${REPORTS}" ]; then
      log "INFO Delete old diagnostic report files. [${REPORTS}]"
      rm -v ${REPORTS}
    fi

    ## Setting session replication (Standard only)
    if [ -e /opt/WebOTX/bin/otxadmin ]; then
      if [ -e /opt/WebOTX/lib/datagrid/infinispan-embedded.jar ]; then
        /opt/share.nec/bin/OTXELChk > /dev/null 2>&1
        AS_LICENSE_CODE=$?
        if [ "${AS_LICENSE_CODE}" -eq "3" -o "${AS_LICENSE_CODE}" -eq "13" -o "${AS_LICENSE_CODE}" -eq "152" ]; then
          log "INFO Setting of session replication."
          if [ -z "${OTX_DATAGRID_TYPE}" ]; then
            OTX_DATAGRID_TYPE=disabled
          fi
          if [ -z "${OTX_USE_JMX_AGENT}" ]; then
            OTX_USE_JMX_AGENT=false
          fi
          if [ -z "${OTX_USE_ALL_PROCESSGROUPS}" ]; then
            OTX_USE_ALL_PROCESSGROUPS=false
          fi
          log "INFO datagrid type is ${OTX_DATAGRID_TYPE}."
          log "INFO use-jmx-agent is ${OTX_USE_JMX_AGENT}."
          log "INFO use-all-processgroups is ${OTX_USE_ALL_PROCESSGROUPS}."

          sed -i \
              -e "s;\(<manager-properties.*\)storage-type=\".*\"\(.*\)$;\1\2;g" \
              -e "s;\(<manager-properties.*\)datagrid-name=\".*\"\(.*\)$;\1\2;g" \
              -e "s;\(<data-grids.*\)infinispan-jgroups-file=\".*\"\(.*\)$;\1\2;g" \
              -e "s;\(<data-grid\).*\( name=\"__default_http_session\"\).*$;\1\2></data-grid>;g" ${DOMAIN_XML}

          if [ $OTX_DATAGRID_TYPE = "infinispan" ]; then
            grep infinispan-embedded.jar ${INSTALL_ROOT}/features/full-profile-feature.xml || \
            sed -i \
              "s;\(</modules>\);    <module location=\"lib/datagrid/infinispan-embedded.jar\" />\n    \1;i" \
            ${INSTALL_ROOT}/features/full-profile-feature.xml

            sed -i \
                -e "s;\(<manager-properties\)\(.*$\);\1 storage-type=\"DATAGRID\"\2;g" \
                -e "s;\(<manager-properties\)\(.*$\);\1 datagrid-name=\"__default_http_session\"\2;g" \
                -e "s;\(<data-grids\)\(.*$\);\1 infinispan-jgroups-file=\"jgroups-kubernetes.xml\"\2;g" \
                -e "s;\(<data-grid name=\"__default_http_session\"\)\(.*></data-grid>\);\1 archetype=\"standard\"\2;g" \
                -e "s;\(<data-grid name=\"__default_http_session\"\)\(.*></data-grid>\);\1 use-jmx-agent=\"${OTX_USE_JMX_AGENT}\"\2;g" \
                -e "s;\(<data-grid name=\"__default_http_session\"\)\(.*></data-grid>\);\1 use-all-processgroups=\"${OTX_USE_ALL_PROCESSGROUPS}\"\2;g" \
                -e "s;\(<data-grid name=\"__default_http_session\"\)\(.*></data-grid>\);\1 type=\"${OTX_DATAGRID_TYPE}\"\2;g" ${DOMAIN_XML}

            echo 'JAVA_OPTIONS="$JAVA_OPTIONS -Djava.net.preferIPv4Stack=true"' >> ${INSTALL_ROOT}/config/asenv.conf
            echo 'export JAVA_OPTIONS' >> ${INSTALL_ROOT}/config/asenv.conf
          else
            sed -i -e "/lib\/datagrid\/infinispan-embedded.jar$/d" ${INSTALL_ROOT}/features/full-profile-feature.xml
            sed -i -e "s;\(<data-grids\)\(.*$\);\1 infinispan-jgroups-file=\"jgroups-udp.xml\"\2;g" ${DOMAIN_XML}
          fi
        fi
      fi
    fi
    ## end Setting session replication

    ## start domain
    if [ -e /opt/WebOTX/bin/otxadmin ]; then
      log "INFO Execute a startup script for container."
      /opt/WebOTX/bin/docker/webotx-startup.sh &
      pid=$!
    else
      if [ -e /opt/WebOTX/bin/webotx-micro.sh ]; then
        log "INFO Run webotx-micro.sh."
        sh /opt/WebOTX/bin/webotx-micro.sh --logconfig ${INSTANCE_ROOT}/config/log4j2-as.xml &
      else
        log "INFO Run ${OTX_UBER_JAR}."
        java -jar ${OTX_UBER_JAR} --basedir /opt &
      fi
      pid=$!
    fi

    ## Running check
    alive=1
    while [ "$alive" != "0" ]
    do
      while [ ! -e ${INSTALL_ROOT}/backups/persistence-files/webotx-running ]
      do
        sleep 1
        ${INSTALL_ROOT}/bin/docker/webotx-healthcheck.sh
        result=$?
        if [ $result -eq 0 ]; then
          mkdir -p ${INSTALL_ROOT}/backups/persistence-files
          touch ${INSTALL_ROOT}/backups/persistence-files/webotx-running
        fi

        ps $pid >/dev/null
        alive=$?
        if [ "$alive" != "0" ]; then
          break 2
        fi
      done

      ps $pid >/dev/null
      alive=$?
      sleep 1
    done
    wait $pid
    rc=$?

    pid=`pgrep -fo "webotx-term.sh"`
    if [ "$?" != 0 ]; then
      ## Execute stop script
      log "INFO Execute a termination script."
      exec 1> /dev/null
      exec 2> /dev/null
      /opt/WebOTX/bin/docker/webotx-term.sh
    else
      pgrep -fo "webotx-term.sh"
      while [ "$?" = "0" ]
      do
        sleep 1
      done
    fi

    exit $rc
  webotx-term.sh: |
    #!/bin/bash

    if [ $$ != `pgrep -fo $0` ]; then
      wait `pgrep -fo $0`
      exit 0
    fi

    INSTALL_ROOT=/opt/WebOTX
    DOMAIN_NAME=`ls ${INSTALL_ROOT}/domains`
    INSTANCE_ROOT=${INSTALL_ROOT}/domains/${DOMAIN_NAME}
    REPORT_DIR=${INSTALL_ROOT}/backups/${DOMAIN_NAME}/diagnostic-reports

    exec 1> >(tee -a ${INSTALL_ROOT}/backups/${DOMAIN_NAME}/logs/operator.log)
    exec 2>&1

    function log() {
      echo -e "$(date '+%Y-%m-%d %H:%M:%S') $1"
    }

    log "INFO Start termination script."

    if [ -e /opt/WebOTX/bin/otxadmin ]; then
      ## Generate diagnostic report
      log "INFO Output diagnostic report."
      /opt/WebOTX/bin/otxadmin generate-diagnostic-report --local=true ${DOMAIN_NAME}

      ## Stop domain
      log "INFO Stop the WebOTX domain."
      if [ -n "${OTX_STOP_TIMEOUT}" ]; then
        ${INSTALL_ROOT}/bin/otxadmin stop-domain --force --wait_timeout=${OTX_STOP_TIMEOUT} ${DOMAIN_NAME}
      else
        ${INSTALL_ROOT}/bin/otxadmin stop-domain --force --wait_timeout=1800 ${DOMAIN_NAME}
      fi
    else
      ## UberJAR process id
      pid=`cat /opt/WebOTX/domains/domain1/config/appserv_pid`

      ## Generate diagnostic report
      log "INFO Output diagnostic report."
      TIME=`date '+%Y-%-m-%-d_%-H-%-M-%-S'`
      mkdir -p ${REPORT_DIR}/${DOMAIN_NAME}_${TIME}_report/installinfo
      mkdir -p ${REPORT_DIR}/${DOMAIN_NAME}_${TIME}_report/jvminfo
      mkdir -p ${REPORT_DIR}/${DOMAIN_NAME}_${TIME}_report/logs
      mkdir -p ${REPORT_DIR}/${DOMAIN_NAME}_${TIME}_report/osinfo

      # Environment variable
      file=${REPORT_DIR}/${DOMAIN_NAME}_${TIME}_report/installinfo/env.txt
      echo "------ Environment variables --------"            >${file}
      env                                                    >>${file}

      # Java version
      file=${REPORT_DIR}/${DOMAIN_NAME}_${TIME}_report/jvminfo/jvmversion.txt
      echo "------ JVM Version -------------------"                              >${file}
      java -XshowSettings:properties 2>&1 | grep "java.vm.vendor " | echo `cat` >>${file}
      java -XshowSettings:properties 2>&1 | grep "java.vm.name "   | echo `cat` >>${file}
      java -XshowSettings:properties 2>&1 | grep "java.version "   | echo `cat` >>${file}

      # Java VM memory
      file=${REPORT_DIR}/${DOMAIN_NAME}_${TIME}_report/jvminfo/jvmmemory.txt
      ps $pid >/dev/null
      alive=$?
      if [ "$alive" != "0" ]; then
        echo UberJAR process has already been killed.         >${file}
      else
        jstat -gc $pid                                   2>&1 >${file}
      fi

      # Java VM thread dump
      file=${REPORT_DIR}/${DOMAIN_NAME}_${TIME}_report/jvminfo/threaddump.txt
      ps $pid >/dev/null
      alive=$?
      if [ "$alive" != "0" ]; then
        echo UberJAR process has already been killed.         >${file}
      else
        for i in `seq 1 3`
        do
          jstack $pid                                   2>&1 >>${file}
          sleep 5
        done
      fi

      # logs
      if [ -e ${INSTANCE_ROOT}/logs ]; then
        cp -rf ${INSTANCE_ROOT}/logs/* ${REPORT_DIR}/${DOMAIN_NAME}_${TIME}_report/logs
      fi

      # disk usage
      file=${REPORT_DIR}/${DOMAIN_NAME}_${TIME}_report/osinfo/osinfo.txt
      echo "------ Disk usage -------------------"            >${file}
      df                                                2>&1 >>${file}

      # Create a tar.gz file
      tar -zcvf ${REPORT_DIR}/${DOMAIN_NAME}_${TIME}_report.tar.gz ${REPORT_DIR}/${DOMAIN_NAME}_${TIME}_report
      if [ "$?" = "0" ]; then
        echo "Report File : ${REPORT_DIR}/${DOMAIN_NAME}_${TIME}_report.tar.gz"
        rm -rf ${REPORT_DIR}/${DOMAIN_NAME}_${TIME}_report
      fi

      ## Stop domain
      ps $pid >/dev/null
      alive=$?
      if [ "$alive" = "0" ]; then
        log "INFO Stop the WebOTX domain."
        if [ -e /opt/WebOTX/bin/webotx-micro.sh ]; then
          kill -s SIGTERM `ps -ef | grep com/nec/webotx/micro/WebOTXMicro | grep -v grep | awk '{print $2}'` >/dev/null
          i=0;
          while [ `ps -ef | grep com/nec/webotx/micro/WebOTXMicro | grep -v grep | wc -l` -gt 0 ]
          do
            sleep 1
            if [ $i -gt ${OTX_STOP_TIMEOUT:-1800} ]; then
              kill -s SIGKILL `ps -ef | grep com/nec/webotx/micro/WebOTXMicro | grep -v grep | awk '{print $2}'` >/dev/null
              break
            fi
            i=`expr $i + 1`
          done
        else
          kill -s SIGTERM `ps -ef | grep ${OTX_UBER_JAR} | grep -v grep | awk '{print $2}'` >/dev/null
          i=0;
          while [ `ps -ef | grep ${OTX_UBER_JAR} | grep -v grep | wc -l` -gt 0 ]
          do
            sleep 1
            if [ $i -gt ${OTX_STOP_TIMEOUT:-1800} ]; then
              kill -s SIGKILL `ps -ef | grep ${OTX_UBER_JAR} | grep -v grep | awk '{print $2}'` >/dev/null
              break
            fi
            i=`expr $i + 1`
          done
        fi
      fi
    fi

    ## Save persistence files
    ##   Domain setting files
    ##      ${INSTANCE_ROOT}/config/TS
    ##   JMX setting files
    ##      ${INSTANCE_ROOT}/jmq
    ##   TP monitor setting files
    ##      ${INSTALL_ROOT}/Trnsv/multitpm/starter
    ##      ${INSTALL_ROOT}/Trnsv/conf
    ##  Session files
    ##      ${INSTANCE_ROOT}/generated/jsp
    ##      ${INSTANCE_ROOT}/session-store
    if echo ${OTX_PERSISTENCE_ENABLED:-true} | grep -iqF true; then
      if [ -e ${INSTALL_ROOT}/backups/persistence-files/webotx-running ]; then
        log "INFO Save persistence files."
        mkdir -p ${INSTALL_ROOT}/backups/persistence-files/${DOMAIN_NAME}/config
        mkdir -p ${INSTALL_ROOT}/backups/persistence-files/${DOMAIN_NAME}/generated
        mkdir -p ${INSTALL_ROOT}/backups/persistence-files/Trnsv/multitpm

        if [ -e ${INSTANCE_ROOT}/config/TS ]; then
          cp -prf ${INSTANCE_ROOT}/config/TS ${INSTALL_ROOT}/backups/persistence-files/${DOMAIN_NAME}/config
        fi
        if [ -e ${INSTANCE_ROOT}/jmq ]; then
          cp -prf ${INSTANCE_ROOT}/jmq ${INSTALL_ROOT}/backups/persistence-files/${DOMAIN_NAME}
        fi
        if [ -e ${INSTALL_ROOT}/Trnsv/multitpm/starter ]; then
          cp -prf ${INSTALL_ROOT}/Trnsv/multitpm/starter ${INSTALL_ROOT}/backups/persistence-files/Trnsv/multitpm
        fi
        if [ -e ${INSTALL_ROOT}/Trnsv/conf ]; then
          cp -prf ${INSTALL_ROOT}/Trnsv/conf ${INSTALL_ROOT}/backups/persistence-files/Trnsv
        fi
        if [ -e ${INSTANCE_ROOT}/generated/jsp ]; then
          cp -prf ${INSTANCE_ROOT}/generated/jsp ${INSTALL_ROOT}/backups/persistence-files/${DOMAIN_NAME}/generated
        fi
        if [ -e ${INSTANCE_ROOT}/session-store ]; then
          cp -prf ${INSTANCE_ROOT}/session-store ${INSTALL_ROOT}/backups/persistence-files/${DOMAIN_NAME}
        fi
        touch ${INSTALL_ROOT}/backups/persistence-files/save-complete
      fi
    fi
    log "INFO End termination script."

    exit 0
kind: ConfigMap
metadata:
  name: webotx-as-scripts
